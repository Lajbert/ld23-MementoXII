// Generated by Haxe 4.1.4
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var hxd_Res = function() { };
$hxClasses["hxd.Res"] = hxd_Res;
hxd_Res.__name__ = "hxd.Res";
hxd_Res.load = function(name) {
	return hxd_Res.get_loader().load(name);
};
hxd_Res.get_loader = function() {
	var l = hxd_res_Loader.currentInstance;
	if(l == null) {
		throw haxe_Exception.thrown("Resource loader not initialized: call to hxd.Res.initXXX() required");
	}
	return l;
};
hxd_Res.set_loader = function(l) {
	return hxd_res_Loader.currentInstance = l;
};
var hxd_res_Loader = function(fs) {
	this.fs = fs;
	this.cache = new haxe_ds_StringMap();
};
$hxClasses["hxd.res.Loader"] = hxd_res_Loader;
hxd_res_Loader.__name__ = "hxd.res.Loader";
hxd_res_Loader.prototype = {
	load: function(path) {
		return new hxd_res_Any(this,this.fs.get(path));
	}
	,loadCache: function(path,c) {
		var res = this.cache.h[path];
		if(res == null) {
			var entry = this.fs.get(path);
			var old = hxd_res_Loader.currentInstance;
			hxd_res_Loader.currentInstance = this;
			res = Type.createInstance(c,[entry]);
			hxd_res_Loader.currentInstance = old;
			this.cache.h[path] = res;
		} else if((js_Boot.__downcastCheck(res,c) ? res : null) == null) {
			throw haxe_Exception.thrown(path + " has been reintrepreted from " + Std.string(js_Boot.getClass(res)) + " to " + Std.string(c));
		}
		return res;
	}
	,__class__: hxd_res_Loader
};
var dn_heaps_Sfx = function(s) {
	this.sound = s;
	this.volume = 1;
	if(dn_heaps_Sfx.getGlobalGroup(this.groupId).group != null) {
		dn_heaps_Sfx.getGlobalGroup(this.groupId).group.volume = 1;
	}
	this.groupId = dn_heaps_Sfx.DEFAULT_GROUP_ID;
};
$hxClasses["dn.heaps.Sfx"] = dn_heaps_Sfx;
dn_heaps_Sfx.__name__ = "dn.heaps.Sfx";
dn_heaps_Sfx.getGlobalGroup = function(id) {
	if(!dn_heaps_Sfx.GLOBAL_GROUPS.h.hasOwnProperty(id)) {
		var this1 = dn_heaps_Sfx.GLOBAL_GROUPS;
		var value = new dn_heaps__$Sfx_GlobalGroup(id);
		this1.h[id] = value;
	}
	return dn_heaps_Sfx.GLOBAL_GROUPS.h[id];
};
dn_heaps_Sfx.prototype = {
	play: function(loop,vol) {
		if(loop == null) {
			loop = false;
		}
		if(vol != null) {
			this.volume = vol < 0 ? 0 : vol > 1 ? 1 : vol;
			if(dn_heaps_Sfx.getGlobalGroup(this.groupId).group != null) {
				dn_heaps_Sfx.getGlobalGroup(this.groupId).group.volume = vol;
			}
		}
		this.channel = this.sound.play(loop,this.volume,null,dn_heaps_Sfx.getGlobalGroup(this.groupId).group);
		var tmp = this.channel;
		var tmp1 = this.volume;
		var _this = dn_heaps_Sfx.getGlobalGroup(this.groupId);
		tmp.set_volume(tmp1 * (_this.muted ? 0 : _this.volume));
		return this;
	}
	,__class__: dn_heaps_Sfx
};
var dn_heaps__$Sfx_GlobalGroup = function(id) {
	this.id = id;
	this.volume = 1;
	this.group = new hxd_snd_SoundGroup("global" + id);
};
$hxClasses["dn.heaps._Sfx.GlobalGroup"] = dn_heaps__$Sfx_GlobalGroup;
dn_heaps__$Sfx_GlobalGroup.__name__ = "dn.heaps._Sfx.GlobalGroup";
dn_heaps__$Sfx_GlobalGroup.prototype = {
	__class__: dn_heaps__$Sfx_GlobalGroup
};
var hxd_snd_SoundGroup = function(name) {
	this.name = name;
	this.maxAudible = -1;
	this.volume = 1;
	this.mono = false;
};
$hxClasses["hxd.snd.SoundGroup"] = hxd_snd_SoundGroup;
hxd_snd_SoundGroup.__name__ = "hxd.snd.SoundGroup";
hxd_snd_SoundGroup.prototype = {
	__class__: hxd_snd_SoundGroup
};
var Assets = function() { };
$hxClasses["Assets"] = Assets;
Assets.__name__ = "Assets";
Assets.init = function() {
	var t = hxd_Res.get_loader().loadCache("tiles.png",hxd_res_Image).toTile();
	Assets.tiles = new dn_heaps_slib_SpriteLib([t]);
	var this1 = hxd_Res.get_loader();
	Assets.font = this1.loadCache("fonts/04b03.fnt",hxd_res_BitmapFont).toFont();
	var _this = Assets.tiles;
	_this.defaultCenterX = 0;
	_this.defaultCenterY = 0;
	Assets.tiles.slice("collision",0,0,32,8,8);
	Assets.tiles.slice("separator",0,0,48,128,16,2);
	Assets.tiles.slice("cell",0,0,64,112,80,1,4);
	Assets.tiles.slice("picPart1",0,112,80,16,16);
	Assets.tiles.slice("calendar",0,112,96,16,16);
	Assets.tiles.slice("picPart3",0,112,112,16,16);
	Assets.tiles.slice("framed",0,112,128,16,16);
	Assets.tiles.slice("ringBack",0,128,96,16,16);
	Assets.tiles.slice("reflections",0,144,96,16,16);
	Assets.tiles.sliceGrid("sinkWater",0,8,5);
	Assets.tiles.sliceAnimGrid("flow",0,2,8,5,4);
	Assets.tiles.slice("kitchenDoor",0,112,160,16,16);
	Assets.tiles.slice("kitchenKnife",0,112,176,16,16);
	Assets.tiles.slice("kitchenTable",0,112,192,16,16,2);
	Assets.tiles.slice("kitchenChest",0,112,208,16,16,2);
	Assets.tiles.slice("cupDoors",0,128,160,16,20);
	Assets.tiles.slice("phone",0,112,240,16,16);
	Assets.tiles.slice("finalLetter",0,112,256,16,16);
	Assets.tiles.setSliceGrid(16,16);
	Assets.tiles.slice("player",0,0,0,16,16,16,2);
	Assets.tiles.sliceAnimGrid("wakeWait",0,1,10,0);
	Assets.tiles.sliceAnimGrid("wakeUp",0,1,10,0,4);
	Assets.tiles.sliceAnimGrid("standDown",0,1,0,0);
	Assets.tiles.sliceAnimGrid("standUp",0,1,5,0);
	Assets.tiles.sliceGrid("walkDown",0,0,0,5);
	Assets.tiles.__defineAnim("walkDown",[0,1,2,1,0,3,4,3]);
	Assets.tiles.sliceGrid("walkUp",0,5,0,5);
	Assets.tiles.__defineAnim("walkUp",[0,1,2,1,0,3,4,3]);
	Assets.tiles.sliceAnimGrid("read",0,25,14,0,2);
	Assets.tiles.sliceGrid("cry",0,0,1,5);
	Assets.tiles.__defineAnim("cry",[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4]);
	Assets.tiles.sliceAnimGrid("afterCry",0,100,0,1);
	Assets.tiles.slice("heroFade",0,0,400,192,144);
};
var h3d_IDrawable = function() { };
$hxClasses["h3d.IDrawable"] = h3d_IDrawable;
h3d_IDrawable.__name__ = "h3d.IDrawable";
h3d_IDrawable.__isInterface__ = true;
var hxd_App = function() {
	var _gthis = this;
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.engine = engine;
		engine.onReady = $bind(this,this.setup);
		haxe_Timer.delay($bind(this,this.setup),0);
	} else {
		hxd_System.start(function() {
			engine = new h3d_Engine();
			_gthis.engine = engine;
			engine.onReady = $bind(_gthis,_gthis.setup);
			engine.init();
		});
	}
};
$hxClasses["hxd.App"] = hxd_App;
hxd_App.__name__ = "hxd.App";
hxd_App.__interfaces__ = [h3d_IDrawable];
hxd_App.staticHandler = function() {
};
hxd_App.prototype = {
	onResize: function() {
	}
	,render: function(e) {
		this.s3d.render(e);
		this.s2d.render(e);
	}
	,setup: function() {
		var _gthis = this;
		var initDone = false;
		this.engine.onReady = hxd_App.staticHandler;
		this.engine.onResized = function() {
			if(_gthis.s2d == null) {
				return;
			}
			_gthis.s2d.checkResize();
			if(initDone) {
				_gthis.onResize();
			}
		};
		this.s3d = new h3d_scene_Scene();
		this.s2d = new h2d_Scene();
		this.sevents = new hxd_SceneEvents();
		this.sevents.addScene(this.s2d);
		this.sevents.addScene(this.s3d);
		this.loadAssets(function() {
			initDone = true;
			_gthis.init();
			hxd_Timer.skip();
			_gthis.mainLoop();
			hxd_System.setLoop($bind(_gthis,_gthis.mainLoop));
			hxd_Key.initialize();
		});
	}
	,loadAssets: function(onLoaded) {
		onLoaded();
	}
	,init: function() {
	}
	,mainLoop: function() {
		hxd_Timer.update();
		this.sevents.checkEvents();
		if(this.isDisposed) {
			return;
		}
		this.update(hxd_Timer.dt);
		if(this.isDisposed) {
			return;
		}
		var dt = hxd_Timer.dt;
		if(this.s2d != null) {
			this.s2d.setElapsedTime(dt);
		}
		if(this.s3d != null) {
			this.s3d.setElapsedTime(dt);
		}
		this.engine.render(this);
	}
	,update: function(dt) {
	}
	,__class__: hxd_App
};
var Boot = function() {
	hxd_App.call(this);
};
$hxClasses["Boot"] = Boot;
Boot.__name__ = "Boot";
Boot.main = function() {
	new Boot();
};
Boot.__super__ = hxd_App;
Boot.prototype = $extend(hxd_App.prototype,{
	init: function() {
		Boot.ME = this;
		new Main(this.s2d);
		this.onResize();
	}
	,onResize: function() {
		hxd_App.prototype.onResize.call(this);
		dn_Process.resizeAll();
	}
	,update: function(deltaTime) {
		hxd_App.prototype.update.call(this,deltaTime);
		dn_heaps_Controller.beforeUpdate();
		var currentTmod = hxd_Timer.dt * hxd_Timer.wantedFPS;
		dn_Process.updateAll(currentTmod);
	}
	,__class__: Boot
});
var Const = function() { };
$hxClasses["Const"] = Const;
Const.__name__ = "Const";
var h2d_filter_Filter = function() {
	this.enable = true;
	this.smooth = false;
	this.boundsExtend = 0.;
	this.autoBounds = true;
};
$hxClasses["h2d.filter.Filter"] = h2d_filter_Filter;
h2d_filter_Filter.__name__ = "h2d.filter.Filter";
h2d_filter_Filter.prototype = {
	get_enable: function() {
		return this.enable;
	}
	,sync: function(ctx,s) {
	}
	,bind: function(s) {
	}
	,unbind: function(s) {
	}
	,getBounds: function(s,bounds) {
		s.getBounds(s,bounds);
		bounds.xMin -= this.boundsExtend;
		bounds.yMin -= this.boundsExtend;
		bounds.xMax += this.boundsExtend;
		bounds.yMax += this.boundsExtend;
	}
	,draw: function(ctx,input) {
		return input;
	}
	,__class__: h2d_filter_Filter
};
var h2d_filter_Shader = function(shader,textureParam) {
	if(textureParam == null) {
		textureParam = "texture";
	}
	h2d_filter_Filter.call(this);
	var found = false;
	var _g = 0;
	var _g1 = shader.shader.data.vars;
	while(_g < _g1.length) {
		var v = _g1[_g];
		++_g;
		if(v.name == textureParam) {
			found = true;
			break;
		}
	}
	if(!found) {
		throw haxe_Exception.thrown("Shader does not have '" + textureParam + "' variable");
	}
	this.textureParam = textureParam;
	this.pass = new h3d_pass_ScreenFx(shader);
};
$hxClasses["h2d.filter.Shader"] = h2d_filter_Shader;
h2d_filter_Shader.__name__ = "h2d.filter.Shader";
h2d_filter_Shader.__super__ = h2d_filter_Filter;
h2d_filter_Shader.prototype = $extend(h2d_filter_Filter.prototype,{
	get_shader: function() {
		return this.pass.shader;
	}
	,draw: function(ctx,t) {
		var out = ctx.textures.allocTileTarget("shaderTmp",t);
		ctx.engine.pushTarget(out);
		this.get_shader()[this.textureParam + "__"] = t.innerTex;
		if(this.nearest) {
			t.innerTex.set_filter(h3d_mat_Filter.Nearest);
		}
		this.pass.render();
		ctx.engine.popTarget();
		return h2d_Tile.fromTexture(out);
	}
	,__class__: h2d_filter_Shader
});
var DistortFilter = function(offset,waveLength,speed,noise) {
	if(speed == null) {
		speed = 1.0;
	}
	if(waveLength == null) {
		waveLength = 32.;
	}
	if(offset == null) {
		offset = 2.0;
	}
	this.intensity = 1.0;
	h2d_filter_Shader.call(this,new _$DistortFilter_InternalShader(),"tex");
	this.offsetX = this.offsetY = offset;
	this.waveLenX = this.waveLenY = waveLength;
	this.speedX = this.speedY = speed;
	if(noise != null) {
		this.get_shader().noiseTex__ = noise;
	} else {
		var bd = new hxd_BitmapData(32,32);
		var _g = 0;
		var _g1 = bd.ctx.canvas.width;
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = bd.ctx.canvas.height;
			while(_g2 < _g3) {
				var y = _g2++;
				var hue = null;
				var hue1 = hue == null ? Math.random() : hue;
				var saturation = 1.0;
				var luminosity = 1.0;
				if(luminosity == null) {
					luminosity = 1.0;
				}
				if(saturation == null) {
					saturation = 1.0;
				}
				var h = hue1;
				var tmp;
				if(luminosity <= 0) {
					tmp = 0;
				} else if(saturation <= 0) {
					tmp = (luminosity * 255 | 0) << 16 | (luminosity * 255 | 0) << 8 | (luminosity * 255 | 0);
				} else {
					var r = 0.;
					var g = 0.;
					var b = 0.;
					h *= 6;
					var i;
					if(h >= 0) {
						i = h | 0;
					} else {
						var i1 = h | 0;
						i = h == i1 ? i1 : i1 - 1;
					}
					var c1 = luminosity * (1 - saturation);
					var c2 = luminosity * (1 - saturation * (h - i));
					var c3 = luminosity * (1 - saturation * (1 - (h - i)));
					if(i == 0 || i == 6) {
						r = luminosity;
						g = c3;
						b = c1;
					} else if(i == 1) {
						r = c2;
						g = luminosity;
						b = c1;
					} else if(i == 2) {
						r = c1;
						g = luminosity;
						b = c3;
					} else if(i == 3) {
						r = c1;
						g = c2;
						b = luminosity;
					} else if(i == 4) {
						r = c3;
						g = c1;
						b = luminosity;
					} else {
						r = luminosity;
						g = c1;
						b = c2;
					}
					tmp = (r * 255 | 0) << 16 | (g * 255 | 0) << 8 | (b * 255 | 0);
				}
				bd.setPixel(x,y,tmp);
			}
		}
		this.get_shader().noiseTex__ = h3d_mat_Texture.fromBitmap(bd);
		bd.ctx = null;
		bd.pixel = null;
	}
};
$hxClasses["DistortFilter"] = DistortFilter;
DistortFilter.__name__ = "DistortFilter";
DistortFilter.__super__ = h2d_filter_Shader;
DistortFilter.prototype = $extend(h2d_filter_Shader.prototype,{
	draw: function(ctx,t) {
		this.get_shader().time__ = ctx.time;
		var _this = this.get_shader();
		var x = this.intensity;
		_this.intensity__ = x < 0 ? 0 : x > 1 ? 1 : x;
		this.get_shader().offsetY__ = this.offsetY / t.height;
		this.get_shader().waveLenY__ = this.waveLenY / t.height;
		this.get_shader().speedY__ = this.speedY;
		this.get_shader().offsetX__ = this.offsetX / t.width;
		this.get_shader().waveLenX__ = this.waveLenX / t.width;
		this.get_shader().speedX__ = this.speedX;
		return h2d_filter_Shader.prototype.draw.call(this,ctx,t);
	}
	,__class__: DistortFilter
});
var hxsl_Shader = function() {
	this.priority = 0;
	this.initialize();
};
$hxClasses["hxsl.Shader"] = hxsl_Shader;
hxsl_Shader.__name__ = "hxsl.Shader";
hxsl_Shader.prototype = {
	initialize: function() {
		this.constModified = true;
		if(this.shader != null) {
			return;
		}
		var cl = js_Boot.getClass(this);
		this.shader = cl._SHADER;
		if(this.shader == null) {
			var curClass = cl;
			while(curClass != null && curClass.SRC == null) curClass = curClass.__super__;
			if(curClass == null) {
				throw haxe_Exception.thrown(cl.__name__ + " has no shader source");
			}
			this.shader = curClass._SHADER;
			if(this.shader == null) {
				this.shader = new hxsl_SharedShader(curClass.SRC);
				curClass._SHADER = this.shader;
			}
		}
	}
	,setPriority: function(v) {
		this.priority = v;
	}
	,getParamValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,getParamFloatValue: function(index) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstants: function(globals) {
		throw haxe_Exception.thrown("assert");
	}
	,updateConstantsFinal: function(globals) {
		var c = this.shader.consts;
		while(c != null) {
			if(c.globalId == 0) {
				c = c.next;
				continue;
			}
			var v = globals.map.h[c.globalId];
			var _g = c.v.type;
			switch(_g._hx_index) {
			case 1:
				var v1 = v;
				if(v1 >>> c.bits != 0) {
					throw haxe_Exception.thrown("Constant " + c.v.name + " is outside range (" + v1 + " > " + ((1 << c.bits) - 1) + ")");
				}
				this.constBits |= v1 << c.pos;
				break;
			case 2:
				var v2 = v;
				if(v2) {
					this.constBits |= 1 << c.pos;
				}
				break;
			case 17:
				var count = _g.size;
				if(v == null) {
					c = c.next;
					continue;
				}
				var v3 = v;
				var sel = v3.channel;
				if(v3.texture == null) {
					sel = hxsl_Channel.Unknown;
				} else if(sel == null || sel == hxsl_Channel.Unknown) {
					switch(count) {
					case 1:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedFloat;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					case 3:
						if(v3.texture.format == h3d_mat_Texture.nativeFormat) {
							sel = hxsl_Channel.PackedNormal;
						} else {
							throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
						}
						break;
					default:
						throw haxe_Exception.thrown("Constant " + c.v.name + " does not define channel select value");
					}
				}
				this.constBits |= (globals.allocChannelID(v3.texture) << 3 | sel._hx_index) << c.pos;
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			c = c.next;
		}
		var _this = this.shader;
		var constBits = this.constBits;
		var i = _this.instanceCache.h[constBits];
		this.instance = i == null ? _this.makeInstance(constBits) : i;
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__;
	}
	,__class__: hxsl_Shader
};
var h3d_shader_ScreenShader = function() {
	this.flipY__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.ScreenShader"] = h3d_shader_ScreenShader;
h3d_shader_ScreenShader.__name__ = "h3d.shader.ScreenShader";
h3d_shader_ScreenShader.__super__ = hxsl_Shader;
h3d_shader_ScreenShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_ScreenShader
});
var _$DistortFilter_InternalShader = function() {
	this.offsetY__ = 0;
	this.waveLenY__ = 0;
	this.speedY__ = 0;
	this.offsetX__ = 0;
	this.waveLenX__ = 0;
	this.speedX__ = 0;
	this.intensity__ = 0;
	this.time__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["_DistortFilter.InternalShader"] = _$DistortFilter_InternalShader;
_$DistortFilter_InternalShader.__name__ = "_DistortFilter.InternalShader";
_$DistortFilter_InternalShader.__super__ = h3d_shader_ScreenShader;
_$DistortFilter_InternalShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.tex__;
		case 2:
			return this.noiseTex__;
		case 3:
			return this.time__;
		case 4:
			return this.intensity__;
		case 5:
			return this.speedX__;
		case 6:
			return this.waveLenX__;
		case 7:
			return this.offsetX__;
		case 8:
			return this.speedY__;
		case 9:
			return this.waveLenY__;
		case 10:
			return this.offsetY__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 3:
			return this.time__;
		case 4:
			return this.intensity__;
		case 5:
			return this.speedX__;
		case 6:
			return this.waveLenX__;
		case 7:
			return this.offsetX__;
		case 8:
			return this.speedY__;
		case 9:
			return this.waveLenY__;
		case 10:
			return this.offsetY__;
		default:
		}
		return 0.;
	}
	,__class__: _$DistortFilter_InternalShader
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = "EReg";
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
	,matchedPos: function() {
		if(this.r.m == null) {
			throw haxe_Exception.thrown("No string matched");
		}
		return { pos : this.r.m.index, len : this.r.m[0].length};
	}
	,matchSub: function(s,pos,len) {
		if(len == null) {
			len = -1;
		}
		if(this.r.global) {
			this.r.lastIndex = pos;
			this.r.m = this.r.exec(len < 0 ? s : HxOverrides.substr(s,0,pos + len));
			var b = this.r.m != null;
			if(b) {
				this.r.s = s;
			}
			return b;
		} else {
			var b = this.match(len < 0 ? HxOverrides.substr(s,pos,null) : HxOverrides.substr(s,pos,len));
			if(b) {
				this.r.s = s;
				this.r.m.index += pos;
			}
			return b;
		}
	}
	,__class__: EReg
};
var Entity = function(w,s) {
	this.frict = 0.7;
	this.world = w;
	this.spr = s;
	this.cx = this.cy = 2;
	this.xr = this.yr = 0.5;
	this.dx = this.dy = 0;
	this.dirY = 1;
};
$hxClasses["Entity"] = Entity;
Entity.__name__ = "Entity";
Entity.prototype = {
	moveTo: function(x,y) {
		this.cx = x;
		this.cy = y;
		this.xr = 0.5;
		this.yr = 0.5;
	}
	,lookAt: function(x,y) {
		if(y >= this.cy) {
			this.dirY = 1;
		} else {
			this.dirY = -1;
		}
	}
	,update: function(tmod) {
		var tmp;
		if(this.yr + this.dy > 1) {
			var _this = this.world;
			var x = this.cx;
			var y = this.cy + 1;
			tmp = x < 0 || x >= _this.wid || y < 0 || y >= _this.hei ? true : _this.cmap[x][y];
		} else {
			tmp = false;
		}
		if(tmp) {
			this.yr = 1;
			this.dy = 0;
		}
		var tmp;
		if(this.yr + this.dy < 0.4) {
			var _this = this.world;
			var x = this.cx;
			var y = this.cy - 1;
			tmp = x < 0 || x >= _this.wid || y < 0 || y >= _this.hei ? true : _this.cmap[x][y];
		} else {
			tmp = false;
		}
		if(tmp) {
			this.yr = 0.4;
			this.dy = 0;
		}
		this.yr += this.dy * tmod;
		while(this.yr < 0) {
			this.yr++;
			this.cy--;
		}
		while(this.yr > 1) {
			this.yr--;
			this.cy++;
		}
		var tmp;
		if(this.xr + this.dx > 0.7) {
			var _this = this.world;
			var x = this.cx + 1;
			var y = this.cy;
			tmp = x < 0 || x >= _this.wid || y < 0 || y >= _this.hei ? true : _this.cmap[x][y];
		} else {
			tmp = false;
		}
		if(tmp) {
			this.xr = 0.7;
			this.dx = 0;
		}
		var tmp;
		if(this.xr + this.dx < 0.5) {
			var _this = this.world;
			var x = this.cx - 1;
			var y = this.cy;
			tmp = x < 0 || x >= _this.wid || y < 0 || y >= _this.hei ? true : _this.cmap[x][y];
		} else {
			tmp = false;
		}
		if(tmp) {
			this.xr = 0.5;
			this.dx = 0;
		}
		this.xr += this.dx * tmod;
		while(this.xr < 0) {
			this.xr++;
			this.cx--;
		}
		while(this.xr > 1) {
			this.xr--;
			this.cx++;
		}
		if(this.dy < 0) {
			this.dirY = -1;
		}
		if(this.dy > 0) {
			this.dirY = 1;
		}
		this.dx *= Math.pow(this.frict,tmod);
		this.dy *= Math.pow(this.frict,tmod);
		var x = this.dx;
		if((x < 0 ? -x : x) <= 0.0001) {
			this.dx = 0;
		}
		var x = this.dy;
		if((x < 0 ? -x : x) <= 0.0001) {
			this.dy = 0;
		}
		var _this = this.spr;
		_this.posChanged = true;
		_this.x = this.cx * Const.GRID + this.xr * Const.GRID | 0;
		var _this = this.spr;
		_this.posChanged = true;
		_this.y = this.cy * Const.GRID + this.yr * Const.GRID | 0;
	}
	,__class__: Entity
};
var dn_Process = function(parent) {
	this._initOnceDone = false;
	this._fixedUpdateCounter = 0.;
	this.fixedUpdateFps = 30;
	this.baseTimeMul = 1.0;
	this.init();
	if(parent == null) {
		dn_Process.ROOTS.push(this);
	} else {
		parent.addChild(this);
	}
};
$hxClasses["dn.Process"] = dn_Process;
dn_Process.__name__ = "dn.Process";
dn_Process._doPreUpdate = function(p,utmod) {
	if(!(!p.paused && !p.destroyed)) {
		return;
	}
	p.utmod = utmod;
	p.ftime += p.utmod * p.getComputedTimeMultiplier();
	p.uftime += p.utmod;
	p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
	if(!p.paused && !p.destroyed) {
		p.udelayer.update(p.utmod);
	}
	if(!p.paused && !p.destroyed) {
		p.cd.update(p.utmod * p.getComputedTimeMultiplier());
	}
	if(!p.paused && !p.destroyed) {
		p.ucd.update(p.utmod);
	}
	if(!p.paused && !p.destroyed) {
		p.tw.update(p.utmod * p.getComputedTimeMultiplier());
	}
	if(!p.paused && !p.destroyed) {
		if(!p._initOnceDone) {
			p.initOnceBeforeUpdate();
			p._initOnceDone = true;
		}
		p.preUpdate();
	}
	if(!p.paused && !p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			dn_Process._doPreUpdate(c,p.utmod);
		}
	}
};
dn_Process._doMainUpdate = function(p) {
	if(!(!p.paused && !p.destroyed)) {
		return;
	}
	p.update();
	if(p.onUpdateCb != null) {
		p.onUpdateCb();
	}
	if(!p.paused && !p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			dn_Process._doMainUpdate(p);
		}
	}
};
dn_Process._doFixedUpdate = function(p) {
	if(!(!p.paused && !p.destroyed)) {
		return;
	}
	p._fixedUpdateCounter += p.utmod * p.getComputedTimeMultiplier();
	while(p._fixedUpdateCounter >= p.getDefaultFrameRate() / p.fixedUpdateFps) {
		p._fixedUpdateCounter -= p.getDefaultFrameRate() / p.fixedUpdateFps;
		if(!p.paused && !p.destroyed) {
			p.fixedUpdate();
			if(p.onFixedUpdateCb != null) {
				p.onFixedUpdateCb();
			}
		}
	}
	if(!p.paused && !p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			dn_Process._doFixedUpdate(p);
		}
	}
};
dn_Process._doPostUpdate = function(p) {
	if(!(!p.paused && !p.destroyed)) {
		return;
	}
	p.postUpdate();
	if(!p.destroyed) {
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			dn_Process._doPostUpdate(c);
		}
	}
};
dn_Process._garbageCollector = function(plist) {
	var i = 0;
	while(i < plist.length) {
		var p = plist[i];
		if(p.destroyed) {
			dn_Process._disposeProcess(p);
		} else {
			dn_Process._garbageCollector(p.children);
			++i;
		}
	}
};
dn_Process._disposeProcess = function(p) {
	var _g = 0;
	var _g1 = p.children;
	while(_g < _g1.length) {
		var p1 = _g1[_g];
		++_g;
		p1.destroyed = true;
	}
	dn_Process._garbageCollector(p.children);
	p.delayer.destroy();
	p.cd.destroy();
	p.tw.destroy();
	if(p.parent != null) {
		HxOverrides.remove(p.parent.children,p);
	} else {
		HxOverrides.remove(dn_Process.ROOTS,p);
	}
	if(p.root != null) {
		var _this = p.root;
		if(_this != null && _this.parent != null) {
			_this.parent.removeChild(_this);
		}
	}
	p.onDispose();
	if(p.onDisposeCb != null) {
		p.onDisposeCb();
	}
	p.parent = null;
	p.children = null;
	p.delayer = null;
	p.cd = null;
	p.tw = null;
	p.root = null;
};
dn_Process._resizeProcess = function(p) {
	if(!p.destroyed) {
		p.onResize();
		var _g = 0;
		var _g1 = p.children;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			dn_Process._resizeProcess(p);
		}
	}
};
dn_Process.updateAll = function(utmod) {
	var _g = 0;
	var _g1 = dn_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(!p.paused && !p.destroyed) {
			p.utmod = utmod;
			p.ftime += p.utmod * p.getComputedTimeMultiplier();
			p.uftime += p.utmod;
			p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
			if(!p.paused && !p.destroyed) {
				p.udelayer.update(p.utmod);
			}
			if(!p.paused && !p.destroyed) {
				p.cd.update(p.utmod * p.getComputedTimeMultiplier());
			}
			if(!p.paused && !p.destroyed) {
				p.ucd.update(p.utmod);
			}
			if(!p.paused && !p.destroyed) {
				p.tw.update(p.utmod * p.getComputedTimeMultiplier());
			}
			if(!p.paused && !p.destroyed) {
				if(!p._initOnceDone) {
					p.initOnceBeforeUpdate();
					p._initOnceDone = true;
				}
				p.preUpdate();
			}
			if(!p.paused && !p.destroyed) {
				var _g2 = 0;
				var _g3 = p.children;
				while(_g2 < _g3.length) {
					var c = _g3[_g2];
					++_g2;
					if(!c.paused && !c.destroyed) {
						c.utmod = p.utmod;
						c.ftime += c.utmod * c.getComputedTimeMultiplier();
						c.uftime += c.utmod;
						c.delayer.update(c.utmod * c.getComputedTimeMultiplier());
						if(!c.paused && !c.destroyed) {
							c.udelayer.update(c.utmod);
						}
						if(!c.paused && !c.destroyed) {
							c.cd.update(c.utmod * c.getComputedTimeMultiplier());
						}
						if(!c.paused && !c.destroyed) {
							c.ucd.update(c.utmod);
						}
						if(!c.paused && !c.destroyed) {
							c.tw.update(c.utmod * c.getComputedTimeMultiplier());
						}
						if(!c.paused && !c.destroyed) {
							if(!c._initOnceDone) {
								c.initOnceBeforeUpdate();
								c._initOnceDone = true;
							}
							c.preUpdate();
						}
						if(!c.paused && !c.destroyed) {
							var _g4 = 0;
							var _g5 = c.children;
							while(_g4 < _g5.length) {
								var c1 = _g5[_g4];
								++_g4;
								dn_Process._doPreUpdate(c1,c.utmod);
							}
						}
					}
				}
			}
		}
	}
	var _g = 0;
	var _g1 = dn_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		dn_Process._doMainUpdate(p);
	}
	var _g = 0;
	var _g1 = dn_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		dn_Process._doFixedUpdate(p);
	}
	var _g = 0;
	var _g1 = dn_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(!p.paused && !p.destroyed) {
			p.postUpdate();
			if(!p.destroyed) {
				var _g2 = 0;
				var _g3 = p.children;
				while(_g2 < _g3.length) {
					var c = _g3[_g2];
					++_g2;
					if(!c.paused && !c.destroyed) {
						c.postUpdate();
						if(!c.destroyed) {
							var _g4 = 0;
							var _g5 = c.children;
							while(_g4 < _g5.length) {
								var c1 = _g5[_g4];
								++_g4;
								dn_Process._doPostUpdate(c1);
							}
						}
					}
				}
			}
		}
	}
	dn_Process._garbageCollector(dn_Process.ROOTS);
};
dn_Process.resizeAll = function() {
	var _g = 0;
	var _g1 = dn_Process.ROOTS;
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		if(!p.destroyed) {
			p.onResize();
			var _g2 = 0;
			var _g3 = p.children;
			while(_g2 < _g3.length) {
				var p1 = _g3[_g2];
				++_g2;
				if(!p1.destroyed) {
					p1.onResize();
					var _g4 = 0;
					var _g5 = p1.children;
					while(_g4 < _g5.length) {
						var p2 = _g5[_g4];
						++_g4;
						dn_Process._resizeProcess(p2);
					}
				}
			}
		}
	}
};
dn_Process.prototype = {
	init: function() {
		this.uniqId = dn_Process.UNIQ_ID++;
		this.children = [];
		this.paused = false;
		this.destroyed = false;
		this.ftime = 0;
		this.uftime = 0;
		this.utmod = 1;
		this.baseTimeMul = 1;
		this.cd = new dn_Cooldown(this.getDefaultFrameRate());
		this.delayer = new dn_Delayer(this.getDefaultFrameRate());
		this.tw = new dn_Tweenie(this.getDefaultFrameRate());
		this.ucd = new dn_Cooldown(this.getDefaultFrameRate());
		this.udelayer = new dn_Delayer(this.getDefaultFrameRate());
	}
	,initOnceBeforeUpdate: function() {
	}
	,createRoot: function(ctx) {
		if(this.root != null) {
			throw haxe_Exception.thrown(Std.string(this) + ": root already created!");
		}
		if(ctx == null) {
			if(this.parent == null || this.parent.root == null) {
				throw haxe_Exception.thrown(Std.string(this) + ": context required");
			}
			ctx = this.parent.root;
		}
		this.root = new h2d_Layers(ctx);
	}
	,preUpdate: function() {
	}
	,update: function() {
	}
	,fixedUpdate: function() {
	}
	,postUpdate: function() {
	}
	,onResize: function() {
	}
	,onDispose: function() {
	}
	,onUpdateCb: function() {
	}
	,onFixedUpdateCb: function() {
	}
	,onDisposeCb: function() {
	}
	,toString: function() {
		var tmp = "#" + this.uniqId + " ";
		var tmp1;
		if(this.name == null) {
			var c = js_Boot.getClass(this);
			tmp1 = c.__name__;
		} else {
			tmp1 = this.name;
		}
		return tmp + tmp1;
	}
	,getDefaultFrameRate: function() {
		return hxd_Timer.wantedFPS;
	}
	,getComputedTimeMultiplier: function() {
		var y = this.baseTimeMul * (this.parent == null ? 1 : this.parent.getComputedTimeMultiplier());
		if(0 > y) {
			return 0;
		} else {
			return y;
		}
	}
	,pause: function() {
		this.paused = true;
	}
	,resume: function() {
		this.paused = false;
	}
	,addChild: function(p) {
		if(p.parent == null) {
			HxOverrides.remove(dn_Process.ROOTS,p);
		} else {
			HxOverrides.remove(p.parent.children,p);
		}
		p.parent = this;
		this.children.push(p);
	}
	,createChildProcess: function(onUpdate,onDispose,runUpdateImmediatly) {
		if(runUpdateImmediatly == null) {
			runUpdateImmediatly = false;
		}
		var p = new dn_Process(this);
		if(onUpdate != null) {
			p.onUpdateCb = function() {
				onUpdate(p);
			};
		}
		if(onDispose != null) {
			p.onDisposeCb = function() {
				onDispose(p);
			};
		}
		if(runUpdateImmediatly) {
			if(!p.paused && !p.destroyed) {
				p.utmod = 1;
				p.ftime += p.utmod * p.getComputedTimeMultiplier();
				p.uftime += p.utmod;
				p.delayer.update(p.utmod * p.getComputedTimeMultiplier());
				if(!p.paused && !p.destroyed) {
					p.udelayer.update(p.utmod);
				}
				if(!p.paused && !p.destroyed) {
					p.cd.update(p.utmod * p.getComputedTimeMultiplier());
				}
				if(!p.paused && !p.destroyed) {
					p.ucd.update(p.utmod);
				}
				if(!p.paused && !p.destroyed) {
					p.tw.update(p.utmod * p.getComputedTimeMultiplier());
				}
				if(!p.paused && !p.destroyed) {
					if(!p._initOnceDone) {
						p.initOnceBeforeUpdate();
						p._initOnceDone = true;
					}
					p.preUpdate();
				}
				if(!p.paused && !p.destroyed) {
					var _g = 0;
					var _g1 = p.children;
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						if(!c.paused && !c.destroyed) {
							c.utmod = p.utmod;
							c.ftime += c.utmod * c.getComputedTimeMultiplier();
							c.uftime += c.utmod;
							c.delayer.update(c.utmod * c.getComputedTimeMultiplier());
							if(!c.paused && !c.destroyed) {
								c.udelayer.update(c.utmod);
							}
							if(!c.paused && !c.destroyed) {
								c.cd.update(c.utmod * c.getComputedTimeMultiplier());
							}
							if(!c.paused && !c.destroyed) {
								c.ucd.update(c.utmod);
							}
							if(!c.paused && !c.destroyed) {
								c.tw.update(c.utmod * c.getComputedTimeMultiplier());
							}
							if(!c.paused && !c.destroyed) {
								if(!c._initOnceDone) {
									c.initOnceBeforeUpdate();
									c._initOnceDone = true;
								}
								c.preUpdate();
							}
							if(!c.paused && !c.destroyed) {
								var _g2 = 0;
								var _g3 = c.children;
								while(_g2 < _g3.length) {
									var c1 = _g3[_g2];
									++_g2;
									dn_Process._doPreUpdate(c1,c.utmod);
								}
							}
						}
					}
				}
			}
			dn_Process._doMainUpdate(p);
		}
		return p;
	}
	,__class__: dn_Process
};
var Game = function() {
	this.interactiveDebug = false;
	this.uiInteractives = [];
	this.walkAnimSpd = 0.75;
	this.footStep = 0.;
	var _gthis = this;
	dn_Process.call(this,Main.ME);
	this.createRoot(Main.ME.root);
	Game.ME = this;
	new h2d_Bitmap(h2d_Tile.fromColor(0,Const.WID,Const.HEI),this.root);
	this.actions = new haxe_ds_List();
	this.fl_pause = false;
	this.fl_lockControls = false;
	this.fl_ending = false;
	this.skipClick = false;
	this.hotSpots = [];
	this.playerPath = [];
	this.inventory = new haxe_ds_List();
	this.triggers = new haxe_ds_StringMap();
	this.popQueue = new haxe_ds_List();
	this.pathFinder = new dn_pathfinder_AStar(function(x,y) {
		return { cx : x, cy : y};
	});
	Game.INAMES.h["picture"] = "Old photograph";
	Game.INAMES.h["picPart1"] = "Ripped photo (1/3)";
	Game.INAMES.h["picPart2"] = "Ripped photo (2/3)";
	Game.INAMES.h["picPart3"] = "Ripped photo (3/3)";
	Game.INAMES.h["chestKey"] = "Small copper key";
	Game.INAMES.h["knife"] = "Blunt knife";
	Game.INAMES.h["ring"] = "Wedding ring";
	Game.INAMES.h["cupKey"] = "Large iron key";
	Game.INAMES.h["broom"] = "Broom";
	Game.INAMES.h["finalLetter"] = "A letter";
	this.room = "cell";
	this.wrapper = new h2d_Layers(this.root);
	var _this = this.wrapper;
	_this.posChanged = true;
	_this.x = Const.WID * 0.5 - Const.GAMEZONE_WID * 0.5 | 0;
	this.snapshotTex = new h3d_mat_Texture(dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width(),dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height(),[h3d_mat_TextureFlags.Target]);
	this.distort = new DistortFilter(2,32,4);
	this.distort.intensity = 0;
	this.root.set_filter(this.distort);
	this.initWorld();
	var tmp = this.world;
	var smooth = null;
	var p = null;
	var s = new dn_heaps_slib_HSprite(Assets.tiles,"player",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = 0.;
	var yRatio = 0.;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.player = new Entity(tmp,s);
	var xRatio = 0.5;
	var yRatio = 0.95;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = this.player.spr.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	this.player.moveTo(10,5);
	this.wrapper.addChildAt(this.player.spr,5);
	var _this = this.player.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("walkUp",1,this.walkAnimSpd,function() {
		var tmp;
		if(_gthis.player.dirY == -1) {
			var _this = _gthis.player;
			var x = _this.dx;
			if(!((x < 0 ? -x : x) > 0.01)) {
				var x = _this.dy;
				tmp = (x < 0 ? -x : x) > 0.01;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return !(_gthis.destroyed || _gthis.fl_pause || _gthis.fl_lockControls || _gthis.fl_ending);
		} else {
			return false;
		}
	});
	var _this = this.player.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("walkDown",1,this.walkAnimSpd,function() {
		var tmp;
		if(_gthis.player.dirY == 1) {
			var _this = _gthis.player;
			var x = _this.dx;
			if(!((x < 0 ? -x : x) > 0.01)) {
				var x = _this.dy;
				tmp = (x < 0 ? -x : x) > 0.01;
			} else {
				tmp = true;
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			return !(_gthis.destroyed || _gthis.fl_pause || _gthis.fl_lockControls || _gthis.fl_ending);
		} else {
			return false;
		}
	});
	var _this = this.player.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("standDown",0,null,function() {
		return _gthis.player.dirY == 1;
	});
	var _this = this.player.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.registerStateAnim("standUp",0,null,function() {
		return _gthis.player.dirY == -1;
	});
	var frame = 0;
	var smooth = null;
	var p = null;
	if(frame == null) {
		frame = 0;
	}
	var s = new dn_heaps_slib_HSprite(Assets.tiles,"separator",frame);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = 0.;
	var yRatio = 0.;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.invSep1 = s;
	this.wrapper.addChildAt(this.invSep1,3);
	var xRatio = 0;
	var yRatio = 0.7;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = this.invSep1.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	var frame = 1;
	var smooth = null;
	var p = null;
	if(frame == null) {
		frame = 0;
	}
	var s = new dn_heaps_slib_HSprite(Assets.tiles,"separator",frame);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = 0.;
	var yRatio = 0.;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.invSep2 = s;
	this.wrapper.addChildAt(this.invSep2,3);
	var xRatio = 0;
	var yRatio = 0.3;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = this.invSep2.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	Boot.ME.s2d.addEventListener($bind(this,this.onEvent));
	var smooth = null;
	var p = null;
	var s = new dn_heaps_slib_HSprite(Assets.tiles,"heroFade",0);
	if(p != null) {
		p.addChild(s);
	}
	var xRatio = 0.;
	var yRatio = 0.;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = s.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	if(smooth != null) {
		s.smooth = smooth;
	}
	this.heroFade = s;
	var xRatio = 0.5;
	var yRatio = 0.5;
	if(yRatio == null) {
		yRatio = 0.5;
	}
	if(xRatio == null) {
		xRatio = 0.5;
	}
	var _this = this.heroFade.pivot;
	_this.centerFactorX = xRatio;
	_this.centerFactorY = yRatio;
	_this.usingFactor = true;
	_this.isUndefined = false;
	this.heroFade.set_visible(false);
	this.wrapper.addChildAt(this.heroFade,5);
	var x = 0;
	var y = 0;
	this.actionsWrapper = new h2d_Object();
	this.wrapper.addChildAt(this.actionsWrapper,1);
	this.miscWrapper = new h2d_Flow();
	this.wrapper.addChildAt(this.miscWrapper,1);
	this.miscWrapper.set_minWidth(Const.GAMEZONE_WID);
	this.miscWrapper.set_horizontalAlign(h2d_FlowAlign.Middle);
	this.miscWrapper.set_horizontalSpacing(16);
	var _this = this.miscWrapper;
	_this.posChanged = true;
	_this.y = 108;
	var alist = [Game.LOOK,Game.REMEMBER,Game.USE,Game.PICK,Game.OPEN,Game.CLOSE,Game.HELP];
	if(Game.EXTENDED) {
		alist.push(Game.ABOUT);
	}
	var _g = 0;
	while(_g < alist.length) {
		var a = [alist[_g]];
		++_g;
		var tf = [this.makeText(a[0])];
		switch(a[0]) {
		case Game.ABOUT:
			this.miscWrapper.addChild(tf[0]);
			break;
		case Game.HELP:
			this.miscWrapper.addChild(tf[0]);
			break;
		default:
			var w = 40;
			var v = -1 + x * w + w * 0.5 - tf[0].get_textWidth() * 0.5 | 0;
			tf[0].posChanged = true;
			tf[0].x = v;
			tf[0].posChanged = true;
			tf[0].y = 85 + y * 10;
			this.actionsWrapper.addChild(tf[0]);
		}
		if(a[0] == Game.ABOUT) {
			var _g1 = tf[0];
			_g1.posChanged = true;
			_g1.y += 17;
			var _g2 = tf[0];
			_g2.posChanged = true;
			_g2.x += 45;
			tf[0].set_textColor(6718069);
		}
		if(a[0] == Game.HELP) {
			var _g3 = tf[0];
			_g3.posChanged = true;
			_g3.y += 17;
			if(Game.EXTENDED) {
				var _g4 = tf[0];
				_g4.posChanged = true;
				_g4.x += 45;
			} else {
				var _g5 = tf[0];
				_g5.posChanged = true;
				_g5.x += 92;
			}
			tf[0].set_textColor(6718069);
		}
		tf[0].alpha = 0.6;
		this.addInteractive(tf[0],{ over : (function(tf) {
			return function() {
				if(!_gthis.fl_lockControls) {
					tf[0].alpha = 1;
				}
			};
		})(tf), out : (function(tf) {
			return function() {
				if(tf[0].text != _gthis.pending) {
					tf[0].alpha = 0.6;
				}
			};
		})(tf), click : (function(a) {
			return function() {
				if(!_gthis.fl_lockControls) {
					_gthis.setPending(a[0]);
				}
			};
		})(a)});
		++x;
		if(x >= 3) {
			x = 0;
			++y;
		}
		this.actions.add(tf[0]);
	}
	this.setPending();
	this.initHotSpots();
	this.updateInventory();
	Assets.SOUNDS.ambiant().play(true);
	this.root.alpha = 0;
	var _tween = this.tw.create_(function() {
		return _gthis.root.alpha;
	},function(_setV) {
		_gthis.root.alpha = _setV;
	},null,1,null,2000);
	this.distort.intensity = 0.5;
	var _tween = this.tw.create_(function() {
		return _gthis.distort.intensity;
	},function(_setV) {
		_gthis.distort.intensity = _setV;
	},null,0,dn_TType.TEaseOut,5000);
	var _this = this.player.spr;
	if(_this._animManager == null) {
		_this._animManager = new dn_heaps_slib_AnimManager(_this);
		if(_this.onAnimManAlloc != null) {
			_this.onAnimManAlloc(_this._animManager);
		}
	}
	_this._animManager.play("wakeWait").loop();
	this.player.moveTo(10,4);
	this.player.update(this.utmod * this.getComputedTimeMultiplier());
	this.pop("Day 4380");
	this.pop("!...12 years today.");
	this.pop("And still many to go in this cell.");
	this.pop("My cozy little world.");
	this.afterPop = function() {
		_gthis.fl_pause = true;
		var _this = _gthis.player.spr;
		if(_this._animManager == null) {
			_this._animManager = new dn_heaps_slib_AnimManager(_this);
			if(_this.onAnimManAlloc != null) {
				_this.onAnimManAlloc(_this._animManager);
			}
		}
		_this._animManager.play("wakeUp",1);
		var _tween = _gthis.tw.create_(function() {
			return _gthis.player.yr;
		},function(_setV) {
			_gthis.player.yr = _setV;
		},null,1,null,300);
		var a = _tween;
		a.onUpdate = function() {
			_gthis.player.update(_gthis.utmod * _gthis.getComputedTimeMultiplier());
		};
		a.onEnd = function() {
			_gthis.resumeGame();
			Assets.SOUNDS.footstep1(1);
			_gthis.player.moveTo(10,5);
			_gthis.player.yr = 0;
			_gthis.player.update(_gthis.utmod * _gthis.getComputedTimeMultiplier());
		};
	};
	dn_Process.resizeAll();
};
$hxClasses["Game"] = Game;
Game.__name__ = "Game";
Game.__super__ = dn_Process;
Game.prototype = $extend(dn_Process.prototype,{
	onResize: function() {
		dn_Process.prototype.onResize.call(this);
		var _this = this.root;
		var x = dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width();
		_this.posChanged = true;
		_this.x = x * 0.5 - Const.WID * 0.5 * Const.SCALE | 0;
		var _this = this.root;
		var v = Const.SCALE;
		_this.posChanged = true;
		_this.scaleX = v;
		_this.posChanged = true;
		_this.scaleY = v;
		this.snapshotTex.resize(dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width(),dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height());
	}
	,onDispose: function() {
		dn_Process.prototype.onDispose.call(this);
		Boot.ME.s2d.removeEventListener($bind(this,this.onEvent));
	}
	,onEvent: function(ev) {
		switch(ev.kind._hx_index) {
		case 0:
			this.onMouseDown(ev);
			break;
		case 1:
			this.onMouseUp(ev);
			break;
		case 2:
			break;
		case 3:
			break;
		case 4:
			break;
		case 5:
			break;
		case 6:
			break;
		case 7:
			break;
		case 8:
			break;
		case 9:
			break;
		case 10:
			break;
		case 11:
			break;
		case 12:
			break;
		}
	}
	,onMouseDown: function(ev) {
		if(this.skipClick || this.fl_ending) {
			return;
		}
		if(this.fl_pause) {
			this.resumeGame();
			this.closePop();
			return;
		}
		if(this.fl_lockControls) {
			return;
		}
		this.onArrive = null;
		var m = this.getMouse();
		this.movePlayer(m.cx,m.cy);
	}
	,onMouseUp: function(ev) {
		if(this.fl_pause) {
			return;
		}
	}
	,addInteractive: function(o,events) {
		var _gthis = this;
		var b = o.getBounds(this.wrapper);
		var i = new h2d_Interactive(b.xMax - b.xMin,b.yMax - b.yMin,this.wrapper);
		var x = b.xMin;
		var y = b.yMin;
		i.posChanged = true;
		i.x = x;
		i.posChanged = true;
		i.y = y;
		this.uiInteractives.push(i);
		if(events.click != null) {
			i.onClick = function(_) {
				events.click();
			};
		}
		if(events.over != null) {
			i.onOver = function(_) {
				events.over();
			};
		}
		if(events.out != null) {
			i.onOut = function(_) {
				events.out();
			};
		}
		var p = this.createChildProcess();
		p.onUpdateCb = function() {
			if(o.parent == null) {
				p.destroyed = true;
				if(i != null && i.parent != null) {
					i.parent.removeChild(i);
				}
				HxOverrides.remove(_gthis.uiInteractives,i);
				return;
			}
			o.getBounds(_gthis.wrapper,b);
			var x = b.xMin;
			var y = b.yMin;
			i.posChanged = true;
			i.x = x;
			i.posChanged = true;
			i.y = y;
			i.width = b.xMax - b.xMin;
			i.height = b.yMax - b.yMin;
		};
	}
	,makeText: function(str,multiline) {
		if(multiline == null) {
			multiline = false;
		}
		var tf = new h2d_Text(Assets.font);
		tf.set_text(str);
		tf.set_filter(new dn_heaps_filter_PixelOutline());
		if(multiline) {
			tf.set_maxWidth(Const.GAMEZONE_WID - 15);
		}
		return tf;
	}
	,resumeGame: function() {
		this.fl_pause = false;
		this.lockControls(false);
		if(this.curName != null) {
			this.curName.set_visible(true);
		}
	}
	,lockControls: function(l) {
		this.fl_lockControls = l;
		this.actionsWrapper.alpha = l ? 0.3 : 1;
		this.applyInteractiveVisibility();
		this.hideName();
		this.updateInventory();
	}
	,applyInteractiveVisibility: function() {
		var _g = 0;
		var _g1 = this.hotSpots;
		while(_g < _g1.length) {
			var hs = _g1[_g];
			++_g;
			hs.i.set_visible(!this.fl_lockControls);
		}
		var _g = 0;
		var _g1 = this.uiInteractives;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.set_visible(!this.fl_lockControls);
		}
	}
	,setPending: function(a) {
		var _g_head = this.actions.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var tf = val;
			tf.set_filter(null);
			tf.alpha = 0.6;
		}
		if(a == Game.HELP) {
			this.getTip();
			return;
		}
		if(a == Game.ABOUT) {
			Assets.SOUNDS.select(1);
			this.pop("This game was completely developed by Sebastien \"deepnight\" Benard in 48h for the Ludum Dare competition (theme: \"Tiny World\").");
			this.pop("@Visit DEEPNIGHT.NET for more games :)");
			return;
		}
		if(a != this.pending) {
			Assets.SOUNDS.select(1);
		}
		if(a == null) {
			a = Game.LOOK;
		}
		this.pending = a;
		var _g1_head = this.actions.h;
		while(_g1_head != null) {
			var val = _g1_head.item;
			_g1_head = _g1_head.next;
			var tf = val;
			if(tf.text == a) {
				tf.alpha = 1;
				tf.set_filter(new dn_heaps_filter_PixelOutline(6188947));
			}
		}
	}
	,movePlayer: function(cx,cy) {
		var pt = this.getClosest(cx,cy);
		if(pt == null || pt.x == this.player.cx && pt.y == this.player.cy) {
			return false;
		}
		this.playerPath = this.getPath(this.player.cx,this.player.cy,pt.x,pt.y);
		this.playerTarget = { cx : cx, cy : cy};
		return this.playerPath.length > 0;
	}
	,setTrigger: function(k,n) {
		if(n == null) {
			n = 1;
		}
		this.triggers.h[k] = n;
		this.refreshWorld();
		if(k == "kitchenLeftOpen" || k == "kitchenRightOpen") {
			Assets.SOUNDS.door(1);
		}
	}
	,getTrigger: function(k) {
		if(Object.prototype.hasOwnProperty.call(this.triggers.h,k)) {
			return this.triggers.h[k];
		} else {
			return 0;
		}
	}
	,hasTrigger: function(k) {
		return this.getTrigger(k) != 0;
	}
	,hasTriggerSet: function(k) {
		if(this.getTrigger(k) != 0) {
			return true;
		} else {
			this.setTrigger(k);
			return false;
		}
	}
	,hasItem: function(k) {
		var _g_head = this.inventory.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			if(i == k) {
				return true;
			}
		}
		return false;
	}
	,removeItem: function(k) {
		this.inventory.remove(k);
		this.updateInventory();
	}
	,addItem: function(k) {
		Assets.SOUNDS.pick(1);
		this.inventory.add(k);
		this.refreshWorld();
		if(this.hasItem("picPart1") && this.hasItem("picPart2") && this.hasItem("picPart3") && !this.hasTrigger("gotPicture")) {
			this.removeItem("picPart1");
			this.removeItem("picPart2");
			this.removeItem("picPart3");
			this.addItem("picture");
			this.setTrigger("gotPicture");
			Assets.SOUNDS.success(1);
			this.pop("!You assembled the 3 parts and now have restored the PICTURE.");
		}
		this.updateInventory();
	}
	,updateInventory: function() {
		var _gthis = this;
		var old = this.invCont != null ? this.invCont.alpha : 0;
		if(this.invCont != null) {
			var _this = this.invCont;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.invCont = new h2d_Flow();
		this.invCont.set_layout(h2d_FlowLayout.Vertical);
		var _this = this.invCont;
		_this.posChanged = true;
		_this.x = 2;
		var _this = this.invCont;
		_this.posChanged = true;
		_this.y = 132;
		this.invCont.set_minWidth(Const.GAMEZONE_WID);
		this.invCont.set_minHeight(12);
		this.invCont.set_horizontalAlign(h2d_FlowAlign.Middle);
		this.invCont.set_verticalSpacing(1);
		this.invCont.alpha = old;
		this.wrapper.addChildAt(this.invCont,1);
		var a = this.inventory.length == 0 ? 0.3 : 1;
		var _tween = this.tw.create_(function() {
			return _gthis.invCont.alpha;
		},function(_setV) {
			_gthis.invCont.alpha = _setV;
		},null,a,null,null);
		var _tween = this.tw.create_(function() {
			return _gthis.invSep1.alpha;
		},function(_setV) {
			_gthis.invSep1.alpha = _setV;
		},null,a,null,null);
		var _tween = this.tw.create_(function() {
			return _gthis.invSep2.alpha;
		},function(_setV) {
			_gthis.invSep2.alpha = _setV;
		},null,a,null,null);
		var n = 1;
		var _g_head = this.inventory.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			var name = Game.INAMES.h[i];
			var tf = this.makeText(name != null ? name : "!!" + i + "!!");
			tf.set_textColor(9797201);
			this.invCont.addChild(tf);
			++n;
		}
		var _this = this.invSep1;
		_this.posChanged = true;
		_this.x = this.invCont.x - 8;
		var _this = this.invSep1;
		_this.posChanged = true;
		_this.y = this.invCont.y;
		var _this = this.invSep2;
		_this.posChanged = true;
		_this.x = this.invCont.x - 8;
		var _this = this.invSep2;
		var v = this.invCont.y + this.invCont.get_outerHeight();
		_this.posChanged = true;
		_this.y = v;
	}
	,getMouse: function() {
		var x = (Boot.ME.s2d.get_mouseX() - this.root.x) / Const.SCALE - this.wrapper.x | 0;
		var y = Boot.ME.s2d.get_mouseY() / Const.SCALE - this.wrapper.y | 0;
		var cx = x / Const.GRID | 0;
		var cy = y / Const.GRID | 0;
		return { x : x, y : y, cx : cx, cy : cy};
	}
	,runPending: function(hs) {
		var _gthis = this;
		if(this.fl_pause || this.fl_lockControls || this.pending == null) {
			return;
		}
		var a = this.pending;
		if(!Object.prototype.hasOwnProperty.call(hs.act.h,a)) {
			a = "all";
		}
		if(Object.prototype.hasOwnProperty.call(hs.act.h,a)) {
			var resolve = function() {
				var r = hs.act.h[a];
				var _g = Type.typeof(r);
				switch(_g._hx_index) {
				case 5:
					r();
					break;
				case 6:
					if(_g.c == String) {
						_gthis.pop(r);
					} else {
						throw haxe_Exception.thrown("Unknown action type: " + Std.string(Type.typeof(r)));
					}
					break;
				default:
					throw haxe_Exception.thrown("Unknown action type: " + Std.string(Type.typeof(r)));
				}
			};
			this.skipClick = true;
			var m = this.getMouse();
			if(this.movePlayer(m.cx,m.cy)) {
				this.onArrive = resolve;
			} else {
				resolve();
			}
		} else {
			switch(this.pending) {
			case Game.CLOSE:
				this.pop("What?");
				break;
			case Game.LOOK:
				this.pop("Not much to say.");
				break;
			case Game.OPEN:
				this.pop("This can't be opened.");
				break;
			case Game.PICK:
				this.pop("I don't think I need that.");
				break;
			case Game.REMEMBER:
				this.pop("I... I don't remember anything about that...");
				break;
			case Game.USE:
				this.pop("I have no use for that.");
				break;
			}
		}
	}
	,getClosest: function(cx,cy) {
		var _gthis = this;
		var _this = this.world;
		if(!(cx < 0 || cx >= _this.wid || cy < 0 || cy >= _this.hei ? true : _this.cmap[cx][cy])) {
			return { x : cx, y : cy};
		}
		var all = dn_Bresenham.getDisc(cx,cy,3);
		var dh = new dn_DecisionHelper(all);
		var _g = 0;
		var _g1 = dh.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			var tmp;
			if(!e.out) {
				var pt = e.v;
				var _this = _gthis.world;
				var x = pt.x;
				var y = pt.y;
				tmp = x < 0 || x >= _this.wid || y < 0 || y >= _this.hei ? true : _this.cmap[x][y];
			} else {
				tmp = false;
			}
			if(tmp) {
				e.out = true;
			}
		}
		var _g = 0;
		var _g1 = dh.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.out) {
				var pt = e.v;
				e.score += pt.x == cx && pt.y - cy <= 2 ? 1 : 0;
			}
		}
		var _g = 0;
		var _g1 = dh.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.out) {
				var pt = e.v;
				var x = pt.x - cx;
				e.score += (x < 0 ? -x : x) <= 1 && pt.y == cy ? 1 : 0;
			}
		}
		var _g = 0;
		var _g1 = dh.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.out) {
				var pt = e.v;
				var bx = pt.x;
				var by = pt.y;
				e.score += -Math.sqrt((cx - bx) * (cx - bx) + (cy - by) * (cy - by));
			}
		}
		var _g = 0;
		var _g1 = dh.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.out) {
				var pt = e.v;
				var ax = pt.x;
				var ay = pt.y;
				var bx = _gthis.player.cx;
				var by = _gthis.player.cy;
				e.score += -Math.sqrt((ax - bx) * (ax - bx) + (ay - by) * (ay - by)) * 0.1;
			}
		}
		return dh.getBest();
	}
	,getPath: function(x,y,tx,ty) {
		var tmp;
		var _this = this.world;
		if(!(x < 0 || x >= _this.wid || y < 0 || y >= _this.hei ? true : _this.cmap[x][y])) {
			var _this = this.world;
			tmp = tx < 0 || tx >= _this.wid || ty < 0 || ty >= _this.hei ? true : _this.cmap[tx][ty];
		} else {
			tmp = true;
		}
		if(tmp) {
			return [];
		} else {
			return this.pathFinder.getPath(x,y,tx,ty);
		}
	}
	,initHotSpots: function() {
		var _gthis = this;
		var _g = 0;
		var _g1 = this.hotSpots;
		while(_g < _g1.length) {
			var hs = _g1[_g];
			++_g;
			var _this = hs.i;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			if(hs.spr != null) {
				var _this1 = hs.spr;
				if(_this1 != null && _this1.parent != null) {
					_this1.parent.removeChild(_this1);
				}
			}
		}
		this.hotSpots = [];
		if(this.room != "hell") {
			this.addSpot(16,27,26,7,"A rusty pipe");
			this.setAction(Game.LOOK,"It brings me my daily water ration.");
			this.setAction(Game.REMEMBER,"For as long I remember, water has always seeped out of this pipe.");
			this.setAction(Game.USE,"It's useless, I can't fix it.");
			this.addSpot(9,39,7,17,"Iron door");
			this.setAction(Game.LOOK,"12 years already... Once a day, they serve my food in a metal tray.");
			this.setAction(Game.OPEN,"Guess what? It's locked.");
			this.setAction(Game.CLOSE,"This door seems to be intended to remain closed for the rest of eternity.");
			this.setAction(Game.PICK,"What?");
			this.setAction(Game.REMEMBER,"This door was locked 12 years ago. Only once. Never opened since then. I can't even remember the color of the corridor walls behind.");
			this.addSpot(73,26,21,14,"My bed");
			this.setAction(Game.LOOK,"It is almost as hard as the concrete ground.");
			this.setAction(Game.USE,"No, I just woke up. ");
			if(this.room == "cell") {
				this.setAction(Game.REMEMBER,"4380 nights spent in this bed.");
			} else {
				this.setAction(Game.REMEMBER,function() {
					_gthis.changeRoom("cell");
				});
			}
		}
		if(this.room == "cell") {
			this.addSpot(49,25,14,14,"Steel table");
			this.setAction(Game.LOOK,"Despite its aspect, this table isn't very stable.|But as everything down here, with time, you get used to it.");
			this.setAction(Game.REMEMBER,"They gave me this table 2 or 3 years ago.|Before that, I used to lay on the floor or on my bed.");
			this.addSpot(51,28,6,4,"A pen");
			this.setAction(Game.LOOK,"A simple black pen.");
			this.setAction(Game.REMEMBER,"I didn't use it often...|Actually, I only wrote a letter or something...|Can't remember, but it was kind of... IMPORTANT.");
			this.setAction(Game.PICK,"I don't think I will need it.");
			this.setAction(Game.USE,"I don't have anything to write on.");
			if(!this.hasItem("picPart1") && !this.hasTrigger("gotPicture")) {
				this.addSpot(57,24,6,7,"A torn photograph");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"picPart1",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"An old picture, totally torn...");
				this.setAction(Game.REMEMBER,"I don't remember anything about this picture... I should look for the other parts.");
				this.setAction(Game.PICK,function() {
					_gthis.pop("You pick it up. The picture is incomplete (probably 3 parts).");
					_gthis.addItem("picPart1");
				});
			}
			if(!this.hasTrigger("framed")) {
				this.addSpot(52,22,5,6,"Empty frame");
				if(this.hasTrigger("gotPicture")) {
					this.setAction(Game.USE,function() {
						_gthis.pop("You put the photograph back in its frame. It fits perfectly.");
						_gthis.setTrigger("framed");
						Assets.SOUNDS.success(1);
						_gthis.removeItem("picture");
					});
				} else {
					this.setAction(Game.USE,"I don't have anything to put inside.");
				}
				this.setAction(Game.LOOK,"This frame is empty.|!Hmm... Where is the photograph?");
				this.setAction(Game.REMEMBER,"I can't remember if I removed the frame content myself...");
				this.setAction(Game.OPEN,"Nothing inside.");
			} else {
				this.addSpot(52,22,5,6,"A very old photograph");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"framed",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"The photograph is very old and damaged. The character on the picture is barely recognizable. A woman?");
				this.setAction(Game.PICK,"No, this picture is in its place.");
				this.setAction(Game.REMEMBER,function() {
					if(!_gthis.hasTriggerSet("firstMemory")) {
						_gthis.pop("The photograph is very old and damaged. The character on the picture is barely recognizable. A woman?|...|Lydia?");
						var _g = $bind(_gthis,_gthis.changeRoom);
						var k = "kitchen";
						var tmp = function() {
							_g(k);
						};
						_gthis.afterPop = tmp;
					} else {
						_gthis.changeRoom("kitchen");
					}
				});
			}
			this.addSpot(20,32,20,19,"Stagnant water");
			this.setAction(Game.LOOK,"The water slowly seeps through cracks into my world.");
			this.setAction(Game.CLOSE,"I can't do anything to stop it.");
			this.setAction(Game.PICK,"I will have plenty of water here soon enough.");
			this.addSpot(70,51,16,14,"Ray of light");
			this.setAction(Game.LOOK,"A cold light falls upon my little world.");
			this.setAction(Game.REMEMBER,"I won't feel anymore the sea breeze in my hairs.");
			this.setAction(Game.PICK,"What?");
			if(!this.hasTrigger("calendar")) {
				this.addSpot(40,20,8,9,"An old calendar");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"calendar",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"This calendar is from other times... Even the year print has almost completely disappeared.|!...Hey, is there some kind of hole behind it?");
				this.setAction(Game.REMEMBER,"I think SOMEONE bought me this calendar when I was sent in here.");
				var f = function() {
					_gthis.setTrigger("calendar");
					Assets.SOUNDS.smallHit(1);
					_gthis.pop("As you pull the calendar, you reveal a hole hidden behind it...");
				};
				this.setAction(Game.USE,f);
				this.setAction(Game.OPEN,f);
			} else {
				this.addSpot(37,20,8,9,"Hidden hole");
				if(!this.hasItem("picPart2") && !this.hasTrigger("gotPicture")) {
					this.setAction(Game.LOOK,function() {
						_gthis.pop("You found the fragment of a torn photograph.");
						_gthis.addItem("picPart2");
					});
				} else {
					this.setAction(Game.LOOK,"This holes is empty.");
				}
				this.setAction(Game.CLOSE,"The calendar won't stay.");
				this.setAction(Game.REMEMBER,"Did I make this hole? I can't remember.");
			}
			this.addSpot(59,61,21,13,"Unused bed base");
			this.setAction(Game.LOOK,"It was never used. No one never got transfered in this cell, except me.");
			this.setAction(Game.USE,"From time to time, I switch my beds. Just for a pleasant change.");
			this.setAction(Game.REMEMBER,"I think it was already here when I was brought here.");
			if(!this.hasItem("picPart3") && !this.hasTrigger("gotPicture")) {
				this.addSpot(88,25,5,6,"Some sort of paper");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"picPart3",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"The fragment of a torn photograph is hidden under the bolster.");
				this.setAction(Game.REMEMBER,"How did it get there?");
				this.setAction(Game.PICK,function() {
					_gthis.pop("It's a fragment of a torn photograph.");
					_gthis.addItem("picPart3");
				});
			}
			this.addSpot(56,39,7,9,"Chair");
			this.setAction(Game.LOOK,"Rusted.");
			this.setAction(Game.USE,"There is nothing to wait.");
			this.addSpot(14,64,8,12,"Sink");
			if(this.hasTrigger("sinkOpen")) {
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"flow",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				var s1 = s;
				this.setSprite(s1);
				var _g = s1;
				_g.posChanged = true;
				_g.x += 1;
				var _g = s1;
				_g.posChanged = true;
				_g.y += 3;
				if(s1._animManager == null) {
					s1._animManager = new dn_heaps_slib_AnimManager(s1);
					if(s1.onAnimManAlloc != null) {
						s1.onAnimManAlloc(s1._animManager);
					}
				}
				s1._animManager.play("flow");
			}
			if(!this.hasTrigger("sinkClean")) {
				this.setAction(Game.PICK,"I need a tool or something.");
				this.setAction(Game.LOOK,"A basic sink with an old faucet.|!Something is blocking the sink hole.");
				this.setAction(Game.REMEMBER,"!I remember that SOMETHING felt in the hole.|...But what was it?");
				this.setAction(Game.OPEN,"!No, something is blocking the hole.");
			} else {
				if(!this.hasTrigger("sinkOpen")) {
					this.setAction(Game.LOOK,"I try to keep it as clean as possible.");
				} else {
					this.setAction(Game.LOOK,"The water is not exactly clear.");
				}
				this.setAction(Game.OPEN,function() {
					_gthis.setTrigger("sinkOpen");
					Assets.SOUNDS.robinet(1);
				});
				this.setAction(Game.CLOSE,function() {
					_gthis.setTrigger("sinkOpen",0);
					Assets.SOUNDS.robinet(1);
				});
			}
			if(!this.hasTrigger("sinkOpen")) {
				this.setAction(Game.USE,"I need to open the water first.");
			}
			if(this.hasTrigger("sinkClean") && this.hasTrigger("sinkOpen")) {
				if(this.hasItem("cupKey") && !this.hasTrigger("washedKey")) {
					this.setAction(Game.USE,function() {
						_gthis.pop("You wash the key, fussy ol'man.");
						_gthis.setTrigger("washedKey");
					});
				} else {
					this.setAction(Game.USE,"The water feels refreshing.");
				}
			} else if(this.hasItem("knife") && !this.hasTrigger("sinkClean")) {
				this.setAction(Game.USE,function() {
					_gthis.pop("Using the knife, you manage to remove the thing blocking the sink.");
					_gthis.pop("You take out lots of dirt. Trapped inside, you find a KEY.");
					_gthis.setTrigger("sinkClean");
					Assets.SOUNDS.success(1);
					_gthis.addItem("cupKey");
				});
			}
			this.addSpot(89,41,6,6,"Small wooden case");
			if(this.hasTrigger("ringBack")) {
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"ringBack",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				var s1 = this.setSprite(s);
				var _g = s1;
				_g.posChanged = true;
				_g.x += 1;
				var _g = s1;
				_g.posChanged = true;
				_g.y += 1;
				var _g = $bind(this,this.changeRoom);
				var k = "park";
				this.setAction(Game.REMEMBER,function() {
					_g(k);
				});
			} else {
				this.setAction(Game.REMEMBER,"I'm pretty sure it was not normally empty.|!But where is its content?");
			}
			if(!this.hasTrigger("ringBack")) {
				this.setAction(Game.LOOK,"It looks like some kind of jewel case. It is empty.");
			} else {
				this.setAction(Game.LOOK,"Lydia's ring is back in its box. Why did I hide it?");
			}
			this.setAction(Game.PICK,"I prefer to let it here.");
			if(this.hasItem("ring")) {
				this.setAction(Game.USE,function() {
					_gthis.pop("You put Lydia's ring back in its case.");
					Assets.SOUNDS.success(1);
					_gthis.removeItem("ring");
					_gthis.setTrigger("ringBack");
				});
			}
		}
		if(this.room == "kitchen") {
			this.addSpot(49,20,5,6,"Old picture of a woman");
			this.setAction(Game.LOOK,"A young and beautiful smiles at you, radiant with joy.");
			this.setAction(Game.PICK,"No, this picture is in its place.");
			this.setAction(Game.REMEMBER,function() {
				_gthis.pop("Lydia...|As beautiful as in my memories.");
				if(Game.EXTENDED) {
					var _g = $bind(_gthis,_gthis.changeRoom);
					var k = "cell";
					var tmp = function() {
						_g(k);
					};
					_gthis.afterPop = tmp;
				}
			});
			this.addSpot(42,29,8,6,"Sideboard left door");
			if(this.hasTrigger("kitchenLeftOpen")) {
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"kitchenDoor",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"All kind of silverware, plates and things like that.");
				this.setAction(Game.REMEMBER,"I used to be the chef of the house...");
			}
			this.setAction(Game.OPEN,function() {
				_gthis.setTrigger("kitchenLeftOpen",1);
			});
			this.setAction(Game.CLOSE,function() {
				_gthis.setTrigger("kitchenLeftOpen",0);
			});
			this.addSpot(70,51,12,13,"Warm ray of light");
			this.setAction(Game.LOOK,"The warm feeling if pleasant and reassuring.");
			this.setAction(Game.REMEMBER,"The kitchen used to be a room bathed in light.|I guess it's summer outside.");
			this.setAction(Game.PICK,"What?");
			this.addSpot(51,29,8,6,"Sideboard right door");
			if(this.hasTrigger("kitchenRightOpen")) {
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"kitchenDoor",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				if(!this.hasTrigger("foundChest")) {
					this.setAction(Game.LOOK,function() {
						_gthis.pop("Cups, thousands of spoons and a tea set.|!You also found a STEEL CHEST inside the sideboard.");
						_gthis.afterPop = function() {
							_gthis.setTrigger("foundChest");
							Assets.SOUNDS.hit(1);
						};
					});
				} else {
					this.setAction(Game.LOOK,"Cups, thousands of spoons and a tea set.");
				}
				this.setAction(Game.REMEMBER,"Lydia was really fond of tea...");
			}
			this.setAction(Game.OPEN,function() {
				_gthis.setTrigger("kitchenRightOpen",1);
			});
			this.setAction(Game.CLOSE,function() {
				_gthis.setTrigger("kitchenRightOpen",0);
			});
			this.addSpot(42,47,6,13,"My chair");
			this.setAction(Game.LOOK,"My good old chair.");
			this.setAction(Game.REMEMBER,"Years ago, I used to sit here, and wait for...|Well. something... I don'k know.|!But nothing ever happened.");
			this.setAction(Game.USE,"Nah, I've spent too much time on this chair, at home...");
			this.addSpot(25,45,16,22,"Kitchen table");
			this.setAction(Game.LOOK,"My sturdy kitchen table.|It will last longer than me.");
			this.setAction(Game.REMEMBER,"Years ago, I used to sit here, and wait for...|Well. something... I don'k know.|!But nothing ever happened.");
			this.addSpot(18,24,8,14,"Lydia's chair");
			this.setAction(Game.LOOK,"Nice chair");
			this.setAction(Game.REMEMBER,"After Lydia's death, this chair stood in the corner of my kitchen.");
			if(!this.hasTrigger("rememberTable")) {
				this.addSpot(31,48,10,13,"Tablecloth");
				var frame = 0;
				var smooth = null;
				var p = null;
				if(frame == null) {
					frame = 0;
				}
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"kitchenTable",frame);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"Very old. And completely stained.|!As you touch the surface, you feel something underneath...");
				this.setAction(Game.REMEMBER,"It's so old that I think Lydia even bought it before we met.|!I remember she had the habit to hide... SOMETHING underneath...");
				var f = function() {
					_gthis.pop("You remove the tablecloth...");
					_gthis.afterPop = function() {
						Assets.SOUNDS.smallHit(1);
						_gthis.pop("...revealing a small key.");
						_gthis.setTrigger("rememberTable");
					};
				};
				this.setAction(Game.USE,f);
				if(Game.EXTENDED) {
					this.setAction(Game.PICK,f);
					this.setAction(Game.OPEN,f);
				}
			} else if(!this.hasTrigger("foundKey")) {
				this.addSpot(34,47,6,6,"Small key");
				var frame = 1;
				var smooth = null;
				var p = null;
				if(frame == null) {
					frame = 0;
				}
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"kitchenTable",frame);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"A small ornamented key is laying on the table. Probably made of copper.");
				this.setAction(Game.REMEMBER,"I used to play for long hours with this key.|What was it used for?");
				this.setAction(Game.PICK,function() {
					_gthis.pop("You pick the ornamented key.");
					_gthis.setTrigger("foundKey");
					_gthis.addItem("chestKey");
				});
			}
			if(this.hasTrigger("foundChest")) {
				this.addSpot(40,34,13,11,"A steel chest");
				var _this = Assets.tiles;
				var frame = this.hasTrigger("openChest") ? 1 : 0;
				var smooth = null;
				var p = null;
				if(frame == null) {
					frame = 0;
				}
				var s = new dn_heaps_slib_HSprite(_this,"kitchenChest",frame);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				if(!this.hasTrigger("openChest")) {
					this.setAction(Game.LOOK,"It seems sturdy. And it's locked.");
				} else {
					if(this.hasTrigger("foundRing")) {
						this.setAction(Game.LOOK,"Completely empty.");
					} else {
						this.setAction(Game.LOOK,function() {
							_gthis.pop("There is a single GOLD RING in it.|It's really beautiful.|There is \"L\" engraved in it.|You pick it up.");
							_gthis.addItem("ring");
							_gthis.setTrigger("foundRing");
						});
					}
					this.setAction(Game.CLOSE,function() {
						_gthis.setTrigger("openChest",0);
						Assets.SOUNDS.hit(1);
					});
				}
				this.setAction(Game.REMEMBER,"I put something important in it...|And I wanted it to stay away from me.");
				if(this.hasTrigger("unlockedChest")) {
					this.setAction(Game.OPEN,function() {
						Assets.SOUNDS.smallHit(1);
						_gthis.setTrigger("openChest");
					});
				} else if(!this.hasItem("chestKey")) {
					this.setAction(Game.OPEN,"It's locked.");
				} else {
					this.setAction(Game.OPEN,function() {
						_gthis.pop("You use the copper key...|It clicks and opens.");
						Assets.SOUNDS.smallHit(1);
						_gthis.removeItem("chestKey");
						_gthis.setTrigger("openChest");
						_gthis.setTrigger("unlockedChest");
					});
				}
			}
			this.addSpot(23,54,10,8,"Food tray");
			this.setAction(Game.LOOK,"Probably as old as me...|And as empty as me.");
			this.setAction(Game.REMEMBER,"Once a day, they serve my meal in it.");
			this.addSpot(33,56,3,5,"Fork");
			this.setAction(Game.LOOK,"It only has one prong left.");
			this.addSpot(31,50,4,4,"Spoon");
			this.setAction(Game.LOOK,"Surprisingly, it's in a good state.");
			if(!this.hasItem("knife")) {
				this.addSpot(25,48,6,6,"Knife");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"kitchenKnife",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"A basic steel knife. The edge became (or got) blunt.|Might be useful.");
				this.setAction(Game.USE,"This won't cut anything... But it might become handy.");
				this.setAction(Game.PICK,function() {
					_gthis.pop("You pick it up.");
					_gthis.addItem("knife");
				});
			}
			this.addSpot(86,53,12,25,"Cupboard");
			if(this.hasTrigger("openCup")) {
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"cupDoors",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				var _g1 = this.setSprite(s);
				_g1.posChanged = true;
				_g1.x -= 4;
				if(!this.hasItem("broom")) {
					this.setAction(Game.LOOK,function() {
						_gthis.pop("The cupboard contains various chemicals and upkeep products.");
						_gthis.pop("You find a medium sized broom in a corner, you take it.");
						_gthis.addItem("broom");
					});
				} else {
					this.setAction(Game.LOOK,"The cupboard contains various chemicals and upkeep products.");
				}
			} else {
				this.setAction(Game.LOOK,"A large wooden cupboard with two doors.");
			}
			this.setAction(Game.REMEMBER,"It contains everything usefull to keep a kitchen tidy.|Lydia knew more about this stuff than me.");
			if(!this.hasTrigger("unlockedCup") && !this.hasItem("cupKey")) {
				if(this.hasItem("chestKey")) {
					this.setAction(Game.OPEN,"!My key is too small for this lock.");
				} else {
					this.setAction(Game.OPEN,"!It's locked.");
				}
			} else if(!this.hasTrigger("unlockedCup")) {
				this.setAction(Game.OPEN,function() {
					_gthis.setTrigger("openCup");
					Assets.SOUNDS.door(1);
					_gthis.setTrigger("unlockedCup");
					_gthis.removeItem("cupKey");
					_gthis.pop("The key fits perfectly and the cupboard opens creaking.");
				});
			} else {
				this.setAction(Game.OPEN,function() {
					_gthis.setTrigger("openCup");
					Assets.SOUNDS.door(1);
				});
				this.setAction(Game.CLOSE,function() {
					_gthis.setTrigger("openCup",0);
					Assets.SOUNDS.door(1);
				});
			}
		}
		if(this.room == "park") {
			this.addSpot(2,8,41,26,"Leaves");
			this.setAction(Game.LOOK,"A peaceful leafy tree...");
			this.setAction(Game.REMEMBER,"I wish I could hear the gentle sound of the wind passing through the leaves...|!But there is no wind here.");
			this.addSpot(50,23,23,14,"Wooden bench");
			this.setAction(Game.LOOK,"Even if it seems as old as the trees, this bench looks welcoming.");
			this.setAction(Game.REMEMBER,"Isn't that...|..the bench where I met Lydia?");
			this.setAction(Game.USE,"!I.. don't feel comfortable with sitting on it.|I can't do it.");
			this.addSpot(71,50,14,14,"Pale ray of light");
			this.setAction(Game.LOOK,"It feels surprisingly cold.");
			this.setAction(Game.REMEMBER,"!This light is not exactly pleasant.|I guess it's winter outside.");
			this.addSpot(16,32,8,25,"Tree trunk");
			this.setAction(Game.LOOK,"Things are engraved in it.|\"Forever\"|\"L & D\"|\"With love\"|...");
			this.setAction(Game.REMEMBER,"I think I've written most of these words.");
			this.setAction(Game.USE,"I could shake the branches, but the trunk won't move.");
			if(this.hasTrigger("letterPop") && !this.hasItem("finalLetter")) {
				this.addSpot(69,41,7,7,"A letter");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"finalLetter",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"A letter.|The writing seems to be... mine.");
				this.setAction(Game.REMEMBER,"Did I write this letter ?");
				var f = function() {
					_gthis.addItem("finalLetter");
					_gthis.heroFade.set_visible(true);
					_gthis.heroFade.alpha = 0;
					var _tween = _gthis.tw.create_(function() {
						return _gthis.heroFade.alpha;
					},function(_setV) {
						_gthis.heroFade.alpha = _setV;
					},null,0.5,dn_TType.TEaseIn,1500);
					_gthis.pop("You take the letter and start to read it.");
					var _this = _gthis.player.spr;
					if(_this._animManager == null) {
						_this._animManager = new dn_heaps_slib_AnimManager(_this);
						if(_this.onAnimManAlloc != null) {
							_this.onAnimManAlloc(_this._animManager);
						}
					}
					_this._animManager.stopWithStateAnims();
					var _this = _gthis.player.spr;
					if(_this._animManager == null) {
						_this._animManager = new dn_heaps_slib_AnimManager(_this);
						if(_this.onAnimManAlloc != null) {
							_this.onAnimManAlloc(_this._animManager);
						}
					}
					_this._animManager.play("read").loop();
					_gthis.pop("@Dear myself,");
					_gthis.afterPop = function() {
						_gthis.changeRoom("cell");
					};
				};
				this.setAction(Game.PICK,f);
				this.setAction(Game.USE,f);
				this.setAction(Game.OPEN,f);
			}
			if(!this.hasTrigger("phoneDropped")) {
				this.addSpot(18,25,7,6,"???");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"phone",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"There is SOMETHING in the leaves.");
				this.setAction(Game.REMEMBER,"!I can't see what it is from here.");
				if(!this.hasItem("broom")) {
					this.setAction("all","It's out of my reach.");
				} else {
					var f = function() {
						_gthis.setTrigger("phoneDropped");
						Assets.SOUNDS.hit(1);
						_gthis.pop("Using your BROOM, you reach the object and push it to the ground.");
					};
					this.setAction(Game.USE,f);
					this.setAction(Game.PICK,f);
				}
			} else {
				this.addSpot(20,49,6,6,"Cellphone");
				var smooth = null;
				var p = null;
				var s = new dn_heaps_slib_HSprite(Assets.tiles,"phone",0);
				if(p != null) {
					p.addChild(s);
				}
				var xRatio = 0.;
				var yRatio = 0.;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = s.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
				if(smooth != null) {
					s.smooth = smooth;
				}
				this.setSprite(s);
				this.setAction(Game.LOOK,"It's a cellphone, a quite common model.");
				this.setAction(Game.REMEMBER,"It's mine.");
				this.setAction(Game.PICK,"!No.|For some reason... I don't want to keep it...");
				this.setAction(Game.OPEN,"No, I'm not much into technical things.");
				if(!this.hasTrigger("phoneCalled")) {
					this.setAction(Game.USE,function() {
						_gthis.pop("As you press the WAKE button on the cellphone, a voice comes from it.");
						_gthis.pop("It seems that someone is on the line...");
						_gthis.pop("@Mr Belmont? .. Daniel Belmont?");
						_gthis.pop("@Dr Prowell speaking...");
						_gthis.pop("@...Is your wife Mme Lydia Belmont?...");
						_gthis.pop("!I'm really sorry sir... but she...");
						_gthis.pop("The cellphone abruptly cease to function.");
						_gthis.setTrigger("phoneCalled");
						var _g = $bind(_gthis,_gthis.changeRoom);
						var k = "hell";
						var tmp = function() {
							_g(k);
						};
						_gthis.afterPop = tmp;
					});
				} else {
					this.setAction(Game.USE,"!It seems broken or something.");
				}
			}
		}
	}
	,addSpot: function(x,y,w,h,name) {
		var _gthis = this;
		var i = new h2d_Interactive(w,h);
		this.wrapper.addChildAt(i,99);
		i.posChanged = true;
		i.x = x;
		i.posChanged = true;
		i.y = y;
		var hs = { i : i, spr : null, name : name, act : new haxe_ds_StringMap()};
		this.hotSpots.push(hs);
		this.lastSpot = hs;
		i.onClick = function(_) {
			_gthis.runPending(hs);
		};
		i.onOver = function(_) {
			i.alpha = 1;
			_gthis.showName(i,name);
		};
		i.onOut = function(_) {
			i.alpha = 0.6;
			_gthis.hideName();
		};
		i.alpha = 0.6;
		return hs;
	}
	,getTip: function() {
		Assets.SOUNDS.help(1);
		if(!this.hasTriggerSet("usedTip")) {
			this.pop("You can use this option to get help if you are stuck in the game.");
			this.pop("!From now on, every time you'll click on HELP, you will get a tip for current situation.");
		}
		if(!this.hasTrigger("framed") && !this.hasItem("picture")) {
			this.pop("You should first concentrate on finding the 3 photo fragments.");
		} else if(Game.EXTENDED && !this.hasTrigger("framed") && this.hasItem("picture")) {
			this.pop("Put the photograph back in its frame. To do this, select USE and click on the EMPTY FRAME (you never need to click on the inventory).");
		} else if(!this.hasTrigger("goKitchen")) {
			this.pop("You can sometime use REMEMBER on things to dive in past memories.");
		} else if(!this.hasTrigger("rememberTable")) {
			this.pop("You should check the table in the kitchen...");
		} else if(!this.hasTrigger("foundRing")) {
			this.pop("You must find something PRECIOUS hidden in the kitchen.");
		} else if(Game.EXTENDED && !this.hasTrigger("teleportedBackCell")) {
			this.pop("To come back to your cell, you can use REMEMBER on your bed or on the photograph.");
		} else if(Game.EXTENDED && !this.hasTrigger("sinkClean") && !this.hasItem("cupKey") && !this.hasItem("knife")) {
			this.pop("You forgot something else on the kitchen table.");
		} else if(!this.hasTrigger("sinkClean") && !this.hasItem("cupKey")) {
			this.pop("You should pay attention to the sink in your cell.");
		} else if(!this.hasItem("broom")) {
			this.pop("You need to use your KEY somewhere.");
		} else if(Game.EXTENDED && !this.hasTrigger("goPark")) {
			this.pop("You need to use the RING somewhere. I remember there was a small wooden case near my bed...");
		} else if(!this.hasTrigger("phoneDropped")) {
			this.pop("You should take advantage of the length of the BROOM in the park...");
		} else if(Game.EXTENDED && !this.hasTrigger("phoneCalled")) {
			this.pop("Now you reached the thing in the leaves, you should USE it.");
		} else if(Game.EXTENDED && !this.hasItem("finalLetter")) {
			this.pop("I saw a letter in the park. It wasn't there at the beginning, was it?");
		} else {
			this.pop("!I can't help you right now, sorry. It's up to you!");
		}
	}
	,changeRoom: function(k) {
		var _gthis = this;
		var from = this.room;
		var d = 4000;
		this.hideName();
		this.root.drawTo(this.snapshotTex);
		var snapshot = new h2d_Bitmap();
		this.root.addChildAt(snapshot,99);
		snapshot.posChanged = true;
		snapshot.x = -this.root.x / Const.SCALE;
		snapshot.set_tile(h2d_Tile.fromTexture(this.snapshotTex));
		var v = 1 / Const.SCALE;
		snapshot.posChanged = true;
		snapshot.scaleX = v;
		snapshot.posChanged = true;
		snapshot.scaleY = v;
		var _tween = this.tw.create_(function() {
			return snapshot.alpha;
		},function(_setV) {
			snapshot.alpha = _setV;
		},null,0,dn_TType.TEaseIn,d * 0.8);
		this.delayer.addMs(null,function() {
			if(snapshot != null && snapshot.parent != null) {
				snapshot.parent.removeChild(snapshot);
			}
		},d);
		var onTeleport = null;
		this.room = k;
		switch(k) {
		case "cell":
			this.setTrigger("teleportedBackCell");
			this.player.moveTo(10,5);
			if(this.hasItem("finalLetter") && !this.hasTriggerSet("finalMonologue")) {
				onTeleport = function() {
					_gthis.pop("@I write this letter while I'm still conscious and sane.");
					_gthis.pop("@Lydia used to say that, getting older, I was becoming more and more scatterbrain.");
					_gthis.pop("!She was damn right.");
					_gthis.pop("@My memories are fading away. And with them, my guilt for the things that led me into this cell.");
					_gthis.pop("!But I will also forget Lydia.");
					_gthis.pop("@My tender and beloved Lydia... This can't possibly happen. I must cherish her memory.");
					_gthis.pop("@I must remember the pain. Cry for her... Again and again...");
					_gthis.pop("@That's why I set up all of this paper chase for you. For me.");
					_gthis.pop("@I'm losing my mind. I'm seeing things, places.");
					_gthis.pop("@That's not the first time you discover this letter. And it won't be the last one.");
					_gthis.pop("@We must remember Lydia.");
					_gthis.pop("@Set everything up for us,  when you will forget again.");
					_gthis.pop("@Make sure that Lydia will always live in our tiny world.");
					_gthis.pop("@- Daniel.");
					_gthis.afterPop = function() {
						_gthis.lockControls(true);
						_gthis.fl_pause = true;
						_gthis.fl_ending = true;
						_gthis.actionsWrapper.set_visible(false);
						_gthis.invCont.set_visible(false);
						var _tween = _gthis.tw.create_(function() {
							return _gthis.heroFade.alpha;
						},function(_setV) {
							_gthis.heroFade.alpha = _setV;
						},null,1,dn_TType.TEase,5000);
						var _this = _gthis.player.spr;
						if(_this._animManager == null) {
							_this._animManager = new dn_heaps_slib_AnimManager(_this);
							if(_this.onAnimManAlloc != null) {
								_this.onAnimManAlloc(_this._animManager);
							}
						}
						var _this1 = _this._animManager.play("cry",1);
						var plays = 9999;
						if(plays == null) {
							plays = 1;
						}
						_this1.play("afterCry",plays,true);
						_gthis.delayer.addS(null,function() {
							_gthis.tw.terminate_(function() {
								return _gthis.heroFade.alpha;
							},function(_setV) {
								_gthis.heroFade.alpha = _setV;
							},false);
							var _tween = _gthis.tw.create_(function() {
								return _gthis.heroFade.alpha;
							},function(_setV) {
								_gthis.heroFade.alpha = _setV;
							},null,0.7,dn_TType.TEaseOut,500);
							_gthis.delayer.addS(null,function() {
								var _tween = _gthis.tw.create_(function() {
									return _gthis.root.alpha;
								},function(_setV) {
									_gthis.root.alpha = _setV;
								},null,0,dn_TType.TEaseIn,1000);
								_tween.onEnd = $bind(_gthis,_gthis.credits);
							},2);
						},7);
					};
				};
			}
			break;
		case "hell":
			this.player.moveTo(10,6);
			break;
		case "kitchen":
			this.player.moveTo(5,5);
			if(!this.hasTriggerSet("goKitchen")) {
				onTeleport = function() {
					_gthis.pop("My kitchen. Exactly like I left it.");
				};
			}
			break;
		case "park":
			if(from != "hell") {
				this.player.moveTo(10,5);
			} else {
				this.player.moveTo(this.player.cx,5);
			}
			if(!this.hasTriggerSet("goPark")) {
				onTeleport = function() {
					_gthis.pop("...|!The Arthur park.");
				};
			}
			break;
		}
		Assets.SOUNDS.teleport(1);
		this.initWorld();
		this.player.world = this.world;
		this.playerPath = [];
		this.playerTarget = null;
		this.onArrive = null;
		this.lockControls(true);
		var _tween = this.tw.create_(function() {
			return _gthis.distort.intensity;
		},function(_setV) {
			_gthis.distort.intensity = _setV;
		},null,1,dn_TType.TEaseIn,d * 0.6);
		_tween.onEnd = function() {
			var _tween = _gthis.tw.create_(function() {
				return _gthis.distort.intensity;
			},function(_setV) {
				_gthis.distort.intensity = _setV;
			},null,0.1,dn_TType.TEaseOut,d * 0.4);
			_tween.onEnd = function() {
				var _tween = _gthis.tw.create_(function() {
					return _gthis.distort.intensity;
				},function(_setV) {
					_gthis.distort.intensity = _setV;
				},null,0,dn_TType.TEaseIn,6000);
				_gthis.lockControls(false);
				if(onTeleport != null) {
					onTeleport();
				}
			};
		};
	}
	,credits: function() {
		this.invCont.set_visible(this.actionsWrapper.set_visible(this.miscWrapper.set_visible(false)));
		this.root.alpha = 1;
		this.uiInteractives = [];
		this.wrapper.removeChildren();
		var list = ["\"Memento XII\"","A 48h Ludum Dare game","by Sebastien Benard","","Thank you for playing!","Please visit DEEPNIGHT.NET","",":)"];
		var n = 0;
		var _g = 0;
		while(_g < list.length) {
			var t = list[_g];
			++_g;
			var tf = [this.makeText(t)];
			this.root.addChild(tf[0]);
			tf[0].posChanged = true;
			tf[0].x = 20;
			tf[0].posChanged = true;
			tf[0].y = 20 + 11 * n;
			tf[0].alpha = 0;
			var _tween = this.tw.create_((function(tf) {
				return function() {
					return tf[0].alpha;
				};
			})(tf),(function(tf) {
				return function(_setV) {
					tf[0].alpha = _setV;
				};
			})(tf),null,n == 0 ? 1 : 0.5,dn_TType.TEaseIn,1000);
			_tween.delayMs(1500 * n);
			++n;
		}
	}
	,setSprite: function(s) {
		this.lastSpot.spr = s;
		this.wrapper.addChildAt(s,2);
		s.posChanged = true;
		s.x = this.lastSpot.i.x;
		s.posChanged = true;
		s.y = this.lastSpot.i.y;
		return s;
	}
	,setAction: function(a,effect) {
		this.lastSpot.act.h[a] = effect;
	}
	,initWorld: function() {
		var _gthis = this;
		this.world = new World();
		var _this = this.world;
		var _g = 2;
		var _g1 = 12;
		while(_g < _g1) {
			var x2 = _g++;
			var _g2 = 4;
			var _g3 = 10;
			while(_g2 < _g3) {
				var y2 = _g2++;
				_this.cmap[x2][y2] = false;
			}
		}
		var frame = 0;
		switch(this.room) {
		case "cell":
			frame = 0;
			var _this = this.world;
			var w = 2;
			var h = 1;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 6;
			var _g1 = 6 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 4 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var _g = 7;
			var _g1 = 8;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 5;
				var _g3 = 6;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 1;
			var h = 2;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 11;
			var _g1 = 11 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 5;
				var _g3 = 5 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 3;
			var h = 1;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 9;
			var _g1 = 9 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 4 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 1;
			var h = 3;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 2;
			var _g1 = 2 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 7;
				var _g3 = 7 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 3;
			var h = 2;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 7;
			var _g1 = 7 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 8;
				var _g3 = 8 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			break;
		case "hell":
			frame = 3;
			var _this = this.world;
			var w = 3;
			var h = 1;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 9;
			var _g1 = 9 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 4 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			break;
		case "kitchen":
			frame = 1;
			var _this = this.world;
			var _g = 2;
			var _g1 = 3;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 5;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 3;
			var h = 1;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 5;
			var _g1 = 5 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 4 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 3;
			var h = 1;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 9;
			var _g1 = 9 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 4 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 2;
			var h = 2;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 3;
			var _g1 = 3 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 6;
				var _g3 = 6 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var _g = 5;
			var _g1 = 6;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 6;
				var _g3 = 7;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 1;
			var h = 3;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 11;
			var _g1 = 11 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 7;
				var _g3 = 7 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			break;
		case "park":
			frame = 2;
			var _this = this.world;
			var w = 3;
			var h = 1;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 9;
			var _g1 = 9 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 4 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 2;
			var h = 1;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 2;
			var _g1 = 2 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 4;
				var _g3 = 4 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var w = 1;
			var h = 2;
			if(h == null) {
				h = 1;
			}
			if(w == null) {
				w = 1;
			}
			var _g = 2;
			var _g1 = 2 + w;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 5;
				var _g3 = 5 + h;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			var _this = this.world;
			var _g = 2;
			var _g1 = 3;
			while(_g < _g1) {
				var x2 = _g++;
				var _g2 = 7;
				var _g3 = 8;
				while(_g2 < _g3) {
					var y2 = _g2++;
					_this.cmap[x2][y2] = true;
				}
			}
			break;
		}
		if(this.roomBg != null) {
			var _this = this.roomBg;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		var frame1 = frame;
		var smooth = null;
		var p = null;
		if(frame1 == null) {
			frame1 = 0;
		}
		var s = new dn_heaps_slib_HSprite(Assets.tiles,"cell",frame1);
		if(p != null) {
			p.addChild(s);
		}
		var xRatio = 0.;
		var yRatio = 0.;
		if(yRatio == null) {
			yRatio = 0.5;
		}
		if(xRatio == null) {
			xRatio = 0.5;
		}
		var _this = s.pivot;
		_this.centerFactorX = xRatio;
		_this.centerFactorY = yRatio;
		_this.usingFactor = true;
		_this.isUndefined = false;
		if(smooth != null) {
			s.smooth = smooth;
		}
		this.roomBg = s;
		if(this.room == "cell") {
			var smooth = null;
			var p = null;
			var s = new dn_heaps_slib_HSprite(Assets.tiles,"reflections",0);
			if(p != null) {
				p.addChild(s);
			}
			var xRatio = 0.;
			var yRatio = 0.;
			if(yRatio == null) {
				yRatio = 0.5;
			}
			if(xRatio == null) {
				xRatio = 0.5;
			}
			var _this = s.pivot;
			_this.centerFactorX = xRatio;
			_this.centerFactorY = yRatio;
			_this.usingFactor = true;
			_this.isUndefined = false;
			if(smooth != null) {
				s.smooth = smooth;
			}
			var r = s;
			this.roomBg.addChild(r);
			r.alpha = 0;
			r.posChanged = true;
			r.x = 24;
			r.posChanged = true;
			r.y = 32;
			var loop = null;
			loop = function() {
				var _tween = _gthis.tw.create_(function() {
					return r.alpha;
				},function(_setV) {
					r.alpha = _setV;
				},null,1,dn_TType.TLinear,1000);
				_tween.onEnd = function() {
					var _tween = _gthis.tw.create_(function() {
						return r.alpha;
					},function(_setV) {
						r.alpha = _setV;
					},null,0,dn_TType.TLinear,1000);
					_tween.onEnd = loop;
				};
			};
			loop();
		}
		this.wrapper.addChildAt(this.roomBg,1);
		var _g = 0;
		var _g1 = this.world.wid;
		while(_g < _g1) {
			var x = _g++;
			var _g2 = 0;
			var _g3 = this.world.hei;
			while(_g2 < _g3) {
				var y = _g2++;
			}
		}
		this.refreshWorld();
		this.pathFinder.init(this.world.wid,this.world.hei,($_=this.world,$bind($_,$_.collide)));
	}
	,refreshWorld: function() {
		this.initHotSpots();
		this.applyInteractiveVisibility();
	}
	,hideName: function() {
		if(this.curName != null) {
			this.curName.parent.removeChild(this.curName);
		}
		this.curName = null;
	}
	,showName: function(i,str) {
		this.hideName();
		var tf = this.makeText(str);
		this.wrapper.addChildAt(tf,10);
		tf.set_textColor(12106441);
		var v = i.x + i.width * 0.5 - tf.get_textWidth() * 0.5 | 0;
		tf.posChanged = true;
		tf.x = v;
		var v = i.y - tf.get_textHeight();
		tf.posChanged = true;
		tf.y = v;
		tf.alpha = 0;
		var _tween = this.tw.create_(function() {
			return tf.alpha;
		},function(_setV) {
			tf.alpha = _setV;
		},null,1,dn_TType.TEaseOut,400);
		this.curName = tf;
		this.curName.set_visible(!this.fl_pause && !this.fl_lockControls);
	}
	,closePop: function(nextQueue) {
		if(nextQueue == null) {
			nextQueue = true;
		}
		if(this.popUp != null) {
			this.popUp.parent.removeChild(this.popUp);
			this.popUp = null;
		}
		if(nextQueue && this.popQueue.length == 0 && this.afterPop != null) {
			var cb = this.afterPop;
			this.afterPop = null;
			cb();
		} else if(nextQueue && this.popQueue.length > 0) {
			this.pop(this.popQueue.pop());
		}
	}
	,pop: function(str) {
		if(this.popUp != null) {
			this.popQueue.add(str);
			return;
		}
		if(str.indexOf("|") > 0) {
			var parts = str.split("|");
			str = parts[0];
			var _g = 1;
			var _g1 = parts.length;
			while(_g < _g1) {
				var i = _g++;
				this.popQueue.add(parts[i]);
			}
		}
		var col = 5200072;
		var tcol = 16777215;
		if(str.charAt(0) == "!") {
			col = 10357772;
			str = HxOverrides.substr(str,1,null);
		}
		if(str.charAt(0) == "@") {
			col = 4939606;
			tcol = 10992305;
			str = HxOverrides.substr(str,1,null);
		}
		this.skipClick = true;
		this.lockControls(true);
		if(this.curName != null) {
			this.curName.set_visible(false);
		}
		this.closePop(false);
		var f = new h2d_Flow();
		this.wrapper.addChildAt(f,10);
		var tf = this.makeText(str,true);
		tf.set_filter(new h2d_filter_DropShadow(1,1.5707963267948966,0,0.4,null,null,null,true));
		tf.set_textColor(tcol);
		var _g = tf;
		_g.posChanged = true;
		_g.x += 10;
		var _g = tf;
		_g.posChanged = true;
		_g.y += 10;
		f.addChild(tf);
		f.set_padding(4);
		var _g = f;
		_g.set_paddingTop(_g.paddingTop - 1);
		var bg = new h2d_Bitmap(h2d_Tile.fromColor(col,f.get_outerWidth(),f.get_outerHeight()));
		f.addChildAt(bg,0);
		f.getProperties(bg).set_isAbsolute(true);
		bg.set_filter(new h2d_filter_Group([new dn_heaps_filter_PixelOutline(16777215),new dn_heaps_filter_PixelOutline(0)]));
		var v = -50 + Std.random(100) + 32;
		f.posChanged = true;
		f.x = v;
		var x = f.x;
		var max = Const.WID - this.wrapper.x - f.get_outerWidth() - 5;
		f.posChanged = true;
		f.x = x < 5 ? 5 : x > max ? max : x;
		var v = this.player.cy >= 6 ? Std.random(30) + 20 : Std.random(30) + Const.GRID * 6;
		f.posChanged = true;
		f.y = v;
		if(f.y < 5) {
			f.posChanged = true;
			f.y = 5;
		}
		if(f.y + f.get_outerHeight() + 5 >= (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height())) {
			var v = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) - f.get_outerHeight() - 5;
			f.posChanged = true;
			f.y = v;
		}
		this.fl_pause = true;
		this.popUp = f;
	}
	,preUpdate: function() {
		dn_Process.prototype.preUpdate.call(this);
		this.skipClick = false;
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		if(hxd_Key.isPressed(68) && hxd_Key.isDown(17) && hxd_Key.isDown(16)) {
			this.interactiveDebug = !this.interactiveDebug;
			var _g = 0;
			var _g1 = this.uiInteractives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				i.backgroundColor = this.interactiveDebug ? 1727987967 : null;
			}
			var _g = 0;
			var _g1 = this.hotSpots;
			while(_g < _g1.length) {
				var h = _g1[_g];
				++_g;
				h.i.backgroundColor = this.interactiveDebug ? 1727987967 : null;
			}
		}
		if(!this.fl_pause && !this.fl_ending) {
			var s = 0.047;
			if(this.playerPath.length > 0) {
				var tx = (this.playerPath[0].cx + 0.5) * Const.GRID;
				var ty = (this.playerPath[0].cy + 0.5) * Const.GRID;
				var _this = this.player;
				var _this1 = this.player;
				var a = Math.atan2(ty - ((_this.cy + _this.yr) * Const.GRID | 0),tx - ((_this1.cx + _this1.xr) * Const.GRID | 0));
				this.player.dx += Math.cos(a) * s * (this.utmod * this.getComputedTimeMultiplier());
				this.player.dy += Math.sin(a) * s * (this.utmod * this.getComputedTimeMultiplier());
				var _this = this.player;
				var ax = (_this.cx + _this.xr) * Const.GRID | 0;
				var _this = this.player;
				var ay = (_this.cy + _this.yr) * Const.GRID | 0;
				if(Math.sqrt((ax - tx) * (ax - tx) + (ay - ty) * (ay - ty)) <= 3) {
					this.playerPath.shift();
				}
				if(this.playerPath.length == 0 && this.onArrive != null) {
					this.onArrive();
					this.onArrive = null;
					if(this.playerTarget != null) {
						this.player.lookAt(this.playerTarget.cx,this.playerTarget.cy);
					}
					this.playerTarget = null;
				}
			}
			var _this = this.player;
			var tmp;
			var x = _this.dx;
			if(!((x < 0 ? -x : x) > 0.01)) {
				var x = _this.dy;
				tmp = (x < 0 ? -x : x) > 0.01;
			} else {
				tmp = true;
			}
			if(!tmp && this.playerPath.length == 0) {
				var tmp;
				var _this = this.player.spr;
				if(_this._animManager == null) {
					_this._animManager = new dn_heaps_slib_AnimManager(_this);
					if(_this.onAnimManAlloc != null) {
						_this.onAnimManAlloc(_this._animManager);
					}
				}
				var _this1 = _this._animManager;
				if(!(!_this1.destroyed && _this1.stack.length > 0 && _this1.stack[0].group == "walkUp")) {
					var _this = this.player.spr;
					if(_this._animManager == null) {
						_this._animManager = new dn_heaps_slib_AnimManager(_this);
						if(_this.onAnimManAlloc != null) {
							_this.onAnimManAlloc(_this._animManager);
						}
					}
					var _this1 = _this._animManager;
					tmp = !_this1.destroyed && _this1.stack.length > 0 && _this1.stack[0].group == "walkDown";
				} else {
					tmp = true;
				}
				if(tmp) {
					this.footStep = 0;
				}
			} else {
				this.footStep -= this.utmod * this.getComputedTimeMultiplier() * this.walkAnimSpd;
				if(this.footStep <= 0) {
					if(Std.random(3) == 0) {
						Assets.SOUNDS.footstep1(1);
					} else {
						Assets.SOUNDS.footstep2(1);
					}
					this.footStep = 6;
				}
			}
			var idx = 0;
			var a = Game.LOOK;
			if(hxd_Key.isPressed(HxOverrides.cca(a,0)) || hxd_Key.isPressed(49 + idx++)) {
				this.setPending(a);
			}
			var a = Game.REMEMBER;
			if(hxd_Key.isPressed(HxOverrides.cca(a,0)) || hxd_Key.isPressed(49 + idx++)) {
				this.setPending(a);
			}
			var a = Game.USE;
			if(hxd_Key.isPressed(HxOverrides.cca(a,0)) || hxd_Key.isPressed(49 + idx++)) {
				this.setPending(a);
			}
			var a = Game.PICK;
			if(hxd_Key.isPressed(HxOverrides.cca(a,0)) || hxd_Key.isPressed(49 + idx++)) {
				this.setPending(a);
			}
			var a = Game.OPEN;
			if(hxd_Key.isPressed(HxOverrides.cca(a,0)) || hxd_Key.isPressed(49 + idx++)) {
				this.setPending(a);
			}
			var a = Game.CLOSE;
			if(hxd_Key.isPressed(HxOverrides.cca(a,0)) || hxd_Key.isPressed(49 + idx++)) {
				this.setPending(a);
			}
			var a = Game.HELP;
			if(hxd_Key.isPressed(HxOverrides.cca(a,0)) || hxd_Key.isPressed(49 + idx++)) {
				this.setPending(a);
			}
			if(hxd_Key.isPressed(82) && hxd_Key.isDown(16)) {
				Main.ME.startGame();
				return;
			}
			if(this.room == "hell" && this.player.cx <= 6) {
				this.pop("!Lydia!!!");
				this.setTrigger("letterPop");
				var _g = $bind(this,this.changeRoom);
				var k = "park";
				this.afterPop = function() {
					_g(k);
				};
			}
			this.player.update(this.utmod * this.getComputedTimeMultiplier());
		}
		var _this = this.heroFade;
		_this.posChanged = true;
		_this.x = this.player.spr.x;
		var _this = this.heroFade;
		_this.posChanged = true;
		_this.y = this.player.spr.y - 4;
	}
	,__class__: Game
});
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.strDate = function(s) {
	switch(s.length) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d["setTime"](0);
		d["setUTCHours"](k[0]);
		d["setUTCMinutes"](k[1]);
		d["setUTCSeconds"](k[2]);
		return d;
	case 10:
		var k = s.split("-");
		return new Date(k[0],k[1] - 1,k[2],0,0,0);
	case 19:
		var k = s.split(" ");
		var y = k[0].split("-");
		var t = k[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw haxe_Exception.thrown("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.now = function() {
	return Date.now();
};
var Lambda = function() { };
$hxClasses["Lambda"] = Lambda;
Lambda.__name__ = "Lambda";
Lambda.array = function(it) {
	var a = [];
	var i = $getIterator(it);
	while(i.hasNext()) {
		var i1 = i.next();
		a.push(i1);
	}
	return a;
};
var Main = function(s) {
	dn_Process.call(this);
	Main.ME = this;
	this.createRoot(s);
	h3d_Engine.CURRENT.backgroundColor = -16777216;
	hxd_Res.set_loader(new hxd_res_Loader(new hxd_fs_EmbedFileSystem(haxe_Unserializer.run("oy3:sfxoy13:footstep1.wavty8:pick.wavty11:success.wavty8:door.wavty10:select.wavty9:close.wavty8:help.wavty12:smallHit.wavty11:robinet.wavty11:ambiant.mp3ty13:footstep2.wavty7:hit.wavty12:teleport.mp3tgy9:tiles.pngty5:fontsoy9:04b03.fntty13:alterebro.fntty10:04B_03.TTFty13:alterebro.pngty20:alterebroOutline.pngty20:alterebroOutline.fntty9:04b03.pngtgg"))));
	hxd_snd_Manager.get();
	Assets.init();
	this.controller = new dn_heaps_Controller(s);
	this.ca = this.controller.createAccess("main");
	new dn_heaps_GameFocusHelper(Boot.ME.s2d,Assets.font);
	this.overlay = new dn_heaps_filter_OverlayTexture(dn_heaps_filter_BevelType.Classic,Const.SCALE);
	this.overlay.get_shader().alpha__ = 0.3;
	Boot.ME.s2d.set_filter(this.overlay);
	hxd_Timer.wantedFPS = 30;
	hxd_Timer.skip();
	this.delayer.addF(null,$bind(this,this.startGame),1);
	dn_Process.resizeAll();
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.__super__ = dn_Process;
Main.prototype = $extend(dn_Process.prototype,{
	onResize: function() {
		dn_Process.prototype.onResize.call(this);
		Const.SCALE = dn_heaps_Scaler.bestFit(Const.WID,Const.HEI,true) | 0;
		var _this = this.overlay;
		var v = Const.SCALE;
		if(_this.bevelSize != v) {
			_this.invalidated = true;
		}
		_this.bevelSize = v;
	}
	,startGame: function() {
		if(Game.ME != null) {
			Game.ME.destroyed = true;
			this.delayer.addF(null,function() {
				new Game();
			},1);
		} else {
			new Game();
		}
	}
	,update: function() {
		var tmp = this.utmod;
		var tmp1 = this.getComputedTimeMultiplier();
		Assets.tiles.tmod = tmp * tmp1;
		dn_Process.prototype.update.call(this);
	}
	,__class__: Main
});
Math.__name__ = "Math";
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = "Reflect";
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( _g ) {
		return null;
	}
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s = _g_s;
		var index = _g_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var ValueType = $hxEnums["ValueType"] = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"]
	,TNull: {_hx_index:0,__enum__:"ValueType",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"ValueType",toString:$estr}
	,TFloat: {_hx_index:2,__enum__:"ValueType",toString:$estr}
	,TBool: {_hx_index:3,__enum__:"ValueType",toString:$estr}
	,TObject: {_hx_index:4,__enum__:"ValueType",toString:$estr}
	,TFunction: {_hx_index:5,__enum__:"ValueType",toString:$estr}
	,TClass: ($_=function(c) { return {_hx_index:6,c:c,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TEnum: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"ValueType",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TUnknown: {_hx_index:8,__enum__:"ValueType",toString:$estr}
};
ValueType.__empty_constructs__ = [ValueType.TNull,ValueType.TInt,ValueType.TFloat,ValueType.TBool,ValueType.TObject,ValueType.TFunction,ValueType.TUnknown];
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	var ctor = Function.prototype.bind.apply(cl,[null].concat(args));
	return new (ctor);
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw haxe_Exception.thrown("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw haxe_Exception.thrown("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw haxe_Exception.thrown("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.createEnumIndex = function(e,index,params) {
	var c = e.__constructs__[index];
	if(c == null) {
		throw haxe_Exception.thrown(index + " is not a valid enum constructor index");
	}
	return Type.createEnum(e,c,params);
};
Type.typeof = function(v) {
	switch(typeof(v)) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum($hxEnums[e]);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		var e = a.__enum__;
		if(e == null || e != b.__enum__) {
			return false;
		}
		if(a._hx_index != b._hx_index) {
			return false;
		}
		var enm = $hxEnums[e];
		var ctorName = enm.__constructs__[a._hx_index];
		var params = enm[ctorName].__params__;
		var _g = 0;
		while(_g < params.length) {
			var f = params[_g];
			++_g;
			if(!Type.enumEq(a[f],b[f])) {
				return false;
			}
		}
	} catch( _g ) {
		return false;
	}
	return true;
};
Type.enumParameters = function(e) {
	var enm = $hxEnums[e.__enum__];
	var ctorName = enm.__constructs__[e._hx_index];
	var params = enm[ctorName].__params__;
	if(params != null) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < params.length) {
			var p = params[_g1];
			++_g1;
			_g.push(e[p]);
		}
		return _g;
	} else {
		return [];
	}
};
var World = function() {
	this.wid = 13;
	this.hei = 11;
	this.cmap = [];
	var _g = 0;
	var _g1 = this.wid;
	while(_g < _g1) {
		var x = _g++;
		this.cmap[x] = [];
		var _g2 = 0;
		var _g3 = this.hei;
		while(_g2 < _g3) {
			var y = _g2++;
			this.cmap[x][y] = true;
		}
	}
};
$hxClasses["World"] = World;
World.__name__ = "World";
World.prototype = {
	collide: function(x,y) {
		if(x < 0 || x >= this.wid || y < 0 || y >= this.hei) {
			return true;
		} else {
			return this.cmap[x][y];
		}
	}
	,__class__: World
};
var XmlType = {};
XmlType.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return haxe_ds_StringMap.keysIterator(this.attributeMap.h);
	}
	,iterator: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_iterators_ArrayIterator(this.children);
	}
	,elements: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			if(child.nodeType == Xml.Element) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		var ret = _g;
		return new haxe_iterators_ArrayIterator(ret);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var dn_Bresenham = function() { };
$hxClasses["dn.Bresenham"] = dn_Bresenham;
dn_Bresenham.__name__ = "dn.Bresenham";
dn_Bresenham.getDisc = function(x0,y0,radius) {
	var pts = [];
	dn_Bresenham.iterateDisc(x0,y0,radius,function(x,y) {
		pts.push({ x : x, y : y});
	});
	return pts;
};
dn_Bresenham.iterateDisc = function(x0,y0,radius,cb) {
	var x = radius;
	var y = 0;
	var radiusError = 1 - x;
	while(x >= y) {
		var fy = y + y0;
		var _g = -x + x0;
		var _g1 = x + x0 + 1;
		while(_g < _g1) {
			var x1 = _g++;
			cb(x1,fy);
		}
		if((radius <= 1 || x != y && y != 0) && radiusError >= 0) {
			var fy1 = x + y0;
			var _g2 = -y + x0;
			var _g3 = y + x0 + 1;
			while(_g2 < _g3) {
				var x2 = _g2++;
				cb(x2,fy1);
			}
		}
		if(y != 0) {
			var fy2 = -y + y0;
			var _g4 = -x + x0;
			var _g5 = x + x0 + 1;
			while(_g4 < _g5) {
				var x3 = _g4++;
				cb(x3,fy2);
			}
		}
		if((radius <= 1 || x != y && y != 0) && radiusError >= 0) {
			var fy3 = -x + y0;
			var _g6 = -y + x0;
			var _g7 = y + x0 + 1;
			while(_g6 < _g7) {
				var x4 = _g6++;
				cb(x4,fy3);
			}
		}
		++y;
		if(radiusError < 0) {
			radiusError += 2 * y + 1;
		} else {
			--x;
			radiusError += 2 * (y - x + 1);
		}
	}
};
var dn__$Cooldown_CdInst = function(k,f) {
	this.k = k;
	this.frames = f;
	this.initial = f;
};
$hxClasses["dn._Cooldown.CdInst"] = dn__$Cooldown_CdInst;
dn__$Cooldown_CdInst.__name__ = "dn._Cooldown.CdInst";
dn__$Cooldown_CdInst.prototype = {
	__class__: dn__$Cooldown_CdInst
};
var dn_Cooldown = function(fps) {
	if(dn_Cooldown.INDEXES == null) {
		if(haxe_rtti_Meta.getType(dn_Cooldown).indexes != null) {
			var _g = [];
			var _g1 = 0;
			var _g2 = haxe_rtti_Meta.getType(dn_Cooldown).indexes;
			while(_g1 < _g2.length) {
				var str = _g2[_g1];
				++_g1;
				_g.push(Std.string(str));
			}
			dn_Cooldown.INDEXES = _g;
		}
	}
	this.cdList = [];
	this.fastCheck = new haxe_ds_IntMap();
	this.baseFps = fps;
};
$hxClasses["dn.Cooldown"] = dn_Cooldown;
dn_Cooldown.__name__ = "dn.Cooldown";
dn_Cooldown.prototype = {
	destroy: function() {
		this.cdList = null;
		this.fastCheck = null;
	}
	,_getCdObject: function(k) {
		var _g = 0;
		var _g1 = this.cdList;
		while(_g < _g1.length) {
			var cd = _g1[_g];
			++_g;
			if(cd.k == k) {
				return cd;
			}
		}
		return null;
	}
	,update: function(dt) {
		var i = 0;
		while(i < this.cdList.length) {
			var cd = this.cdList[i];
			cd.frames = Math.floor((cd.frames - dt) * 1000) / 1000;
			if(cd.frames <= 0) {
				var cb = cd.cb;
				HxOverrides.remove(this.cdList,cd);
				cd.frames = 0;
				cd.cb = null;
				this.fastCheck.remove(cd.k);
				if(cb != null) {
					cb();
				}
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Cooldown
};
var dn__$DecisionHelper_DecisionElement = function(v) {
	this.out = false;
	this.score = 0.;
	this.v = v;
};
$hxClasses["dn._DecisionHelper.DecisionElement"] = dn__$DecisionHelper_DecisionElement;
dn__$DecisionHelper_DecisionElement.__name__ = "dn._DecisionHelper.DecisionElement";
dn__$DecisionHelper_DecisionElement.prototype = {
	__class__: dn__$DecisionHelper_DecisionElement
};
var dn_DecisionHelper = function(a) {
	var this1 = new Array(a.length);
	this.all = this1;
	var i = 0;
	var _g = 0;
	while(_g < a.length) {
		var v = a[_g];
		++_g;
		this.all[i] = new dn__$DecisionHelper_DecisionElement(v);
		++i;
	}
};
$hxClasses["dn.DecisionHelper"] = dn_DecisionHelper;
dn_DecisionHelper.__name__ = "dn.DecisionHelper";
dn_DecisionHelper.prototype = {
	getBest: function() {
		var best = null;
		var _g = 0;
		var _g1 = this.all;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(!e.out && (best == null || e.score > best.score)) {
				best = e;
			}
		}
		if(best == null) {
			return null;
		} else {
			return best.v;
		}
	}
	,__class__: dn_DecisionHelper
};
var dn__$Delayer_Task = function(id,t,cb) {
	this.t = t;
	this.cb = cb;
	this.id = id;
};
$hxClasses["dn._Delayer.Task"] = dn__$Delayer_Task;
dn__$Delayer_Task.__name__ = "dn._Delayer.Task";
dn__$Delayer_Task.prototype = {
	__class__: dn__$Delayer_Task
};
var dn_Delayer = function(fps) {
	this.fps = fps;
	this.delays = [];
};
$hxClasses["dn.Delayer"] = dn_Delayer;
dn_Delayer.__name__ = "dn.Delayer";
dn_Delayer.prototype = {
	destroy: function() {
		this.delays = null;
	}
	,cmp: function(a,b) {
		if(a.t < b.t) {
			return -1;
		} else if(a.t > b.t) {
			return 1;
		} else {
			return 0;
		}
	}
	,addMs: function(id,cb,ms) {
		this.delays.push(new dn__$Delayer_Task(id,ms / 1000 * this.fps,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,addS: function(id,cb,sec) {
		this.delays.push(new dn__$Delayer_Task(id,sec * this.fps,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,addF: function(id,cb,frames) {
		this.delays.push(new dn__$Delayer_Task(id,frames,cb));
		haxe_ds_ArraySort.sort(this.delays,$bind(this,this.cmp));
	}
	,update: function(dt) {
		var i = 0;
		while(i < this.delays.length) {
			this.delays[i].t -= dt;
			if(this.delays[i].t <= 0) {
				this.delays[i].cb();
				this.delays[i].cb = null;
				this.delays.shift();
			} else {
				++i;
			}
		}
	}
	,__class__: dn_Delayer
};
var dn_TType = $hxEnums["dn.TType"] = { __ename__ : true, __constructs__ : ["TLinear","TLoop","TLoopEaseIn","TLoopEaseOut","TEase","TEaseIn","TEaseOut","TBurn","TBurnIn","TBurnOut","TZigZag","TRand","TShake","TShakeBoth","TJump","TElasticEnd","TBackOut"]
	,TLinear: {_hx_index:0,__enum__:"dn.TType",toString:$estr}
	,TLoop: {_hx_index:1,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseIn: {_hx_index:2,__enum__:"dn.TType",toString:$estr}
	,TLoopEaseOut: {_hx_index:3,__enum__:"dn.TType",toString:$estr}
	,TEase: {_hx_index:4,__enum__:"dn.TType",toString:$estr}
	,TEaseIn: {_hx_index:5,__enum__:"dn.TType",toString:$estr}
	,TEaseOut: {_hx_index:6,__enum__:"dn.TType",toString:$estr}
	,TBurn: {_hx_index:7,__enum__:"dn.TType",toString:$estr}
	,TBurnIn: {_hx_index:8,__enum__:"dn.TType",toString:$estr}
	,TBurnOut: {_hx_index:9,__enum__:"dn.TType",toString:$estr}
	,TZigZag: {_hx_index:10,__enum__:"dn.TType",toString:$estr}
	,TRand: {_hx_index:11,__enum__:"dn.TType",toString:$estr}
	,TShake: {_hx_index:12,__enum__:"dn.TType",toString:$estr}
	,TShakeBoth: {_hx_index:13,__enum__:"dn.TType",toString:$estr}
	,TJump: {_hx_index:14,__enum__:"dn.TType",toString:$estr}
	,TElasticEnd: {_hx_index:15,__enum__:"dn.TType",toString:$estr}
	,TBackOut: {_hx_index:16,__enum__:"dn.TType",toString:$estr}
};
dn_TType.__empty_constructs__ = [dn_TType.TLinear,dn_TType.TLoop,dn_TType.TLoopEaseIn,dn_TType.TLoopEaseOut,dn_TType.TEase,dn_TType.TEaseIn,dn_TType.TEaseOut,dn_TType.TBurn,dn_TType.TBurnIn,dn_TType.TBurnOut,dn_TType.TZigZag,dn_TType.TRand,dn_TType.TShake,dn_TType.TShakeBoth,dn_TType.TJump,dn_TType.TElasticEnd,dn_TType.TBackOut];
var dn_Tween = function(tw) {
	this.tw = tw;
	this.paused = false;
	this.done = false;
	this.n = this.ln = 0;
	this.delay = 0;
	this.speed = 1;
	this.set_type(dn_TType.TEase);
	this.plays = 1;
	this.pixelSnap = false;
};
$hxClasses["dn.Tween"] = dn_Tween;
dn_Tween.__name__ = "dn.Tween";
dn_Tween.prototype = {
	set_type: function(t) {
		var _gthis = this;
		this.type = t;
		var tmp;
		switch(this.type._hx_index) {
		case 0:
			tmp = function(step) {
				return step;
			};
			break;
		case 1:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 1.33 + 3 * (step * step) * (1 - step) * 1.33 + step * step * step * 0;
			};
			break;
		case 2:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 2.25 + step * step * step * 0;
			};
			break;
		case 3:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2.25 + 3 * (step * step) * (1 - step) * 0 + step * step * step * 0;
			};
			break;
		case 4:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 5:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 0.5 + step * step * step;
			};
			break;
		case 6:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0.5 + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 7:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) + 3 * (step * step) * (1 - step) * 0 + step * step * step;
			};
			break;
		case 8:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) + 3 * (step * step) * (1 - step) + step * step * step;
			};
			break;
		case 9:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0 + 3 * (step * step) * (1 - step) * 0 + step * step * step;
			};
			break;
		case 10:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2.5 + 3 * (step * step) * (1 - step) * -1.5 + step * step * step;
			};
			break;
		case 11:
			tmp = function(step) {
				return step;
			};
			break;
		case 12:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0.5 + 3 * step * (n1 * n1) * 1.22 + 3 * (step * step) * (1 - step) * 1.25 + step * step * step * 0;
			};
			break;
		case 13:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0.5 + 3 * step * (n1 * n1) * 1.22 + 3 * (step * step) * (1 - step) * 1.25 + step * step * step * 0;
			};
			break;
		case 14:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 2 + 3 * (step * step) * (1 - step) * 2.79 + step * step * step;
			};
			break;
		case 15:
			tmp = function(step) {
				var n = 1 - step;
				var n1 = 1 - step;
				return n * n * n * 0 + 3 * step * (n1 * n1) * 0.7 + 3 * (step * step) * (1 - step) * 1.5 + step * step * step;
			};
			break;
		case 16:
			tmp = function(step) {
				var s = 1.70158;
				step = step / 1 - 1;
				return step * step * ((s + 1) * step + s) + 1;
			};
			break;
		}
		this.interpolate = tmp;
		return this.type;
	}
	,onUpdate: function() {
	}
	,onUpdateT: function(t) {
	}
	,onEnd: function() {
	}
	,onStart: function() {
	}
	,chainedEvent: function() {
	}
	,interpolate: function(v) {
		return v;
	}
	,delayMs: function(d) {
		var x = d * this.tw.baseFps / 1000;
		this.delay = (x > 0 ? x + .5 : x < 0 ? x - .5 : 0) | 0;
	}
	,endWithoutCallbacks: function() {
		this.done = true;
	}
	,complete: function(fl_allowLoop) {
		if(fl_allowLoop == null) {
			fl_allowLoop = false;
		}
		var v = this.from + (this.to - this.from) * this.interpolate(1);
		if(this.pixelSnap) {
			v = (v > 0 ? v + .5 : v < 0 ? v - .5 : 0) | 0;
		}
		this.setter(v);
		this.onUpdate();
		this.onUpdateT(1);
		this.onEnd();
		this.chainedEvent();
		if(fl_allowLoop && (this.plays == -1 || this.plays > 1)) {
			if(this.plays != -1) {
				this.plays--;
			}
			this.n = this.ln = 0;
		} else {
			this.done = true;
		}
	}
	,internalUpdate: function(dt) {
		if(this.done) {
			return true;
		}
		if(this.paused) {
			return false;
		}
		if(this.delay > 0) {
			this.delay--;
			return false;
		}
		if(this.onStart != null) {
			var cb = $bind(this,this.onStart);
			this.onStart = null;
			cb();
		}
		var dist = this.to - this.from;
		if(this.type == dn_TType.TRand) {
			this.ln += Std.random(100) < 33 ? this.speed * dt : 0;
		} else {
			this.ln += this.speed * dt;
		}
		this.n = this.interpolate(this.ln);
		if(this.ln < 1) {
			var val;
			if(this.type != dn_TType.TShake && this.type != dn_TType.TShakeBoth) {
				val = this.from + this.n * dist;
			} else if(this.type == dn_TType.TShake) {
				var val1 = this.from;
				var val2 = Math.random();
				var x = this.n * dist;
				val = val1 + val2 * (x < 0 ? -x : x) * (dist > 0 ? 1 : -1);
			} else {
				val = this.from + Math.random() * this.n * dist * (Std.random(2) * 2 - 1);
			}
			if(this.pixelSnap) {
				val = (val > 0 ? val + .5 : val < 0 ? val - .5 : 0) | 0;
			}
			this.setter(val);
			this.onUpdate();
			this.onUpdateT(this.ln);
		} else {
			this.complete(true);
		}
		return this.done;
	}
	,__class__: dn_Tween
};
var dn_Tweenie = function(fps) {
	this.baseFps = fps;
	this.tlist = [];
};
$hxClasses["dn.Tweenie"] = dn_Tweenie;
dn_Tweenie.__name__ = "dn.Tweenie";
dn_Tweenie.prototype = {
	terminate_: function(getter,setter,withCallbacks) {
		if(this.tlist == null) {
			return;
		}
		var v = getter();
		var _g = 0;
		var _g1 = this.tlist;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.done) {
				continue;
			}
			var old = t.getter();
			t.setter(old + 1);
			if(getter() != v) {
				t.setter(old);
				if(withCallbacks) {
					t.ln = 1;
					t.complete(false);
				} else {
					t.endWithoutCallbacks();
				}
			} else {
				t.setter(old);
			}
		}
	}
	,create_: function(getter,setter,from,to,tp,duration_ms,allowDuplicates) {
		if(allowDuplicates == null) {
			allowDuplicates = false;
		}
		if(duration_ms == null) {
			duration_ms = dn_Tweenie.DEFAULT_DURATION;
		}
		if(!allowDuplicates) {
			this.terminate_(getter,setter,false);
		}
		var t = new dn_Tween(this);
		t.getter = getter;
		t.setter = setter;
		t.from = from == null ? getter() : from;
		t.speed = 1 / (duration_ms * this.baseFps / 1000);
		t.to = to;
		if(tp != null) {
			t.set_type(tp);
		}
		if(from != null) {
			setter(from);
		}
		this.tlist.push(t);
		return t;
	}
	,destroy: function() {
		this.tlist = null;
	}
	,update: function(dt) {
		if(dt == null) {
			dt = 1.0;
		}
		var _g = 0;
		var _g1 = this.tlist;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.internalUpdate(dt)) {
				HxOverrides.remove(this.tlist,t);
			}
		}
	}
	,__class__: dn_Tweenie
};
var dn_heaps_Mode = $hxEnums["dn.heaps.Mode"] = { __ename__ : true, __constructs__ : ["Keyboard","Pad"]
	,Keyboard: {_hx_index:0,__enum__:"dn.heaps.Mode",toString:$estr}
	,Pad: {_hx_index:1,__enum__:"dn.heaps.Mode",toString:$estr}
};
dn_heaps_Mode.__empty_constructs__ = [dn_heaps_Mode.Keyboard,dn_heaps_Mode.Pad];
var dn_heaps_Controller = function(s2d) {
	this.hasAnyPress = false;
	this.longPressLock = new haxe_ds_IntMap();
	this.framePresses = new Array(28);
	this.pressTimers = new Array(28);
	this.fourth = new haxe_ds_IntMap();
	this.third = new haxe_ds_IntMap();
	this.secondary = new haxe_ds_IntMap();
	this.primary = new haxe_ds_IntMap();
	this.allowAutoSwitch = true;
	this.suspendTimer = 0.;
	this.exclusiveId = null;
	this.mode = dn_heaps_Mode.Keyboard;
	var _gthis = this;
	dn_heaps_Controller.ALL.push(this);
	this.gc = new dn_heaps_GamePad(0.4);
	s2d.addEventListener(function(e) {
		if(_gthis.allowAutoSwitch && (e.kind == hxd_EventKind.EMove || e.kind == hxd_EventKind.EKeyDown) && _gthis.mode != dn_heaps_Mode.Keyboard) {
			_gthis.mode = dn_heaps_Mode.Keyboard;
		}
	});
	var _g = 0;
	var _g1 = this.pressTimers.length;
	while(_g < _g1) {
		var idx = _g++;
		this.pressTimers[idx] = -1;
	}
	var _g = 0;
	var _g1 = this.framePresses.length;
	while(_g < _g1) {
		var idx = _g++;
		this.framePresses[idx] = -1;
	}
};
$hxClasses["dn.heaps.Controller"] = dn_heaps_Controller;
dn_heaps_Controller.__name__ = "dn.heaps.Controller";
dn_heaps_Controller.beforeUpdate = function() {
	dn_heaps_GamePad.update();
	var _g = 0;
	var _g1 = dn_heaps_Controller.ALL;
	while(_g < _g1.length) {
		var c = _g1[_g];
		++_g;
		if(c.gc != null) {
			var tmp;
			if(c.allowAutoSwitch && c.mode != dn_heaps_Mode.Pad) {
				var tmp1;
				var tmp2;
				var tmp3;
				var tmp4;
				var tmp5;
				var tmp6;
				var _this = c.gc;
				if(!(_this.device != null && _this.toggles[0] > 0)) {
					var _this1 = c.gc;
					tmp6 = _this1.device != null && _this1.toggles[1] > 0;
				} else {
					tmp6 = true;
				}
				if(!tmp6) {
					var _this2 = c.gc;
					tmp5 = _this2.device != null && _this2.toggles[2] > 0;
				} else {
					tmp5 = true;
				}
				if(!tmp5) {
					var _this3 = c.gc;
					tmp4 = _this3.device != null && _this3.toggles[3] > 0;
				} else {
					tmp4 = true;
				}
				if(!tmp4) {
					var _this4 = c.gc;
					var x;
					if(_this4.device != null) {
						var idx = dn_heaps_GamePad.MAPPING[18];
						var overrideDeadZone = -1.;
						if(overrideDeadZone == null) {
							overrideDeadZone = -1.;
						}
						var v = idx > -1 && idx < _this4.device.values.length ? _this4.device.values[idx] : 0;
						var dz = overrideDeadZone < 0. ? _this4.deadZone : overrideDeadZone;
						x = v > -dz && v < dz ? 0. : v;
					} else {
						x = 0.;
					}
					tmp3 = (x < 0 ? -x : x) >= 0.75;
				} else {
					tmp3 = true;
				}
				if(!tmp3) {
					var _this5 = c.gc;
					var x1;
					if(_this5.device != null) {
						var idx1 = dn_heaps_GamePad.MAPPING[21];
						var overrideDeadZone1 = -1.;
						if(overrideDeadZone1 == null) {
							overrideDeadZone1 = -1.;
						}
						var v1 = idx1 > -1 && idx1 < _this5.device.values.length ? _this5.device.values[idx1] : 0;
						var dz1 = overrideDeadZone1 < 0. ? _this5.deadZone : overrideDeadZone1;
						x1 = v1 > -dz1 && v1 < dz1 ? 0. : v1;
					} else {
						x1 = 0.;
					}
					tmp2 = (x1 < 0 ? -x1 : x1) >= 0.75;
				} else {
					tmp2 = true;
				}
				if(!tmp2) {
					var _this6 = c.gc;
					var x2;
					if(_this6.device != null) {
						var idx2 = dn_heaps_GamePad.MAPPING[24];
						var overrideDeadZone2 = -1.;
						if(overrideDeadZone2 == null) {
							overrideDeadZone2 = -1.;
						}
						var v2 = idx2 > -1 && idx2 < _this6.device.values.length ? _this6.device.values[idx2] : 0;
						var dz2 = overrideDeadZone2 < 0. ? _this6.deadZone : overrideDeadZone2;
						x2 = v2 > -dz2 && v2 < dz2 ? 0. : v2;
					} else {
						x2 = 0.;
					}
					tmp1 = (x2 < 0 ? -x2 : x2) >= 0.75;
				} else {
					tmp1 = true;
				}
				if(!tmp1) {
					var _this7 = c.gc;
					var x3;
					if(_this7.device != null) {
						var idx3 = dn_heaps_GamePad.MAPPING[27];
						var overrideDeadZone3 = -1.;
						if(overrideDeadZone3 == null) {
							overrideDeadZone3 = -1.;
						}
						var v3 = idx3 > -1 && idx3 < _this7.device.values.length ? _this7.device.values[idx3] : 0;
						var dz3 = overrideDeadZone3 < 0. ? _this7.deadZone : overrideDeadZone3;
						x3 = v3 > -dz3 && v3 < dz3 ? 0. : v3;
					} else {
						x3 = 0.;
					}
					tmp = (x3 < 0 ? -x3 : x3) >= 0.75;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				c.mode = dn_heaps_Mode.Pad;
			}
			if(c.hasAnyPress) {
				c.hasAnyPress = false;
				var _g2 = 0;
				var _g3 = c.framePresses.length;
				while(_g2 < _g3) {
					var idx4 = _g2++;
					c.framePresses[idx4] = -1;
				}
			}
			c.updateLongPress(0);
			c.updateLongPress(1);
			c.updateLongPress(2);
			c.updateLongPress(3);
			c.updateLongPress(5);
			c.updateLongPress(13);
		}
	}
};
dn_heaps_Controller.prototype = {
	createAccess: function(id,exclusive) {
		if(exclusive == null) {
			exclusive = false;
		}
		return new dn_heaps_ControllerAccess(this,id,exclusive);
	}
	,updateLongPress: function(k) {
		var idx = k;
		var _this = this.gc;
		if(_this.device != null && _this.toggles[k] > 0 || hxd_Key.isDown(this.primary.h[k]) || hxd_Key.isDown(this.secondary.h[k]) || hxd_Key.isDown(this.third.h[k]) || hxd_Key.isDown(this.fourth.h[k])) {
			if(this.pressTimers[idx] == -1) {
				this.pressTimers[idx] = HxOverrides.now() / 1000;
			}
			if(HxOverrides.now() / 1000 - this.pressTimers[idx] >= dn_heaps_Controller.LONG_PRESS) {
				if(!this.longPressLock.h.hasOwnProperty(idx)) {
					this.framePresses[idx] = 2;
					this.hasAnyPress = true;
					this.longPressLock.h[idx] = true;
				}
			}
		} else {
			if(this.longPressLock.h.hasOwnProperty(idx)) {
				this.longPressLock.remove(idx);
			}
			if(this.pressTimers[idx] != -1) {
				if(this.framePresses[idx] < 0) {
					if(HxOverrides.now() / 1000 - this.pressTimers[idx] <= dn_heaps_Controller.SHORT_PRESS) {
						this.hasAnyPress = true;
						this.framePresses[idx] = 1;
					}
				}
				this.pressTimers[idx] = -1;
			}
		}
	}
	,__class__: dn_heaps_Controller
};
var dn_heaps_ControllerAccess = function(parent,id,exclusive) {
	if(exclusive == null) {
		exclusive = false;
	}
	this.parent = parent;
	this.id = id + dn_heaps_Controller.UNIQ_ID++;
	var sec = 0.1;
	if(sec == null) {
		sec = 0.07;
	}
	parent.suspendTimer = HxOverrides.now() / 1000 + sec;
	if(exclusive) {
		this.parent.exclusiveId = this.id;
	}
};
$hxClasses["dn.heaps.ControllerAccess"] = dn_heaps_ControllerAccess;
dn_heaps_ControllerAccess.__name__ = "dn.heaps.ControllerAccess";
dn_heaps_ControllerAccess.prototype = {
	__class__: dn_heaps_ControllerAccess
};
var dn_heaps_GameFocusHelper = function(s,font) {
	this.showIntro = false;
	this.suspended = false;
	dn_Process.call(this);
	this.font = font;
	this.scene = s;
	this.createRoot(this.scene);
	this.root.set_visible(false);
	this.showIntro = true;
	this.suspendGame();
};
$hxClasses["dn.heaps.GameFocusHelper"] = dn_heaps_GameFocusHelper;
dn_heaps_GameFocusHelper.__name__ = "dn.heaps.GameFocusHelper";
dn_heaps_GameFocusHelper.__super__ = dn_Process;
dn_heaps_GameFocusHelper.prototype = $extend(dn_Process.prototype,{
	suspendGame: function() {
		var _gthis = this;
		if(this.suspended) {
			return;
		}
		this.suspended = true;
		dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES = true;
		var _g = 0;
		var _g1 = dn_Process.ROOTS;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p != this) {
				p.pause();
			}
		}
		this.root.set_visible(true);
		this.root.removeChildren();
		var bg = new h2d_Bitmap(h2d_Tile.fromColor(this.showIntro ? 2436675 : 0,1,1,this.showIntro ? 1 : 0.6),this.root);
		var i = new h2d_Interactive(1,1,this.root);
		var tf = new h2d_Text(this.font,this.root);
		if(this.showIntro) {
			tf.set_text("Click anywhere to start");
		} else {
			tf.set_text("PAUSED - click anywhere to resume");
		}
		this.createChildProcess(function(c) {
			var y = Math.floor((dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) * 0.35 / tf.get_textWidth());
			var v = 1 > y ? 1 : y;
			tf.posChanged = true;
			tf.scaleX = v;
			tf.posChanged = true;
			tf.scaleY = v;
			var v = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5 | 0;
			tf.posChanged = true;
			tf.x = v;
			var v = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) * 0.5 - tf.get_textHeight() * tf.scaleY * 0.5 | 0;
			tf.posChanged = true;
			tf.y = v;
			var tmp = dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width();
			i.width = tmp + 1;
			var tmp = dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height();
			i.height = tmp + 1;
			var v = dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width();
			bg.posChanged = true;
			bg.scaleX = v + 1;
			var v = dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height();
			bg.posChanged = true;
			bg.scaleY = v + 1;
			if(!_gthis.suspended) {
				c.destroyed = true;
			}
		},null,true);
		var loadingMsg = this.showIntro;
		i.onPush = function(_) {
			if(loadingMsg) {
				tf.set_text("Loading, please wait...");
				var v = (dn_Process.CUSTOM_STAGE_WIDTH > 0 ? dn_Process.CUSTOM_STAGE_WIDTH : hxd_Window.getInstance().get_width()) * 0.5 - tf.get_textWidth() * tf.scaleX * 0.5 | 0;
				tf.posChanged = true;
				tf.x = v;
				var v = (dn_Process.CUSTOM_STAGE_HEIGHT > 0 ? dn_Process.CUSTOM_STAGE_HEIGHT : hxd_Window.getInstance().get_height()) * 0.5 - tf.get_textHeight() * tf.scaleY * 0.5 | 0;
				tf.posChanged = true;
				tf.y = v;
				_gthis.delayer.addS(null,$bind(_gthis,_gthis.resumeGame),1);
			} else {
				_gthis.resumeGame();
			}
			if(i != null && i.parent != null) {
				i.parent.removeChild(i);
			}
		};
		this.showIntro = false;
	}
	,resumeGame: function() {
		var _gthis = this;
		if(!this.suspended) {
			return;
		}
		dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES = false;
		this.delayer.addF(null,function() {
			_gthis.root.set_visible(false);
			_gthis.root.removeChildren();
		},1);
		this.suspended = false;
		var _g = 0;
		var _g1 = dn_Process.ROOTS;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			if(p != this) {
				p.resume();
			}
		}
	}
	,update: function() {
		dn_Process.prototype.update.call(this);
		if(this.suspended) {
			this.scene.over(this.root);
		}
		var _this = this.cd;
		var frames = 0.2 * this.cd.baseFps;
		var tmp;
		if(_this.fastCheck.h.hasOwnProperty(4194304)) {
			tmp = true;
		} else {
			var frames1 = frames;
			var onComplete = null;
			frames1 = Math.floor(frames1 * 1000) / 1000;
			var cur = _this._getCdObject(4194304);
			if(!(cur != null && frames1 < cur.frames && false)) {
				if(frames1 <= 0) {
					if(cur != null) {
						HxOverrides.remove(_this.cdList,cur);
						cur.frames = 0;
						cur.cb = null;
						_this.fastCheck.remove(cur.k);
					}
				} else {
					_this.fastCheck.h[4194304] = true;
					if(cur != null) {
						cur.frames = frames1;
					} else {
						_this.cdList.push(new dn__$Cooldown_CdInst(4194304,frames1));
					}
				}
				if(onComplete != null) {
					if(frames1 <= 0) {
						onComplete();
					} else {
						var cd = _this._getCdObject(4194304);
						if(cd == null) {
							throw haxe_Exception.thrown("cannot bind onComplete(" + 4194304 + "): cooldown " + 4194304 + " isn't running");
						}
						cd.cb = onComplete;
					}
				}
			}
			tmp = false;
		}
		if(!tmp) {
			var w = hxd_Window.getInstance();
			if(!w.get_isFocused() && !this.suspended) {
				this.suspendGame();
			}
		}
	}
	,__class__: dn_heaps_GameFocusHelper
});
var hxd_Pad = function() {
	this.rawYAxis = 0.;
	this.rawXAxis = 0.;
	this.prevButtons = [];
	this.values = [];
	this.buttons = [];
	this.config = hxd_Pad.DEFAULT_CONFIG;
	this.index = -1;
	this.connected = true;
};
$hxClasses["hxd.Pad"] = hxd_Pad;
hxd_Pad.__name__ = "hxd.Pad";
hxd_Pad.pickConfig = function(name) {
	switch(name) {
	case "054c-05c4-Wireless Controller":case "054c-09cc-Wireless Controller":
		return hxd_Pad.CONFIG_JS_DS4_FF;
	case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 05c4)":case "Wireless Controller (STANDARD GAMEPAD Vendor: 054c Product: 09cc)":
		return hxd_Pad.CONFIG_JS_DS4;
	default:
		return hxd_Pad.CONFIG_JS_STD;
	}
};
hxd_Pad.wait = function(onPad) {
	hxd_Pad.waitPad = onPad;
	if(!hxd_Pad.initDone) {
		hxd_Pad.initDone = true;
		window.addEventListener("gamepadconnected",function(p) {
			var pad = new hxd_Pad();
			pad.d = p.gamepad;
			pad.config = hxd_Pad.pickConfig(pad.d.id);
			pad.index = pad.d.index;
			hxd_Pad.pads.h[pad.d.index] = pad;
			hxd_Pad.waitPad(pad);
		});
		window.addEventListener("gamepaddisconnected",function(p) {
			var pad = hxd_Pad.pads.h[p.gamepad.index];
			if(pad == null) {
				return;
			}
			hxd_Pad.pads.remove(p.gamepad.index);
			pad.connected = false;
			pad.onDisconnect();
		});
		haxe_MainLoop.add(hxd_Pad.syncPads);
	}
};
hxd_Pad.syncPads = function() {
	var freshPads = [];
	try {
		freshPads = $global.navigator.getGamepads();
	} catch( _g ) {
	}
	if(freshPads.length > 0) {
		var _g = 0;
		var _g1 = freshPads.length;
		while(_g < _g1) {
			var i = _g++;
			if(hxd_Pad.pads.h[i] != null) {
				hxd_Pad.pads.h[i].d = freshPads[i];
			}
		}
	}
	var p = hxd_Pad.pads.iterator();
	while(p.hasNext()) {
		var p1 = p.next();
		var _g = 0;
		var _g1 = p1.d.buttons.length;
		while(_g < _g1) {
			var i = _g++;
			p1.prevButtons[i] = p1.buttons[i];
			p1.buttons[i] = p1.d.buttons[i].pressed;
			p1.values[i] = p1.d.buttons[i].value;
		}
		var _g2 = 0;
		var _g3 = p1.d.axes.length >> 1;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var x = p1.d.axes[i1 << 1];
			var y = p1.d.axes[(i1 << 1) + 1];
			p1.values[(i1 << 1) + p1.d.buttons.length] = x;
			p1.values[(i1 << 1) + p1.d.buttons.length + 1] = -y;
			if(i1 == 0) {
				p1.rawXAxis = x;
				p1.rawYAxis = y;
			}
		}
	}
};
hxd_Pad.prototype = {
	onDisconnect: function() {
	}
	,__class__: hxd_Pad
};
var dn_heaps_GamePad = function(deadZone,onEnable) {
	this.axisAsButtonDeadZone = 0.70;
	this.deadZone = 0.18;
	dn_heaps_GamePad.ALL.push(this);
	this.toggles = [];
	if(deadZone != null) {
		this.deadZone = deadZone;
	}
	if(onEnable != null) {
		this.onEnable = onEnable;
	}
	if(dn_heaps_GamePad.AVAILABLE_DEVICES == null) {
		dn_heaps_GamePad.AVAILABLE_DEVICES = [];
		hxd_Pad.wait(dn_heaps_GamePad.onDevice);
	} else if(dn_heaps_GamePad.AVAILABLE_DEVICES.length > 0) {
		this.enableDevice(dn_heaps_GamePad.AVAILABLE_DEVICES[0]);
	}
	this.lastActivity = HxOverrides.now() / 1000;
};
$hxClasses["dn.heaps.GamePad"] = dn_heaps_GamePad;
dn_heaps_GamePad.__name__ = "dn.heaps.GamePad";
dn_heaps_GamePad.onDevice = function(p) {
	var _g = 0;
	var _g1 = dn_heaps_GamePad.ALL;
	while(_g < _g1.length) {
		var i = _g1[_g];
		++_g;
		if(i.device == null) {
			i.enableDevice(p);
			return;
		}
	}
	dn_heaps_GamePad.AVAILABLE_DEVICES.push(p);
	p.onDisconnect = function() {
		HxOverrides.remove(dn_heaps_GamePad.AVAILABLE_DEVICES,p);
	};
};
dn_heaps_GamePad.update = function() {
	var _g = 0;
	var _g1 = dn_heaps_GamePad.ALL;
	while(_g < _g1.length) {
		var e = _g1[_g];
		++_g;
		var hasToggle = false;
		if(e.device != null) {
			var _g2 = 0;
			while(_g2 < 28) {
				var i = _g2++;
				var this1 = i;
				var k = this1;
				var tmp;
				switch(k) {
				case 18:case 21:case 24:case 27:
					var simplified = true;
					var overrideDeadZone = e.axisAsButtonDeadZone;
					if(overrideDeadZone == null) {
						overrideDeadZone = -1.;
					}
					if(simplified == null) {
						simplified = false;
					}
					var tmp1;
					if(e.device != null) {
						var idx = dn_heaps_GamePad.MAPPING[k];
						var overrideDeadZone1 = overrideDeadZone;
						if(overrideDeadZone1 == null) {
							overrideDeadZone1 = -1.;
						}
						var v = idx > -1 && idx < e.device.values.length ? e.device.values[idx] : 0;
						var dz = overrideDeadZone1 < 0. ? e.deadZone : overrideDeadZone1;
						tmp1 = simplified ? v < -dz ? -1. : v > dz ? 1. : 0. : v > -dz && v < dz ? 0. : v;
					} else {
						tmp1 = 0.;
					}
					tmp = tmp1 > 0;
					break;
				case 17:case 20:case 23:case 26:
					var simplified1 = true;
					var overrideDeadZone2 = e.axisAsButtonDeadZone;
					if(overrideDeadZone2 == null) {
						overrideDeadZone2 = -1.;
					}
					if(simplified1 == null) {
						simplified1 = false;
					}
					var tmp2;
					if(e.device != null) {
						var idx1 = dn_heaps_GamePad.MAPPING[k];
						var overrideDeadZone3 = overrideDeadZone2;
						if(overrideDeadZone3 == null) {
							overrideDeadZone3 = -1.;
						}
						var v1 = idx1 > -1 && idx1 < e.device.values.length ? e.device.values[idx1] : 0;
						var dz1 = overrideDeadZone3 < 0. ? e.deadZone : overrideDeadZone3;
						tmp2 = simplified1 ? v1 < -dz1 ? -1. : v1 > dz1 ? 1. : 0. : v1 > -dz1 && v1 < dz1 ? 0. : v1;
					} else {
						tmp2 = 0.;
					}
					tmp = tmp2 < 0;
					break;
				default:
					var simplified2 = true;
					if(simplified2 == null) {
						simplified2 = false;
					}
					var tmp3;
					if(e.device != null) {
						var idx2 = dn_heaps_GamePad.MAPPING[k];
						var overrideDeadZone4 = -1.;
						if(overrideDeadZone4 == null) {
							overrideDeadZone4 = -1.;
						}
						var v2 = idx2 > -1 && idx2 < e.device.values.length ? e.device.values[idx2] : 0;
						var dz2 = overrideDeadZone4 < 0. ? e.deadZone : overrideDeadZone4;
						tmp3 = simplified2 ? v2 < -dz2 ? -1. : v2 > dz2 ? 1. : 0. : v2 > -dz2 && v2 < dz2 ? 0. : v2;
					} else {
						tmp3 = 0.;
					}
					tmp = tmp3 != 0;
				}
				if(tmp) {
					hasToggle = true;
					if(e.toggles[i] >= 1) {
						e.toggles[i] = 2;
					} else {
						e.toggles[i] = 1;
					}
				} else {
					e.toggles[i] = 0;
				}
			}
		}
		if(hasToggle) {
			e.lastActivity = HxOverrides.now() / 1000;
		}
	}
};
dn_heaps_GamePad.prototype = {
	onEnable: function(pad) {
	}
	,onDisable: function(pad) {
	}
	,enableDevice: function(p) {
		var _gthis = this;
		if(this.device == null) {
			HxOverrides.remove(dn_heaps_GamePad.AVAILABLE_DEVICES,p);
			p.onDisconnect = function() {
				_gthis.disable();
			};
			this.device = p;
			this.onEnable(this);
		}
	}
	,disable: function() {
		if(this.device != null) {
			this.device = null;
			this.onDisable(this);
		}
	}
	,__class__: dn_heaps_GamePad
};
var dn_heaps_Scaler = function() { };
$hxClasses["dn.heaps.Scaler"] = dn_heaps_Scaler;
dn_heaps_Scaler.__name__ = "dn.heaps.Scaler";
dn_heaps_Scaler.getViewportWidth = function() {
	return hxd_Window.getInstance().get_width();
};
dn_heaps_Scaler.getViewportHeight = function() {
	return hxd_Window.getInstance().get_height();
};
dn_heaps_Scaler.bestFit = function(widPx,heiPx,integerScale) {
	if(integerScale == null) {
		integerScale = true;
	}
	var sx = dn_heaps_Scaler.getViewportWidth() / widPx;
	var sy = dn_heaps_Scaler.getViewportHeight() / heiPx;
	if(integerScale) {
		if(sx >= 0) {
			sx = sx | 0;
		} else {
			var i = sx | 0;
			sx = sx == i ? i : i - 1;
		}
		if(sy >= 0) {
			sy = sy | 0;
		} else {
			var i = sy | 0;
			sy = sy == i ? i : i - 1;
		}
	}
	var y = sx < sy ? sx : sy;
	if(1 > y) {
		return 1;
	} else {
		return y;
	}
};
var dn_heaps_filter_BevelType = $hxEnums["dn.heaps.filter.BevelType"] = { __ename__ : true, __constructs__ : ["Classic","Soft","Top","Deep"]
	,Classic: {_hx_index:0,__enum__:"dn.heaps.filter.BevelType",toString:$estr}
	,Soft: {_hx_index:1,__enum__:"dn.heaps.filter.BevelType",toString:$estr}
	,Top: {_hx_index:2,__enum__:"dn.heaps.filter.BevelType",toString:$estr}
	,Deep: {_hx_index:3,__enum__:"dn.heaps.filter.BevelType",toString:$estr}
};
dn_heaps_filter_BevelType.__empty_constructs__ = [dn_heaps_filter_BevelType.Classic,dn_heaps_filter_BevelType.Soft,dn_heaps_filter_BevelType.Top,dn_heaps_filter_BevelType.Deep];
var dn_heaps_filter_OverlayTexture = function(type,sizePx) {
	if(sizePx == null) {
		sizePx = 2;
	}
	if(type == null) {
		type = dn_heaps_filter_BevelType.Classic;
	}
	this.invalidated = true;
	h2d_filter_Shader.call(this,new dn_heaps_filter__$OverlayTexture_OverlayBlendShader());
	this.get_shader().alpha__ = 1;
	if(this.bevelType != type) {
		this.invalidated = true;
	}
	this.bevelType = type;
	if(this.bevelSize != sizePx) {
		this.invalidated = true;
	}
	this.bevelSize = sizePx;
};
$hxClasses["dn.heaps.filter.OverlayTexture"] = dn_heaps_filter_OverlayTexture;
dn_heaps_filter_OverlayTexture.__name__ = "dn.heaps.filter.OverlayTexture";
dn_heaps_filter_OverlayTexture.__super__ = h2d_filter_Shader;
dn_heaps_filter_OverlayTexture.prototype = $extend(h2d_filter_Shader.prototype,{
	sync: function(ctx,s) {
		h2d_filter_Shader.prototype.sync.call(this,ctx,s);
		if(!((s) instanceof h2d_Scene)) {
			throw haxe_Exception.thrown("OverlayTextureFilter should only be attached to a 2D Scene");
		}
		if(this.invalidated) {
			this.invalidated = false;
			this.renderBevelTexture(ctx.scene.width,ctx.scene.height);
		}
	}
	,renderBevelTexture: function(screenWid,screenHei) {
		if(this.overlayTex != null) {
			this.overlayTex.dispose();
		}
		var bd = new hxd_BitmapData(this.bevelSize,this.bevelSize);
		bd.clear(-8355712);
		switch(this.bevelType._hx_index) {
		case 0:
			var _g = 0;
			var _g1 = this.bevelSize - 1;
			while(_g < _g1) {
				var x = _g++;
				bd.setPixel(x,0,-1);
				bd.setPixel(x + 1,this.bevelSize - 1,-16777216);
			}
			var _g = 0;
			var _g1 = this.bevelSize - 1;
			while(_g < _g1) {
				var y = _g++;
				bd.setPixel(0,y,-1);
				bd.setPixel(this.bevelSize - 1,y + 1,-13421773);
			}
			break;
		case 1:
			var _g = 0;
			var _g1 = this.bevelSize - 1;
			while(_g < _g1) {
				var x = _g++;
				bd.setPixel(x,0,-1);
				bd.setPixel(x + 1,this.bevelSize - 1,-10066330);
			}
			var _g = 0;
			var _g1 = this.bevelSize - 1;
			while(_g < _g1) {
				var y = _g++;
				bd.setPixel(0,y,-1);
				bd.setPixel(this.bevelSize - 1,y + 1,-10066330);
			}
			break;
		case 2:
			var _g = 0;
			var _g1 = this.bevelSize - 1;
			while(_g < _g1) {
				var x = _g++;
				bd.setPixel(x,0,-1);
				bd.setPixel(x,this.bevelSize - 1,-16777216);
			}
			break;
		case 3:
			var _g = 0;
			var _g1 = this.bevelSize - 1;
			while(_g < _g1) {
				var x = _g++;
				bd.setPixel(x,0,-1);
				bd.setPixel(x + 1,this.bevelSize - 1,-16777216);
			}
			var _g = 0;
			var _g1 = this.bevelSize - 1;
			while(_g < _g1) {
				var y = _g++;
				bd.setPixel(0,y,-1);
				bd.setPixel(this.bevelSize - 1,y + 1,-13421773);
			}
			var _g = 1;
			var _g1 = this.bevelSize - 1 - 1;
			while(_g < _g1) {
				var x = _g++;
				bd.setPixel(x,1,-1);
				bd.setPixel(x + 1,this.bevelSize - 1 - 1,-16777216);
			}
			var _g = 1;
			var _g1 = this.bevelSize - 1 - 1;
			while(_g < _g1) {
				var y = _g++;
				bd.setPixel(1,y,-1);
				bd.setPixel(this.bevelSize - 1 - 1,y + 1,-13421773);
			}
			break;
		}
		this.overlayTex = h3d_mat_Texture.fromBitmap(bd);
		this.overlayTex.set_filter(h3d_mat_Filter.Nearest);
		this.overlayTex.set_wrap(h3d_mat_Wrap.Repeat);
		this.get_shader().overlay__ = this.overlayTex;
		this.get_shader().uvScale__ = new h3d_Vector(screenWid / this.overlayTex.width,screenHei / this.overlayTex.width);
	}
	,__class__: dn_heaps_filter_OverlayTexture
});
var dn_heaps_filter__$OverlayTexture_OverlayBlendShader = function() {
	this.uvScale__ = new h3d_Vector();
	this.alpha__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["dn.heaps.filter._OverlayTexture.OverlayBlendShader"] = dn_heaps_filter__$OverlayTexture_OverlayBlendShader;
dn_heaps_filter__$OverlayTexture_OverlayBlendShader.__name__ = "dn.heaps.filter._OverlayTexture.OverlayBlendShader";
dn_heaps_filter__$OverlayTexture_OverlayBlendShader.__super__ = h3d_shader_ScreenShader;
dn_heaps_filter__$OverlayTexture_OverlayBlendShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.overlay__;
		case 3:
			return this.alpha__;
		case 4:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 3:
			return this.alpha__;
		default:
		}
		return 0.;
	}
	,__class__: dn_heaps_filter__$OverlayTexture_OverlayBlendShader
});
var dn_heaps_filter_PixelOutline = function(color,a,knockOut) {
	if(knockOut == null) {
		knockOut = false;
	}
	if(a == null) {
		a = 1.0;
	}
	if(color == null) {
		color = 0;
	}
	h2d_filter_Shader.call(this,new dn_heaps_filter__$PixelOutline_InternalShader());
	this.color = color;
	var _this = this.get_shader();
	var c = this.color;
	var s = 0.00392156862745098;
	_this.outlineColor__ = new h3d_Vector((c >> 16 & 255) * s,(c >> 8 & 255) * s,(c & 255) * s,(c >>> 24) * s);
	this.get_shader().outlineColor__.w = this.alpha;
	this.alpha = a;
	this.get_shader().outlineColor__.w = a;
	this.smooth = false;
	this.knockOut = knockOut;
	var _this = this.get_shader();
	_this.constModified = true;
	_this.knockOutMul__ = this.knockOut ? 0 : 1;
};
$hxClasses["dn.heaps.filter.PixelOutline"] = dn_heaps_filter_PixelOutline;
dn_heaps_filter_PixelOutline.__name__ = "dn.heaps.filter.PixelOutline";
dn_heaps_filter_PixelOutline.__super__ = h2d_filter_Shader;
dn_heaps_filter_PixelOutline.prototype = $extend(h2d_filter_Shader.prototype,{
	sync: function(ctx,s) {
		h2d_filter_Shader.prototype.sync.call(this,ctx,s);
		this.boundsExtend = 1;
	}
	,draw: function(ctx,t) {
		var _this = this.get_shader().texelSize__;
		var x = 1 / t.width;
		var y = 1 / t.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		return h2d_filter_Shader.prototype.draw.call(this,ctx,t);
	}
	,__class__: dn_heaps_filter_PixelOutline
});
var dn_heaps_filter__$PixelOutline_InternalShader = function() {
	this.knockOutMul__ = 0;
	this.outlineColor__ = new h3d_Vector();
	this.texelSize__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["dn.heaps.filter._PixelOutline.InternalShader"] = dn_heaps_filter__$PixelOutline_InternalShader;
dn_heaps_filter__$PixelOutline_InternalShader.__name__ = "dn.heaps.filter._PixelOutline.InternalShader";
dn_heaps_filter__$PixelOutline_InternalShader.__super__ = h3d_shader_ScreenShader;
dn_heaps_filter__$PixelOutline_InternalShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.knockOutMul__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("knockOutMul" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.texelSize__;
		case 3:
			return this.outlineColor__;
		case 4:
			return this.knockOutMul__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: dn_heaps_filter__$PixelOutline_InternalShader
});
var dn_heaps_slib__$AnimManager_AnimInstance = function(s,g) {
	this.reverse = false;
	this.speed = 1.0;
	this.stopOnLastFrame = false;
	this.killAfterPlay = false;
	this.isStateAnim = false;
	this.paused = false;
	this.playDuration = -1.;
	this.plays = 1;
	this.curFrameCpt = 0.0;
	this.animCursor = 0;
	this.frames = [];
	this.spr = s;
	this.group = g;
	var _this = this.spr.lib;
	var k = this.group;
	if(!(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0)) {
		throw haxe_Exception.thrown("unknown group " + this.group);
	}
	var _this = this.spr.lib;
	var k = this.group;
	this.frames = (k == null ? _this.currentGroup : _this.groups.h[k]).anim;
};
$hxClasses["dn.heaps.slib._AnimManager.AnimInstance"] = dn_heaps_slib__$AnimManager_AnimInstance;
dn_heaps_slib__$AnimManager_AnimInstance.__name__ = "dn.heaps.slib._AnimManager.AnimInstance";
dn_heaps_slib__$AnimManager_AnimInstance.prototype = {
	onEnd: function() {
	}
	,onEachLoop: function() {
	}
	,__class__: dn_heaps_slib__$AnimManager_AnimInstance
};
var dn_heaps_slib__$AnimManager_StateAnim = function(g,cb) {
	this.group = g;
	this.priority = 0;
	this.cond = cb;
	this.spd = 1.0;
};
$hxClasses["dn.heaps.slib._AnimManager.StateAnim"] = dn_heaps_slib__$AnimManager_StateAnim;
dn_heaps_slib__$AnimManager_StateAnim.__name__ = "dn.heaps.slib._AnimManager.StateAnim";
dn_heaps_slib__$AnimManager_StateAnim.prototype = {
	__class__: dn_heaps_slib__$AnimManager_StateAnim
};
var dn_heaps_slib__$AnimManager_Transition = function(f,t,a,cb) {
	this.from = f;
	this.to = t;
	this.anim = a;
	this.cond = cb;
	this.spd = 1.0;
	this.reverse = false;
};
$hxClasses["dn.heaps.slib._AnimManager.Transition"] = dn_heaps_slib__$AnimManager_Transition;
dn_heaps_slib__$AnimManager_Transition.__name__ = "dn.heaps.slib._AnimManager.Transition";
dn_heaps_slib__$AnimManager_Transition.prototype = {
	__class__: dn_heaps_slib__$AnimManager_Transition
};
var dn_heaps_slib_AnimManager = function(spr) {
	this.S_STAR = "*";
	this.suspendF = 0.;
	this.destroyed = false;
	this.needUpdates = false;
	this.genSpeed = 1.0;
	this.stateAnimsActive = true;
	this.transitions = [];
	this.stateAnims = [];
	this.stack = [];
	this.spr = spr;
};
$hxClasses["dn.heaps.slib.AnimManager"] = dn_heaps_slib_AnimManager;
dn_heaps_slib_AnimManager.__name__ = "dn.heaps.slib.AnimManager";
dn_heaps_slib_AnimManager.prototype = {
	destroy: function() {
		this.destroyed = true;
		this.stopWithoutStateAnims();
		this.needUpdates = false;
		this.stateAnims = null;
		this.stack = null;
		this.spr = null;
	}
	,play: function(group,plays,queueAnim) {
		if(queueAnim == null) {
			queueAnim = false;
		}
		if(plays == null) {
			plays = 1;
		}
		var _this = this.spr.lib;
		var g = group == null ? _this.currentGroup : _this.groups.h[group];
		if(g == null) {
			return this;
		}
		if(g.anim == null || g.anim.length == 0) {
			return this;
		}
		if(!queueAnim && (!this.destroyed && this.stack.length > 0)) {
			this.stack = [];
		}
		var a = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,group);
		this.stack.push(a);
		a.plays = plays;
		this.needUpdates = true;
		if(!queueAnim) {
			var t = this.getTransition(this.spr.groupName,this.stack[0].group);
			if(t != null && t.anim != this.spr.groupName) {
				var _this = this.spr.lib;
				var k = t.anim;
				if(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0) {
					var a = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
					this.stack.splice(0,0,a);
					a.speed = t.spd;
					a.reverse = t.reverse;
				}
			}
			var _this = this.stack[0];
			var f = _this.frames[_this.reverse ? _this.frames.length - 1 - _this.animCursor : _this.animCursor];
			if(_this.spr.get_anim().onEnterFrame != null && _this.lastFrame != f) {
				_this.spr.get_anim().onEnterFrame(f);
			}
			if(_this.spr.groupName != _this.group) {
				_this.spr.set(null,_this.group,f);
			} else if(_this.spr.frame != f) {
				_this.spr.setFrame(f);
			}
			_this.lastFrame = f;
		}
		return this;
	}
	,loop: function() {
		if(!this.destroyed && this.stack.length > 0) {
			this.stack[this.stack.length - 1].plays = 999999;
		}
		return this;
	}
	,stopWithStateAnims: function() {
		this.stateAnimsActive = true;
		this.stack = [];
		this.applyStateAnims();
	}
	,stopWithoutStateAnims: function(k,frame) {
		this.stateAnimsActive = false;
		this.stack = [];
		if(k != null) {
			this.spr.set(null,k,frame != null ? frame : 0);
		} else if(frame != null) {
			this.spr.setFrame(frame);
		}
	}
	,unsuspend: function() {
		this.suspendF = 0;
	}
	,getTransition: function(from,to) {
		var _g = 0;
		var _g1 = this.transitions;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if((t.from == this.S_STAR || t.from == from) && (t.to == this.S_STAR || t.to == to) && t.cond()) {
				return t;
			}
		}
		return null;
	}
	,registerStateAnim: function(group,priority,spd,condition) {
		if(spd == null) {
			spd = 1.0;
		}
		if(condition == null) {
			condition = function() {
				return true;
			};
		}
		this.removeStateAnim(group,priority);
		var s = new dn_heaps_slib__$AnimManager_StateAnim(group,condition);
		s.priority = priority;
		s.spd = spd;
		this.stateAnims.push(s);
		this.stateAnims.sort(function(a,b) {
			return -Reflect.compare(a.priority,b.priority);
		});
		this.applyStateAnims();
	}
	,removeStateAnim: function(group,priority) {
		var i = 0;
		while(i < this.stateAnims.length) if(this.stateAnims[i].group == group && this.stateAnims[i].priority == priority) {
			this.stateAnims.splice(i,1);
		} else {
			++i;
		}
	}
	,applyStateAnims: function() {
		if(!this.stateAnimsActive) {
			return;
		}
		if(!this.destroyed && this.stack.length > 0 && !this.stack[0].isStateAnim) {
			return;
		}
		var _g = 0;
		var _g1 = this.stateAnims;
		while(_g < _g1.length) {
			var sa = _g1[_g];
			++_g;
			if(sa.cond()) {
				if(!this.destroyed && this.stack.length > 0 && this.stack[0].group == sa.group) {
					break;
				}
				var _this = this.play(sa.group).loop();
				if(!_this.destroyed && _this.stack.length > 0) {
					_this.stack[_this.stack.length - 1].speed = sa.spd;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack[this.stack.length - 1].isStateAnim = true;
				}
				break;
			}
		}
	}
	,_update: function(dt) {
		if(dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES) {
			return;
		}
		if(this.suspendF > 0) {
			this.suspendF -= dt;
			if(this.suspendF <= 0) {
				this.unsuspend();
			}
			return;
		}
		this.applyStateAnims();
		var a = this.stack[0];
		if(a != null && !a.paused) {
			a.curFrameCpt += dt * this.genSpeed * a.speed;
			if(a.playDuration > 0) {
				a.playDuration -= dt;
				if(a.playDuration <= 0) {
					a.plays = 0;
					a.animCursor = a.frames.length;
					a.curFrameCpt = 1;
				}
			}
			while(a.curFrameCpt > 1) {
				a.curFrameCpt--;
				a.animCursor++;
				if(a.animCursor < a.frames.length) {
					var f = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f) {
						a.spr.get_anim().onEnterFrame(f);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f);
					} else if(a.spr.frame != f) {
						a.spr.setFrame(f);
					}
					a.lastFrame = f;
					continue;
				}
				a.animCursor = 0;
				a.plays--;
				if(a.plays > 0 || a.playDuration > 0) {
					a.onEachLoop();
					a = this.stack[0];
					var f1 = a.frames[a.reverse ? a.frames.length - 1 - a.animCursor : a.animCursor];
					if(a.spr.get_anim().onEnterFrame != null && a.lastFrame != f1) {
						a.spr.get_anim().onEnterFrame(f1);
					}
					if(a.spr.groupName != a.group) {
						a.spr.set(null,a.group,f1);
					} else if(a.spr.frame != f1) {
						a.spr.setFrame(f1);
					}
					a.lastFrame = f1;
					continue;
				}
				if(a.stopOnLastFrame) {
					this.stopWithoutStateAnims();
				}
				a.onEnd();
				if(a.killAfterPlay) {
					this.spr.remove();
					break;
				}
				if(!this.destroyed && this.stack.length > 0) {
					this.stack.shift();
					if(this.stack.length == 0) {
						this.stopWithStateAnims();
					} else {
						var t = this.getTransition(this.spr.groupName,this.stack[0].group);
						if(t != null && t.anim != this.spr.groupName) {
							var _this = this.spr.lib;
							var k = t.anim;
							if(k != null && Object.prototype.hasOwnProperty.call(_this.groups.h,k) && _this.groups.h[k].frames.length > 0) {
								var a1 = new dn_heaps_slib__$AnimManager_AnimInstance(this.spr,t.anim);
								this.stack.splice(0,0,a1);
								a1.speed = t.spd;
								a1.reverse = t.reverse;
							}
						}
						var _this1 = this.stack[0];
						var f2 = _this1.frames[_this1.reverse ? _this1.frames.length - 1 - _this1.animCursor : _this1.animCursor];
						if(_this1.spr.get_anim().onEnterFrame != null && _this1.lastFrame != f2) {
							_this1.spr.get_anim().onEnterFrame(f2);
						}
						if(_this1.spr.groupName != _this1.group) {
							_this1.spr.set(null,_this1.group,f2);
						} else if(_this1.spr.frame != f2) {
							_this1.spr.setFrame(f2);
						}
						_this1.lastFrame = f2;
					}
					a = this.stack[0];
				}
				if(!(!this.destroyed && this.stack.length > 0)) {
					break;
				}
			}
		}
		if(this.overlap != null && !this.spr.destroyed) {
			this.overlap.curFrameCpt += dt * this.genSpeed * this.overlap.speed;
			while(this.overlap.curFrameCpt > 1) {
				this.overlap.curFrameCpt--;
				this.overlap.animCursor++;
				var _this = this.overlap;
				if(_this.animCursor >= _this.frames.length) {
					this.overlap = null;
					if(this.stack[0] != null) {
						var _this1 = this.stack[0];
						var f = _this1.frames[_this1.reverse ? _this1.frames.length - 1 - _this1.animCursor : _this1.animCursor];
						if(_this1.spr.get_anim().onEnterFrame != null && _this1.lastFrame != f) {
							_this1.spr.get_anim().onEnterFrame(f);
						}
						if(_this1.spr.groupName != _this1.group) {
							_this1.spr.set(null,_this1.group,f);
						} else if(_this1.spr.frame != f) {
							_this1.spr.setFrame(f);
						}
						_this1.lastFrame = f;
					}
					break;
				}
			}
			if(this.overlap != null) {
				var _this = this.overlap;
				var f = _this.frames[_this.reverse ? _this.frames.length - 1 - _this.animCursor : _this.animCursor];
				if(_this.spr.get_anim().onEnterFrame != null && _this.lastFrame != f) {
					_this.spr.get_anim().onEnterFrame(f);
				}
				if(_this.spr.groupName != _this.group) {
					_this.spr.set(null,_this.group,f);
				} else if(_this.spr.frame != f) {
					_this.spr.setFrame(f);
				}
				_this.lastFrame = f;
			}
		}
		if(!this.destroyed && !(!this.destroyed && this.stack.length > 0) && this.overlap == null) {
			this.needUpdates = false;
		}
	}
	,__class__: dn_heaps_slib_AnimManager
};
var h2d_Object = function(parent) {
	this.blendMode = h2d_BlendMode.Alpha;
	this.alpha = 1.;
	this.visible = true;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.matA = 1;
	this.matB = 0;
	this.matC = 0;
	this.matD = 1;
	this.absX = 0;
	this.absY = 0;
	this.posChanged = parent != null;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h2d.Object"] = h2d_Object;
h2d_Object.__name__ = "h2d.Object";
h2d_Object.prototype = {
	getBounds: function(relativeTo,out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		if(relativeTo != null) {
			relativeTo.syncPos();
		}
		if(relativeTo != this) {
			this.syncPos();
		}
		this.getBoundsRec(relativeTo,out,false);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(relativeTo,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		return out;
	}
	,getSize: function(out) {
		if(out == null) {
			out = new h2d_col_Bounds();
		} else {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
		}
		this.syncPos();
		this.getBoundsRec(this.parent,out,true);
		if(out.xMax <= out.xMin || out.yMax <= out.yMin) {
			this.addBounds(this.parent,out,-1,-1,2,2);
			out.xMax = out.xMin = (out.xMax + out.xMin) * 0.5;
			out.yMax = out.yMin = (out.yMax + out.yMin) * 0.5;
		}
		var dx = -this.x;
		var dy = -this.y;
		out.xMin += dx;
		out.xMax += dx;
		out.yMin += dy;
		out.yMax += dy;
		return out;
	}
	,set_filter: function(f) {
		if(this.filter != null && this.allocated) {
			this.filter.unbind(this);
		}
		this.filter = f;
		if(f != null && this.allocated) {
			f.bind(this);
		}
		return f;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		var n = this.children.length;
		if(n == 0) {
			out.xMin = 1e20;
			out.yMin = 1e20;
			out.xMax = -1e20;
			out.yMax = -1e20;
			return;
		}
		if(n == 1) {
			var c = this.children[0];
			if(c.visible) {
				c.getBoundsRec(relativeTo,out,forSize);
			} else {
				out.xMin = 1e20;
				out.yMin = 1e20;
				out.xMax = -1e20;
				out.yMax = -1e20;
			}
			return;
		}
		var xmin = Infinity;
		var ymin = Infinity;
		var xmax = -Infinity;
		var ymax = -Infinity;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(!c.visible) {
				continue;
			}
			c.getBoundsRec(relativeTo,out,forSize);
			if(out.xMin < xmin) {
				xmin = out.xMin;
			}
			if(out.yMin < ymin) {
				ymin = out.yMin;
			}
			if(out.xMax > xmax) {
				xmax = out.xMax;
			}
			if(out.yMax > ymax) {
				ymax = out.yMax;
			}
		}
		out.xMin = xmin;
		out.yMin = ymin;
		out.xMax = xmax;
		out.yMax = ymax;
	}
	,addBounds: function(relativeTo,out,dx,dy,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		if(relativeTo == null) {
			var x;
			var y;
			var x = dx * this.matA + dy * this.matC + this.absX;
			var y = dx * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + dy * this.matC + this.absX;
			var y = (dx + width) * this.matB + dy * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = dx * this.matA + (dy + height) * this.matC + this.absX;
			var y = dx * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			var x = (dx + width) * this.matA + (dy + height) * this.matC + this.absX;
			var y = (dx + width) * this.matB + (dy + height) * this.matD + this.absY;
			if(x < out.xMin) {
				out.xMin = x;
			}
			if(x > out.xMax) {
				out.xMax = x;
			}
			if(y < out.yMin) {
				out.yMin = y;
			}
			if(y > out.yMax) {
				out.yMax = y;
			}
			return;
		}
		if(relativeTo == this) {
			if(out.xMin > dx) {
				out.xMin = dx;
			}
			if(out.yMin > dy) {
				out.yMin = dy;
			}
			if(out.xMax < dx + width) {
				out.xMax = dx + width;
			}
			if(out.yMax < dy + height) {
				out.yMax = dy + height;
			}
			return;
		}
		var r = relativeTo.matA * relativeTo.matD - relativeTo.matB * relativeTo.matC;
		if(r == 0) {
			return;
		}
		var det = 1 / r;
		var rA = relativeTo.matD * det;
		var rB = -relativeTo.matB * det;
		var rC = -relativeTo.matC * det;
		var rD = relativeTo.matA * det;
		var rX = this.absX - relativeTo.absX;
		var rY = this.absY - relativeTo.absY;
		var x = dx * this.matA + dy * this.matC + rX;
		var y = dx * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + dy * this.matC + rX;
		y = (dx + width) * this.matB + dy * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = dx * this.matA + (dy + height) * this.matC + rX;
		y = dx * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
		x = (dx + width) * this.matA + (dy + height) * this.matC + rX;
		y = (dx + width) * this.matB + (dy + height) * this.matD + rY;
		var x1 = x * rA + y * rC;
		var y1 = x * rB + y * rD;
		if(x1 < out.xMin) {
			out.xMin = x1;
		}
		if(x1 > out.xMax) {
			out.xMax = x1;
		}
		if(y1 < out.yMin) {
			out.yMin = y1;
		}
		if(y1 > out.yMax) {
			out.yMax = y1;
		}
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h2d_col_Point();
		}
		var px = pt.x * this.matA + pt.y * this.matC + this.absX;
		var py = pt.x * this.matB + pt.y * this.matD + this.absY;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,globalToLocal: function(pt) {
		this.syncPos();
		pt.x -= this.absX;
		pt.y -= this.absY;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var px = (pt.x * this.matD - pt.y * this.matC) * invDet;
		var py = (-pt.x * this.matB + pt.y * this.matA) * invDet;
		pt.x = px;
		pt.y = py;
		return pt;
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h2d_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,set_visible: function(b) {
		if(this.visible == b) {
			return b;
		}
		this.visible = b;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return b;
	}
	,addChild: function(s) {
		this.addChildAt(s,this.children.length);
	}
	,addChildAt: function(s,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == s) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(s.parent != null) {
			var old = s.allocated;
			s.allocated = false;
			s.parent.removeChild(s);
			s.allocated = old;
		}
		this.children.splice(pos,0,s);
		if(!this.allocated && s.allocated) {
			s.onRemove();
		}
		s.parent = this;
		s.parentContainer = this.parentContainer;
		s.posChanged = true;
		if(this.allocated) {
			if(!s.allocated) {
				s.onAdd();
			} else {
				s.onHierarchyMoved(true);
			}
		}
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onHierarchyMoved(parentChanged);
		}
	}
	,onAdd: function() {
		this.allocated = true;
		if(this.filter != null) {
			this.filter.bind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		this.allocated = false;
		if(this.filter != null) {
			this.filter.unbind(this);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(s) {
		if(HxOverrides.remove(this.children,s)) {
			if(s.allocated) {
				s.onRemove();
			}
			s.parent = null;
			if(s.parentContainer != null) {
				s.setParentContainer(null);
			}
			s.posChanged = true;
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.setParentContainer(c);
		}
	}
	,removeChildren: function() {
		while(this.children.length > 0) this.removeChild(this.children[0]);
	}
	,remove: function() {
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,drawTo: function(t) {
		var s = this.getScene();
		var needDispose = s == null;
		if(s == null) {
			s = new h2d_Scene();
		}
		s.drawImplTo(this,[t]);
		if(needDispose) {
			s.dispose();
			this.onRemove();
		}
	}
	,draw: function(ctx) {
	}
	,sync: function(ctx) {
		var changed = this.posChanged;
		if(changed) {
			this.calcAbsPos();
			this.posChanged = false;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					c.posChanged = true;
				}
				c.sync(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
	}
	,calcAbsPos: function() {
		if(this.parent == null) {
			var cr;
			var sr;
			if(this.rotation == 0) {
				cr = 1.;
				sr = 0.;
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				cr = Math.cos(this.rotation);
				sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = this.x;
			this.absY = this.y;
		} else {
			if(this.rotation == 0) {
				this.matA = this.scaleX * this.parent.matA;
				this.matB = this.scaleX * this.parent.matB;
				this.matC = this.scaleY * this.parent.matC;
				this.matD = this.scaleY * this.parent.matD;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				var tmpA = this.scaleX * cr;
				var tmpB = this.scaleX * sr;
				var tmpC = this.scaleY * -sr;
				var tmpD = this.scaleY * cr;
				this.matA = tmpA * this.parent.matA + tmpB * this.parent.matC;
				this.matB = tmpA * this.parent.matB + tmpB * this.parent.matD;
				this.matC = tmpC * this.parent.matA + tmpD * this.parent.matC;
				this.matD = tmpC * this.parent.matB + tmpD * this.parent.matD;
			}
			this.absX = this.x * this.parent.matA + this.y * this.parent.matC + this.parent.absX;
			this.absY = this.x * this.parent.matB + this.y * this.parent.matD + this.parent.absY;
		}
	}
	,emitTile: function(ctx,tile) {
		if(h2d_Object.nullDrawable == null) {
			h2d_Object.nullDrawable = new h2d_Drawable(null);
		}
		h2d_Object.nullDrawable.absX = this.absX;
		h2d_Object.nullDrawable.absY = this.absY;
		h2d_Object.nullDrawable.matA = this.matA;
		h2d_Object.nullDrawable.matB = this.matB;
		h2d_Object.nullDrawable.matC = this.matC;
		h2d_Object.nullDrawable.matD = this.matD;
		ctx.drawTile(h2d_Object.nullDrawable,tile);
	}
	,clipBounds: function(ctx,bounds) {
		var view = ctx.tmpBounds;
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(ctx.inFilter != null) {
			var f1 = ctx.baseShader.filterMatrixA__;
			var f2 = ctx.baseShader.filterMatrixB__;
			var tmpA = this.matA * f1.x + this.matB * f1.y;
			var tmpB = this.matA * f2.x + this.matB * f2.y;
			var tmpC = this.matC * f1.x + this.matD * f1.y;
			var tmpD = this.matC * f2.x + this.matD * f2.y;
			var tmpX = this.absX * f1.x + this.absY * f1.y + f1.z;
			var tmpY = this.absX * f2.x + this.absY * f2.y + f2.z;
			matA = tmpA * ctx.viewA + tmpB * ctx.viewC;
			matB = tmpA * ctx.viewB + tmpB * ctx.viewD;
			matC = tmpC * ctx.viewA + tmpD * ctx.viewC;
			matD = tmpC * ctx.viewB + tmpD * ctx.viewD;
			absX = tmpX * ctx.viewA + tmpY * ctx.viewC + ctx.viewX;
			absY = tmpX * ctx.viewB + tmpY * ctx.viewD + ctx.viewY;
		} else {
			matA = this.matA * ctx.viewA + this.matB * ctx.viewC;
			matB = this.matA * ctx.viewB + this.matB * ctx.viewD;
			matC = this.matC * ctx.viewA + this.matD * ctx.viewC;
			matD = this.matC * ctx.viewB + this.matD * ctx.viewD;
			absX = this.absX * ctx.viewA + this.absY * ctx.viewC + ctx.viewX;
			absY = this.absX * ctx.viewB + this.absY * ctx.viewD + ctx.viewY;
		}
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = bounds.xMin;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMin;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMin;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = bounds.xMax;
		var y = bounds.yMax;
		var x1 = x * matA + y * matC + absX;
		var y1 = x * matB + y * matD + absY;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		if(view.xMin < -1) {
			view.xMin = -1;
		}
		if(view.yMin < -1) {
			view.yMin = -1;
		}
		if(view.xMax > 1) {
			view.xMax = 1;
		}
		if(view.yMax > 1) {
			view.yMax = 1;
		}
		var invDet = 1 / (matA * matD - matB * matC);
		var sxMin = view.xMin;
		var syMin = view.yMin;
		var sxMax = view.xMax;
		var syMax = view.yMax;
		view.xMin = 1e20;
		view.yMin = 1e20;
		view.xMax = -1e20;
		view.yMax = -1e20;
		var x = sxMin;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMin;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMin;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var x = sxMax;
		var y = syMax;
		x -= absX;
		y -= absY;
		var x1 = (x * matD - y * matC) * invDet;
		var y1 = (-x * matB + y * matA) * invDet;
		if(x1 < view.xMin) {
			view.xMin = x1;
		}
		if(x1 > view.xMax) {
			view.xMax = x1;
		}
		if(y1 < view.yMin) {
			view.yMin = y1;
		}
		if(y1 > view.yMax) {
			view.yMax = y1;
		}
		var a = bounds.xMin;
		var b = view.xMin;
		bounds.xMin = a < b ? b : a;
		var a = bounds.yMin;
		var b = view.yMin;
		bounds.yMin = a < b ? b : a;
		var a = bounds.xMax;
		var b = view.xMax;
		bounds.xMax = a > b ? b : a;
		var a = bounds.yMax;
		var b = view.yMax;
		bounds.yMax = a > b ? b : a;
	}
	,drawFilters: function(ctx) {
		if(!ctx.pushFilter(this)) {
			return;
		}
		var bounds = ctx.tmpBounds;
		var total = new h2d_col_Bounds();
		var maxExtent = -1.;
		this.filter.sync(ctx,this);
		if(this.filter.autoBounds) {
			maxExtent = this.filter.boundsExtend;
		} else {
			this.filter.getBounds(this,bounds);
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		if(maxExtent >= 0) {
			this.getBounds(this,bounds);
			bounds.xMin -= maxExtent;
			bounds.yMin -= maxExtent;
			bounds.xMax += maxExtent;
			bounds.yMax += maxExtent;
			if(bounds.xMin < total.xMin) {
				total.xMin = bounds.xMin;
			}
			if(bounds.xMax > total.xMax) {
				total.xMax = bounds.xMax;
			}
			if(bounds.yMin < total.yMin) {
				total.yMin = bounds.yMin;
			}
			if(bounds.yMax > total.yMax) {
				total.yMax = bounds.yMax;
			}
		}
		this.clipBounds(ctx,total);
		var xMin = Math.floor(total.xMin + 1e-10);
		var yMin = Math.floor(total.yMin + 1e-10);
		var width = Math.ceil(total.xMax - xMin - 1e-10);
		var height = Math.ceil(total.yMax - yMin - 1e-10);
		if(width <= 0 || height <= 0 || total.xMax < total.xMin) {
			ctx.popFilter();
			return;
		}
		var t = ctx.textures.allocTarget("filterTemp",width,height,false);
		ctx.pushTarget(t,xMin,yMin,width,height);
		ctx.engine.clear(0);
		var oldAlpha = ctx.globalAlpha;
		var shader = ctx.baseShader;
		var _this = shader.filterMatrixA__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldA_x = x;
		var oldA_y = y;
		var oldA_z = z;
		var oldA_w = w;
		var _this = shader.filterMatrixB__;
		var x = _this.x;
		var y = _this.y;
		var z = _this.z;
		var w = _this.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var oldB_x = x;
		var oldB_y = y;
		var oldB_z = z;
		var oldB_w = w;
		var invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
		var invA = this.matD * invDet;
		var invB = -this.matB * invDet;
		var invC = -this.matC * invDet;
		var invD = this.matA * invDet;
		var invX = -(this.absX * invA + this.absY * invC);
		var invY = -(this.absX * invB + this.absY * invD);
		var _this = shader.filterMatrixA__;
		var x = invA;
		var y = invC;
		var z = invX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = shader.filterMatrixB__;
		var x = invB;
		var y = invD;
		var z = invY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		ctx.globalAlpha = 1;
		this.drawContent(ctx);
		var finalTile = h2d_Tile.fromTexture(t);
		finalTile.dx = xMin;
		finalTile.dy = yMin;
		var prev = finalTile;
		finalTile = this.filter.draw(ctx,finalTile);
		if(finalTile != prev && finalTile != null) {
			finalTile.dx += xMin;
			finalTile.dy += yMin;
		}
		var _this = shader.filterMatrixA__;
		_this.x = oldA_x;
		_this.y = oldA_y;
		_this.z = oldA_z;
		_this.w = oldA_w;
		var _this = shader.filterMatrixB__;
		_this.x = oldB_x;
		_this.y = oldB_y;
		_this.z = oldB_z;
		_this.w = oldB_w;
		ctx.popTarget();
		ctx.popFilter();
		ctx.globalAlpha = oldAlpha;
		if(finalTile == null) {
			return;
		}
		this.drawFiltered(ctx,finalTile);
	}
	,drawFiltered: function(ctx,tile) {
		var oldAlpha = ctx.globalAlpha;
		ctx.currentBlend = null;
		ctx.inFilterBlend = this.blendMode;
		ctx.globalAlpha *= this.alpha;
		this.emitTile(ctx,tile);
		ctx.globalAlpha = oldAlpha;
		ctx.inFilterBlend = null;
		ctx.currentBlend = null;
	}
	,drawRec: function(ctx) {
		if(!this.visible) {
			return;
		}
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		if(this.filter != null && this.filter.get_enable()) {
			this.drawFilters(ctx);
		} else {
			var old = ctx.globalAlpha;
			ctx.globalAlpha *= this.alpha;
			this.drawContent(ctx);
			ctx.globalAlpha = old;
		}
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var i = this.children.length;
			while(i-- > 0) this.children[i].drawRec(ctx);
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.drawRec(ctx);
			}
		}
	}
	,getChildIndex: function(o) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == o) {
				return i;
			}
		}
		return -1;
	}
	,contentChanged: function(s) {
	}
	,constraintSize: function(maxWidth,maxHeight) {
	}
	,__class__: h2d_Object
};
var h2d_Drawable = function(parent) {
	h2d_Object.call(this,parent);
	this.color = new h3d_Vector(1,1,1,1);
};
$hxClasses["h2d.Drawable"] = h2d_Drawable;
h2d_Drawable.__name__ = "h2d.Drawable";
h2d_Drawable.__super__ = h2d_Object;
h2d_Drawable.prototype = $extend(h2d_Object.prototype,{
	drawFiltered: function(ctx,tile) {
		var old = this.shaders;
		this.shaders = null;
		h2d_Object.prototype.drawFiltered.call(this,ctx,tile);
		this.shaders = old;
	}
	,addShader: function(s) {
		if(s == null) {
			throw haxe_Exception.thrown("Can't add null shader");
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var prev = null;
		var cur = this.shaders;
		while(cur != null) {
			if(cur.s == s) {
				if(prev == null) {
					this.shaders = cur.next;
				} else {
					prev.next = cur.next;
				}
				return true;
			}
			prev = cur;
			cur = cur.next;
		}
		return false;
	}
	,emitTile: function(ctx,tile) {
		if(tile == null) {
			tile = new h2d_Tile(null,0,0,5,5);
		}
		if(!ctx.drawTile(this,tile)) {
			return;
		}
	}
	,__class__: h2d_Drawable
});
var dn_heaps_slib_SpriteInterface = function() { };
$hxClasses["dn.heaps.slib.SpriteInterface"] = dn_heaps_slib_SpriteInterface;
dn_heaps_slib_SpriteInterface.__name__ = "dn.heaps.slib.SpriteInterface";
dn_heaps_slib_SpriteInterface.__isInterface__ = true;
dn_heaps_slib_SpriteInterface.prototype = {
	__class__: dn_heaps_slib_SpriteInterface
};
var dn_heaps_slib_HSprite = function(l,g,f,parent) {
	if(f == null) {
		f = 0;
	}
	h2d_Drawable.call(this,parent);
	this.destroyed = false;
	this.pivot = new dn_heaps_slib_SpritePivot();
	this.lastPage = -1;
	if(l != null) {
		var frame = f;
		if(frame == null) {
			frame = 0;
		}
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				this.lib.removeChild(this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.addChild(this);
			}
			if(this.pivot.isUndefined) {
				var xRatio = this.lib.defaultCenterX;
				var yRatio = this.lib.defaultCenterY;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = this.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var _this = this.lib;
			var k = this.groupName;
			this.group = k == null ? _this.currentGroup : _this.groups.h[k];
			var _this = this.lib;
			var k = this.groupName;
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame1];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + frame + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(frame);
		} else {
			this.setEmptyTexture();
		}
	} else {
		this.setEmptyTexture();
	}
};
$hxClasses["dn.heaps.slib.HSprite"] = dn_heaps_slib_HSprite;
dn_heaps_slib_HSprite.__name__ = "dn.heaps.slib.HSprite";
dn_heaps_slib_HSprite.__interfaces__ = [dn_heaps_slib_SpriteInterface];
dn_heaps_slib_HSprite.__super__ = h2d_Drawable;
dn_heaps_slib_HSprite.prototype = $extend(h2d_Drawable.prototype,{
	toString: function() {
		return "HSprite_" + this.groupName + "[" + this.frame + "]";
	}
	,get_anim: function() {
		if(this._animManager == null) {
			this._animManager = new dn_heaps_slib_AnimManager(this);
			if(this.onAnimManAlloc != null) {
				this.onAnimManAlloc(this._animManager);
			}
		}
		return this._animManager;
	}
	,setEmptyTexture: function() {
		this.rawTile = h2d_Tile.fromColor(8453888,4,4);
	}
	,set: function(l,g,frame,stopAllAnims) {
		if(stopAllAnims == null) {
			stopAllAnims = false;
		}
		if(frame == null) {
			frame = 0;
		}
		if(l != null) {
			if(l.pages == null || l.pages.length == 0) {
				throw haxe_Exception.thrown("sprite sheet has no backing texture, please generate one");
			}
			if(g == null) {
				this.groupName = null;
				this.group = null;
				this.frameData = null;
			}
			if(this.allocated && this.lib != null) {
				this.lib.removeChild(this);
			}
			this.lib = l;
			if(this.allocated) {
				this.lib.addChild(this);
			}
			if(this.pivot.isUndefined) {
				var xRatio = this.lib.defaultCenterX;
				var yRatio = this.lib.defaultCenterY;
				if(yRatio == null) {
					yRatio = 0.5;
				}
				if(xRatio == null) {
					xRatio = 0.5;
				}
				var _this = this.pivot;
				_this.centerFactorX = xRatio;
				_this.centerFactorY = yRatio;
				_this.usingFactor = true;
				_this.isUndefined = false;
			}
		}
		if(g != null && g != this.groupName) {
			this.groupName = g;
		}
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			if(stopAllAnims && this._animManager != null) {
				if(this._animManager == null) {
					this._animManager = new dn_heaps_slib_AnimManager(this);
					if(this.onAnimManAlloc != null) {
						this.onAnimManAlloc(this._animManager);
					}
				}
				this._animManager.stopWithoutStateAnims();
			}
			var _this = this.lib;
			var k = this.groupName;
			this.group = k == null ? _this.currentGroup : _this.groups.h[k];
			var _this = this.lib;
			var k = this.groupName;
			var frame1 = frame;
			if(frame1 == null) {
				frame1 = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame1];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + frame + ")");
			}
			if(this.rawTile == null) {
				this.rawTile = this.lib.pages[this.frameData.page].clone();
			} else {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
			}
			this.lastPage = this.frameData.page;
			this.setFrame(frame);
		} else {
			this.setEmptyTexture();
		}
	}
	,setFrame: function(f) {
		var old = this.frame;
		this.frame = f;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var prev = this.frameData;
			var _this = this.lib;
			var k = this.groupName;
			var frame = this.frame;
			if(frame == null) {
				frame = 0;
			}
			var g = k == null ? _this.currentGroup : _this.groups.h[k];
			this.frameData = g == null ? null : g.frames[frame];
			if(this.frameData == null) {
				throw haxe_Exception.thrown("Unknown frame: " + this.groupName + "(" + this.frame + ")");
			}
			if(this.lastFrame != this.frameData.page) {
				this.rawTile.setTexture(this.lib.pages[this.frameData.page].innerTex);
				this.lastPage = this.frameData.page;
			}
			if(this.onFrameChange != null) {
				this.onFrameChange();
			}
		}
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.destroyed = false;
		if(this.lib != null) {
			this.lib.addChild(this);
		}
	}
	,onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.destroyed = true;
		if(this.lib != null) {
			this.lib.removeChild(this);
		}
		if(this._animManager != null) {
			this._animManager.destroy();
			this._animManager = null;
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp = this.rawTile.dx;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp1 = this.rawTile.dy;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		var tmp2 = this.rawTile.width;
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		this.addBounds(relativeTo,out,tmp,tmp1,tmp2,this.rawTile.height);
	}
	,draw: function(ctx) {
		if(!this.destroyed && this.lib != null && this.groupName != null) {
			var fd = this.frameData;
			this.rawTile.setPosition(fd.x,fd.y);
			this.rawTile.setSize(fd.wid,fd.hei);
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX + fd.realX | 0);
				this.rawTile.dy = -(this.pivot.coordY + fd.realY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(fd.realWid * this.pivot.centerFactorX + fd.realX | 0);
					this.rawTile.dy = -(fd.realHei * this.pivot.centerFactorY + fd.realY | 0);
				}
			}
		} else {
			var _this = this.pivot;
			if(!_this.isUndefined && !_this.usingFactor) {
				this.rawTile.dx = -(this.pivot.coordX | 0);
				this.rawTile.dy = -(this.pivot.coordY | 0);
			} else {
				var _this = this.pivot;
				if(!_this.isUndefined && _this.usingFactor) {
					this.rawTile.dx = -(this.rawTile.width * this.pivot.centerFactorX | 0);
					this.rawTile.dy = -(this.rawTile.height * this.pivot.centerFactorY | 0);
				}
			}
		}
		this.emitTile(ctx,this.rawTile);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this._animManager != null) {
			if(this._animManager == null) {
				this._animManager = new dn_heaps_slib_AnimManager(this);
				if(this.onAnimManAlloc != null) {
					this.onAnimManAlloc(this._animManager);
				}
			}
			var _this = this._animManager;
			if(_this.needUpdates) {
				_this._update(this.lib != null ? this.lib.tmod : 1);
			}
		}
	}
	,__class__: dn_heaps_slib_HSprite
});
var dn_heaps_slib_FrameData = function(page,x,y,wid,hei,realX,realY,realWid,realHei,tile) {
	this.page = page;
	this.x = x;
	this.y = y;
	this.wid = wid;
	this.hei = hei;
	this.realX = realX;
	this.realY = realY;
	this.realWid = realWid;
	this.realHei = realHei;
	this.tile = tile;
};
$hxClasses["dn.heaps.slib.FrameData"] = dn_heaps_slib_FrameData;
dn_heaps_slib_FrameData.__name__ = "dn.heaps.slib.FrameData";
dn_heaps_slib_FrameData.prototype = {
	__class__: dn_heaps_slib_FrameData
};
var dn_heaps_slib_LibGroup = function(id,maxWid,maxHei,frames,anim) {
	this.id = id;
	this.maxWid = maxWid;
	this.maxHei = maxHei;
	this.frames = frames;
	this.anim = anim;
};
$hxClasses["dn.heaps.slib.LibGroup"] = dn_heaps_slib_LibGroup;
dn_heaps_slib_LibGroup.__name__ = "dn.heaps.slib.LibGroup";
dn_heaps_slib_LibGroup.prototype = {
	__class__: dn_heaps_slib_LibGroup
};
var dn_heaps_slib_SLBError = $hxEnums["dn.heaps.slib.SLBError"] = { __ename__ : true, __constructs__ : ["NoGroupSelected","GroupAlreadyExists","InvalidFrameDuration","EndFrameLower","InvalidFrames","NoCurrentGroup","AnimFrameExceeds","AssetImportFailed","NotSameSLBFromBatch"]
	,NoGroupSelected: {_hx_index:0,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
	,GroupAlreadyExists: ($_=function(g) { return {_hx_index:1,g:g,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["g"],$_)
	,InvalidFrameDuration: ($_=function(s) { return {_hx_index:2,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["s"],$_)
	,EndFrameLower: ($_=function(s) { return {_hx_index:3,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["s"],$_)
	,InvalidFrames: ($_=function(s) { return {_hx_index:4,s:s,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["s"],$_)
	,NoCurrentGroup: {_hx_index:5,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
	,AnimFrameExceeds: ($_=function(id,anim,frame) { return {_hx_index:6,id:id,anim:anim,frame:frame,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["id","anim","frame"],$_)
	,AssetImportFailed: ($_=function(e) { return {_hx_index:7,e:e,__enum__:"dn.heaps.slib.SLBError",toString:$estr}; },$_.__params__ = ["e"],$_)
	,NotSameSLBFromBatch: {_hx_index:8,__enum__:"dn.heaps.slib.SLBError",toString:$estr}
};
dn_heaps_slib_SLBError.__empty_constructs__ = [dn_heaps_slib_SLBError.NoGroupSelected,dn_heaps_slib_SLBError.NoCurrentGroup,dn_heaps_slib_SLBError.NotSameSLBFromBatch];
var dn_heaps_slib_SpriteLib = function(pages,normalPages) {
	this.tmod = 1.0;
	this.groups = new haxe_ds_StringMap();
	this.defaultCenterX = 0;
	this.defaultCenterY = 0;
	this.gridX = this.gridY = 16;
	this.children = [];
	this.pages = pages;
	this.normalPages = normalPages;
};
$hxClasses["dn.heaps.slib.SpriteLib"] = dn_heaps_slib_SpriteLib;
dn_heaps_slib_SpriteLib.__name__ = "dn.heaps.slib.SpriteLib";
dn_heaps_slib_SpriteLib.prototype = {
	setSliceGrid: function(w,h) {
		this.gridX = w;
		this.gridY = h;
	}
	,createGroup: function(k) {
		if(Object.prototype.hasOwnProperty.call(this.groups.h,k)) {
			throw haxe_Exception.thrown(dn_heaps_slib_SLBError.GroupAlreadyExists(k));
		}
		var this1 = this.groups;
		var value = new dn_heaps_slib_LibGroup(k,0,0,[],[]);
		this1.h[k] = value;
		this.currentGroup = k == null ? this.currentGroup : this.groups.h[k];
		var k = null;
		if(k == null) {
			return this.currentGroup;
		} else {
			return this.groups.h[k];
		}
	}
	,slice: function(groupName,page,x,y,wid,hei,repeatX,repeatY) {
		if(repeatY == null) {
			repeatY = 1;
		}
		if(repeatX == null) {
			repeatX = 1;
		}
		var g = this.createGroup(groupName);
		this.currentGroup = groupName == null ? this.currentGroup : this.groups.h[groupName];
		var k = null;
		var tmp = k == null;
		var x1 = g.maxWid;
		g.maxWid = x1 > wid ? x1 : wid;
		var x1 = g.maxHei;
		g.maxHei = x1 > hei ? x1 : hei;
		var _g = 0;
		var _g1 = repeatY;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = 0;
			var _g3 = repeatX;
			while(_g2 < _g3) {
				var ix = _g2++;
				g.frames.push(new dn_heaps_slib_FrameData(page,x + ix * wid,y + iy * hei,wid,hei,0,0,wid,hei,null));
			}
		}
	}
	,sliceGrid: function(groupName,page,gx,gy,repeatX,repeatY) {
		if(repeatY == null) {
			repeatY = 1;
		}
		if(repeatX == null) {
			repeatX = 1;
		}
		var g = this.createGroup(groupName);
		this.currentGroup = groupName == null ? this.currentGroup : this.groups.h[groupName];
		var k = null;
		var tmp = k == null;
		var x = g.maxWid;
		var y = this.gridX;
		g.maxWid = x > y ? x : y;
		var x = g.maxHei;
		var y = this.gridY;
		g.maxHei = x > y ? x : y;
		var _g = 0;
		var _g1 = repeatY;
		while(_g < _g1) {
			var iy = _g++;
			var _g2 = 0;
			var _g3 = repeatX;
			while(_g2 < _g3) {
				var ix = _g2++;
				g.frames.push(new dn_heaps_slib_FrameData(page,this.gridX * (gx + ix),this.gridY * (gy + iy),this.gridX,this.gridY,0,0,this.gridX,this.gridY,null));
			}
		}
	}
	,sliceAnimGrid: function(groupName,page,frameDuration,gx,gy,repeatX,repeatY) {
		if(repeatY == null) {
			repeatY = 1;
		}
		if(repeatX == null) {
			repeatX = 1;
		}
		this.sliceGrid(groupName,page,gx,gy,repeatX,repeatY);
		var frames = [];
		var _g = 0;
		var _g1 = repeatX * repeatY;
		while(_g < _g1) {
			var f = _g++;
			var _g2 = 0;
			var _g3 = frameDuration;
			while(_g2 < _g3) {
				var i = _g2++;
				frames.push(f);
			}
		}
		this.__defineAnim(groupName,frames);
	}
	,toString: function() {
		var l = [];
		var k = haxe_ds_StringMap.keysIterator(this.groups.h);
		while(k.hasNext()) {
			var k1 = k.next();
			var g = k1 == null ? this.currentGroup : this.groups.h[k1];
			l.push(k1 + " (" + g.maxWid + "x" + g.maxHei + ")" + (g.frames.length > 1 ? " " + g.frames.length + "f" : "") + (g.anim.length > 1 ? " animated(" + g.anim.length + "f)" : ""));
		}
		l.sort(function(a,b) {
			return Reflect.compare(a,b);
		});
		return "| " + l.join("\n| ");
	}
	,addChild: function(s) {
		this.children.push(s);
	}
	,removeChild: function(s) {
		HxOverrides.remove(this.children,s);
	}
	,__defineAnim: function(group,anim) {
		if(this.currentGroup == null && group == null) {
			throw haxe_Exception.thrown(dn_heaps_slib_SLBError.NoCurrentGroup);
		}
		if(group != null) {
			this.currentGroup = group == null ? this.currentGroup : this.groups.h[group];
			var k = null;
			var tmp = k == null;
		}
		var _g = 0;
		while(_g < anim.length) {
			var f = anim[_g];
			++_g;
			if(f >= this.currentGroup.frames.length) {
				throw haxe_Exception.thrown(dn_heaps_slib_SLBError.AnimFrameExceeds(this.currentGroup.id,"[" + anim.join(",") + "] " + this.currentGroup.frames.length,f));
			}
		}
		this.currentGroup.anim = anim;
	}
	,__class__: dn_heaps_slib_SpriteLib
};
var dn_heaps_slib_SpritePivot = function() {
	this.isUndefined = true;
};
$hxClasses["dn.heaps.slib.SpritePivot"] = dn_heaps_slib_SpritePivot;
dn_heaps_slib_SpritePivot.__name__ = "dn.heaps.slib.SpritePivot";
dn_heaps_slib_SpritePivot.prototype = {
	__class__: dn_heaps_slib_SpritePivot
};
var dn_pathfinder_AStar = function(nodeToPoint) {
	this.hei = -1;
	this.wid = -1;
	this.nodes = [];
	this.nodeToPoint = nodeToPoint;
};
$hxClasses["dn.pathfinder.AStar"] = dn_pathfinder_AStar;
dn_pathfinder_AStar.__name__ = "dn.pathfinder.AStar";
dn_pathfinder_AStar.prototype = {
	init: function(w,h,hasCollision) {
		this.wid = w;
		this.hei = h;
		this.hasCollision = hasCollision;
		this.nodes = [];
		var _g = 0;
		var _g1 = this.hei;
		while(_g < _g1) {
			var cy = _g++;
			var _g2 = 0;
			var _g3 = this.wid;
			while(_g2 < _g3) {
				var cx = _g2++;
				if(hasCollision(cx - 1,cy - 1) && !hasCollision(cx,cy - 1) && !hasCollision(cx - 1,cy) || hasCollision(cx + 1,cy - 1) && !hasCollision(cx,cy - 1) && !hasCollision(cx + 1,cy) || hasCollision(cx + 1,cy + 1) && !hasCollision(cx,cy + 1) && !hasCollision(cx + 1,cy) || hasCollision(cx - 1,cy + 1) && !hasCollision(cx,cy + 1) && !hasCollision(cx - 1,cy)) {
					this.nodes.push(new dn_pathfinder__$AStar_PathNode(this,cx,cy));
				}
			}
		}
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			var _g2 = 0;
			var _g3 = this.nodes;
			while(_g2 < _g3.length) {
				var n2 = _g3[_g2];
				++_g2;
				var tmp;
				if(n != n2) {
					var _gthis = this;
					var x0 = n.cx;
					var y0 = n.cy;
					var x1 = n2.cx;
					var y1 = n2.cy;
					if(_gthis.hasCollision(x0,y0) || _gthis.hasCollision(x1,y1)) {
						tmp = false;
					} else {
						var x = y1 - y0;
						var x2 = x1 - x0;
						var swapXY = (x < 0 ? -x : x) > (x2 < 0 ? -x2 : x2);
						var tmp1;
						if(swapXY) {
							tmp1 = x0;
							x0 = y0;
							y0 = tmp1;
							tmp1 = x1;
							x1 = y1;
							y1 = tmp1;
						}
						if(x0 > x1) {
							tmp1 = x0;
							x0 = x1;
							x1 = tmp1;
							tmp1 = y0;
							y0 = y1;
							y1 = tmp1;
						}
						var deltax = x1 - x0;
						var x3 = y1 - y0;
						var deltay = Math.floor(x3 < 0 ? -x3 : x3);
						var error = Math.floor(deltax / 2);
						var y = y0;
						var ystep = y0 < y1 ? 1 : -1;
						var valid = true;
						var _g4 = x0;
						var _g5 = x1 + 1;
						while(_g4 < _g5) {
							var x4 = _g4++;
							if(swapXY && _gthis.hasCollision(y,x4) || !swapXY && _gthis.hasCollision(x4,y)) {
								valid = false;
								break;
							}
							error -= deltay;
							if(error < 0) {
								y += ystep;
								error += deltax;
							}
						}
						tmp = valid;
					}
				} else {
					tmp = false;
				}
				if(tmp) {
					n.link(n2);
				}
			}
		}
	}
	,hasCollision: function(cx,cy) {
		return false;
	}
	,getNodeAt: function(cx,cy) {
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			if(n.cx == cx && n.cy == cy) {
				return n;
			}
		}
		return null;
	}
	,getPath: function(fx,fy,tx,ty) {
		var _gthis = this;
		if(this.wid < 0) {
			throw haxe_Exception.thrown("AStar.init() should be called first.");
		}
		var _gthis1 = this;
		var x0 = fx;
		var y0 = fy;
		var x1 = tx;
		var y1 = ty;
		var tmp;
		if(_gthis1.hasCollision(x0,y0) || _gthis1.hasCollision(x1,y1)) {
			tmp = false;
		} else {
			var x = y1 - y0;
			var x2 = x1 - x0;
			var swapXY = (x < 0 ? -x : x) > (x2 < 0 ? -x2 : x2);
			var tmp1;
			if(swapXY) {
				tmp1 = x0;
				x0 = y0;
				y0 = tmp1;
				tmp1 = x1;
				x1 = y1;
				y1 = tmp1;
			}
			if(x0 > x1) {
				tmp1 = x0;
				x0 = x1;
				x1 = tmp1;
				tmp1 = y0;
				y0 = y1;
				y1 = tmp1;
			}
			var deltax = x1 - x0;
			var x = y1 - y0;
			var deltay = Math.floor(x < 0 ? -x : x);
			var error = Math.floor(deltax / 2);
			var y = y0;
			var ystep = y0 < y1 ? 1 : -1;
			var valid = true;
			var _g = x0;
			var _g1 = x1 + 1;
			while(_g < _g1) {
				var x = _g++;
				if(swapXY && _gthis1.hasCollision(y,x) || !swapXY && _gthis1.hasCollision(x,y)) {
					valid = false;
					break;
				}
				error -= deltay;
				if(error < 0) {
					y += ystep;
					error += deltax;
				}
			}
			tmp = valid;
		}
		if(tmp) {
			return [this.nodeToPoint(tx,ty)];
		}
		var _g = 0;
		var _g1 = this.nodes;
		while(_g < _g1.length) {
			var n = _g1[_g];
			++_g;
			n.initBeforeAStar();
		}
		var addeds = 0;
		var start = this.getNodeAt(fx,fy);
		if(start == null) {
			++addeds;
			start = new dn_pathfinder__$AStar_PathNode(this,fx,fy);
			var _g = 0;
			var _g1 = this.nodes;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				var _gthis1 = this;
				var x0 = start.cx;
				var y0 = start.cy;
				var x1 = n.cx;
				var y1 = n.cy;
				var tmp;
				if(_gthis1.hasCollision(x0,y0) || _gthis1.hasCollision(x1,y1)) {
					tmp = false;
				} else {
					var x = y1 - y0;
					var x2 = x1 - x0;
					var swapXY = (x < 0 ? -x : x) > (x2 < 0 ? -x2 : x2);
					var tmp1;
					if(swapXY) {
						tmp1 = x0;
						x0 = y0;
						y0 = tmp1;
						tmp1 = x1;
						x1 = y1;
						y1 = tmp1;
					}
					if(x0 > x1) {
						tmp1 = x0;
						x0 = x1;
						x1 = tmp1;
						tmp1 = y0;
						y0 = y1;
						y1 = tmp1;
					}
					var deltax = x1 - x0;
					var x3 = y1 - y0;
					var deltay = Math.floor(x3 < 0 ? -x3 : x3);
					var error = Math.floor(deltax / 2);
					var y = y0;
					var ystep = y0 < y1 ? 1 : -1;
					var valid = true;
					var _g2 = x0;
					var _g3 = x1 + 1;
					while(_g2 < _g3) {
						var x4 = _g2++;
						if(swapXY && _gthis1.hasCollision(y,x4) || !swapXY && _gthis1.hasCollision(x4,y)) {
							valid = false;
							break;
						}
						error -= deltay;
						if(error < 0) {
							y += ystep;
							error += deltax;
						}
					}
					tmp = valid;
				}
				if(tmp) {
					start.link(n,true);
				}
			}
			this.nodes.push(start);
		}
		var end = this.getNodeAt(tx,ty);
		if(end == null) {
			++addeds;
			end = new dn_pathfinder__$AStar_PathNode(this,tx,ty);
			var _g = 0;
			var _g1 = this.nodes;
			while(_g < _g1.length) {
				var n = _g1[_g];
				++_g;
				var _gthis1 = this;
				var x0 = end.cx;
				var y0 = end.cy;
				var x1 = n.cx;
				var y1 = n.cy;
				var tmp;
				if(_gthis1.hasCollision(x0,y0) || _gthis1.hasCollision(x1,y1)) {
					tmp = false;
				} else {
					var x = y1 - y0;
					var x2 = x1 - x0;
					var swapXY = (x < 0 ? -x : x) > (x2 < 0 ? -x2 : x2);
					var tmp1;
					if(swapXY) {
						tmp1 = x0;
						x0 = y0;
						y0 = tmp1;
						tmp1 = x1;
						x1 = y1;
						y1 = tmp1;
					}
					if(x0 > x1) {
						tmp1 = x0;
						x0 = x1;
						x1 = tmp1;
						tmp1 = y0;
						y0 = y1;
						y1 = tmp1;
					}
					var deltax = x1 - x0;
					var x3 = y1 - y0;
					var deltay = Math.floor(x3 < 0 ? -x3 : x3);
					var error = Math.floor(deltax / 2);
					var y = y0;
					var ystep = y0 < y1 ? 1 : -1;
					var valid = true;
					var _g2 = x0;
					var _g3 = x1 + 1;
					while(_g2 < _g3) {
						var x4 = _g2++;
						if(swapXY && _gthis1.hasCollision(y,x4) || !swapXY && _gthis1.hasCollision(x4,y)) {
							valid = false;
							break;
						}
						error -= deltay;
						if(error < 0) {
							y += ystep;
							error += deltax;
						}
					}
					tmp = valid;
				}
				if(tmp) {
					end.link(n,true);
				}
			}
			this.nodes.push(end);
		}
		var _this = this.astar(start,end);
		var result = new Array(_this.length);
		var _g = 0;
		var _g1 = _this.length;
		while(_g < _g1) {
			var i = _g++;
			var n = _this[i];
			result[i] = _gthis.nodeToPoint(n.cx,n.cy);
		}
		var path = result;
		var _g = 0;
		var _g1 = addeds;
		while(_g < _g1) {
			var i = _g++;
			this.nodes.pop();
		}
		return path;
	}
	,astar: function(start,end) {
		var opens = [start];
		var openMarks = new haxe_ds_IntMap();
		openMarks.h[start.id] = true;
		var closedMarks_h = { };
		while(opens.length > 0) {
			var best = -1;
			var _g = 0;
			var _g1 = opens.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp;
				if(best >= 0) {
					var _this = opens[i];
					var tx = end.cx;
					var ty = end.cy;
					var ax = _this.cx;
					var ay = _this.cy;
					var _this1 = opens[best];
					var tx1 = end.cx;
					var ty1 = end.cy;
					var ax1 = _this1.cx;
					var ay1 = _this1.cy;
					tmp = _this.homeDist + ((ax - tx) * (ax - tx) + (ay - ty) * (ay - ty)) < _this1.homeDist + ((ax1 - tx1) * (ax1 - tx1) + (ay1 - ty1) * (ay1 - ty1));
				} else {
					tmp = true;
				}
				if(tmp) {
					best = i;
				}
			}
			var cur = opens[best];
			if(cur == end) {
				var path = [cur];
				var n = this.getDeepestParentOnSight(cur);
				while(n != null) {
					path.push(n);
					n = this.getDeepestParentOnSight(n);
				}
				path.reverse();
				return path;
			}
			closedMarks_h[cur.id] = true;
			opens.splice(best,1);
			openMarks.remove(cur.id);
			var i1 = 0;
			var _g2 = 0;
			var _g3 = cur.nexts;
			while(_g2 < _g3.length) {
				var n1 = _g3[_g2];
				++_g2;
				if(closedMarks_h.hasOwnProperty(n1.id)) {
					continue;
				}
				var tx2 = n1.cx;
				var ty2 = n1.cy;
				var ax2 = cur.cx;
				var ay2 = cur.cy;
				var homeDist = cur.homeDist + ((ax2 - tx2) * (ax2 - tx2) + (ay2 - ty2) * (ay2 - ty2));
				var isBetter = false;
				if(!openMarks.h.hasOwnProperty(n1.id)) {
					isBetter = true;
					opens.push(n1);
					openMarks.h[n1.id] = true;
				} else if(homeDist < n1.homeDist) {
					isBetter = true;
				}
				if(isBetter) {
					n1.parent = cur;
					n1.homeDist = homeDist;
					++i1;
				}
			}
		}
		return [];
	}
	,getDeepestParentOnSight: function(cur) {
		var n = cur.parent;
		var lastSight = n;
		while(n != null) {
			var _gthis = this;
			var x0 = cur.cx;
			var y0 = cur.cy;
			var x1 = n.cx;
			var y1 = n.cy;
			var tmp;
			if(_gthis.hasCollision(x0,y0) || _gthis.hasCollision(x1,y1)) {
				tmp = false;
			} else {
				var x = y1 - y0;
				var x2 = x1 - x0;
				var swapXY = (x < 0 ? -x : x) > (x2 < 0 ? -x2 : x2);
				var tmp1;
				if(swapXY) {
					tmp1 = x0;
					x0 = y0;
					y0 = tmp1;
					tmp1 = x1;
					x1 = y1;
					y1 = tmp1;
				}
				if(x0 > x1) {
					tmp1 = x0;
					x0 = x1;
					x1 = tmp1;
					tmp1 = y0;
					y0 = y1;
					y1 = tmp1;
				}
				var deltax = x1 - x0;
				var x3 = y1 - y0;
				var deltay = Math.floor(x3 < 0 ? -x3 : x3);
				var error = Math.floor(deltax / 2);
				var y = y0;
				var ystep = y0 < y1 ? 1 : -1;
				var valid = true;
				var _g = x0;
				var _g1 = x1 + 1;
				while(_g < _g1) {
					var x4 = _g++;
					if(swapXY && _gthis.hasCollision(y,x4) || !swapXY && _gthis.hasCollision(x4,y)) {
						valid = false;
						break;
					}
					error -= deltay;
					if(error < 0) {
						y += ystep;
						error += deltax;
					}
				}
				tmp = valid;
			}
			if(tmp) {
				lastSight = n;
			} else {
				return lastSight;
			}
			n = n.parent;
		}
		return null;
	}
	,__class__: dn_pathfinder_AStar
};
var dn_pathfinder__$AStar_PathNode = function(as,x,y) {
	this.homeDist = 0.;
	this.originalNexts = [];
	this.nexts = [];
	this.cx = x;
	this.cy = y;
	this.id = this.cx + this.cy * as.wid;
};
$hxClasses["dn.pathfinder._AStar.PathNode"] = dn_pathfinder__$AStar_PathNode;
dn_pathfinder__$AStar_PathNode.__name__ = "dn.pathfinder._AStar.PathNode";
dn_pathfinder__$AStar_PathNode.prototype = {
	initBeforeAStar: function() {
		this.homeDist = 0;
		this.parent = null;
		this.nexts = this.originalNexts.slice();
	}
	,link: function(n,tmpLink) {
		if(tmpLink == null) {
			tmpLink = false;
		}
		if(tmpLink) {
			this.nexts.push(n);
			n.nexts.push(this);
		} else {
			this.originalNexts.push(n);
			n.originalNexts.push(this);
		}
	}
	,__class__: dn_pathfinder__$AStar_PathNode
};
var format_gif_Block = $hxEnums["format.gif.Block"] = { __ename__ : true, __constructs__ : ["BFrame","BExtension","BEOF"]
	,BFrame: ($_=function(frame) { return {_hx_index:0,frame:frame,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["frame"],$_)
	,BExtension: ($_=function(extension) { return {_hx_index:1,extension:extension,__enum__:"format.gif.Block",toString:$estr}; },$_.__params__ = ["extension"],$_)
	,BEOF: {_hx_index:2,__enum__:"format.gif.Block",toString:$estr}
};
format_gif_Block.__empty_constructs__ = [format_gif_Block.BEOF];
var format_gif_Extension = $hxEnums["format.gif.Extension"] = { __ename__ : true, __constructs__ : ["EGraphicControl","EComment","EText","EApplicationExtension","EUnknown"]
	,EGraphicControl: ($_=function(gce) { return {_hx_index:0,gce:gce,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["gce"],$_)
	,EComment: ($_=function(text) { return {_hx_index:1,text:text,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["text"],$_)
	,EText: ($_=function(pte) { return {_hx_index:2,pte:pte,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["pte"],$_)
	,EApplicationExtension: ($_=function(ext) { return {_hx_index:3,ext:ext,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["ext"],$_)
	,EUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.gif.Extension",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_gif_Extension.__empty_constructs__ = [];
var format_gif_ApplicationExtension = $hxEnums["format.gif.ApplicationExtension"] = { __ename__ : true, __constructs__ : ["AENetscapeLooping","AEUnknown"]
	,AENetscapeLooping: ($_=function(loops) { return {_hx_index:0,loops:loops,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["loops"],$_)
	,AEUnknown: ($_=function(name,version,data) { return {_hx_index:1,name:name,version:version,data:data,__enum__:"format.gif.ApplicationExtension",toString:$estr}; },$_.__params__ = ["name","version","data"],$_)
};
format_gif_ApplicationExtension.__empty_constructs__ = [];
var format_gif_Version = $hxEnums["format.gif.Version"] = { __ename__ : true, __constructs__ : ["GIF87a","GIF89a","Unknown"]
	,GIF87a: {_hx_index:0,__enum__:"format.gif.Version",toString:$estr}
	,GIF89a: {_hx_index:1,__enum__:"format.gif.Version",toString:$estr}
	,Unknown: ($_=function(version) { return {_hx_index:2,version:version,__enum__:"format.gif.Version",toString:$estr}; },$_.__params__ = ["version"],$_)
};
format_gif_Version.__empty_constructs__ = [format_gif_Version.GIF87a,format_gif_Version.GIF89a];
var format_gif_DisposalMethod = $hxEnums["format.gif.DisposalMethod"] = { __ename__ : true, __constructs__ : ["UNSPECIFIED","NO_ACTION","FILL_BACKGROUND","RENDER_PREVIOUS","UNDEFINED"]
	,UNSPECIFIED: {_hx_index:0,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,NO_ACTION: {_hx_index:1,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,FILL_BACKGROUND: {_hx_index:2,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,RENDER_PREVIOUS: {_hx_index:3,__enum__:"format.gif.DisposalMethod",toString:$estr}
	,UNDEFINED: ($_=function(index) { return {_hx_index:4,index:index,__enum__:"format.gif.DisposalMethod",toString:$estr}; },$_.__params__ = ["index"],$_)
};
format_gif_DisposalMethod.__empty_constructs__ = [format_gif_DisposalMethod.UNSPECIFIED,format_gif_DisposalMethod.NO_ACTION,format_gif_DisposalMethod.FILL_BACKGROUND,format_gif_DisposalMethod.RENDER_PREVIOUS];
var format_gif_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.gif.Reader"] = format_gif_Reader;
format_gif_Reader.__name__ = "format.gif.Reader";
format_gif_Reader.prototype = {
	read: function() {
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 73;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 70;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var gifVer = this.i.readString(3);
		var version = format_gif_Version.GIF89a;
		switch(gifVer) {
		case "87a":
			version = format_gif_Version.GIF87a;
			break;
		case "89a":
			version = format_gif_Version.GIF89a;
			break;
		default:
			version = format_gif_Version.Unknown(gifVer);
		}
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packedField = this.i.readByte();
		var bgIndex = this.i.readByte();
		var pixelAspectRatio = this.i.readByte();
		if(pixelAspectRatio != 0) {
			pixelAspectRatio = (pixelAspectRatio + 15) / 64;
		} else {
			pixelAspectRatio = 1;
		}
		var lsd = { width : width, height : height, hasGlobalColorTable : (packedField & 128) == 128, colorResolution : (packedField & 112) >>> 4, sorted : (packedField & 8) == 8, globalColorTableSize : 2 << (packedField & 7), backgroundColorIndex : bgIndex, pixelAspectRatio : pixelAspectRatio};
		var gct = null;
		if(lsd.hasGlobalColorTable) {
			gct = this.readColorTable(lsd.globalColorTableSize);
		}
		var blocks = new haxe_ds_List();
		while(true) {
			var b = this.readBlock();
			blocks.add(b);
			if(b == format_gif_Block.BEOF) {
				break;
			}
		}
		return { version : version, logicalScreenDescriptor : lsd, globalColorTable : gct, blocks : blocks};
	}
	,readBlock: function() {
		var blockID = this.i.readByte();
		switch(blockID) {
		case 33:
			return this.readExtension();
		case 44:
			return this.readImage();
		case 59:
			return format_gif_Block.BEOF;
		}
		return format_gif_Block.BEOF;
	}
	,readImage: function() {
		var x = this.i.readUInt16();
		var y = this.i.readUInt16();
		var width = this.i.readUInt16();
		var height = this.i.readUInt16();
		var packed = this.i.readByte();
		var localColorTable = (packed & 128) == 128;
		var interlaced = (packed & 64) == 64;
		var sorted = (packed & 32) == 32;
		var localColorTableSize = 2 << (packed & 7);
		var lct = null;
		if(localColorTable) {
			lct = this.readColorTable(localColorTableSize);
		}
		return format_gif_Block.BFrame({ x : x, y : y, width : width, height : height, localColorTable : localColorTable, interlaced : interlaced, sorted : sorted, localColorTableSize : localColorTableSize, pixels : this.readPixels(width,height,interlaced), colorTable : lct});
	}
	,readPixels: function(width,height,interlaced) {
		var input = this.i;
		var pixelsCount = width * height;
		var pixels = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
		var minCodeSize = input.readByte();
		var blockSize = input.readByte() - 1;
		var bits = input.readByte();
		var bitsCount = 8;
		var clearCode = 1 << minCodeSize;
		var eoiCode = clearCode + 1;
		var codeSize = minCodeSize + 1;
		var codeSizeLimit = 1 << codeSize;
		var codeMask = codeSizeLimit - 1;
		var baseDict = [];
		var _g = 0;
		var _g1 = clearCode;
		while(_g < _g1) {
			var i = _g++;
			baseDict[i] = [i];
		}
		var dict = [];
		var dictLen = clearCode + 2;
		var newRecord;
		var i = 0;
		var code = 0;
		var last;
		while(i < pixelsCount) {
			last = code;
			while(bitsCount < codeSize) {
				if(blockSize == 0) {
					break;
				}
				bits |= input.readByte() << bitsCount;
				bitsCount += 8;
				--blockSize;
				if(blockSize == 0) {
					blockSize = input.readByte();
				}
			}
			code = bits & codeMask;
			bits >>= codeSize;
			bitsCount -= codeSize;
			if(code == clearCode) {
				dict = baseDict.slice();
				dictLen = clearCode + 2;
				codeSize = minCodeSize + 1;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
				continue;
			}
			if(code == eoiCode) {
				break;
			}
			if(code < dictLen) {
				if(last != clearCode) {
					newRecord = dict[last].slice();
					newRecord.push(dict[code][0]);
					dict[dictLen++] = newRecord;
				}
			} else {
				if(code != dictLen) {
					throw haxe_Exception.thrown("Invalid LZW code. Excepted: " + dictLen + ", got: " + code);
				}
				newRecord = dict[last].slice();
				newRecord.push(newRecord[0]);
				dict[dictLen++] = newRecord;
			}
			newRecord = dict[code];
			var _g = 0;
			while(_g < newRecord.length) {
				var item = newRecord[_g];
				++_g;
				pixels.b[i++] = item;
			}
			if(dictLen == codeSizeLimit && codeSize < 12) {
				++codeSize;
				codeSizeLimit = 1 << codeSize;
				codeMask = codeSizeLimit - 1;
			}
		}
		while(blockSize > 0) {
			input.readByte();
			--blockSize;
			if(blockSize == 0) {
				blockSize = input.readByte();
			}
		}
		while(i < pixelsCount) pixels.b[i++] = 0;
		if(interlaced) {
			var buffer = new haxe_io_Bytes(new ArrayBuffer(pixelsCount));
			var offset = this.deinterlace(pixels,buffer,8,0,0,width,height);
			offset = this.deinterlace(pixels,buffer,8,4,offset,width,height);
			offset = this.deinterlace(pixels,buffer,4,2,offset,width,height);
			this.deinterlace(pixels,buffer,2,1,offset,width,height);
			pixels = buffer;
		}
		return pixels;
	}
	,deinterlace: function(input,output,step,y,offset,width,height) {
		while(y < height) {
			output.blit(y * width,input,offset,width);
			offset += width;
			y += step;
		}
		return offset;
	}
	,readExtension: function() {
		var subId = this.i.readByte();
		switch(subId) {
		case 1:
			if(this.i.readByte() != 12) {
				throw haxe_Exception.thrown("Incorrect size of Plain Text Extension introducer block.");
			}
			var tmp = this.i.readUInt16();
			var tmp1 = this.i.readUInt16();
			var tmp2 = this.i.readUInt16();
			var tmp3 = this.i.readUInt16();
			var tmp4 = this.i.readByte();
			var tmp5 = this.i.readByte();
			var tmp6 = this.i.readByte();
			var tmp7 = this.i.readByte();
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EText({ textGridX : tmp, textGridY : tmp1, textGridWidth : tmp2, textGridHeight : tmp3, charCellWidth : tmp4, charCellHeight : tmp5, textForegroundColorIndex : tmp6, textBackgroundColorIndex : tmp7, text : bytes.toString()}));
		case 249:
			if(this.i.readByte() != 4) {
				throw haxe_Exception.thrown("Incorrect Graphic Control Extension block size!");
			}
			var packed = this.i.readByte();
			var disposalMethod;
			switch((packed & 28) >> 2) {
			case 0:
				disposalMethod = format_gif_DisposalMethod.UNSPECIFIED;
				break;
			case 1:
				disposalMethod = format_gif_DisposalMethod.NO_ACTION;
				break;
			case 2:
				disposalMethod = format_gif_DisposalMethod.FILL_BACKGROUND;
				break;
			case 3:
				disposalMethod = format_gif_DisposalMethod.RENDER_PREVIOUS;
				break;
			default:
				disposalMethod = format_gif_DisposalMethod.UNDEFINED((packed & 28) >> 2);
			}
			var b = format_gif_Block.BExtension(format_gif_Extension.EGraphicControl({ disposalMethod : disposalMethod, userInput : (packed & 2) == 2, hasTransparentColor : (packed & 1) == 1, delay : this.i.readUInt16(), transparentIndex : this.i.readByte()}));
			this.i.readByte();
			return b;
		case 254:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EComment(bytes.toString()));
		case 255:
			return this.readApplicationExtension();
		default:
			var buffer = new haxe_io_BytesOutput();
			var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
			var len = this.i.readByte();
			while(len != 0) {
				this.i.readBytes(bytes,0,len);
				buffer.writeBytes(bytes,0,len);
				len = this.i.readByte();
			}
			buffer.flush();
			bytes = buffer.getBytes();
			buffer.close();
			return format_gif_Block.BExtension(format_gif_Extension.EUnknown(subId,bytes));
		}
	}
	,readApplicationExtension: function() {
		if(this.i.readByte() != 11) {
			throw haxe_Exception.thrown("Incorrect size of Application Extension introducer block.");
		}
		var name = this.i.readString(8);
		var version = this.i.readString(3);
		var buffer = new haxe_io_BytesOutput();
		var bytes = new haxe_io_Bytes(new ArrayBuffer(255));
		var len = this.i.readByte();
		while(len != 0) {
			this.i.readBytes(bytes,0,len);
			buffer.writeBytes(bytes,0,len);
			len = this.i.readByte();
		}
		buffer.flush();
		bytes = buffer.getBytes();
		buffer.close();
		var data = bytes;
		if(name == "NETSCAPE" && version == "2.0" && data.b[0] == 1) {
			return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AENetscapeLooping(data.b[1] | data.b[2] << 8)));
		}
		return format_gif_Block.BExtension(format_gif_Extension.EApplicationExtension(format_gif_ApplicationExtension.AEUnknown(name,version,data)));
	}
	,readColorTable: function(size) {
		size *= 3;
		var output = new haxe_io_Bytes(new ArrayBuffer(size));
		var c = 0;
		while(c < size) {
			var v = this.i.readByte();
			output.b[c] = v;
			var v1 = this.i.readByte();
			output.b[c + 1] = v1;
			var v2 = this.i.readByte();
			output.b[c + 2] = v2;
			c += 3;
		}
		return output;
	}
	,__class__: format_gif_Reader
};
var format_gif_Tools = function() { };
$hxClasses["format.gif.Tools"] = format_gif_Tools;
format_gif_Tools.__name__ = "format.gif.Tools";
format_gif_Tools.extractFullBGRA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index + 2];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
format_gif_Tools.extractFullRGBA = function(data,frameIndex) {
	var gce = null;
	var frameCaret = 0;
	var bytes = new haxe_io_Bytes(new ArrayBuffer(data.logicalScreenDescriptor.width * data.logicalScreenDescriptor.height * 4));
	var _g_head = data.blocks.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var block = val;
		switch(block._hx_index) {
		case 0:
			var frame = block.frame;
			var ct = frame.localColorTable ? frame.colorTable : data.globalColorTable;
			if(ct == null) {
				throw haxe_Exception.thrown("Frame does not have a color table!");
			}
			var transparentIndex = gce != null && gce.hasTransparentColor ? gce.transparentIndex * 3 : -1;
			var pixels = frame.pixels;
			var x = 0;
			var writeCaret = (frame.y * data.logicalScreenDescriptor.width + frame.x) * 4;
			var lineSkip = (data.logicalScreenDescriptor.width - frame.width) * 4 + 4;
			var disposalMethod = frameCaret != frameIndex && gce != null ? gce.disposalMethod : format_gif_DisposalMethod.NO_ACTION;
			switch(disposalMethod._hx_index) {
			case 2:
				var _g = 0;
				var _g1 = pixels.length;
				while(_g < _g1) {
					var i = _g++;
					bytes.b[writeCaret] = 0;
					bytes.b[writeCaret + 1] = 0;
					bytes.b[writeCaret + 2] = 0;
					bytes.b[writeCaret + 3] = 0;
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
				break;
			case 3:
				break;
			default:
				var _g2 = 0;
				var _g3 = pixels.length;
				while(_g2 < _g3) {
					var i1 = _g2++;
					var index = pixels.b[i1] * 3;
					if(transparentIndex != index) {
						bytes.b[writeCaret] = ct.b[index];
						bytes.b[writeCaret + 1] = ct.b[index + 1];
						bytes.b[writeCaret + 2] = ct.b[index + 2];
						bytes.b[writeCaret + 3] = 255;
					}
					if(++x == frame.width) {
						x = 0;
						writeCaret += lineSkip;
					} else {
						writeCaret += 4;
					}
				}
			}
			if(frameCaret == frameIndex) {
				return bytes;
			}
			++frameCaret;
			gce = null;
			break;
		case 1:
			var ext = block.extension;
			if(ext._hx_index == 0) {
				var g = ext.gce;
				gce = g;
			}
			break;
		default:
		}
	}
	return bytes;
};
var format_mp3_SamplingRate = $hxEnums["format.mp3.SamplingRate"] = { __ename__ : true, __constructs__ : ["SR_8000","SR_11025","SR_12000","SR_22050","SR_24000","SR_32000","SR_44100","SR_48000","SR_Bad"]
	,SR_8000: {_hx_index:0,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_11025: {_hx_index:1,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_12000: {_hx_index:2,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_22050: {_hx_index:3,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_24000: {_hx_index:4,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_32000: {_hx_index:5,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_44100: {_hx_index:6,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_48000: {_hx_index:7,__enum__:"format.mp3.SamplingRate",toString:$estr}
	,SR_Bad: {_hx_index:8,__enum__:"format.mp3.SamplingRate",toString:$estr}
};
format_mp3_SamplingRate.__empty_constructs__ = [format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_Bad];
var format_mp3_Bitrate = $hxEnums["format.mp3.Bitrate"] = { __ename__ : true, __constructs__ : ["BR_8","BR_16","BR_24","BR_32","BR_40","BR_48","BR_56","BR_64","BR_80","BR_96","BR_112","BR_128","BR_144","BR_160","BR_176","BR_192","BR_224","BR_256","BR_288","BR_320","BR_352","BR_384","BR_416","BR_448","BR_Free","BR_Bad"]
	,BR_8: {_hx_index:0,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_16: {_hx_index:1,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_24: {_hx_index:2,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_32: {_hx_index:3,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_40: {_hx_index:4,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_48: {_hx_index:5,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_56: {_hx_index:6,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_64: {_hx_index:7,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_80: {_hx_index:8,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_96: {_hx_index:9,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_112: {_hx_index:10,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_128: {_hx_index:11,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_144: {_hx_index:12,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_160: {_hx_index:13,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_176: {_hx_index:14,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_192: {_hx_index:15,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_224: {_hx_index:16,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_256: {_hx_index:17,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_288: {_hx_index:18,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_320: {_hx_index:19,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_352: {_hx_index:20,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_384: {_hx_index:21,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_416: {_hx_index:22,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_448: {_hx_index:23,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Free: {_hx_index:24,__enum__:"format.mp3.Bitrate",toString:$estr}
	,BR_Bad: {_hx_index:25,__enum__:"format.mp3.Bitrate",toString:$estr}
};
format_mp3_Bitrate.__empty_constructs__ = [format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_Bad];
var format_mp3_MPEG = function() { };
$hxClasses["format.mp3.MPEG"] = format_mp3_MPEG;
format_mp3_MPEG.__name__ = "format.mp3.MPEG";
format_mp3_MPEG.enum2Num = function(m) {
	switch(m._hx_index) {
	case 0:
		return 3;
	case 1:
		return 2;
	case 2:
		return 0;
	case 3:
		return format_mp3_MPEG.Reserved;
	}
};
format_mp3_MPEG.num2Enum = function(m) {
	switch(m) {
	case 0:
		return format_mp3_MPEGVersion.MPEG_V25;
	case 2:
		return format_mp3_MPEGVersion.MPEG_V2;
	case 3:
		return format_mp3_MPEGVersion.MPEG_V1;
	default:
		return format_mp3_MPEGVersion.MPEG_Reserved;
	}
};
format_mp3_MPEG.srEnum2Num = function(sr) {
	switch(sr._hx_index) {
	case 0:
		return 8000;
	case 1:
		return 11025;
	case 2:
		return 12000;
	case 3:
		return 22050;
	case 4:
		return 24000;
	case 5:
		return 32000;
	case 6:
		return 44100;
	case 7:
		return 48000;
	case 8:
		return -1;
	}
};
format_mp3_MPEG.bitrateEnum2Num = function(br) {
	switch(br._hx_index) {
	case 0:
		return 8;
	case 1:
		return 16;
	case 2:
		return 24;
	case 3:
		return 32;
	case 4:
		return 40;
	case 5:
		return 48;
	case 6:
		return 56;
	case 7:
		return 64;
	case 8:
		return 80;
	case 9:
		return 96;
	case 10:
		return 112;
	case 11:
		return 128;
	case 12:
		return 144;
	case 13:
		return 160;
	case 14:
		return 176;
	case 15:
		return 192;
	case 16:
		return 224;
	case 17:
		return 256;
	case 18:
		return 288;
	case 19:
		return 320;
	case 20:
		return 352;
	case 21:
		return 384;
	case 22:
		return 416;
	case 23:
		return 448;
	case 24:
		return 0;
	case 25:
		return -1;
	}
};
var format_mp3_CLayer = function() { };
$hxClasses["format.mp3.CLayer"] = format_mp3_CLayer;
format_mp3_CLayer.__name__ = "format.mp3.CLayer";
format_mp3_CLayer.num2Enum = function(l) {
	switch(l) {
	case 1:
		return format_mp3_Layer.Layer3;
	case 2:
		return format_mp3_Layer.Layer2;
	case 3:
		return format_mp3_Layer.Layer1;
	default:
		return format_mp3_Layer.LayerReserved;
	}
};
var format_mp3_CChannelMode = function() { };
$hxClasses["format.mp3.CChannelMode"] = format_mp3_CChannelMode;
format_mp3_CChannelMode.__name__ = "format.mp3.CChannelMode";
format_mp3_CChannelMode.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_ChannelMode.Stereo;
	case 1:
		return format_mp3_ChannelMode.JointStereo;
	case 2:
		return format_mp3_ChannelMode.DualChannel;
	case 3:
		return format_mp3_ChannelMode.Mono;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_CEmphasis = function() { };
$hxClasses["format.mp3.CEmphasis"] = format_mp3_CEmphasis;
format_mp3_CEmphasis.__name__ = "format.mp3.CEmphasis";
format_mp3_CEmphasis.num2Enum = function(c) {
	switch(c) {
	case 0:
		return format_mp3_Emphasis.NoEmphasis;
	case 1:
		return format_mp3_Emphasis.Ms50_15;
	case 2:
		return format_mp3_Emphasis.InvalidEmphasis;
	case 3:
		return format_mp3_Emphasis.CCIT_J17;
	default:
		throw haxe_Exception.thrown("assert");
	}
};
var format_mp3_MPEGVersion = $hxEnums["format.mp3.MPEGVersion"] = { __ename__ : true, __constructs__ : ["MPEG_V1","MPEG_V2","MPEG_V25","MPEG_Reserved"]
	,MPEG_V1: {_hx_index:0,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V2: {_hx_index:1,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_V25: {_hx_index:2,__enum__:"format.mp3.MPEGVersion",toString:$estr}
	,MPEG_Reserved: {_hx_index:3,__enum__:"format.mp3.MPEGVersion",toString:$estr}
};
format_mp3_MPEGVersion.__empty_constructs__ = [format_mp3_MPEGVersion.MPEG_V1,format_mp3_MPEGVersion.MPEG_V2,format_mp3_MPEGVersion.MPEG_V25,format_mp3_MPEGVersion.MPEG_Reserved];
var format_mp3_Layer = $hxEnums["format.mp3.Layer"] = { __ename__ : true, __constructs__ : ["LayerReserved","Layer3","Layer2","Layer1"]
	,LayerReserved: {_hx_index:0,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer3: {_hx_index:1,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer2: {_hx_index:2,__enum__:"format.mp3.Layer",toString:$estr}
	,Layer1: {_hx_index:3,__enum__:"format.mp3.Layer",toString:$estr}
};
format_mp3_Layer.__empty_constructs__ = [format_mp3_Layer.LayerReserved,format_mp3_Layer.Layer3,format_mp3_Layer.Layer2,format_mp3_Layer.Layer1];
var format_mp3_ChannelMode = $hxEnums["format.mp3.ChannelMode"] = { __ename__ : true, __constructs__ : ["Stereo","JointStereo","DualChannel","Mono"]
	,Stereo: {_hx_index:0,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,JointStereo: {_hx_index:1,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,DualChannel: {_hx_index:2,__enum__:"format.mp3.ChannelMode",toString:$estr}
	,Mono: {_hx_index:3,__enum__:"format.mp3.ChannelMode",toString:$estr}
};
format_mp3_ChannelMode.__empty_constructs__ = [format_mp3_ChannelMode.Stereo,format_mp3_ChannelMode.JointStereo,format_mp3_ChannelMode.DualChannel,format_mp3_ChannelMode.Mono];
var format_mp3_Emphasis = $hxEnums["format.mp3.Emphasis"] = { __ename__ : true, __constructs__ : ["NoEmphasis","Ms50_15","CCIT_J17","InvalidEmphasis"]
	,NoEmphasis: {_hx_index:0,__enum__:"format.mp3.Emphasis",toString:$estr}
	,Ms50_15: {_hx_index:1,__enum__:"format.mp3.Emphasis",toString:$estr}
	,CCIT_J17: {_hx_index:2,__enum__:"format.mp3.Emphasis",toString:$estr}
	,InvalidEmphasis: {_hx_index:3,__enum__:"format.mp3.Emphasis",toString:$estr}
};
format_mp3_Emphasis.__empty_constructs__ = [format_mp3_Emphasis.NoEmphasis,format_mp3_Emphasis.Ms50_15,format_mp3_Emphasis.CCIT_J17,format_mp3_Emphasis.InvalidEmphasis];
var format_mp3_FrameType = $hxEnums["format.mp3.FrameType"] = { __ename__ : true, __constructs__ : ["FT_MP3","FT_NONE"]
	,FT_MP3: {_hx_index:0,__enum__:"format.mp3.FrameType",toString:$estr}
	,FT_NONE: {_hx_index:1,__enum__:"format.mp3.FrameType",toString:$estr}
};
format_mp3_FrameType.__empty_constructs__ = [format_mp3_FrameType.FT_MP3,format_mp3_FrameType.FT_NONE];
var format_mp3_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.bits = new format_tools_BitsInput(i);
	this.samples = 0;
	this.sampleSize = 0;
	this.any_read = false;
};
$hxClasses["format.mp3.Reader"] = format_mp3_Reader;
format_mp3_Reader.__name__ = "format.mp3.Reader";
format_mp3_Reader.prototype = {
	skipID3v2: function() {
		this.id3v2_version = this.i.readUInt16();
		this.id3v2_flags = this.i.readByte();
		var size = this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		size = size << 7 | this.i.readByte() & 127;
		this.id3v2_data = this.i.read(size);
	}
	,seekFrame: function() {
		var found = false;
		try {
			var b;
			while(true) {
				b = this.i.readByte();
				if(!this.any_read) {
					this.any_read = true;
					if(b == 73) {
						b = this.i.readByte();
						if(b == 68) {
							b = this.i.readByte();
							if(b == 51) {
								this.skipID3v2();
							}
						}
					}
				}
				if(b == 255) {
					this.bits.nbits = 0;
					b = this.bits.readBits(3);
					if(b == 7) {
						return format_mp3_FrameType.FT_MP3;
					}
				}
			}
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return format_mp3_FrameType.FT_NONE;
			} else {
				throw _g;
			}
		}
	}
	,readFrames: function() {
		var frames = [];
		var ft;
		while(true) {
			ft = this.seekFrame();
			if(!(ft != format_mp3_FrameType.FT_NONE)) {
				break;
			}
			switch(ft._hx_index) {
			case 0:
				var f = this.readFrame();
				if(f != null) {
					frames.push(f);
				}
				break;
			case 1:
				break;
			}
		}
		return frames;
	}
	,readFrameHeader: function() {
		var version = this.bits.readBits(2);
		var layer = this.bits.readBits(2);
		var hasCrc = !this.bits.readBit();
		if(version == format_mp3_MPEG.Reserved || layer == format_mp3_CLayer.LReserved) {
			return null;
		}
		var bitrateIdx = this.bits.readBits(4);
		var bitrate = format_mp3_Tools.getBitrate(version,layer,bitrateIdx);
		var samplingRateIdx = this.bits.readBits(2);
		var samplingRate = format_mp3_Tools.getSamplingRate(version,samplingRateIdx);
		var isPadded = this.bits.readBit();
		var privateBit = this.bits.readBit();
		if(bitrate == format_mp3_Bitrate.BR_Bad || bitrate == format_mp3_Bitrate.BR_Free || samplingRate == format_mp3_SamplingRate.SR_Bad) {
			return null;
		}
		var channelMode = this.bits.readBits(2);
		var isIntensityStereo = this.bits.readBit();
		var isMSStereo = this.bits.readBit();
		var isCopyrighted = this.bits.readBit();
		var isOriginal = this.bits.readBit();
		var emphasis = this.bits.readBits(2);
		var crc16 = 0;
		if(hasCrc) {
			crc16 = this.i.readUInt16();
		}
		return { version : format_mp3_MPEG.num2Enum(version), layer : format_mp3_CLayer.num2Enum(layer), hasCrc : hasCrc, crc16 : crc16, bitrate : bitrate, samplingRate : samplingRate, isPadded : isPadded, privateBit : privateBit, channelMode : format_mp3_CChannelMode.num2Enum(channelMode), isIntensityStereo : isIntensityStereo, isMSStereo : isMSStereo, isCopyrighted : isCopyrighted, isOriginal : isOriginal, emphasis : format_mp3_CEmphasis.num2Enum(emphasis)};
	}
	,readFrame: function() {
		var header = this.readFrameHeader();
		if(header == null || format_mp3_Tools.isInvalidFrameHeader(header)) {
			return null;
		}
		try {
			var data = this.i.read(format_mp3_Tools.getSampleDataSizeHdr(header));
			this.samples += format_mp3_Tools.getSampleCountHdr(header);
			this.sampleSize += data.length;
			return { header : header, data : data};
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				return null;
			} else {
				throw _g;
			}
		}
	}
	,read: function() {
		var fs = this.readFrames();
		return { frames : fs, sampleCount : this.samples, sampleSize : this.sampleSize, id3v2 : this.id3v2_data == null ? null : { versionBytes : this.id3v2_version, flagByte : this.id3v2_flags, data : this.id3v2_data}};
	}
	,__class__: format_mp3_Reader
};
var format_mp3_Tools = function() { };
$hxClasses["format.mp3.Tools"] = format_mp3_Tools;
format_mp3_Tools.__name__ = "format.mp3.Tools";
format_mp3_Tools.getBitrate = function(mpegVersion,layerIdx,bitrateIdx) {
	if(mpegVersion == format_mp3_MPEG.Reserved || layerIdx == format_mp3_CLayer.LReserved) {
		return format_mp3_Bitrate.BR_Bad;
	}
	return (mpegVersion == 3 ? format_mp3_MPEG.V1_Bitrates : format_mp3_MPEG.V2_Bitrates)[layerIdx][bitrateIdx];
};
format_mp3_Tools.getSamplingRate = function(mpegVersion,samplingRateIdx) {
	return format_mp3_MPEG.SamplingRates[mpegVersion][samplingRateIdx];
};
format_mp3_Tools.isInvalidFrameHeader = function(hdr) {
	if(!(hdr.version == format_mp3_MPEGVersion.MPEG_Reserved || hdr.layer == format_mp3_Layer.LayerReserved || hdr.bitrate == format_mp3_Bitrate.BR_Bad || hdr.bitrate == format_mp3_Bitrate.BR_Free)) {
		return hdr.samplingRate == format_mp3_SamplingRate.SR_Bad;
	} else {
		return true;
	}
};
format_mp3_Tools.getSampleDataSize = function(mpegVersion,bitrate,samplingRate,isPadded,hasCrc) {
	return ((mpegVersion == 3 ? 144 : 72) * bitrate * 1000 / samplingRate | 0) + (isPadded ? 1 : 0) - (hasCrc ? 2 : 0) - 4;
};
format_mp3_Tools.getSampleDataSizeHdr = function(hdr) {
	return format_mp3_Tools.getSampleDataSize(format_mp3_MPEG.enum2Num(hdr.version),format_mp3_MPEG.bitrateEnum2Num(hdr.bitrate),format_mp3_MPEG.srEnum2Num(hdr.samplingRate),hdr.isPadded,hdr.hasCrc);
};
format_mp3_Tools.getSampleCount = function(mpegVersion) {
	if(mpegVersion == 3) {
		return 1152;
	} else {
		return 576;
	}
};
format_mp3_Tools.getSampleCountHdr = function(hdr) {
	return format_mp3_Tools.getSampleCount(format_mp3_MPEG.enum2Num(hdr.version));
};
var format_png_Color = $hxEnums["format.png.Color"] = { __ename__ : true, __constructs__ : ["ColGrey","ColTrue","ColIndexed"]
	,ColGrey: ($_=function(alpha) { return {_hx_index:0,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColTrue: ($_=function(alpha) { return {_hx_index:1,alpha:alpha,__enum__:"format.png.Color",toString:$estr}; },$_.__params__ = ["alpha"],$_)
	,ColIndexed: {_hx_index:2,__enum__:"format.png.Color",toString:$estr}
};
format_png_Color.__empty_constructs__ = [format_png_Color.ColIndexed];
var format_png_Chunk = $hxEnums["format.png.Chunk"] = { __ename__ : true, __constructs__ : ["CEnd","CHeader","CData","CPalette","CUnknown"]
	,CEnd: {_hx_index:0,__enum__:"format.png.Chunk",toString:$estr}
	,CHeader: ($_=function(h) { return {_hx_index:1,h:h,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["h"],$_)
	,CData: ($_=function(b) { return {_hx_index:2,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CPalette: ($_=function(b) { return {_hx_index:3,b:b,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CUnknown: ($_=function(id,data) { return {_hx_index:4,id:id,data:data,__enum__:"format.png.Chunk",toString:$estr}; },$_.__params__ = ["id","data"],$_)
};
format_png_Chunk.__empty_constructs__ = [format_png_Chunk.CEnd];
var format_png_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(true);
	this.checkCRC = true;
};
$hxClasses["format.png.Reader"] = format_png_Reader;
format_png_Reader.__name__ = "format.png.Reader";
format_png_Reader.prototype = {
	read: function() {
		var b = 137;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 80;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 78;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 71;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 13;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 26;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var b = 10;
		if(this.i.readByte() != b) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var l = new haxe_ds_List();
		while(true) {
			var c = this.readChunk();
			l.add(c);
			if(c == format_png_Chunk.CEnd) {
				break;
			}
		}
		return l;
	}
	,readHeader: function(i) {
		i.set_bigEndian(true);
		var width = i.readInt32();
		var height = i.readInt32();
		var colbits = i.readByte();
		var color = i.readByte();
		var color1;
		switch(color) {
		case 0:
			color1 = format_png_Color.ColGrey(false);
			break;
		case 2:
			color1 = format_png_Color.ColTrue(false);
			break;
		case 3:
			color1 = format_png_Color.ColIndexed;
			break;
		case 4:
			color1 = format_png_Color.ColGrey(true);
			break;
		case 6:
			color1 = format_png_Color.ColTrue(true);
			break;
		default:
			throw haxe_Exception.thrown("Unknown color model " + color + ":" + colbits);
		}
		var compress = i.readByte();
		var filter = i.readByte();
		if(compress != 0 || filter != 0) {
			throw haxe_Exception.thrown("Invalid header");
		}
		var interlace = i.readByte();
		if(interlace != 0 && interlace != 1) {
			throw haxe_Exception.thrown("Invalid header");
		}
		return { width : width, height : height, colbits : colbits, color : color1, interlaced : interlace == 1};
	}
	,readChunk: function() {
		var dataLen = this.i.readInt32();
		var id = this.i.readString(4);
		var data = this.i.read(dataLen);
		var crc = this.i.readInt32();
		if(this.checkCRC) {
			var c_crc = -1;
			var tmp = (c_crc ^ HxOverrides.cca(id,0)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,1)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,2)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var tmp = (c_crc ^ HxOverrides.cca(id,3)) & 255;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
			c_crc = c_crc >>> 8 ^ tmp;
			var b = data.b.bufferValue;
			var _g = 0;
			var _g1 = data.length;
			while(_g < _g1) {
				var i = _g++;
				var tmp = (c_crc ^ b.bytes[i]) & 255;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				tmp = tmp >>> 1 ^ -(tmp & 1) & -306674912;
				c_crc = c_crc >>> 8 ^ tmp;
			}
			if((c_crc ^ -1) != crc) {
				throw haxe_Exception.thrown("CRC check failure");
			}
		}
		switch(id) {
		case "IDAT":
			return format_png_Chunk.CData(data);
		case "IEND":
			return format_png_Chunk.CEnd;
		case "IHDR":
			return format_png_Chunk.CHeader(this.readHeader(new haxe_io_BytesInput(data)));
		case "PLTE":
			return format_png_Chunk.CPalette(data);
		default:
			return format_png_Chunk.CUnknown(id,data);
		}
	}
	,__class__: format_png_Reader
};
var format_png_Tools = function() { };
$hxClasses["format.png.Tools"] = format_png_Tools;
format_png_Tools.__name__ = "format.png.Tools";
format_png_Tools.getHeader = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 1) {
			var h = c.h;
			return h;
		}
	}
	throw haxe_Exception.thrown("Header not found");
};
format_png_Tools.getPalette = function(d) {
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 3) {
			var b = c.b;
			return b;
		}
	}
	return null;
};
format_png_Tools.extract32 = function(d,bytes,flipY) {
	var h = format_png_Tools.getHeader(d);
	var bgra = bytes == null ? new haxe_io_Bytes(new ArrayBuffer(h.width * h.height * 4)) : bytes;
	var data = null;
	var fullData = null;
	var _g_head = d.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var c = val;
		if(c._hx_index == 2) {
			var b = c.b;
			if(fullData != null) {
				fullData.add(b);
			} else if(data == null) {
				data = b;
			} else {
				fullData = new haxe_io_BytesBuffer();
				fullData.add(data);
				fullData.add(b);
				data = null;
			}
		}
	}
	if(fullData != null) {
		data = fullData.getBytes();
	}
	if(data == null) {
		throw haxe_Exception.thrown("Data not found");
	}
	data = format_tools_Inflate.run(data);
	var r = 0;
	var w = 0;
	var lineDelta = 0;
	if(flipY) {
		lineDelta = -h.width * 8;
		w = (h.height - 1) * (h.width * 4);
	}
	var flipY1 = flipY ? -1 : 1;
	var _g = h.color;
	switch(_g._hx_index) {
	case 0:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 2 : 1) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphvaIdx = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 2) {
							alphvaIdx = data1.b[1];
						}
						break;
					}
				}
			}
		}
		var _g1 = 0;
		var _g2 = h.height;
		while(_g1 < _g2) {
			var y = _g1++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g3 = 0;
					var _g4 = width;
					while(_g3 < _g4) {
						var x = _g3++;
						var v = data.b[r++];
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = v;
						bgra.b[w++] = data.b[r++];
					}
				} else {
					var _g5 = 0;
					var _g6 = width;
					while(_g5 < _g6) {
						var x1 = _g5++;
						var v1 = data.b[r++];
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1;
						bgra.b[w++] = v1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 1:
				var cv = 0;
				var ca = 0;
				if(alpha) {
					var _g7 = 0;
					var _g8 = width;
					while(_g7 < _g8) {
						var x2 = _g7++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						ca += data.b[r++];
						bgra.b[w++] = ca;
					}
				} else {
					var _g9 = 0;
					var _g10 = width;
					while(_g9 < _g10) {
						var x3 = _g9++;
						cv += data.b[r++];
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv;
						bgra.b[w++] = cv == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g11 = 0;
					var _g12 = width;
					while(_g11 < _g12) {
						var x4 = _g11++;
						var v2 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = v2;
						bgra.b[w++] = data.b[r++] + bgra.b[w - stride];
					}
				} else {
					var _g13 = 0;
					var _g14 = width;
					while(_g13 < _g14) {
						var x5 = _g13++;
						var v3 = data.b[r++] + bgra.b[w - stride];
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3;
						bgra.b[w++] = v3 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 3:
				var cv1 = 0;
				var ca1 = 0;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g15 = 0;
					var _g16 = width;
					while(_g15 < _g16) {
						var x6 = _g15++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						ca1 = data.b[r++] + (ca1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca1;
					}
				} else {
					var _g17 = 0;
					var _g18 = width;
					while(_g17 < _g18) {
						var x7 = _g17++;
						cv1 = data.b[r++] + (cv1 + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1;
						bgra.b[w++] = cv1 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				var cv2 = 0;
				var ca2 = 0;
				if(alpha) {
					var _g19 = 0;
					var _g20 = width;
					while(_g19 < _g20) {
						var x8 = _g19++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cv2 + b - c;
						var pa = k - cv2;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						var pos = r++;
						cv2 = (pa <= pb && pa <= pc ? cv2 : pb <= pc ? b : c) + data.b[pos] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = ca2 + b1 - c1;
						var pa1 = k1 - ca2;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						var pos1 = r++;
						ca2 = (pa1 <= pb1 && pa1 <= pc1 ? ca2 : pb1 <= pc1 ? b1 : c1) + data.b[pos1] & 255;
						bgra.b[w++] = ca2;
					}
				} else {
					var _g21 = 0;
					var _g22 = width;
					while(_g21 < _g22) {
						var x9 = _g21++;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cv2 + b2 - c2;
						var pa2 = k2 - cv2;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						var pos2 = r++;
						cv2 = (pa2 <= pb2 && pa2 <= pc2 ? cv2 : pb2 <= pc2 ? b2 : c2) + data.b[pos2] & 255;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2;
						bgra.b[w++] = cv2 == alphvaIdx ? 0 : 255;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 1:
		var alpha = _g.alpha;
		if(h.colbits != 8) {
			throw haxe_Exception.thrown("Unsupported color mode");
		}
		var width = h.width;
		var stride = (alpha ? 4 : 3) * width + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var alphaRed = -1;
		var alphaGreen = -1;
		var alphaBlue = -1;
		if(!alpha) {
			var _g1_head = d.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var t = val;
				if(t._hx_index == 4) {
					if(t.id == "tRNS") {
						var data1 = t.data;
						if(data1.length >= 6) {
							alphaRed = data1.b[1];
							alphaGreen = data1.b[3];
							alphaBlue = data1.b[5];
						}
						break;
					}
				}
			}
		}
		var cr = 0;
		var cg = 0;
		var cb = 0;
		var ca = 0;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			switch(f) {
			case 0:
				if(alpha) {
					var _g2 = 0;
					var _g3 = width;
					while(_g2 < _g3) {
						var x = _g2++;
						bgra.b[w++] = data.b[r + 2];
						bgra.b[w++] = data.b[r + 1];
						bgra.b[w++] = data.b[r];
						bgra.b[w++] = data.b[r + 3];
						r += 4;
					}
				} else {
					var _g4 = 0;
					var _g5 = width;
					while(_g4 < _g5) {
						var x1 = _g4++;
						cb = data.b[r + 2];
						bgra.b[w++] = cb;
						cg = data.b[r + 1];
						bgra.b[w++] = cg;
						cr = data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 1:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g6 = 0;
					var _g7 = width;
					while(_g6 < _g7) {
						var x2 = _g6++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						ca += data.b[r + 3];
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g8 = 0;
					var _g9 = width;
					while(_g8 < _g9) {
						var x3 = _g8++;
						cb += data.b[r + 2];
						bgra.b[w++] = cb;
						cg += data.b[r + 1];
						bgra.b[w++] = cg;
						cr += data.b[r];
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g10 = 0;
					var _g11 = width;
					while(_g10 < _g11) {
						var x4 = _g10++;
						bgra.b[w] = data.b[r + 2] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 1] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r] + bgra.b[w - stride];
						++w;
						bgra.b[w] = data.b[r + 3] + bgra.b[w - stride];
						++w;
						r += 4;
					}
				} else {
					var _g12 = 0;
					var _g13 = width;
					while(_g12 < _g13) {
						var x5 = _g12++;
						cb = data.b[r + 2] + bgra.b[w - stride];
						bgra.b[w] = cb;
						++w;
						cg = data.b[r + 1] + bgra.b[w - stride];
						bgra.b[w] = cg;
						++w;
						cr = data.b[r] + bgra.b[w - stride];
						bgra.b[w] = cr;
						++w;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 3:
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				var stride1 = y == 0 ? 0 : width * 4 * flipY1;
				if(alpha) {
					var _g14 = 0;
					var _g15 = width;
					while(_g14 < _g15) {
						var x6 = _g14++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						ca = data.b[r + 3] + (ca + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g16 = 0;
					var _g17 = width;
					while(_g16 < _g17) {
						var x7 = _g16++;
						cb = data.b[r + 2] + (cb + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cb;
						cg = data.b[r + 1] + (cg + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cg;
						cr = data.b[r] + (cr + bgra.b[w - stride1] >> 1) & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			case 4:
				var stride2 = width * 4 * flipY1;
				ca = 0;
				cb = ca;
				cg = cb;
				cr = cg;
				if(alpha) {
					var _g18 = 0;
					var _g19 = width;
					while(_g18 < _g19) {
						var x8 = _g18++;
						var b = y == 0 ? 0 : bgra.b[w - stride2];
						var c = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k = cb + b - c;
						var pa = k - cb;
						if(pa < 0) {
							pa = -pa;
						}
						var pb = k - b;
						if(pb < 0) {
							pb = -pb;
						}
						var pc = k - c;
						if(pc < 0) {
							pc = -pc;
						}
						cb = (pa <= pb && pa <= pc ? cb : pb <= pc ? b : c) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b1 = y == 0 ? 0 : bgra.b[w - stride2];
						var c1 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k1 = cg + b1 - c1;
						var pa1 = k1 - cg;
						if(pa1 < 0) {
							pa1 = -pa1;
						}
						var pb1 = k1 - b1;
						if(pb1 < 0) {
							pb1 = -pb1;
						}
						var pc1 = k1 - c1;
						if(pc1 < 0) {
							pc1 = -pc1;
						}
						cg = (pa1 <= pb1 && pa1 <= pc1 ? cg : pb1 <= pc1 ? b1 : c1) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b2 = y == 0 ? 0 : bgra.b[w - stride2];
						var c2 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k2 = cr + b2 - c2;
						var pa2 = k2 - cr;
						if(pa2 < 0) {
							pa2 = -pa2;
						}
						var pb2 = k2 - b2;
						if(pb2 < 0) {
							pb2 = -pb2;
						}
						var pc2 = k2 - c2;
						if(pc2 < 0) {
							pc2 = -pc2;
						}
						cr = (pa2 <= pb2 && pa2 <= pc2 ? cr : pb2 <= pc2 ? b2 : c2) + data.b[r] & 255;
						bgra.b[w++] = cr;
						var b3 = y == 0 ? 0 : bgra.b[w - stride2];
						var c3 = x8 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k3 = ca + b3 - c3;
						var pa3 = k3 - ca;
						if(pa3 < 0) {
							pa3 = -pa3;
						}
						var pb3 = k3 - b3;
						if(pb3 < 0) {
							pb3 = -pb3;
						}
						var pc3 = k3 - c3;
						if(pc3 < 0) {
							pc3 = -pc3;
						}
						ca = (pa3 <= pb3 && pa3 <= pc3 ? ca : pb3 <= pc3 ? b3 : c3) + data.b[r + 3] & 255;
						bgra.b[w++] = ca;
						r += 4;
					}
				} else {
					var _g20 = 0;
					var _g21 = width;
					while(_g20 < _g21) {
						var x9 = _g20++;
						var b4 = y == 0 ? 0 : bgra.b[w - stride2];
						var c4 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k4 = cb + b4 - c4;
						var pa4 = k4 - cb;
						if(pa4 < 0) {
							pa4 = -pa4;
						}
						var pb4 = k4 - b4;
						if(pb4 < 0) {
							pb4 = -pb4;
						}
						var pc4 = k4 - c4;
						if(pc4 < 0) {
							pc4 = -pc4;
						}
						cb = (pa4 <= pb4 && pa4 <= pc4 ? cb : pb4 <= pc4 ? b4 : c4) + data.b[r + 2] & 255;
						bgra.b[w++] = cb;
						var b5 = y == 0 ? 0 : bgra.b[w - stride2];
						var c5 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k5 = cg + b5 - c5;
						var pa5 = k5 - cg;
						if(pa5 < 0) {
							pa5 = -pa5;
						}
						var pb5 = k5 - b5;
						if(pb5 < 0) {
							pb5 = -pb5;
						}
						var pc5 = k5 - c5;
						if(pc5 < 0) {
							pc5 = -pc5;
						}
						cg = (pa5 <= pb5 && pa5 <= pc5 ? cg : pb5 <= pc5 ? b5 : c5) + data.b[r + 1] & 255;
						bgra.b[w++] = cg;
						var b6 = y == 0 ? 0 : bgra.b[w - stride2];
						var c6 = x9 == 0 || y == 0 ? 0 : bgra.b[w - stride2 - 4];
						var k6 = cr + b6 - c6;
						var pa6 = k6 - cr;
						if(pa6 < 0) {
							pa6 = -pa6;
						}
						var pb6 = k6 - b6;
						if(pb6 < 0) {
							pb6 = -pb6;
						}
						var pc6 = k6 - c6;
						if(pc6 < 0) {
							pc6 = -pc6;
						}
						cr = (pa6 <= pb6 && pa6 <= pc6 ? cr : pb6 <= pc6 ? b6 : c6) + data.b[r] & 255;
						bgra.b[w++] = cr;
						bgra.b[w++] = cr == alphaRed && cg == alphaGreen && cb == alphaBlue ? 0 : 255;
						r += 3;
					}
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
			w += lineDelta;
		}
		break;
	case 2:
		var pal = format_png_Tools.getPalette(d);
		if(pal == null) {
			throw haxe_Exception.thrown("PNG Palette is missing");
		}
		var alpha = null;
		var _g1_head = d.h;
		while(_g1_head != null) {
			var val = _g1_head.item;
			_g1_head = _g1_head.next;
			var t = val;
			if(t._hx_index == 4) {
				if(t.id == "tRNS") {
					var data1 = t.data;
					alpha = data1;
					break;
				}
			}
		}
		if(alpha != null && alpha.length < 1 << h.colbits) {
			var alpha2 = new haxe_io_Bytes(new ArrayBuffer(1 << h.colbits));
			alpha2.blit(0,alpha,0,alpha.length);
			alpha2.fill(alpha.length,alpha2.length - alpha.length,255);
			alpha = alpha2;
		}
		var width = h.width;
		var stride = Math.ceil(width * h.colbits / 8) + 1;
		if(data.length < h.height * stride) {
			throw haxe_Exception.thrown("Not enough data");
		}
		var tmp = h.width * h.colbits;
		var rline = tmp >> 3;
		var _g = 0;
		var _g1 = h.height;
		while(_g < _g1) {
			var y = _g++;
			var f = data.b[r++];
			if(f == 0) {
				r += rline;
				continue;
			}
			switch(f) {
			case 1:
				var c = 0;
				var _g2 = 0;
				var _g3 = width;
				while(_g2 < _g3) {
					var x = _g2++;
					var v = data.b[r];
					c += v;
					data.b[r++] = c & 255;
				}
				break;
			case 2:
				var stride = y == 0 ? 0 : rline + 1;
				var _g4 = 0;
				var _g5 = width;
				while(_g4 < _g5) {
					var x1 = _g4++;
					var v1 = data.b[r];
					data.b[r] = v1 + data.b[r - stride];
					++r;
				}
				break;
			case 3:
				var c1 = 0;
				var stride1 = y == 0 ? 0 : rline + 1;
				var _g6 = 0;
				var _g7 = width;
				while(_g6 < _g7) {
					var x2 = _g6++;
					var v2 = data.b[r];
					c1 = v2 + (c1 + data.b[r - stride1] >> 1) & 255;
					data.b[r++] = c1;
				}
				break;
			case 4:
				var stride2 = rline + 1;
				var c2 = 0;
				var _g8 = 0;
				var _g9 = width;
				while(_g8 < _g9) {
					var x3 = _g8++;
					var v3 = data.b[r];
					var numChannels = 1;
					if(numChannels == null) {
						numChannels = 4;
					}
					var b = y == 0 ? 0 : data.b[r - stride2];
					var c3 = x3 == 0 || y == 0 ? 0 : data.b[r - stride2 - numChannels];
					var k = c2 + b - c3;
					var pa = k - c2;
					if(pa < 0) {
						pa = -pa;
					}
					var pb = k - b;
					if(pb < 0) {
						pb = -pb;
					}
					var pc = k - c3;
					if(pc < 0) {
						pc = -pc;
					}
					c2 = (pa <= pb && pa <= pc ? c2 : pb <= pc ? b : c3) + v3 & 255;
					data.b[r++] = c2;
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid filter " + f);
			}
		}
		var r = 0;
		if(h.colbits == 8) {
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = data.b[r++];
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else if(h.colbits < 8) {
			var req = h.colbits;
			var mask = (1 << req) - 1;
			var _g = 0;
			var _g1 = h.height;
			while(_g < _g1) {
				var y = _g++;
				++r;
				var bits = 0;
				var nbits = 0;
				var _g2 = 0;
				var _g3 = h.width;
				while(_g2 < _g3) {
					var x = _g2++;
					if(nbits < req) {
						bits = bits << 8 | data.b[r++];
						nbits += 8;
					}
					var c = bits >>> nbits - req & mask;
					nbits -= req;
					bgra.b[w++] = pal.b[c * 3 + 2];
					bgra.b[w++] = pal.b[c * 3 + 1];
					bgra.b[w++] = pal.b[c * 3];
					bgra.b[w++] = alpha != null ? alpha.b[c] : 255;
				}
				w += lineDelta;
			}
		} else {
			throw haxe_Exception.thrown(h.colbits + " indexed bits per pixel not supported");
		}
		break;
	}
	return bgra;
};
var format_tga_ImageOrigin = $hxEnums["format.tga.ImageOrigin"] = { __ename__ : true, __constructs__ : ["BottomLeft","BottomRight","TopLeft","TopRight"]
	,BottomLeft: {_hx_index:0,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,BottomRight: {_hx_index:1,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopLeft: {_hx_index:2,__enum__:"format.tga.ImageOrigin",toString:$estr}
	,TopRight: {_hx_index:3,__enum__:"format.tga.ImageOrigin",toString:$estr}
};
format_tga_ImageOrigin.__empty_constructs__ = [format_tga_ImageOrigin.BottomLeft,format_tga_ImageOrigin.BottomRight,format_tga_ImageOrigin.TopLeft,format_tga_ImageOrigin.TopRight];
var format_tga_ImageType = $hxEnums["format.tga.ImageType"] = { __ename__ : true, __constructs__ : ["NoImage","UncompressedColorMapped","UncompressedTrueColor","UncompressedBlackAndWhite","RunLengthColorMapped","RunLengthTrueColor","RunLengthBlackAndWhite","Unknown"]
	,NoImage: {_hx_index:0,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedColorMapped: {_hx_index:1,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedTrueColor: {_hx_index:2,__enum__:"format.tga.ImageType",toString:$estr}
	,UncompressedBlackAndWhite: {_hx_index:3,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthColorMapped: {_hx_index:4,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthTrueColor: {_hx_index:5,__enum__:"format.tga.ImageType",toString:$estr}
	,RunLengthBlackAndWhite: {_hx_index:6,__enum__:"format.tga.ImageType",toString:$estr}
	,Unknown: ($_=function(type) { return {_hx_index:7,type:type,__enum__:"format.tga.ImageType",toString:$estr}; },$_.__params__ = ["type"],$_)
};
format_tga_ImageType.__empty_constructs__ = [format_tga_ImageType.NoImage,format_tga_ImageType.UncompressedColorMapped,format_tga_ImageType.UncompressedTrueColor,format_tga_ImageType.UncompressedBlackAndWhite,format_tga_ImageType.RunLengthColorMapped,format_tga_ImageType.RunLengthTrueColor,format_tga_ImageType.RunLengthBlackAndWhite];
var format_tga_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.tga.Reader"] = format_tga_Reader;
format_tga_Reader.__name__ = "format.tga.Reader";
format_tga_Reader.prototype = {
	read: function() {
		var idLength = this.i.readByte();
		var header = this.readHeader();
		var id = idLength == 0 ? "" : this.i.readString(idLength);
		var colorMap = this.readColorMapData(header);
		return { header : header, imageId : id, colorMapData : colorMap, imageData : this.readImageData(header,colorMap), developerData : null};
	}
	,readHeader: function() {
		var colorMapType = this.i.readByte();
		var dataType;
		var dataId = this.i.readByte();
		switch(dataId) {
		case 0:
			dataType = format_tga_ImageType.NoImage;
			break;
		case 1:
			dataType = format_tga_ImageType.UncompressedColorMapped;
			break;
		case 2:
			dataType = format_tga_ImageType.UncompressedTrueColor;
			break;
		case 3:
			dataType = format_tga_ImageType.UncompressedBlackAndWhite;
			break;
		case 9:
			dataType = format_tga_ImageType.RunLengthColorMapped;
			break;
		case 10:
			dataType = format_tga_ImageType.RunLengthTrueColor;
			break;
		case 11:
			dataType = format_tga_ImageType.RunLengthBlackAndWhite;
			break;
		default:
			dataType = format_tga_ImageType.Unknown(dataId);
		}
		var colorMapOrigin = this.i.readInt16();
		var colorMapLength = this.i.readInt16();
		var colorMapDepth = this.i.readByte();
		var xOrigin = this.i.readInt16();
		var yOrigin = this.i.readInt16();
		var width = this.i.readInt16();
		var height = this.i.readInt16();
		var depth = this.i.readByte();
		var descriptor = this.i.readByte();
		var origin;
		switch(descriptor & 48) {
		case 16:
			origin = format_tga_ImageOrigin.BottomRight;
			break;
		case 32:
			origin = format_tga_ImageOrigin.TopLeft;
			break;
		case 48:
			origin = format_tga_ImageOrigin.TopRight;
			break;
		default:
			origin = format_tga_ImageOrigin.BottomLeft;
		}
		return { colorMapType : colorMapType, imageType : dataType, colorMapFirstIndex : colorMapOrigin, colorMapLength : colorMapLength, colorMapEntrySize : colorMapDepth, xOrigin : xOrigin, yOrigin : yOrigin, width : width, height : height, bitsPerPixel : depth, alphaChannelBits : descriptor & 15, imageOrigin : origin};
	}
	,readColorMapData: function(header) {
		if(header.colorMapType == 0) {
			return null;
		}
		return this.readPixels(header.colorMapEntrySize,header.colorMapLength,header.alphaChannelBits,false);
	}
	,readImageData: function(header,colorMap) {
		switch(header.imageType._hx_index) {
		case 0:
			return null;
		case 1:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,false);
		case 2:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 3:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,false);
		case 4:
			return this.readIndexes(header.bitsPerPixel,header.width * header.height,colorMap,header.colorMapFirstIndex,true);
		case 5:
			return this.readPixels(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		case 6:
			return this.readMono(header.bitsPerPixel,header.width * header.height,header.alphaChannelBits,true);
		default:
			throw haxe_Exception.thrown("Unsupported image data type!");
		}
	}
	,readPixels: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var bitFieldSize = bitsPerPixel / 3 | 0;
		if(bitFieldSize > 8) {
			bitFieldSize = 8;
		}
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixel2);
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			parsePixel = $bind(this,this.parsePixel3);
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			parsePixel = $bind(this,this.parsePixel4);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readMono: function(bitsPerPixel,amount,alphaChannelBits,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var alpha = alphaChannelBits != 0;
		var parsePixel;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			parsePixel = $bind(this,this.parsePixel1);
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			parsePixel = $bind(this,this.parsePixelGreyAlpha);
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var rleChunk;
			var i = 0;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = parsePixel(readEntry(),alpha);
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = parsePixel(readEntry(),alpha);
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = parsePixel(readEntry(),alpha);
			}
		}
		return list;
	}
	,readIndexes: function(bitsPerPixel,amount,colorMap,offset,rle) {
		var this1 = new Array(amount);
		var list = this1;
		var readEntry;
		switch(bitsPerPixel) {
		case 8:
			readEntry = ($_=this.i,$bind($_,$_.readByte));
			break;
		case 16:
			readEntry = ($_=this.i,$bind($_,$_.readUInt16));
			break;
		case 24:
			readEntry = ($_=this.i,$bind($_,$_.readUInt24));
			break;
		case 32:
			readEntry = ($_=this.i,$bind($_,$_.readInt32));
			break;
		default:
			throw haxe_Exception.thrown("Unsupported bits per pixels amount!");
		}
		if(rle) {
			var i = 0;
			var rleChunk;
			while(i < amount) {
				rleChunk = this.i.readByte();
				if((rleChunk & 128) != 0) {
					rleChunk &= 127;
					var pixel = colorMap[offset + readEntry()];
					while(rleChunk >= 0) {
						list[i++] = pixel;
						--rleChunk;
					}
				} else {
					rleChunk &= 127;
					while(rleChunk >= 0) {
						list[i++] = colorMap[offset + readEntry()];
						--rleChunk;
					}
				}
			}
		} else {
			var _g = 0;
			var _g1 = amount;
			while(_g < _g1) {
				var i = _g++;
				list[i] = colorMap[offset + readEntry()];
			}
		}
		return list;
	}
	,parsePixel1: function(value,alpha) {
		return value << 16 | value << 8 | value;
	}
	,parsePixelGreyAlpha: function(value,alpha) {
		return (alpha ? (value & 65280) << 16 : 0) | this.parsePixel1(value & 255,false);
	}
	,parsePixel2: function(value,alpha) {
		return (alpha ? (value & 32768) == 1 ? -16777216 : 0 : 0) | (((value & 31744) >> 10) / 31 * 255 | 0) << 16 | (((value & 992) >> 5) / 31 * 255 | 0) << 8 | ((value & 31) / 31 * 255 | 0);
	}
	,parsePixel3: function(value,alpha) {
		return value;
	}
	,parsePixel4: function(value,alpha) {
		return value;
	}
	,__class__: format_tga_Reader
};
var format_tools_BitsInput = function(i) {
	this.i = i;
	this.nbits = 0;
	this.bits = 0;
};
$hxClasses["format.tools.BitsInput"] = format_tools_BitsInput;
format_tools_BitsInput.__name__ = "format.tools.BitsInput";
format_tools_BitsInput.prototype = {
	readBits: function(n) {
		if(this.nbits >= n) {
			var c = this.nbits - n;
			var k = this.bits >>> c & (1 << n) - 1;
			this.nbits = c;
			return k;
		}
		var k = this.i.readByte();
		if(this.nbits >= 24) {
			if(n > 31) {
				throw haxe_Exception.thrown("Bits error");
			}
			var c = 8 + this.nbits - n;
			var d = this.bits & (1 << this.nbits) - 1;
			d = d << 8 - c | k << c;
			this.bits = k;
			this.nbits = c;
			return d;
		}
		this.bits = this.bits << 8 | k;
		this.nbits += 8;
		return this.readBits(n);
	}
	,readBit: function() {
		if(this.nbits == 0) {
			this.bits = this.i.readByte();
			this.nbits = 8;
		}
		this.nbits--;
		return (this.bits >>> this.nbits & 1) == 1;
	}
	,__class__: format_tools_BitsInput
};
var format_tools_Inflate = function() { };
$hxClasses["format.tools.Inflate"] = format_tools_Inflate;
format_tools_Inflate.__name__ = "format.tools.Inflate";
format_tools_Inflate.run = function(bytes) {
	return haxe_zip_Uncompress.run(bytes);
};
var format_wav_WAVEFormat = $hxEnums["format.wav.WAVEFormat"] = { __ename__ : true, __constructs__ : ["WF_PCM"]
	,WF_PCM: {_hx_index:0,__enum__:"format.wav.WAVEFormat",toString:$estr}
};
format_wav_WAVEFormat.__empty_constructs__ = [format_wav_WAVEFormat.WF_PCM];
var format_wav_Reader = function(i) {
	this.i = i;
	i.set_bigEndian(false);
};
$hxClasses["format.wav.Reader"] = format_wav_Reader;
format_wav_Reader.__name__ = "format.wav.Reader";
format_wav_Reader.prototype = {
	read: function() {
		if(this.i.readString(4) != "RIFF") {
			throw haxe_Exception.thrown("RIFF header expected");
		}
		var len = this.i.readInt32();
		if(this.i.readString(4) != "WAVE") {
			throw haxe_Exception.thrown("WAVE signature not found");
		}
		var fmt = this.i.readString(4);
		_hx_loop1: while(fmt != "fmt ") switch(fmt) {
		case "JUNK":
			var junkLen = this.i.readInt32();
			this.i.read(junkLen);
			fmt = this.i.readString(4);
			break;
		case "bext":
			var bextLen = this.i.readInt32();
			this.i.read(bextLen);
			fmt = this.i.readString(4);
			break;
		default:
			break _hx_loop1;
		}
		if(fmt != "fmt ") {
			throw haxe_Exception.thrown("unsupported wave chunk " + fmt);
		}
		var fmtlen = this.i.readInt32();
		var format;
		switch(this.i.readUInt16()) {
		case 1:case 3:
			format = format_wav_WAVEFormat.WF_PCM;
			break;
		default:
			throw haxe_Exception.thrown("only PCM (uncompressed) WAV files are supported");
		}
		var channels = this.i.readUInt16();
		var samplingRate = this.i.readInt32();
		var byteRate = this.i.readInt32();
		var blockAlign = this.i.readUInt16();
		var bitsPerSample = this.i.readUInt16();
		if(fmtlen > 16) {
			this.i.read(fmtlen - 16);
		}
		var nextChunk = this.i.readString(4);
		while(nextChunk != "data") {
			this.i.read(this.i.readInt32());
			nextChunk = this.i.readString(4);
		}
		if(nextChunk != "data") {
			throw haxe_Exception.thrown("expected data subchunk");
		}
		var datalen = this.i.readInt32();
		var data;
		try {
			data = this.i.read(datalen);
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw haxe_Exception.thrown("Invalid chunk data length");
			} else {
				throw _g;
			}
		}
		var cuePoints = [];
		try {
			while(true) {
				var nextChunk = this.i.readString(4);
				if(nextChunk == "cue ") {
					this.i.readInt32();
					var nbCuePoints = this.i.readInt32();
					var _g = 0;
					var _g1 = nbCuePoints;
					while(_g < _g1) {
						var _ = _g++;
						var cueId = this.i.readInt32();
						this.i.readInt32();
						this.i.readString(4);
						this.i.readInt32();
						this.i.readInt32();
						var cueSampleOffset = this.i.readInt32();
						cuePoints.push({ id : cueId, sampleOffset : cueSampleOffset});
					}
				} else {
					this.i.read(this.i.readInt32());
				}
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return { header : { format : format, channels : channels, samplingRate : samplingRate, byteRate : byteRate, blockAlign : blockAlign, bitsPerSample : bitsPerSample}, data : data, cuePoints : cuePoints};
	}
	,__class__: format_wav_Reader
};
var h2d_Bitmap = function(tile,parent) {
	h2d_Drawable.call(this,parent);
	this.set_tile(tile);
};
$hxClasses["h2d.Bitmap"] = h2d_Bitmap;
h2d_Bitmap.__name__ = "h2d.Bitmap";
h2d_Bitmap.__super__ = h2d_Drawable;
h2d_Bitmap.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			if(this.width == null && this.height == null) {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.tile.width,this.tile.height);
			} else {
				this.addBounds(relativeTo,out,this.tile.dx,this.tile.dy,this.width != null ? this.width : this.tile.width * this.height / this.tile.height,this.height != null ? this.height : this.tile.height * this.width / this.tile.width);
			}
		}
	}
	,set_tile: function(t) {
		if(this.tile == t) {
			return t;
		}
		this.tile = t;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t;
	}
	,draw: function(ctx) {
		if(this.width == null && this.height == null) {
			this.emitTile(ctx,this.tile);
			return;
		}
		if(this.tile == null) {
			this.set_tile(h2d_Tile.fromColor(16711935));
		}
		var ow = this.tile.width;
		var oh = this.tile.height;
		this.tile.width = this.width != null ? this.width : ow * this.height / oh;
		this.tile.height = this.height != null ? this.height : oh * this.width / ow;
		this.emitTile(ctx,this.tile);
		this.tile.width = ow;
		this.tile.height = oh;
	}
	,__class__: h2d_Bitmap
});
var h2d_BlendMode = $hxEnums["h2d.BlendMode"] = { __ename__ : true, __constructs__ : ["None","Alpha","Add","AlphaAdd","SoftAdd","Multiply","AlphaMultiply","Erase","Screen","Sub","Max","Min"]
	,None: {_hx_index:0,__enum__:"h2d.BlendMode",toString:$estr}
	,Alpha: {_hx_index:1,__enum__:"h2d.BlendMode",toString:$estr}
	,Add: {_hx_index:2,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaAdd: {_hx_index:3,__enum__:"h2d.BlendMode",toString:$estr}
	,SoftAdd: {_hx_index:4,__enum__:"h2d.BlendMode",toString:$estr}
	,Multiply: {_hx_index:5,__enum__:"h2d.BlendMode",toString:$estr}
	,AlphaMultiply: {_hx_index:6,__enum__:"h2d.BlendMode",toString:$estr}
	,Erase: {_hx_index:7,__enum__:"h2d.BlendMode",toString:$estr}
	,Screen: {_hx_index:8,__enum__:"h2d.BlendMode",toString:$estr}
	,Sub: {_hx_index:9,__enum__:"h2d.BlendMode",toString:$estr}
	,Max: {_hx_index:10,__enum__:"h2d.BlendMode",toString:$estr}
	,Min: {_hx_index:11,__enum__:"h2d.BlendMode",toString:$estr}
};
h2d_BlendMode.__empty_constructs__ = [h2d_BlendMode.None,h2d_BlendMode.Alpha,h2d_BlendMode.Add,h2d_BlendMode.AlphaAdd,h2d_BlendMode.SoftAdd,h2d_BlendMode.Multiply,h2d_BlendMode.AlphaMultiply,h2d_BlendMode.Erase,h2d_BlendMode.Screen,h2d_BlendMode.Sub,h2d_BlendMode.Max,h2d_BlendMode.Min];
var h2d_Camera = function(scene) {
	this.followRotation = false;
	this.posChanged = true;
	this.x = 0;
	this.posChanged = true;
	this.y = 0;
	this.posChanged = true;
	this.scaleX = 1;
	this.posChanged = true;
	this.scaleY = 1;
	this.posChanged = true;
	this.rotation = 0;
	this.posChanged = true;
	this.anchorX = 0;
	this.posChanged = true;
	this.anchorY = 0;
	this.viewX = 0;
	this.viewY = 0;
	this.viewW = 1;
	this.viewH = 1;
	this.visible = true;
	if(scene != null) {
		scene.addCamera(this);
	}
};
$hxClasses["h2d.Camera"] = h2d_Camera;
h2d_Camera.__name__ = "h2d.Camera";
h2d_Camera.prototype = {
	layerVisible: function(layer) {
		return true;
	}
	,enter: function(ctx) {
		ctx.pushCamera(this);
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.pushRenderZone(this.viewX * this.scene.width,this.viewY * this.scene.height,this.viewW * this.scene.width,this.viewH * this.scene.height);
			ctx.inFilter = old;
		}
	}
	,exit: function(ctx) {
		if(this.clipViewport) {
			var old = ctx.inFilter;
			ctx.inFilter = null;
			ctx.popRenderZone();
			ctx.inFilter = old;
		}
		ctx.popCamera();
	}
	,sync: function(ctx,force) {
		if(force == null) {
			force = false;
		}
		if(this.scene == null) {
			return;
		}
		if(this.follow != null) {
			this.posChanged = true;
			this.x = this.follow.absX;
			this.posChanged = true;
			this.y = this.follow.absY;
			if(this.followRotation) {
				this.posChanged = true;
				this.rotation = -this.follow.rotation;
			}
		}
		if(this.posChanged || force) {
			if(this.rotation == 0) {
				this.matA = this.scaleX;
				this.matB = 0;
				this.matC = 0;
				this.matD = this.scaleY;
			} else {
				var cr = Math.cos(this.rotation);
				var sr = Math.sin(this.rotation);
				this.matA = this.scaleX * cr;
				this.matB = this.scaleX * sr;
				this.matC = this.scaleY * -sr;
				this.matD = this.scaleY * cr;
			}
			this.absX = Math.round(-(this.x * this.matA + this.y * this.matC) + this.scene.width * this.anchorX * this.viewW + this.scene.width * this.viewX);
			this.absY = Math.round(-(this.x * this.matB + this.y * this.matD) + this.scene.height * this.anchorY * this.viewH + this.scene.height * this.viewY);
			this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
			this.posChanged = false;
		}
	}
	,eventToCamera: function(e) {
		var x = (e.relX - this.scene.offsetX) / this.scene.viewportScaleX - this.absX;
		var y = (e.relY - this.scene.offsetY) / this.scene.viewportScaleY - this.absY;
		e.relX = (x * this.matD - y * this.matC) * this.invDet;
		e.relY = (-x * this.matB + y * this.matA) * this.invDet;
	}
	,__class__: h2d_Camera
};
var h2d_FlowAlign = $hxEnums["h2d.FlowAlign"] = { __ename__ : true, __constructs__ : ["Top","Left","Right","Middle","Bottom"]
	,Top: {_hx_index:0,__enum__:"h2d.FlowAlign",toString:$estr}
	,Left: {_hx_index:1,__enum__:"h2d.FlowAlign",toString:$estr}
	,Right: {_hx_index:2,__enum__:"h2d.FlowAlign",toString:$estr}
	,Middle: {_hx_index:3,__enum__:"h2d.FlowAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.FlowAlign",toString:$estr}
};
h2d_FlowAlign.__empty_constructs__ = [h2d_FlowAlign.Top,h2d_FlowAlign.Left,h2d_FlowAlign.Right,h2d_FlowAlign.Middle,h2d_FlowAlign.Bottom];
var h2d_FlowLayout = $hxEnums["h2d.FlowLayout"] = { __ename__ : true, __constructs__ : ["Horizontal","Vertical","Stack"]
	,Horizontal: {_hx_index:0,__enum__:"h2d.FlowLayout",toString:$estr}
	,Vertical: {_hx_index:1,__enum__:"h2d.FlowLayout",toString:$estr}
	,Stack: {_hx_index:2,__enum__:"h2d.FlowLayout",toString:$estr}
};
h2d_FlowLayout.__empty_constructs__ = [h2d_FlowLayout.Horizontal,h2d_FlowLayout.Vertical,h2d_FlowLayout.Stack];
var h2d_FlowOverflow = $hxEnums["h2d.FlowOverflow"] = { __ename__ : true, __constructs__ : ["Expand","Limit","Hidden"]
	,Expand: {_hx_index:0,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Limit: {_hx_index:1,__enum__:"h2d.FlowOverflow",toString:$estr}
	,Hidden: {_hx_index:2,__enum__:"h2d.FlowOverflow",toString:$estr}
};
h2d_FlowOverflow.__empty_constructs__ = [h2d_FlowOverflow.Expand,h2d_FlowOverflow.Limit,h2d_FlowOverflow.Hidden];
var h2d_FlowProperties = function(elt) {
	this.constraint = true;
	this.lineBreak = false;
	this.calculatedHeight = 0;
	this.calculatedWidth = 0;
	this.offsetY = 0;
	this.offsetX = 0;
	this.isAbsolute = false;
	this.paddingBottom = 0;
	this.paddingRight = 0;
	this.paddingTop = 0;
	this.paddingLeft = 0;
	this.elt = elt;
};
$hxClasses["h2d.FlowProperties"] = h2d_FlowProperties;
h2d_FlowProperties.__name__ = "h2d.FlowProperties";
h2d_FlowProperties.prototype = {
	set_isAbsolute: function(a) {
		if(a) {
			this.elt.constraintSize(-1,-1);
			this.isBreak = false;
		}
		return this.isAbsolute = a;
	}
	,__class__: h2d_FlowProperties
};
var h2d_Flow = function(parent) {
	this.realMinHeight = -1;
	this.realMinWidth = -1;
	this.realMaxHeight = -1;
	this.realMaxWidth = -1;
	this.constraintHeight = -1;
	this.constraintWidth = -1;
	this.calculatedHeight = 0.;
	this.calculatedWidth = 0.;
	this.properties = [];
	this.fillHeight = false;
	this.fillWidth = false;
	this.reverse = false;
	this.multiline = false;
	this.isInline = true;
	this.layout = h2d_FlowLayout.Horizontal;
	this.borderHeight = 0;
	this.borderWidth = 0;
	this.verticalSpacing = 0;
	this.horizontalSpacing = 0;
	this.paddingBottom = 0;
	this.paddingTop = 0;
	this.paddingRight = 0;
	this.paddingLeft = 0;
	this.overflow = h2d_FlowOverflow.Expand;
	this.needReflow = true;
	this.tmpBounds = new h2d_col_Bounds();
	h2d_Object.call(this,parent);
};
$hxClasses["h2d.Flow"] = h2d_Flow;
h2d_Flow.__name__ = "h2d.Flow";
h2d_Flow.__super__ = h2d_Object;
h2d_Flow.prototype = $extend(h2d_Object.prototype,{
	getProperties: function(e) {
		this.set_needReflow(true);
		return this.properties[this.getChildIndex(e)];
	}
	,set_layout: function(v) {
		if(this.layout == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.layout = v == null ? h2d_FlowLayout.Horizontal : v;
	}
	,set_horizontalAlign: function(v) {
		if(this.horizontalAlign == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.horizontalAlign = v;
	}
	,set_needReflow: function(v) {
		if(this.needReflow == v) {
			return v;
		}
		if(v) {
			if(this.parentContainer != null) {
				this.parentContainer.contentChanged(this);
			}
		}
		return this.needReflow = v;
	}
	,set_padding: function(v) {
		this.set_paddingLeft(v);
		this.set_paddingTop(v);
		this.set_paddingRight(v);
		this.set_paddingBottom(v);
		return v;
	}
	,get_outerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth);
	}
	,get_outerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight);
	}
	,get_innerWidth: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedWidth) - (this.paddingLeft + this.paddingRight);
	}
	,get_innerHeight: function() {
		if(this.needReflow) {
			this.reflow();
		}
		return Math.ceil(this.calculatedHeight) - (this.paddingTop + this.paddingBottom);
	}
	,set_paddingLeft: function(v) {
		if(this.paddingLeft == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingLeft = v;
	}
	,set_paddingRight: function(v) {
		if(this.paddingRight == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingRight = v;
	}
	,set_paddingTop: function(v) {
		if(this.paddingTop == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingTop = v;
	}
	,set_paddingBottom: function(v) {
		if(this.paddingBottom == v) {
			return v;
		}
		this.set_needReflow(true);
		return this.paddingBottom = v;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.constraintHeight = height;
		this.isConstraint = true;
		this.updateConstraint();
	}
	,contentChanged: function(s) {
		while(s.parent != this) s = s.parent;
		if(this.getProperties(s).isAbsolute) {
			return;
		}
		this.set_needReflow(true);
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		if(this.needReflow) {
			this.reflow();
		}
		if(forSize) {
			if(!this.isInline) {
				h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,true);
			}
			if(this.calculatedWidth != 0) {
				if(this.posChanged) {
					this.calcAbsPos();
					var _g = 0;
					var _g1 = this.children;
					while(_g < _g1.length) {
						var c = _g1[_g];
						++_g;
						c.posChanged = true;
					}
					this.posChanged = false;
				}
				this.addBounds(relativeTo,out,0,0,this.calculatedWidth,this.calculatedHeight);
			}
		} else {
			h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		}
	}
	,setParentContainer: function(c) {
		this.parentContainer = c;
	}
	,addChildAt: function(s,pos) {
		if(this.background != null) {
			++pos;
		}
		if(this.interactive != null) {
			++pos;
		}
		var fp = this.getProperties(s);
		h2d_Object.prototype.addChildAt.call(this,s,pos);
		if(fp == null) {
			fp = new h2d_FlowProperties(s);
		} else {
			HxOverrides.remove(this.properties,fp);
		}
		this.properties.splice(pos,0,fp);
		this.set_needReflow(true);
		s.setParentContainer(this);
	}
	,removeChild: function(s) {
		var index = this.getChildIndex(s);
		h2d_Object.prototype.removeChild.call(this,s);
		if(index >= 0) {
			this.set_needReflow(true);
			this.properties.splice(index,1);
			s.constraintSize(-1,-1);
		}
		if(s != null) {
			if(s == this.background) {
				this.set_backgroundTile(null);
			}
			if(s == this.interactive) {
				this.set_enableInteractive(false);
			}
		}
	}
	,removeChildren: function() {
		var k = 0;
		while(this.children.length > k) {
			var c = this.children[k];
			if(c == this.background || c == this.interactive || c == this.debugGraphics) {
				++k;
			} else {
				this.removeChild(c);
			}
		}
	}
	,sync: function(ctx) {
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = ctx.scene;
			var cw = this.fillWidth ? scene.width : -1;
			var ch = this.fillHeight ? scene.height : -1;
			if(cw != this.constraintWidth || ch != this.constraintHeight) {
				this.set_needReflow(true);
			}
		}
		if(this.needReflow) {
			this.reflow();
		}
		h2d_Object.prototype.sync.call(this,ctx);
	}
	,drawRec: function(ctx) {
		if(this.overflow == h2d_FlowOverflow.Hidden) {
			if(this.posChanged) {
				this.calcAbsPos();
				var _g = 0;
				var _g1 = this.children;
				while(_g < _g1.length) {
					var c = _g1[_g];
					++_g;
					c.posChanged = true;
				}
				this.posChanged = false;
			}
			var a = this.get_outerWidth();
			var b = this.maxWidth;
			var a1 = this.get_outerHeight();
			var b1 = this.maxHeight;
			h2d_Mask.maskWith(ctx,this,a < b ? b : a,a1 < b1 ? b1 : a1,0,0);
			h2d_Object.prototype.drawRec.call(this,ctx);
			h2d_Mask.unmask(ctx);
		} else {
			h2d_Object.prototype.drawRec.call(this,ctx);
		}
	}
	,updateConstraint: function() {
		var oldW = this.realMaxWidth;
		var oldH = this.realMaxHeight;
		var tmp;
		if(this.maxWidth == null) {
			tmp = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			tmp = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			tmp = a > b ? b : a;
		}
		this.realMaxWidth = tmp;
		var tmp;
		if(this.maxHeight == null) {
			tmp = this.constraintHeight;
		} else if(this.constraintHeight < 0) {
			tmp = this.maxHeight;
		} else {
			var a = this.maxHeight;
			var b = this.constraintHeight;
			tmp = a > b ? b : a;
		}
		this.realMaxHeight = tmp;
		if(this.minWidth != null && this.realMaxWidth < this.minWidth && this.realMaxWidth >= 0) {
			this.realMaxWidth = this.minWidth;
		}
		if(this.minHeight != null && this.realMaxHeight < this.minHeight && this.realMaxWidth >= 0) {
			this.realMaxHeight = this.minHeight;
		}
		if(this.realMaxWidth != oldW || this.realMaxHeight != oldH) {
			this.set_needReflow(true);
		}
		var oldW = this.realMinWidth;
		var oldH = this.realMinHeight;
		this.realMinWidth = this.minWidth == null && this.fillWidth ? Math.ceil(this.constraintWidth) : this.minWidth != null ? this.minWidth : -1;
		this.realMinHeight = this.minHeight == null && this.fillHeight ? Math.ceil(this.constraintHeight) : this.minHeight != null ? this.minHeight : -1;
		if(this.realMinWidth != oldW || this.realMinHeight != oldH) {
			this.set_needReflow(true);
		}
	}
	,set_minWidth: function(w) {
		if(this.minWidth == w) {
			return w;
		}
		this.set_needReflow(true);
		this.minWidth = w;
		this.updateConstraint();
		return w;
	}
	,set_minHeight: function(h) {
		if(this.minHeight == h) {
			return h;
		}
		this.set_needReflow(true);
		this.minHeight = h;
		this.updateConstraint();
		return h;
	}
	,set_horizontalSpacing: function(s) {
		if(this.horizontalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.horizontalSpacing = s;
	}
	,set_verticalSpacing: function(s) {
		if(this.verticalSpacing == s) {
			return s;
		}
		this.set_needReflow(true);
		return this.verticalSpacing = s;
	}
	,set_enableInteractive: function(b) {
		if(this.enableInteractive == b) {
			return b;
		}
		if(b) {
			if(this.interactive == null) {
				var interactive = new h2d_Interactive(0,0);
				this.addChildAt(interactive,0);
				this.interactive = interactive;
				interactive.set_cursor(hxd_Cursor.Default);
				this.getProperties(interactive).set_isAbsolute(true);
				if(!this.needReflow) {
					interactive.width = this.calculatedWidth;
					interactive.height = this.calculatedHeight;
				}
			}
		} else if(this.interactive != null) {
			var _this = this.interactive;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.interactive = null;
		}
		return this.enableInteractive = b;
	}
	,set_backgroundTile: function(t) {
		if(this.backgroundTile == t) {
			return t;
		}
		if(t != null) {
			if(this.background == null) {
				var background = new h2d_ScaleGrid(t,this.borderWidth,this.borderHeight);
				this.addChildAt(background,0);
				this.getProperties(background).set_isAbsolute(true);
				this.background = background;
				if(!this.needReflow) {
					background.set_width(Math.ceil(this.calculatedWidth));
					background.set_height(Math.ceil(this.calculatedHeight));
				}
			}
			this.background.tile = t;
		} else if(this.background != null) {
			var _this = this.background;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
			this.background = null;
		}
		return this.backgroundTile = t;
	}
	,reflow: function() {
		var _gthis = this;
		this.onBeforeReflow();
		if(!this.isConstraint && (this.fillWidth || this.fillHeight)) {
			var scene = this.getScene();
			var cw = this.fillWidth ? scene.width : -1;
			var ch = this.fillHeight ? scene.height : -1;
			if(cw != this.constraintWidth || ch != this.constraintHeight) {
				this.constraintSize(cw,ch);
				this.isConstraint = false;
			}
		}
		var borderWidth = 0;
		var borderHeight = 0;
		var isConstraintWidth = this.realMaxWidth >= 0;
		var isConstraintHeight = this.realMaxHeight >= 0;
		var maxTotWidth = this.realMaxWidth < 0 ? 100000000 : Math.floor(this.realMaxWidth);
		var maxTotHeight = this.realMaxHeight < 0 ? 100000000 : Math.floor(this.realMaxHeight);
		var maxInWidth = maxTotWidth - (this.paddingLeft + this.paddingRight + borderWidth * 2);
		var maxInHeight = maxTotHeight - (this.paddingTop + this.paddingBottom + borderHeight * 2);
		if(this.debug) {
			this.debugGraphics.clear();
		}
		var cw;
		var ch;
		switch(this.layout._hx_index) {
		case 0:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Bottom : this.verticalAlign;
			var startX = this.paddingLeft + borderWidth;
			var x = startX;
			var y = this.paddingTop + borderHeight;
			cw = x;
			var maxLineHeight = 0;
			var minLineHeight = this.lineHeight != null ? this.lineHeight : this.realMinHeight >= 0 && !this.multiline ? this.realMinHeight - (this.paddingTop + this.paddingBottom + borderHeight * 2) : 0;
			var lastIndex = 0;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.horizontalAlign == null && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var pw = p.paddingLeft + p.paddingRight;
				var ph = p.paddingTop + p.paddingBottom;
				if(!isAbs) {
					c.constraintSize(isConstraintWidth && p.constraint ? (maxInWidth - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? (maxInHeight - ph) / Math.abs(c.scaleX) : -1);
				}
				var b = c.getSize(this.tmpBounds);
				var br = false;
				p.calculatedWidth = Math.ceil(b.xMax) + pw;
				p.calculatedHeight = Math.ceil(b.yMax) + ph;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(isAbs) {
					continue;
				}
				if((this.multiline && x - startX + p.calculatedWidth > maxInWidth || p.lineBreak) && x - startX > 0) {
					br = true;
					if(maxLineHeight < minLineHeight) {
						maxLineHeight = minLineHeight;
					} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minLineHeight != 0) {
						maxLineHeight = minLineHeight;
					}
					var _g2 = lastIndex;
					var _g3 = i;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var p1 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(p1.isAbsolute && p1.verticalAlign == null) {
							continue;
						}
						var c1 = _gthis.children[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(!c1.visible) {
							continue;
						}
						var a = p1.verticalAlign != null ? p1.verticalAlign : valign;
						c1.posChanged = true;
						c1.y = y + p1.offsetY + p1.paddingTop;
						if(a != null) {
							switch(a._hx_index) {
							case 3:
								var _g4 = c1;
								_g4.posChanged = true;
								_g4.y += (maxLineHeight - p1.calculatedHeight) * 0.5 | 0;
								break;
							case 4:
								var _g5 = c1;
								_g5.posChanged = true;
								_g5.y += maxLineHeight - (p1.calculatedHeight | 0);
								break;
							default:
							}
						}
					}
					lastIndex = i;
					y += maxLineHeight + this.verticalSpacing;
					maxLineHeight = 0;
					x = startX;
				}
				p.isBreak = br;
				x += p.calculatedWidth;
				if(x > cw) {
					cw = x;
				}
				x += this.horizontalSpacing;
				if(p.calculatedHeight > maxLineHeight) {
					maxLineHeight = p.calculatedHeight;
				}
			}
			var maxIndex = this.children.length;
			if(maxLineHeight < minLineHeight) {
				maxLineHeight = minLineHeight;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minLineHeight != 0) {
				maxLineHeight = minLineHeight;
			}
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.verticalAlign != null ? p.verticalAlign : valign;
				c.posChanged = true;
				c.y = y + p.offsetY + p.paddingTop;
				if(a != null) {
					switch(a._hx_index) {
					case 3:
						var _g2 = c;
						_g2.posChanged = true;
						_g2.y += (maxLineHeight - p.calculatedHeight) * 0.5 | 0;
						break;
					case 4:
						var _g3 = c;
						_g3.posChanged = true;
						_g3.y += maxLineHeight - (p.calculatedHeight | 0);
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			cw += this.paddingRight + borderWidth;
			ch = y + maxLineHeight + this.paddingBottom + borderHeight;
			if(this.realMinWidth >= 0 && cw < this.realMinWidth) {
				cw = this.realMinWidth;
			}
			var endX = cw - (this.paddingRight + borderWidth);
			var xmin = startX;
			var xmax = endX;
			var midSpace = 0;
			var curAlign = null;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.isAbsolute) {
					var _g2 = p.horizontalAlign;
					if(_g2 != null) {
						switch(_g2._hx_index) {
						case 1:
							c.posChanged = true;
							c.x = startX + p.offsetX;
							break;
						case 2:
							c.posChanged = true;
							c.x = endX - p.calculatedWidth + p.offsetX;
							break;
						case 3:
							c.posChanged = true;
							c.x = startX + ((endX - startX - p.calculatedWidth) * 0.5 | 0) + p.offsetX + startX;
							break;
						default:
						}
					}
					continue;
				}
				if(p.isBreak) {
					xmin = startX;
					xmax = endX;
					midSpace = 0;
				}
				var px;
				var align = p.horizontalAlign == null ? halign : p.horizontalAlign;
				if(curAlign != align) {
					curAlign = align;
					midSpace = 0;
				}
				if(align == null) {
					px = xmin;
					xmin += p.calculatedWidth + this.horizontalSpacing;
				} else {
					switch(align._hx_index) {
					case 2:
						if(midSpace == 0) {
							var p1 = p.calculatedWidth;
							var size = 0;
							var _g3 = i + 1;
							var _g4 = _gthis.children.length;
							while(_g3 < _g4) {
								var j = _g3++;
								var p2 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j - 1 : j];
								if(p2.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j - 1 : j].visible) {
									continue;
								}
								if(p2.isBreak) {
									break;
								}
								size += _gthis.horizontalSpacing + p2.calculatedWidth;
							}
							var remSize = p1 + size;
							midSpace = xmax - xmin - remSize;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
						break;
					case 3:
						if(midSpace == 0) {
							var p3 = p.calculatedWidth;
							var size1 = 0;
							var _g5 = i + 1;
							var _g6 = _gthis.children.length;
							while(_g5 < _g6) {
								var j1 = _g5++;
								var p4 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1];
								if(p4.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1].visible) {
									continue;
								}
								if(p4.isBreak) {
									break;
								}
								size1 += _gthis.horizontalSpacing + p4.calculatedWidth;
							}
							var remSize1 = p3 + size1;
							midSpace = (xmax - xmin - remSize1) * 0.5 | 0;
							xmin += midSpace;
						}
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
						break;
					default:
						px = xmin;
						xmin += p.calculatedWidth + this.horizontalSpacing;
					}
				}
				c.posChanged = true;
				c.x = px + p.offsetX + p.paddingLeft;
				if(p.isAbsolute) {
					xmin = px;
				}
			}
			break;
		case 1:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var startY = this.paddingTop + borderHeight;
			var y = startY;
			var x = this.paddingLeft + borderWidth;
			ch = y;
			var maxColWidth = 0;
			var minColWidth = this.colWidth != null ? this.colWidth : this.realMinWidth >= 0 && !this.multiline ? this.realMinWidth - (this.paddingLeft + this.paddingRight + borderWidth * 2) : 0;
			var lastIndex = 0;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.horizontalAlign == null && p.verticalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var pw = p.paddingLeft + p.paddingRight;
				var ph = p.paddingTop + p.paddingBottom;
				if(!isAbs) {
					c.constraintSize(isConstraintWidth && p.constraint ? (maxInWidth - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? (maxInHeight - ph) / Math.abs(c.scaleY) : -1);
				}
				var b = c.getSize(this.tmpBounds);
				var br = false;
				p.calculatedWidth = Math.ceil(b.xMax) + pw;
				p.calculatedHeight = Math.ceil(b.yMax) + ph;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(isAbs) {
					continue;
				}
				if((this.multiline && y - startY + p.calculatedHeight > maxInHeight || p.lineBreak) && y - startY > 0) {
					br = true;
					if(maxColWidth < minColWidth) {
						maxColWidth = minColWidth;
					} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minColWidth != 0) {
						maxColWidth = minColWidth;
					}
					var _g2 = lastIndex;
					var _g3 = i;
					while(_g2 < _g3) {
						var i1 = _g2++;
						var p1 = _gthis.properties[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(p1.isAbsolute && p1.horizontalAlign == null) {
							continue;
						}
						var c1 = _gthis.children[_gthis.reverse ? _gthis.children.length - i1 - 1 : i1];
						if(!c1.visible) {
							continue;
						}
						var a = p1.horizontalAlign != null ? p1.horizontalAlign : halign;
						c1.posChanged = true;
						c1.x = x + p1.offsetX + p1.paddingLeft;
						if(a != null) {
							switch(a._hx_index) {
							case 2:
								var _g4 = c1;
								_g4.posChanged = true;
								_g4.x += maxColWidth - p1.calculatedWidth;
								break;
							case 3:
								var _g5 = c1;
								_g5.posChanged = true;
								_g5.x += (maxColWidth - p1.calculatedWidth) * 0.5 | 0;
								break;
							default:
							}
						}
					}
					lastIndex = i;
					x += maxColWidth + this.horizontalSpacing;
					maxColWidth = 0;
					y = startY;
				}
				p.isBreak = br;
				c.posChanged = true;
				c.y = y + p.offsetY + p.paddingTop;
				y += p.calculatedHeight;
				if(y > ch) {
					ch = y;
				}
				y += this.verticalSpacing;
				if(p.calculatedWidth > maxColWidth) {
					maxColWidth = p.calculatedWidth;
				}
			}
			var maxIndex = this.children.length;
			if(maxColWidth < minColWidth) {
				maxColWidth = minColWidth;
			} else if(_gthis.overflow != h2d_FlowOverflow.Expand && minColWidth != 0) {
				maxColWidth = minColWidth;
			}
			var _g = lastIndex;
			var _g1 = maxIndex;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute && p.horizontalAlign == null) {
					continue;
				}
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var a = p.horizontalAlign != null ? p.horizontalAlign : halign;
				c.posChanged = true;
				c.x = x + p.offsetX + p.paddingLeft;
				if(a != null) {
					switch(a._hx_index) {
					case 2:
						var _g2 = c;
						_g2.posChanged = true;
						_g2.x += maxColWidth - p.calculatedWidth;
						break;
					case 3:
						var _g3 = c;
						_g3.posChanged = true;
						_g3.x += (maxColWidth - p.calculatedWidth) * 0.5 | 0;
						break;
					default:
					}
				}
			}
			lastIndex = maxIndex;
			ch += this.paddingBottom + borderHeight;
			cw = x + maxColWidth + this.paddingRight + borderWidth;
			if(this.realMinHeight >= 0 && ch < this.realMinHeight) {
				ch = this.realMinHeight;
			}
			var endY = ch - (this.paddingBottom + borderHeight);
			var ymin = startY;
			var ymax = endY;
			var midSpace = 0;
			var curAlign = null;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				if(p.isAbsolute) {
					var _g2 = p.verticalAlign;
					if(_g2 != null) {
						switch(_g2._hx_index) {
						case 0:
							c.posChanged = true;
							c.y = startY + p.offsetY;
							break;
						case 3:
							c.posChanged = true;
							c.y = startY + ((endY - startY - p.calculatedHeight) * 0.5 | 0) + p.offsetY + startY;
							break;
						case 4:
							c.posChanged = true;
							c.y = endY - p.calculatedHeight + p.offsetY;
							break;
						default:
						}
					}
					continue;
				}
				if(p.isBreak) {
					ymin = startY;
					ymax = endY;
					midSpace = 0;
				}
				var py;
				var align = p.verticalAlign == null ? valign : p.verticalAlign;
				if(curAlign != align) {
					curAlign = align;
					midSpace = 0;
				}
				if(align == null) {
					py = ymin;
					ymin += p.calculatedHeight + this.verticalSpacing;
				} else {
					switch(align._hx_index) {
					case 3:
						if(midSpace == 0) {
							var p1 = p.calculatedHeight;
							var size = 0;
							var _g3 = i + 1;
							var _g4 = _gthis.children.length;
							while(_g3 < _g4) {
								var j = _g3++;
								var p2 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j - 1 : j];
								if(p2.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j - 1 : j].visible) {
									continue;
								}
								if(p2.isBreak) {
									break;
								}
								size += _gthis.verticalSpacing + p2.calculatedHeight;
							}
							var remSize = p1 + size;
							midSpace = (ymax - ymin - remSize) * 0.5 | 0;
							ymin += midSpace;
						}
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
						break;
					case 4:
						if(midSpace == 0) {
							var p3 = p.calculatedHeight;
							var size1 = 0;
							var _g5 = i + 1;
							var _g6 = _gthis.children.length;
							while(_g5 < _g6) {
								var j1 = _g5++;
								var p4 = _gthis.properties[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1];
								if(p4.isAbsolute || !_gthis.children[_gthis.reverse ? _gthis.children.length - j1 - 1 : j1].visible) {
									continue;
								}
								if(p4.isBreak) {
									break;
								}
								size1 += _gthis.verticalSpacing + p4.calculatedHeight;
							}
							var remSize1 = p3 + size1;
							midSpace = ymax - ymin - remSize1;
							ymin += midSpace;
						}
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
						break;
					default:
						py = ymin;
						ymin += p.calculatedHeight + this.verticalSpacing;
					}
				}
				c.posChanged = true;
				c.y = py + p.offsetY + p.paddingTop;
			}
			break;
		case 2:
			var halign = this.horizontalAlign == null ? h2d_FlowAlign.Left : this.horizontalAlign;
			var valign = this.verticalAlign == null ? h2d_FlowAlign.Top : this.verticalAlign;
			var maxChildW = 0;
			var maxChildH = 0;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.verticalAlign == null && p.horizontalAlign == null) {
					continue;
				}
				var pw = p.paddingLeft + p.paddingRight;
				var ph = p.paddingTop + p.paddingBottom;
				if(!isAbs) {
					c.constraintSize(isConstraintWidth && p.constraint ? (maxInWidth - pw) / Math.abs(c.scaleX) : -1,isConstraintHeight && p.constraint ? (maxInHeight - ph) / Math.abs(c.scaleY) : -1);
				}
				var b = c.getSize(this.tmpBounds);
				p.calculatedWidth = Math.ceil(b.xMax) + pw;
				p.calculatedHeight = Math.ceil(b.yMax) + ph;
				if(p.minWidth != null && p.calculatedWidth < p.minWidth) {
					p.calculatedWidth = p.minWidth;
				}
				if(p.minHeight != null && p.calculatedHeight < p.minHeight) {
					p.calculatedHeight = p.minHeight;
				}
				if(isAbs) {
					continue;
				}
				if(p.calculatedWidth > maxChildW) {
					maxChildW = p.calculatedWidth;
				}
				if(p.calculatedHeight > maxChildH) {
					maxChildH = p.calculatedHeight;
				}
			}
			var xmin = this.paddingLeft + borderWidth;
			var ymin = this.paddingTop + borderHeight;
			var xmax;
			if(this.realMaxWidth > 0 && this.overflow != h2d_FlowOverflow.Expand) {
				xmax = Math.floor(this.realMaxWidth - (this.paddingRight + borderWidth));
			} else {
				var a = xmin + maxChildW;
				var b = this.realMinWidth - (this.paddingRight + borderWidth);
				xmax = a < b ? b : a;
			}
			var ymax;
			if(this.realMaxWidth > 0 && this.overflow != h2d_FlowOverflow.Expand) {
				ymax = Math.floor(this.realMaxHeight - (this.paddingBottom + borderHeight));
			} else {
				var a = ymin + maxChildH;
				var b = this.realMinHeight - (this.paddingBottom + borderHeight);
				ymax = a < b ? b : a;
			}
			cw = xmax + this.paddingRight + borderWidth;
			ch = ymax + this.paddingBottom + borderHeight;
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(!c.visible) {
					continue;
				}
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var isAbs = p.isAbsolute;
				if(isAbs && p.verticalAlign == null && p.horizontalAlign == null) {
					continue;
				}
				var valign1 = p.verticalAlign == null ? valign : p.verticalAlign;
				var halign1 = p.horizontalAlign == null ? halign : p.horizontalAlign;
				var px;
				if(halign1 == null) {
					px = xmin;
				} else {
					switch(halign1._hx_index) {
					case 2:
						px = xmax - p.calculatedWidth;
						break;
					case 3:
						px = xmin + ((xmax - xmin - p.calculatedWidth) * 0.5 | 0);
						break;
					default:
						px = xmin;
					}
				}
				var py;
				if(valign1 == null) {
					py = ymin;
				} else {
					switch(valign1._hx_index) {
					case 3:
						py = ymin + ((ymax - ymin - p.calculatedHeight) * 0.5 | 0);
						break;
					case 4:
						py = ymax - p.calculatedHeight;
						break;
					default:
						py = ymin;
					}
				}
				if(!isAbs || p.horizontalAlign != null) {
					c.posChanged = true;
					c.x = px + p.offsetX + p.paddingLeft;
				}
				if(!isAbs || p.verticalAlign != null) {
					c.posChanged = true;
					c.y = py + p.offsetY + p.paddingTop;
				}
			}
			break;
		}
		if(this.realMinWidth >= 0 && cw < this.realMinWidth) {
			cw = this.realMinWidth;
		}
		if(this.realMinHeight >= 0 && ch < this.realMinHeight) {
			ch = this.realMinHeight;
		}
		if(this.overflow != h2d_FlowOverflow.Expand) {
			if(isConstraintWidth && cw > maxTotWidth) {
				cw = maxTotWidth;
			}
			if(isConstraintHeight && ch > maxTotHeight) {
				ch = maxTotHeight;
			}
		}
		if(this.interactive != null) {
			this.interactive.width = cw;
			this.interactive.height = ch;
		}
		if(this.background != null) {
			this.background.set_width(Math.ceil(cw));
			this.background.set_height(Math.ceil(ch));
		}
		this.calculatedWidth = cw;
		this.calculatedHeight = ch;
		this.set_needReflow(false);
		if(this.debug) {
			if(this.debugGraphics != this.children[this.children.length - 1]) {
				this.addChild(this.debugGraphics);
				this.set_needReflow(false);
			}
			if(this.paddingLeft != 0 || this.paddingRight != 0 || this.paddingTop != 0 || this.paddingBottom != 0) {
				this.debugGraphics.lineStyle(1,65280);
				this.debugGraphics.drawRect(this.paddingLeft,this.paddingTop,this.get_innerWidth(),this.get_innerHeight());
			}
			this.debugGraphics.lineStyle(1,33023);
			var _g = 0;
			var _g1 = this.children.length;
			while(_g < _g1) {
				var i = _g++;
				var p = _gthis.properties[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				var c = _gthis.children[_gthis.reverse ? _gthis.children.length - i - 1 : i];
				if(p.isAbsolute || !c.visible) {
					continue;
				}
				this.debugGraphics.drawRect(c.x - p.offsetX - p.paddingLeft,c.y - p.offsetY - p.paddingTop,p.calculatedWidth,p.calculatedHeight);
			}
			this.debugGraphics.lineStyle(1,16711680);
			this.debugGraphics.drawRect(0,0,cw,ch);
		}
		this.onAfterReflow();
	}
	,onBeforeReflow: function() {
	}
	,onAfterReflow: function() {
	}
	,__class__: h2d_Flow
});
var h2d_Kerning = function(c,o) {
	this.prevChar = c;
	this.offset = o;
};
$hxClasses["h2d.Kerning"] = h2d_Kerning;
h2d_Kerning.__name__ = "h2d.Kerning";
h2d_Kerning.prototype = {
	__class__: h2d_Kerning
};
var h2d_FontChar = function(t,w) {
	this.t = t;
	this.width = w;
};
$hxClasses["h2d.FontChar"] = h2d_FontChar;
h2d_FontChar.__name__ = "h2d.FontChar";
h2d_FontChar.prototype = {
	addKerning: function(prevChar,offset) {
		var k = new h2d_Kerning(prevChar,offset);
		k.next = this.kerning;
		this.kerning = k;
	}
	,getKerningOffset: function(prevChar) {
		var k = this.kerning;
		while(k != null) {
			if(k.prevChar == prevChar) {
				return k.offset;
			}
			k = k.next;
		}
		return 0;
	}
	,__class__: h2d_FontChar
};
var h2d_FontType = $hxEnums["h2d.FontType"] = { __ename__ : true, __constructs__ : ["BitmapFont","SignedDistanceField"]
	,BitmapFont: {_hx_index:0,__enum__:"h2d.FontType",toString:$estr}
	,SignedDistanceField: ($_=function(channel,alphaCutoff,smoothing) { return {_hx_index:1,channel:channel,alphaCutoff:alphaCutoff,smoothing:smoothing,__enum__:"h2d.FontType",toString:$estr}; },$_.__params__ = ["channel","alphaCutoff","smoothing"],$_)
};
h2d_FontType.__empty_constructs__ = [h2d_FontType.BitmapFont];
var h2d_Font = function(name,size,type) {
	this.name = name;
	this.size = size;
	this.initSize = size;
	this.glyphs = new haxe_ds_IntMap();
	this.defaultChar = this.nullChar = new h2d_FontChar(new h2d_Tile(null,0,0,0,0),0);
	this.charset = hxd_Charset.getDefault();
	if(name != null) {
		this.tilePath = haxe_io_Path.withExtension(name,"png");
	}
	if(type == null) {
		this.type = h2d_FontType.BitmapFont;
	} else {
		this.type = type;
	}
};
$hxClasses["h2d.Font"] = h2d_Font;
h2d_Font.__name__ = "h2d.Font";
h2d_Font.prototype = {
	__class__: h2d_Font
};
var h2d_GPoint = function() {
};
$hxClasses["h2d.GPoint"] = h2d_GPoint;
h2d_GPoint.__name__ = "h2d.GPoint";
h2d_GPoint.prototype = {
	load: function(x,y,r,g,b,a) {
		this.x = x;
		this.y = y;
		this.r = r;
		this.g = g;
		this.b = b;
		this.a = a;
	}
	,__class__: h2d_GPoint
};
var hxd_impl__$Serializable_NoSerializeSupport = function() { };
$hxClasses["hxd.impl._Serializable.NoSerializeSupport"] = hxd_impl__$Serializable_NoSerializeSupport;
hxd_impl__$Serializable_NoSerializeSupport.__name__ = "hxd.impl._Serializable.NoSerializeSupport";
hxd_impl__$Serializable_NoSerializeSupport.__isInterface__ = true;
var h3d_prim_Primitive = function() {
	this.refCount = 0;
};
$hxClasses["h3d.prim.Primitive"] = h3d_prim_Primitive;
h3d_prim_Primitive.__name__ = "h3d.prim.Primitive";
h3d_prim_Primitive.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_prim_Primitive.prototype = {
	getBounds: function() {
		throw haxe_Exception.thrown("not implemented for " + Std.string(this));
	}
	,incref: function() {
		this.refCount++;
	}
	,decref: function() {
		this.refCount--;
		if(this.refCount <= 0) {
			this.refCount = 0;
			this.dispose();
		}
	}
	,alloc: function(engine) {
		throw haxe_Exception.thrown("not implemented");
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		if(this.indexes == null) {
			if((this.buffer.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0) {
				engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
			} else {
				engine.renderBuffer(this.buffer,engine.mem.triIndexes,3,0,-1);
			}
		} else {
			engine.renderIndexed(this.buffer,this.indexes);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.dispose();
			this.buffer = null;
		}
		if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__.split(".").pop();
	}
	,__class__: h3d_prim_Primitive
};
var h2d__$Graphics_GraphicsContent = function() {
	h3d_prim_Primitive.call(this);
	this.buffers = [];
};
$hxClasses["h2d._Graphics.GraphicsContent"] = h2d__$Graphics_GraphicsContent;
h2d__$Graphics_GraphicsContent.__name__ = "h2d._Graphics.GraphicsContent";
h2d__$Graphics_GraphicsContent.__super__ = h3d_prim_Primitive;
h2d__$Graphics_GraphicsContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	next: function() {
		var nvect = this.tmp.pos >> 3;
		if(nvect < 32768) {
			return false;
		}
		this.buffers.push({ buf : this.tmp, idx : this.index, vbuf : null, ibuf : null});
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		this.tmp = this1;
		var this1 = new Array(0);
		this.index = this1;
		h3d_prim_Primitive.prototype.dispose.call(this);
		return true;
	}
	,alloc: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		var alloc = hxd_impl_Allocator.get();
		this.buffer = alloc.ofFloats(this.tmp,8,2);
		this.indexes = alloc.ofIndexes(this.index);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf == null || b.vbuf.isDisposed()) {
				b.vbuf = alloc.ofFloats(b.buf,8,2);
			}
			if(b.ibuf == null || b.ibuf.isDisposed()) {
				b.ibuf = alloc.ofIndexes(b.idx);
			}
		}
		this.bufferDirty = false;
		this.indexDirty = false;
	}
	,render: function(engine) {
		if(this.index.length <= 0) {
			return;
		}
		this.flush();
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			engine.renderIndexed(b.vbuf,b.ibuf);
		}
		h3d_prim_Primitive.prototype.render.call(this,engine);
	}
	,flush: function() {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(h3d_Engine.CURRENT);
		} else {
			var allocator = hxd_impl_Allocator.get();
			if(this.bufferDirty) {
				allocator.disposeBuffer(this.buffer);
				this.buffer = allocator.ofFloats(this.tmp,8,2);
				this.bufferDirty = false;
			}
			if(this.indexDirty) {
				allocator.disposeIndexBuffer(this.indexes);
				this.indexes = allocator.ofIndexes(this.index);
				this.indexDirty = false;
			}
		}
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.vbuf != null) {
				hxd_impl_Allocator.get().disposeBuffer(b.vbuf);
			}
			if(b.ibuf != null) {
				hxd_impl_Allocator.get().disposeIndexBuffer(b.ibuf);
			}
			b.vbuf = null;
			b.ibuf = null;
		}
		if(this.buffer != null) {
			hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			this.buffer = null;
		}
		if(this.indexes != null) {
			hxd_impl_Allocator.get().disposeIndexBuffer(this.indexes);
			this.indexes = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,clear: function() {
		this.dispose();
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		this.tmp = this1;
		var this1 = new Array(0);
		this.index = this1;
		this.buffers = [];
	}
	,__class__: h2d__$Graphics_GraphicsContent
});
var h2d_Graphics = function(parent) {
	this.bevel = 0.25;
	this.my = 0.;
	this.mx = 0.;
	this.md = 1.;
	this.mc = 0.;
	this.mb = 0.;
	this.ma = 1.;
	h2d_Drawable.call(this,parent);
	this.content = new h2d__$Graphics_GraphicsContent();
	this.tile = h2d_Tile.fromColor(16777215);
	this.clear();
};
$hxClasses["h2d.Graphics"] = h2d_Graphics;
h2d_Graphics.__name__ = "h2d.Graphics";
h2d_Graphics.__super__ = h2d_Drawable;
h2d_Graphics.prototype = $extend(h2d_Drawable.prototype,{
	onRemove: function() {
		h2d_Drawable.prototype.onRemove.call(this);
		this.clear();
	}
	,clear: function() {
		this.content.clear();
		this.tmpPoints = [];
		this.pindex = 0;
		this.lineSize = 0;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.yMax = -Infinity;
		this.xMax = -Infinity;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.tile != null) {
			this.addBounds(relativeTo,out,this.xMin,this.yMin,this.xMax - this.xMin,this.yMax - this.yMin);
		}
	}
	,isConvex: function(points) {
		var first = true;
		var sign = false;
		var _g = 0;
		var _g1 = points.length;
		while(_g < _g1) {
			var i = _g++;
			var p1 = points[i];
			var p2 = points[(i + 1) % points.length];
			var p3 = points[(i + 2) % points.length];
			var s = (p2.x - p1.x) * (p3.y - p1.y) - (p2.y - p1.y) * (p3.x - p1.x) > 0;
			if(first) {
				first = false;
				sign = s;
			} else if(sign != s) {
				return false;
			}
		}
		return true;
	}
	,flushLine: function(start) {
		var pts = this.tmpPoints;
		var last = pts.length - 1;
		var prev = pts[last];
		var p = pts[0];
		var closed = p.x == prev.x && p.y == prev.y;
		var count = pts.length;
		if(!closed) {
			var prevLast = pts[last - 1];
			if(prevLast == null) {
				prevLast = p;
			}
			var gp = new h2d_GPoint();
			gp.load(prev.x * 2 - prevLast.x,prev.y * 2 - prevLast.y,0,0,0,0);
			pts.push(gp);
			var pNext = pts[1];
			if(pNext == null) {
				pNext = p;
			}
			var gp = new h2d_GPoint();
			gp.load(p.x * 2 - pNext.x,p.y * 2 - pNext.y,0,0,0,0);
			prev = gp;
		} else if(p != prev) {
			--count;
			--last;
			prev = pts[last];
		}
		var _g = 0;
		var _g1 = count;
		while(_g < _g1) {
			var i = _g++;
			var next = pts[(i + 1) % pts.length];
			var nx1 = prev.y - p.y;
			var ny1 = p.x - prev.x;
			var ns1 = 1. / Math.sqrt(nx1 * nx1 + ny1 * ny1);
			var nx2 = p.y - next.y;
			var ny2 = next.x - p.x;
			var ns2 = 1. / Math.sqrt(nx2 * nx2 + ny2 * ny2);
			var nx = nx1 * ns1 + nx2 * ns2;
			var ny = ny1 * ns1 + ny2 * ns2;
			var ns = 1. / Math.sqrt(nx * nx + ny * ny);
			nx *= ns;
			ny *= ns;
			var size = nx * nx1 * ns1 + ny * ny1 * ns1;
			if(size < 0.1) {
				size = 0.1;
			}
			var d = this.lineSize * 0.5 / size;
			nx *= d;
			ny *= d;
			if(size > this.bevel) {
				var _this = this.content;
				var x = p.x + nx;
				var y = p.y + ny;
				var r = p.r;
				var g = p.g;
				var b = p.b;
				var a = p.a;
				var this1 = _this.tmp;
				if(this1.pos == this1.array.length) {
					var newSize = this1.array.length << 1;
					if(newSize < 128) {
						newSize = 128;
					}
					var newArray = new Float32Array(newSize);
					newArray.set(this1.array);
					this1.array = newArray;
				}
				this1.array[this1.pos++] = x;
				var this2 = _this.tmp;
				if(this2.pos == this2.array.length) {
					var newSize1 = this2.array.length << 1;
					if(newSize1 < 128) {
						newSize1 = 128;
					}
					var newArray1 = new Float32Array(newSize1);
					newArray1.set(this2.array);
					this2.array = newArray1;
				}
				this2.array[this2.pos++] = y;
				var this3 = _this.tmp;
				if(this3.pos == this3.array.length) {
					var newSize2 = this3.array.length << 1;
					if(newSize2 < 128) {
						newSize2 = 128;
					}
					var newArray2 = new Float32Array(newSize2);
					newArray2.set(this3.array);
					this3.array = newArray2;
				}
				this3.array[this3.pos++] = 0;
				var this4 = _this.tmp;
				if(this4.pos == this4.array.length) {
					var newSize3 = this4.array.length << 1;
					if(newSize3 < 128) {
						newSize3 = 128;
					}
					var newArray3 = new Float32Array(newSize3);
					newArray3.set(this4.array);
					this4.array = newArray3;
				}
				this4.array[this4.pos++] = 0;
				var this5 = _this.tmp;
				if(this5.pos == this5.array.length) {
					var newSize4 = this5.array.length << 1;
					if(newSize4 < 128) {
						newSize4 = 128;
					}
					var newArray4 = new Float32Array(newSize4);
					newArray4.set(this5.array);
					this5.array = newArray4;
				}
				this5.array[this5.pos++] = r;
				var this6 = _this.tmp;
				if(this6.pos == this6.array.length) {
					var newSize5 = this6.array.length << 1;
					if(newSize5 < 128) {
						newSize5 = 128;
					}
					var newArray5 = new Float32Array(newSize5);
					newArray5.set(this6.array);
					this6.array = newArray5;
				}
				this6.array[this6.pos++] = g;
				var this7 = _this.tmp;
				if(this7.pos == this7.array.length) {
					var newSize6 = this7.array.length << 1;
					if(newSize6 < 128) {
						newSize6 = 128;
					}
					var newArray6 = new Float32Array(newSize6);
					newArray6.set(this7.array);
					this7.array = newArray6;
				}
				this7.array[this7.pos++] = b;
				var this8 = _this.tmp;
				if(this8.pos == this8.array.length) {
					var newSize7 = this8.array.length << 1;
					if(newSize7 < 128) {
						newSize7 = 128;
					}
					var newArray7 = new Float32Array(newSize7);
					newArray7.set(this8.array);
					this8.array = newArray7;
				}
				this8.array[this8.pos++] = a;
				_this.bufferDirty = true;
				var _this1 = this.content;
				var x1 = p.x - nx;
				var y1 = p.y - ny;
				var r1 = p.r;
				var g1 = p.g;
				var b1 = p.b;
				var a1 = p.a;
				var this9 = _this1.tmp;
				if(this9.pos == this9.array.length) {
					var newSize8 = this9.array.length << 1;
					if(newSize8 < 128) {
						newSize8 = 128;
					}
					var newArray8 = new Float32Array(newSize8);
					newArray8.set(this9.array);
					this9.array = newArray8;
				}
				this9.array[this9.pos++] = x1;
				var this10 = _this1.tmp;
				if(this10.pos == this10.array.length) {
					var newSize9 = this10.array.length << 1;
					if(newSize9 < 128) {
						newSize9 = 128;
					}
					var newArray9 = new Float32Array(newSize9);
					newArray9.set(this10.array);
					this10.array = newArray9;
				}
				this10.array[this10.pos++] = y1;
				var this11 = _this1.tmp;
				if(this11.pos == this11.array.length) {
					var newSize10 = this11.array.length << 1;
					if(newSize10 < 128) {
						newSize10 = 128;
					}
					var newArray10 = new Float32Array(newSize10);
					newArray10.set(this11.array);
					this11.array = newArray10;
				}
				this11.array[this11.pos++] = 0;
				var this12 = _this1.tmp;
				if(this12.pos == this12.array.length) {
					var newSize11 = this12.array.length << 1;
					if(newSize11 < 128) {
						newSize11 = 128;
					}
					var newArray11 = new Float32Array(newSize11);
					newArray11.set(this12.array);
					this12.array = newArray11;
				}
				this12.array[this12.pos++] = 0;
				var this13 = _this1.tmp;
				if(this13.pos == this13.array.length) {
					var newSize12 = this13.array.length << 1;
					if(newSize12 < 128) {
						newSize12 = 128;
					}
					var newArray12 = new Float32Array(newSize12);
					newArray12.set(this13.array);
					this13.array = newArray12;
				}
				this13.array[this13.pos++] = r1;
				var this14 = _this1.tmp;
				if(this14.pos == this14.array.length) {
					var newSize13 = this14.array.length << 1;
					if(newSize13 < 128) {
						newSize13 = 128;
					}
					var newArray13 = new Float32Array(newSize13);
					newArray13.set(this14.array);
					this14.array = newArray13;
				}
				this14.array[this14.pos++] = g1;
				var this15 = _this1.tmp;
				if(this15.pos == this15.array.length) {
					var newSize14 = this15.array.length << 1;
					if(newSize14 < 128) {
						newSize14 = 128;
					}
					var newArray14 = new Float32Array(newSize14);
					newArray14.set(this15.array);
					this15.array = newArray14;
				}
				this15.array[this15.pos++] = b1;
				var this16 = _this1.tmp;
				if(this16.pos == this16.array.length) {
					var newSize15 = this16.array.length << 1;
					if(newSize15 < 128) {
						newSize15 = 128;
					}
					var newArray15 = new Float32Array(newSize15);
					newArray15.set(this16.array);
					this16.array = newArray15;
				}
				this16.array[this16.pos++] = a1;
				_this1.bufferDirty = true;
				var pnext = i == last ? start : this.pindex + 2;
				if(i < count - 1 || closed) {
					var _this2 = this.content;
					_this2.index.push(this.pindex);
					_this2.indexDirty = true;
					var _this3 = this.content;
					_this3.index.push(this.pindex + 1);
					_this3.indexDirty = true;
					var _this4 = this.content;
					_this4.index.push(pnext);
					_this4.indexDirty = true;
					var _this5 = this.content;
					_this5.index.push(this.pindex + 1);
					_this5.indexDirty = true;
					var _this6 = this.content;
					_this6.index.push(pnext);
					_this6.indexDirty = true;
					var _this7 = this.content;
					_this7.index.push(pnext + 1);
					_this7.indexDirty = true;
				}
				this.pindex += 2;
			} else {
				var n0x = next.x - p.x;
				var n0y = next.y - p.y;
				var sign = n0x * nx + n0y * ny;
				var nnx = -ny;
				var nny = nx;
				var size1 = nnx * nx1 * ns1 + nny * ny1 * ns1;
				var d1 = this.lineSize * 0.5 / size1;
				nnx *= d1;
				nny *= d1;
				var pnext1 = i == last ? start : this.pindex + 3;
				if(sign > 0) {
					var _this8 = this.content;
					var x2 = p.x + nx;
					var y2 = p.y + ny;
					var r2 = p.r;
					var g2 = p.g;
					var b2 = p.b;
					var a2 = p.a;
					var this17 = _this8.tmp;
					if(this17.pos == this17.array.length) {
						var newSize16 = this17.array.length << 1;
						if(newSize16 < 128) {
							newSize16 = 128;
						}
						var newArray16 = new Float32Array(newSize16);
						newArray16.set(this17.array);
						this17.array = newArray16;
					}
					this17.array[this17.pos++] = x2;
					var this18 = _this8.tmp;
					if(this18.pos == this18.array.length) {
						var newSize17 = this18.array.length << 1;
						if(newSize17 < 128) {
							newSize17 = 128;
						}
						var newArray17 = new Float32Array(newSize17);
						newArray17.set(this18.array);
						this18.array = newArray17;
					}
					this18.array[this18.pos++] = y2;
					var this19 = _this8.tmp;
					if(this19.pos == this19.array.length) {
						var newSize18 = this19.array.length << 1;
						if(newSize18 < 128) {
							newSize18 = 128;
						}
						var newArray18 = new Float32Array(newSize18);
						newArray18.set(this19.array);
						this19.array = newArray18;
					}
					this19.array[this19.pos++] = 0;
					var this20 = _this8.tmp;
					if(this20.pos == this20.array.length) {
						var newSize19 = this20.array.length << 1;
						if(newSize19 < 128) {
							newSize19 = 128;
						}
						var newArray19 = new Float32Array(newSize19);
						newArray19.set(this20.array);
						this20.array = newArray19;
					}
					this20.array[this20.pos++] = 0;
					var this21 = _this8.tmp;
					if(this21.pos == this21.array.length) {
						var newSize20 = this21.array.length << 1;
						if(newSize20 < 128) {
							newSize20 = 128;
						}
						var newArray20 = new Float32Array(newSize20);
						newArray20.set(this21.array);
						this21.array = newArray20;
					}
					this21.array[this21.pos++] = r2;
					var this22 = _this8.tmp;
					if(this22.pos == this22.array.length) {
						var newSize21 = this22.array.length << 1;
						if(newSize21 < 128) {
							newSize21 = 128;
						}
						var newArray21 = new Float32Array(newSize21);
						newArray21.set(this22.array);
						this22.array = newArray21;
					}
					this22.array[this22.pos++] = g2;
					var this23 = _this8.tmp;
					if(this23.pos == this23.array.length) {
						var newSize22 = this23.array.length << 1;
						if(newSize22 < 128) {
							newSize22 = 128;
						}
						var newArray22 = new Float32Array(newSize22);
						newArray22.set(this23.array);
						this23.array = newArray22;
					}
					this23.array[this23.pos++] = b2;
					var this24 = _this8.tmp;
					if(this24.pos == this24.array.length) {
						var newSize23 = this24.array.length << 1;
						if(newSize23 < 128) {
							newSize23 = 128;
						}
						var newArray23 = new Float32Array(newSize23);
						newArray23.set(this24.array);
						this24.array = newArray23;
					}
					this24.array[this24.pos++] = a2;
					_this8.bufferDirty = true;
					var _this9 = this.content;
					var x3 = p.x - nnx;
					var y3 = p.y - nny;
					var r3 = p.r;
					var g3 = p.g;
					var b3 = p.b;
					var a3 = p.a;
					var this25 = _this9.tmp;
					if(this25.pos == this25.array.length) {
						var newSize24 = this25.array.length << 1;
						if(newSize24 < 128) {
							newSize24 = 128;
						}
						var newArray24 = new Float32Array(newSize24);
						newArray24.set(this25.array);
						this25.array = newArray24;
					}
					this25.array[this25.pos++] = x3;
					var this26 = _this9.tmp;
					if(this26.pos == this26.array.length) {
						var newSize25 = this26.array.length << 1;
						if(newSize25 < 128) {
							newSize25 = 128;
						}
						var newArray25 = new Float32Array(newSize25);
						newArray25.set(this26.array);
						this26.array = newArray25;
					}
					this26.array[this26.pos++] = y3;
					var this27 = _this9.tmp;
					if(this27.pos == this27.array.length) {
						var newSize26 = this27.array.length << 1;
						if(newSize26 < 128) {
							newSize26 = 128;
						}
						var newArray26 = new Float32Array(newSize26);
						newArray26.set(this27.array);
						this27.array = newArray26;
					}
					this27.array[this27.pos++] = 0;
					var this28 = _this9.tmp;
					if(this28.pos == this28.array.length) {
						var newSize27 = this28.array.length << 1;
						if(newSize27 < 128) {
							newSize27 = 128;
						}
						var newArray27 = new Float32Array(newSize27);
						newArray27.set(this28.array);
						this28.array = newArray27;
					}
					this28.array[this28.pos++] = 0;
					var this29 = _this9.tmp;
					if(this29.pos == this29.array.length) {
						var newSize28 = this29.array.length << 1;
						if(newSize28 < 128) {
							newSize28 = 128;
						}
						var newArray28 = new Float32Array(newSize28);
						newArray28.set(this29.array);
						this29.array = newArray28;
					}
					this29.array[this29.pos++] = r3;
					var this30 = _this9.tmp;
					if(this30.pos == this30.array.length) {
						var newSize29 = this30.array.length << 1;
						if(newSize29 < 128) {
							newSize29 = 128;
						}
						var newArray29 = new Float32Array(newSize29);
						newArray29.set(this30.array);
						this30.array = newArray29;
					}
					this30.array[this30.pos++] = g3;
					var this31 = _this9.tmp;
					if(this31.pos == this31.array.length) {
						var newSize30 = this31.array.length << 1;
						if(newSize30 < 128) {
							newSize30 = 128;
						}
						var newArray30 = new Float32Array(newSize30);
						newArray30.set(this31.array);
						this31.array = newArray30;
					}
					this31.array[this31.pos++] = b3;
					var this32 = _this9.tmp;
					if(this32.pos == this32.array.length) {
						var newSize31 = this32.array.length << 1;
						if(newSize31 < 128) {
							newSize31 = 128;
						}
						var newArray31 = new Float32Array(newSize31);
						newArray31.set(this32.array);
						this32.array = newArray31;
					}
					this32.array[this32.pos++] = a3;
					_this9.bufferDirty = true;
					var _this10 = this.content;
					var x4 = p.x + nnx;
					var y4 = p.y + nny;
					var r4 = p.r;
					var g4 = p.g;
					var b4 = p.b;
					var a4 = p.a;
					var this33 = _this10.tmp;
					if(this33.pos == this33.array.length) {
						var newSize32 = this33.array.length << 1;
						if(newSize32 < 128) {
							newSize32 = 128;
						}
						var newArray32 = new Float32Array(newSize32);
						newArray32.set(this33.array);
						this33.array = newArray32;
					}
					this33.array[this33.pos++] = x4;
					var this34 = _this10.tmp;
					if(this34.pos == this34.array.length) {
						var newSize33 = this34.array.length << 1;
						if(newSize33 < 128) {
							newSize33 = 128;
						}
						var newArray33 = new Float32Array(newSize33);
						newArray33.set(this34.array);
						this34.array = newArray33;
					}
					this34.array[this34.pos++] = y4;
					var this35 = _this10.tmp;
					if(this35.pos == this35.array.length) {
						var newSize34 = this35.array.length << 1;
						if(newSize34 < 128) {
							newSize34 = 128;
						}
						var newArray34 = new Float32Array(newSize34);
						newArray34.set(this35.array);
						this35.array = newArray34;
					}
					this35.array[this35.pos++] = 0;
					var this36 = _this10.tmp;
					if(this36.pos == this36.array.length) {
						var newSize35 = this36.array.length << 1;
						if(newSize35 < 128) {
							newSize35 = 128;
						}
						var newArray35 = new Float32Array(newSize35);
						newArray35.set(this36.array);
						this36.array = newArray35;
					}
					this36.array[this36.pos++] = 0;
					var this37 = _this10.tmp;
					if(this37.pos == this37.array.length) {
						var newSize36 = this37.array.length << 1;
						if(newSize36 < 128) {
							newSize36 = 128;
						}
						var newArray36 = new Float32Array(newSize36);
						newArray36.set(this37.array);
						this37.array = newArray36;
					}
					this37.array[this37.pos++] = r4;
					var this38 = _this10.tmp;
					if(this38.pos == this38.array.length) {
						var newSize37 = this38.array.length << 1;
						if(newSize37 < 128) {
							newSize37 = 128;
						}
						var newArray37 = new Float32Array(newSize37);
						newArray37.set(this38.array);
						this38.array = newArray37;
					}
					this38.array[this38.pos++] = g4;
					var this39 = _this10.tmp;
					if(this39.pos == this39.array.length) {
						var newSize38 = this39.array.length << 1;
						if(newSize38 < 128) {
							newSize38 = 128;
						}
						var newArray38 = new Float32Array(newSize38);
						newArray38.set(this39.array);
						this39.array = newArray38;
					}
					this39.array[this39.pos++] = b4;
					var this40 = _this10.tmp;
					if(this40.pos == this40.array.length) {
						var newSize39 = this40.array.length << 1;
						if(newSize39 < 128) {
							newSize39 = 128;
						}
						var newArray39 = new Float32Array(newSize39);
						newArray39.set(this40.array);
						this40.array = newArray39;
					}
					this40.array[this40.pos++] = a4;
					_this10.bufferDirty = true;
					var _this11 = this.content;
					_this11.index.push(this.pindex);
					_this11.indexDirty = true;
					var _this12 = this.content;
					_this12.index.push(pnext1);
					_this12.indexDirty = true;
					var _this13 = this.content;
					_this13.index.push(this.pindex + 2);
					_this13.indexDirty = true;
					var _this14 = this.content;
					_this14.index.push(this.pindex + 2);
					_this14.indexDirty = true;
					var _this15 = this.content;
					_this15.index.push(pnext1);
					_this15.indexDirty = true;
					var _this16 = this.content;
					_this16.index.push(pnext1 + 1);
					_this16.indexDirty = true;
				} else {
					var _this17 = this.content;
					var x5 = p.x + nnx;
					var y5 = p.y + nny;
					var r5 = p.r;
					var g5 = p.g;
					var b5 = p.b;
					var a5 = p.a;
					var this41 = _this17.tmp;
					if(this41.pos == this41.array.length) {
						var newSize40 = this41.array.length << 1;
						if(newSize40 < 128) {
							newSize40 = 128;
						}
						var newArray40 = new Float32Array(newSize40);
						newArray40.set(this41.array);
						this41.array = newArray40;
					}
					this41.array[this41.pos++] = x5;
					var this42 = _this17.tmp;
					if(this42.pos == this42.array.length) {
						var newSize41 = this42.array.length << 1;
						if(newSize41 < 128) {
							newSize41 = 128;
						}
						var newArray41 = new Float32Array(newSize41);
						newArray41.set(this42.array);
						this42.array = newArray41;
					}
					this42.array[this42.pos++] = y5;
					var this43 = _this17.tmp;
					if(this43.pos == this43.array.length) {
						var newSize42 = this43.array.length << 1;
						if(newSize42 < 128) {
							newSize42 = 128;
						}
						var newArray42 = new Float32Array(newSize42);
						newArray42.set(this43.array);
						this43.array = newArray42;
					}
					this43.array[this43.pos++] = 0;
					var this44 = _this17.tmp;
					if(this44.pos == this44.array.length) {
						var newSize43 = this44.array.length << 1;
						if(newSize43 < 128) {
							newSize43 = 128;
						}
						var newArray43 = new Float32Array(newSize43);
						newArray43.set(this44.array);
						this44.array = newArray43;
					}
					this44.array[this44.pos++] = 0;
					var this45 = _this17.tmp;
					if(this45.pos == this45.array.length) {
						var newSize44 = this45.array.length << 1;
						if(newSize44 < 128) {
							newSize44 = 128;
						}
						var newArray44 = new Float32Array(newSize44);
						newArray44.set(this45.array);
						this45.array = newArray44;
					}
					this45.array[this45.pos++] = r5;
					var this46 = _this17.tmp;
					if(this46.pos == this46.array.length) {
						var newSize45 = this46.array.length << 1;
						if(newSize45 < 128) {
							newSize45 = 128;
						}
						var newArray45 = new Float32Array(newSize45);
						newArray45.set(this46.array);
						this46.array = newArray45;
					}
					this46.array[this46.pos++] = g5;
					var this47 = _this17.tmp;
					if(this47.pos == this47.array.length) {
						var newSize46 = this47.array.length << 1;
						if(newSize46 < 128) {
							newSize46 = 128;
						}
						var newArray46 = new Float32Array(newSize46);
						newArray46.set(this47.array);
						this47.array = newArray46;
					}
					this47.array[this47.pos++] = b5;
					var this48 = _this17.tmp;
					if(this48.pos == this48.array.length) {
						var newSize47 = this48.array.length << 1;
						if(newSize47 < 128) {
							newSize47 = 128;
						}
						var newArray47 = new Float32Array(newSize47);
						newArray47.set(this48.array);
						this48.array = newArray47;
					}
					this48.array[this48.pos++] = a5;
					_this17.bufferDirty = true;
					var _this18 = this.content;
					var x6 = p.x - nx;
					var y6 = p.y - ny;
					var r6 = p.r;
					var g6 = p.g;
					var b6 = p.b;
					var a6 = p.a;
					var this49 = _this18.tmp;
					if(this49.pos == this49.array.length) {
						var newSize48 = this49.array.length << 1;
						if(newSize48 < 128) {
							newSize48 = 128;
						}
						var newArray48 = new Float32Array(newSize48);
						newArray48.set(this49.array);
						this49.array = newArray48;
					}
					this49.array[this49.pos++] = x6;
					var this50 = _this18.tmp;
					if(this50.pos == this50.array.length) {
						var newSize49 = this50.array.length << 1;
						if(newSize49 < 128) {
							newSize49 = 128;
						}
						var newArray49 = new Float32Array(newSize49);
						newArray49.set(this50.array);
						this50.array = newArray49;
					}
					this50.array[this50.pos++] = y6;
					var this51 = _this18.tmp;
					if(this51.pos == this51.array.length) {
						var newSize50 = this51.array.length << 1;
						if(newSize50 < 128) {
							newSize50 = 128;
						}
						var newArray50 = new Float32Array(newSize50);
						newArray50.set(this51.array);
						this51.array = newArray50;
					}
					this51.array[this51.pos++] = 0;
					var this52 = _this18.tmp;
					if(this52.pos == this52.array.length) {
						var newSize51 = this52.array.length << 1;
						if(newSize51 < 128) {
							newSize51 = 128;
						}
						var newArray51 = new Float32Array(newSize51);
						newArray51.set(this52.array);
						this52.array = newArray51;
					}
					this52.array[this52.pos++] = 0;
					var this53 = _this18.tmp;
					if(this53.pos == this53.array.length) {
						var newSize52 = this53.array.length << 1;
						if(newSize52 < 128) {
							newSize52 = 128;
						}
						var newArray52 = new Float32Array(newSize52);
						newArray52.set(this53.array);
						this53.array = newArray52;
					}
					this53.array[this53.pos++] = r6;
					var this54 = _this18.tmp;
					if(this54.pos == this54.array.length) {
						var newSize53 = this54.array.length << 1;
						if(newSize53 < 128) {
							newSize53 = 128;
						}
						var newArray53 = new Float32Array(newSize53);
						newArray53.set(this54.array);
						this54.array = newArray53;
					}
					this54.array[this54.pos++] = g6;
					var this55 = _this18.tmp;
					if(this55.pos == this55.array.length) {
						var newSize54 = this55.array.length << 1;
						if(newSize54 < 128) {
							newSize54 = 128;
						}
						var newArray54 = new Float32Array(newSize54);
						newArray54.set(this55.array);
						this55.array = newArray54;
					}
					this55.array[this55.pos++] = b6;
					var this56 = _this18.tmp;
					if(this56.pos == this56.array.length) {
						var newSize55 = this56.array.length << 1;
						if(newSize55 < 128) {
							newSize55 = 128;
						}
						var newArray55 = new Float32Array(newSize55);
						newArray55.set(this56.array);
						this56.array = newArray55;
					}
					this56.array[this56.pos++] = a6;
					_this18.bufferDirty = true;
					var _this19 = this.content;
					var x7 = p.x - nnx;
					var y7 = p.y - nny;
					var r7 = p.r;
					var g7 = p.g;
					var b7 = p.b;
					var a7 = p.a;
					var this57 = _this19.tmp;
					if(this57.pos == this57.array.length) {
						var newSize56 = this57.array.length << 1;
						if(newSize56 < 128) {
							newSize56 = 128;
						}
						var newArray56 = new Float32Array(newSize56);
						newArray56.set(this57.array);
						this57.array = newArray56;
					}
					this57.array[this57.pos++] = x7;
					var this58 = _this19.tmp;
					if(this58.pos == this58.array.length) {
						var newSize57 = this58.array.length << 1;
						if(newSize57 < 128) {
							newSize57 = 128;
						}
						var newArray57 = new Float32Array(newSize57);
						newArray57.set(this58.array);
						this58.array = newArray57;
					}
					this58.array[this58.pos++] = y7;
					var this59 = _this19.tmp;
					if(this59.pos == this59.array.length) {
						var newSize58 = this59.array.length << 1;
						if(newSize58 < 128) {
							newSize58 = 128;
						}
						var newArray58 = new Float32Array(newSize58);
						newArray58.set(this59.array);
						this59.array = newArray58;
					}
					this59.array[this59.pos++] = 0;
					var this60 = _this19.tmp;
					if(this60.pos == this60.array.length) {
						var newSize59 = this60.array.length << 1;
						if(newSize59 < 128) {
							newSize59 = 128;
						}
						var newArray59 = new Float32Array(newSize59);
						newArray59.set(this60.array);
						this60.array = newArray59;
					}
					this60.array[this60.pos++] = 0;
					var this61 = _this19.tmp;
					if(this61.pos == this61.array.length) {
						var newSize60 = this61.array.length << 1;
						if(newSize60 < 128) {
							newSize60 = 128;
						}
						var newArray60 = new Float32Array(newSize60);
						newArray60.set(this61.array);
						this61.array = newArray60;
					}
					this61.array[this61.pos++] = r7;
					var this62 = _this19.tmp;
					if(this62.pos == this62.array.length) {
						var newSize61 = this62.array.length << 1;
						if(newSize61 < 128) {
							newSize61 = 128;
						}
						var newArray61 = new Float32Array(newSize61);
						newArray61.set(this62.array);
						this62.array = newArray61;
					}
					this62.array[this62.pos++] = g7;
					var this63 = _this19.tmp;
					if(this63.pos == this63.array.length) {
						var newSize62 = this63.array.length << 1;
						if(newSize62 < 128) {
							newSize62 = 128;
						}
						var newArray62 = new Float32Array(newSize62);
						newArray62.set(this63.array);
						this63.array = newArray62;
					}
					this63.array[this63.pos++] = b7;
					var this64 = _this19.tmp;
					if(this64.pos == this64.array.length) {
						var newSize63 = this64.array.length << 1;
						if(newSize63 < 128) {
							newSize63 = 128;
						}
						var newArray63 = new Float32Array(newSize63);
						newArray63.set(this64.array);
						this64.array = newArray63;
					}
					this64.array[this64.pos++] = a7;
					_this19.bufferDirty = true;
					var _this20 = this.content;
					_this20.index.push(this.pindex + 1);
					_this20.indexDirty = true;
					var _this21 = this.content;
					_this21.index.push(pnext1);
					_this21.indexDirty = true;
					var _this22 = this.content;
					_this22.index.push(this.pindex + 2);
					_this22.indexDirty = true;
					var _this23 = this.content;
					_this23.index.push(this.pindex + 1);
					_this23.indexDirty = true;
					var _this24 = this.content;
					_this24.index.push(pnext1);
					_this24.indexDirty = true;
					var _this25 = this.content;
					_this25.index.push(pnext1 + 1);
					_this25.indexDirty = true;
				}
				var _this26 = this.content;
				_this26.index.push(this.pindex);
				_this26.indexDirty = true;
				var _this27 = this.content;
				_this27.index.push(this.pindex + 1);
				_this27.indexDirty = true;
				var _this28 = this.content;
				_this28.index.push(this.pindex + 2);
				_this28.indexDirty = true;
				this.pindex += 3;
			}
			prev = p;
			p = next;
		}
	}
	,flushFill: function(i0) {
		if(this.tmpPoints.length < 3) {
			return;
		}
		var pts = this.tmpPoints;
		var p0 = pts[0];
		var p1 = pts[pts.length - 1];
		var last = null;
		var tmp;
		var f = p0.x - p1.x;
		if((f < 0 ? -f : f) < 1e-9) {
			var f = p0.y - p1.y;
			tmp = (f < 0 ? -f : f) < 1e-9;
		} else {
			tmp = false;
		}
		if(tmp) {
			last = pts.pop();
		}
		if(this.isConvex(pts)) {
			var _g = 1;
			var _g1 = pts.length - 1;
			while(_g < _g1) {
				var i = _g++;
				var _this = this.content;
				_this.index.push(i0);
				_this.indexDirty = true;
				var _this1 = this.content;
				_this1.index.push(i0 + i);
				_this1.indexDirty = true;
				var _this2 = this.content;
				_this2.index.push(i0 + i + 1);
				_this2.indexDirty = true;
			}
		} else {
			var ear = h2d_Graphics.EARCUT;
			if(ear == null) {
				ear = new hxd_earcut_Earcut();
				h2d_Graphics.EARCUT = ear;
			}
			var _g = 0;
			var _g1 = ear.triangulate_h2d_GPoint(pts);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				var _this = this.content;
				_this.index.push(i + i0);
				_this.indexDirty = true;
			}
		}
		if(last != null) {
			pts.push(last);
		}
	}
	,flush: function() {
		if(this.tmpPoints.length == 0) {
			return;
		}
		if(this.doFill) {
			this.flushFill(this.pindex);
			this.pindex += this.tmpPoints.length;
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		if(this.lineSize > 0) {
			this.flushLine(this.pindex);
			if(this.content.next()) {
				this.pindex = 0;
			}
		}
		this.tmpPoints = [];
	}
	,lineStyle: function(size,color,alpha) {
		if(alpha == null) {
			alpha = 1.;
		}
		if(color == null) {
			color = 0;
		}
		if(size == null) {
			size = 0;
		}
		this.flush();
		this.lineSize = size;
		this.lineA = alpha;
		this.lineR = (color >> 16 & 255) / 255.;
		this.lineG = (color >> 8 & 255) / 255.;
		this.lineB = (color & 255) / 255.;
	}
	,drawRect: function(x,y,w,h) {
		this.flush();
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var x1 = x + w;
		this.addVertex(x1,y,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y * this.mc + this.mx,x1 * this.mb + y * this.md + this.my);
		var x1 = x + w;
		var y1 = y + h;
		this.addVertex(x1,y1,this.curR,this.curG,this.curB,this.curA,x1 * this.ma + y1 * this.mc + this.mx,x1 * this.mb + y1 * this.md + this.my);
		var y1 = y + h;
		this.addVertex(x,y1,this.curR,this.curG,this.curB,this.curA,x * this.ma + y1 * this.mc + this.mx,x * this.mb + y1 * this.md + this.my);
		this.addVertex(x,y,this.curR,this.curG,this.curB,this.curA,x * this.ma + y * this.mc + this.mx,x * this.mb + y * this.md + this.my);
		var e = 0.01;
		this.tmpPoints[0].x += e;
		this.tmpPoints[0].y += e;
		this.tmpPoints[1].y += e;
		this.tmpPoints[3].x += e;
		this.tmpPoints[4].x += e;
		this.tmpPoints[4].y += e;
		this.flush();
	}
	,addVertex: function(x,y,r,g,b,a,u,v) {
		if(v == null) {
			v = 0.;
		}
		if(u == null) {
			u = 0.;
		}
		if(x < this.xMin) {
			this.xMin = x;
		}
		if(y < this.yMin) {
			this.yMin = y;
		}
		if(x > this.xMax) {
			this.xMax = x;
		}
		if(y > this.yMax) {
			this.yMax = y;
		}
		if(this.doFill) {
			var _this = this.content;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = x;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = y;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = u;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = v;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = r;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = g;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = b;
			var this1 = _this.tmp;
			if(this1.pos == this1.array.length) {
				var newSize = this1.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(this1.array);
				this1.array = newArray;
			}
			this1.array[this1.pos++] = a;
			_this.bufferDirty = true;
		}
		var gp = new h2d_GPoint();
		gp.load(x,y,this.lineR,this.lineG,this.lineB,this.lineA);
		this.tmpPoints.push(gp);
	}
	,draw: function(ctx) {
		if(!ctx.beginDrawObject(this,this.tile.innerTex)) {
			return;
		}
		this.content.render(ctx.engine);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		this.flush();
		this.content.flush();
	}
	,__class__: h2d_Graphics
});
var h2d_Text = function(font,parent) {
	this.realMaxWidth = -1;
	this.constraintWidth = -1;
	this.lineSpacing = 0;
	this.letterSpacing = 0;
	h2d_Drawable.call(this,parent);
	this.set_font(font);
	this.set_textAlign(h2d_Align.Left);
	this.set_text("");
	this.currentText = "";
	this.set_textColor(16777215);
};
$hxClasses["h2d.Text"] = h2d_Text;
h2d_Text.__name__ = "h2d.Text";
h2d_Text.__super__ = h2d_Drawable;
h2d_Text.prototype = $extend(h2d_Drawable.prototype,{
	set_font: function(font) {
		if(this.font == font) {
			return font;
		}
		this.font = font;
		if(font != null) {
			var _g = font.type;
			switch(_g._hx_index) {
			case 0:
				if(this.sdfShader != null) {
					this.removeShader(this.sdfShader);
					this.sdfShader = null;
				}
				break;
			case 1:
				var smoothing = _g.smoothing;
				var alphaCutoff = _g.alphaCutoff;
				var channel = _g.channel;
				if(this.sdfShader == null) {
					this.sdfShader = new h3d_shader_SignedDistanceField();
					this.addShader(this.sdfShader);
				}
				this.sdfShader.alphaCutoff__ = alphaCutoff;
				this.sdfShader.smoothing__ = smoothing;
				var _this = this.sdfShader;
				_this.constModified = true;
				_this.channel__ = channel;
				break;
			}
		}
		if(this.glyphs != null) {
			var _this = this.glyphs;
			if(_this != null && _this.parent != null) {
				_this.parent.removeChild(_this);
			}
		}
		this.glyphs = new h2d_TileGroup(font == null ? null : font.tile,this);
		this.glyphs.set_visible(false);
		this.rebuild();
		return font;
	}
	,set_textAlign: function(a) {
		if(this.textAlign == a) {
			return a;
		}
		this.textAlign = a;
		this.rebuild();
		return a;
	}
	,constraintSize: function(width,height) {
		this.constraintWidth = width;
		this.updateConstraint();
	}
	,onAdd: function() {
		h2d_Drawable.prototype.onAdd.call(this);
		this.rebuild();
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
	}
	,draw: function(ctx) {
		if(this.glyphs == null) {
			this.emitTile(ctx,h2d_Tile.fromColor(16711935,16,16));
			return;
		}
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(this.needsRebuild) {
			this.initGlyphs(this.currentText);
		}
		if(this.dropShadow != null) {
			var oldX = this.absX;
			var oldY = this.absY;
			this.absX += this.dropShadow.dx * this.matA + this.dropShadow.dy * this.matC;
			this.absY += this.dropShadow.dx * this.matB + this.dropShadow.dy * this.matD;
			var oldR = this.color.x;
			var oldG = this.color.y;
			var oldB = this.color.z;
			var oldA = this.color.w;
			var _this = this.color;
			var c = this.dropShadow.color;
			_this.x = (c >> 16 & 255) / 255;
			_this.y = (c >> 8 & 255) / 255;
			_this.z = (c & 255) / 255;
			_this.w = (c >>> 24) / 255;
			this.color.w = this.dropShadow.alpha * oldA;
			this.glyphs.drawWith(ctx,this);
			this.absX = oldX;
			this.absY = oldY;
			var _this = this.color;
			var x = oldR;
			var y = oldG;
			var z = oldB;
			var w = oldA;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		this.glyphs.drawWith(ctx,this);
	}
	,set_text: function(t) {
		var t1 = t == null ? "null" : t;
		if(t1 == this.text) {
			return t1;
		}
		this.text = t1;
		this.textChanged = true;
		this.validateText();
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
		return t1;
	}
	,validateText: function() {
	}
	,rebuild: function() {
		this.calcDone = false;
		this.needsRebuild = true;
		if(this.parentContainer != null) {
			this.parentContainer.contentChanged(this);
		}
	}
	,splitRawText: function(text,leftMargin,afterData,font,sizes,prevChar) {
		if(prevChar == null) {
			prevChar = -1;
		}
		if(afterData == null) {
			afterData = 0.;
		}
		if(leftMargin == null) {
			leftMargin = 0.;
		}
		var maxWidth = this.realMaxWidth;
		if(maxWidth < 0) {
			if(sizes == null) {
				return text;
			} else {
				maxWidth = Infinity;
			}
		}
		if(font == null) {
			font = this.font;
		}
		var lines = [];
		var restPos = 0;
		var x = leftMargin;
		var _g = 0;
		var _g1 = text.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(text,i);
			var c = font.glyphs.h[cc];
			if(c == null) {
				c = font.charset.resolveChar(cc,font.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? font.nullChar : font.defaultChar;
				}
			}
			var e = c;
			var newline = cc == 10;
			var esize = e.width + e.getKerningOffset(prevChar);
			var nc = HxOverrides.cca(text,i + 1);
			if(font.charset.isBreakChar(cc) && (nc == null || !font.charset.isComplementChar(nc))) {
				if(lines.length == 0 && leftMargin > 0 && x > maxWidth) {
					lines.push("");
					if(sizes != null) {
						sizes.push(leftMargin);
					}
					x -= leftMargin;
				}
				var size = x + esize + this.letterSpacing;
				var k = i + 1;
				var max = text.length;
				var prevChar1 = prevChar;
				var breakFound = false;
				while(size <= maxWidth && k < max) {
					var cc1 = HxOverrides.cca(text,k++);
					if(font.charset.isSpace(cc1) || cc1 == 10) {
						breakFound = true;
						break;
					}
					var c1 = font.glyphs.h[cc1];
					if(c1 == null) {
						c1 = font.charset.resolveChar(cc1,font.glyphs);
						if(c1 == null) {
							c1 = cc1 == 13 || cc1 == 10 ? font.nullChar : font.defaultChar;
						}
					}
					var e1 = c1;
					size += e1.width + this.letterSpacing + e1.getKerningOffset(prevChar1);
					prevChar1 = cc1;
					var nc1 = HxOverrides.cca(text,k + 1);
					if(font.charset.isBreakChar(cc1) && (nc1 == null || !font.charset.isComplementChar(nc1))) {
						break;
					}
				}
				if(size > maxWidth || !breakFound && size + afterData > maxWidth) {
					newline = true;
					if(font.charset.isSpace(cc)) {
						lines.push(HxOverrides.substr(text,restPos,i - restPos));
						e = null;
					} else {
						lines.push(HxOverrides.substr(text,restPos,i + 1 - restPos));
					}
					restPos = i + 1;
				}
			}
			if(e != null && cc != 10) {
				x += esize + this.letterSpacing;
			}
			if(newline) {
				if(sizes != null) {
					sizes.push(x);
				}
				x = 0;
				prevChar = -1;
			} else {
				prevChar = cc;
			}
		}
		if(restPos < text.length) {
			if(lines.length == 0 && leftMargin > 0 && x + afterData - this.letterSpacing > maxWidth) {
				lines.push("");
				if(sizes != null) {
					sizes.push(leftMargin);
				}
				x -= leftMargin;
			}
			lines.push(HxOverrides.substr(text,restPos,text.length - restPos));
			if(sizes != null) {
				sizes.push(x);
			}
		}
		return lines.join("\n");
	}
	,initGlyphs: function(text,rebuild) {
		if(rebuild == null) {
			rebuild = true;
		}
		if(rebuild) {
			this.glyphs.clear();
		}
		var x = 0.;
		var y = 0.;
		var xMax = 0.;
		var xMin = 0.;
		var yMin = 0.;
		var prevChar = -1;
		var linei = 0;
		var align = this.textAlign;
		var lines = [];
		var dl = this.font.lineHeight + this.lineSpacing;
		var t = this.splitRawText(text,0,0,null,lines);
		var _g = 0;
		while(_g < lines.length) {
			var lw = lines[_g];
			++_g;
			if(lw > x) {
				x = lw;
			}
		}
		this.calcWidth = x;
		switch(align._hx_index) {
		case 0:
			x = 0;
			break;
		case 1:case 2:case 3:case 4:
			var max = align == h2d_Align.MultilineCenter || align == h2d_Align.MultilineRight ? Math.ceil(this.calcWidth) : this.realMaxWidth < 0 ? 0 : Math.ceil(this.realMaxWidth);
			var k = align == h2d_Align.Center || align == h2d_Align.MultilineCenter ? 0.5 : 1;
			var _g = 0;
			var _g1 = lines.length;
			while(_g < _g1) {
				var i = _g++;
				lines[i] = Math.floor((max - lines[i]) * k);
			}
			x = lines[0];
			xMin = x;
			break;
		}
		var _g = 0;
		var _g1 = t.length;
		while(_g < _g1) {
			var i = _g++;
			var cc = HxOverrides.cca(t,i);
			var _this = this.font;
			var c = _this.glyphs.h[cc];
			if(c == null) {
				c = _this.charset.resolveChar(cc,_this.glyphs);
				if(c == null) {
					c = cc == 13 || cc == 10 ? _this.nullChar : _this.defaultChar;
				}
			}
			var e = c;
			var offs = e.getKerningOffset(prevChar);
			var esize = e.width + offs;
			if(cc == 10) {
				if(x > xMax) {
					xMax = x;
				}
				switch(align._hx_index) {
				case 0:
					x = 0;
					break;
				case 1:case 2:case 3:case 4:
					x = lines[++linei];
					if(x < xMin) {
						xMin = x;
					}
					break;
				}
				y += dl;
				prevChar = -1;
			} else {
				if(e != null) {
					if(rebuild) {
						var _this1 = this.glyphs;
						_this1.content.add(x + offs,y,_this1.curColor.x,_this1.curColor.y,_this1.curColor.z,_this1.curColor.w,e.t);
					}
					if(y == 0 && e.t.dy < yMin) {
						yMin = e.t.dy;
					}
					x += esize + this.letterSpacing;
				}
				prevChar = cc;
			}
		}
		if(x > xMax) {
			xMax = x;
		}
		this.calcXMin = xMin;
		this.calcYMin = yMin;
		this.calcWidth = xMax - xMin;
		this.calcHeight = y + this.font.lineHeight;
		this.calcSizeHeight = y + (this.font.baseLine > 0 ? this.font.baseLine : this.font.lineHeight);
		this.calcDone = true;
		if(rebuild) {
			this.needsRebuild = false;
		}
	}
	,get_textHeight: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcHeight;
	}
	,get_textWidth: function() {
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		return this.calcWidth;
	}
	,set_maxWidth: function(w) {
		if(this.maxWidth == w) {
			return w;
		}
		this.maxWidth = w;
		this.updateConstraint();
		return w;
	}
	,updateConstraint: function() {
		var old = this.realMaxWidth;
		if(this.maxWidth == null) {
			this.realMaxWidth = this.constraintWidth;
		} else if(this.constraintWidth < 0) {
			this.realMaxWidth = this.maxWidth;
		} else {
			var a = this.maxWidth;
			var b = this.constraintWidth;
			this.realMaxWidth = a > b ? b : a;
		}
		if(this.realMaxWidth != old) {
			this.rebuild();
		}
	}
	,set_textColor: function(c) {
		if(this.textColor == c) {
			return c;
		}
		this.textColor = c;
		var a = this.color.w;
		var _this = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.color.w = a;
		return c;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.textChanged && this.text != this.currentText) {
			this.textChanged = false;
			this.currentText = this.text;
			this.calcDone = false;
			this.needsRebuild = true;
		}
		if(!this.calcDone) {
			this.initGlyphs(this.text,this.needsRebuild);
		}
		var x;
		var y;
		var w;
		var h;
		if(forSize) {
			x = this.calcXMin;
			y = 0.;
			w = this.calcWidth;
			h = this.calcSizeHeight;
		} else {
			x = this.calcXMin;
			y = this.calcYMin;
			w = this.calcWidth;
			h = this.calcHeight - this.calcYMin;
		}
		this.addBounds(relativeTo,out,x,y,w,h);
	}
	,__class__: h2d_Text
});
var hxd_Interactive = function() { };
$hxClasses["hxd.Interactive"] = hxd_Interactive;
hxd_Interactive.__name__ = "hxd.Interactive";
hxd_Interactive.__isInterface__ = true;
hxd_Interactive.prototype = {
	__class__: hxd_Interactive
};
var h2d_Interactive = function(width,height,parent,shape) {
	this.shapeY = 0;
	this.shapeX = 0;
	this.mouseDownButton = -1;
	this.enableRightButton = false;
	this.propagateEvents = false;
	this.cancelEvents = false;
	this.cursor = hxd_Cursor.Button;
	h2d_Drawable.call(this,parent);
	this.width = width;
	this.height = height;
	this.shape = shape;
};
$hxClasses["h2d.Interactive"] = h2d_Interactive;
h2d_Interactive.__name__ = "h2d.Interactive";
h2d_Interactive.__interfaces__ = [hxd_Interactive];
h2d_Interactive.__super__ = h2d_Drawable;
h2d_Interactive.prototype = $extend(h2d_Drawable.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		this.updateMask();
		h2d_Drawable.prototype.onAdd.call(this);
	}
	,draw: function(ctx) {
		if(this.backgroundColor != null) {
			this.emitTile(ctx,h2d_Tile.fromColor(this.backgroundColor,this.width | 0,this.height | 0,(this.backgroundColor >>> 24) / 255));
		}
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(this.backgroundColor != null || forSize) {
			this.addBounds(relativeTo,out,0,0,this.width | 0,this.height | 0);
		}
	}
	,onHierarchyMoved: function(parentChanged) {
		h2d_Drawable.prototype.onHierarchyMoved.call(this,parentChanged);
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = this.getScene();
			if(this.scene != null) {
				this.scene.addEventTarget(this);
			}
		}
		if(parentChanged) {
			this.updateMask();
		}
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this,true);
			this.scene = null;
		}
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,checkBounds: function(e) {
		switch(e.kind._hx_index) {
		case 4:case 6:case 7:case 10:
			return false;
		default:
			return true;
		}
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.parentMask != null && this.checkBounds(e)) {
			var p = this.parentMask;
			var pt = new h2d_col_Point(e.relX,e.relY);
			this.localToGlobal(pt);
			var saveX = pt.x;
			var saveY = pt.y;
			while(p != null) {
				pt.x = saveX;
				pt.y = saveY;
				var pt1 = p.globalToLocal(pt);
				if(pt1.x < 0 || pt1.y < 0 || pt1.x > p.width || pt1.y > p.height) {
					e.cancel = true;
					return;
				}
				p = p.parentMask;
			}
		}
		if(this.shape == null && this.isEllipse && this.checkBounds(e)) {
			var cx = this.width * 0.5;
			var cy = this.height * 0.5;
			var dx = (e.relX - cx) / cx;
			var dy = (e.relY - cy) / cy;
			if(dx * dx + dy * dy > 1) {
				e.cancel = true;
				return;
			}
		}
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,calcAbsPos: function() {
		h2d_Drawable.prototype.calcAbsPos.call(this);
		this.invDet = 1 / (this.matA * this.matD - this.matB * this.matC);
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h2d_Interactive
});
var h2d_Layers = function(parent) {
	h2d_Object.call(this,parent);
	this.layersIndexes = [];
	this.layerCount = 0;
};
$hxClasses["h2d.Layers"] = h2d_Layers;
h2d_Layers.__name__ = "h2d.Layers";
h2d_Layers.__super__ = h2d_Object;
h2d_Layers.prototype = $extend(h2d_Object.prototype,{
	addChild: function(s) {
		this.addChildAt(s,0);
	}
	,addChildAt: function(s,layer) {
		if(s.parent == this) {
			var old = s.allocated;
			s.allocated = false;
			this.removeChild(s);
			s.allocated = old;
		}
		while(layer >= this.layerCount) this.layersIndexes[this.layerCount++] = this.children.length;
		h2d_Object.prototype.addChildAt.call(this,s,this.layersIndexes[layer]);
		var _g = layer;
		var _g1 = this.layerCount;
		while(_g < _g1) {
			var i = _g++;
			this.layersIndexes[i]++;
		}
	}
	,removeChild: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				this.children.splice(i,1);
				if(s.allocated) {
					s.onRemove();
				}
				s.parent = null;
				s.posChanged = true;
				if(s.parentContainer != null) {
					s.setParentContainer(null);
				}
				var k = this.layerCount - 1;
				while(k >= 0 && this.layersIndexes[k] > i) {
					this.layersIndexes[k]--;
					--k;
				}
				if(this.parentContainer != null) {
					this.parentContainer.contentChanged(this);
				}
				break;
			}
		}
	}
	,over: function(s) {
		var _g = 0;
		var _g1 = this.children.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.children[i] == s) {
				var _g2 = 0;
				var _g3 = this.layersIndexes;
				while(_g2 < _g3.length) {
					var l = _g3[_g2];
					++_g2;
					if(l > i) {
						var _g4 = i;
						var _g5 = l - 1;
						while(_g4 < _g5) {
							var p = _g4++;
							this.children[p] = this.children[p + 1];
						}
						this.children[l - 1] = s;
						if(s.allocated) {
							s.onHierarchyMoved(false);
						}
						return;
					}
				}
				return;
			}
		}
	}
	,__class__: h2d_Layers
});
var h2d_Mask = function(width,height,parent) {
	this.scrollY = 0;
	this.scrollX = 0;
	h2d_Object.call(this,parent);
	this.width = width;
	this.height = height;
};
$hxClasses["h2d.Mask"] = h2d_Mask;
h2d_Mask.__name__ = "h2d.Mask";
h2d_Mask.maskWith = function(ctx,object,width,height,scrollX,scrollY) {
	if(scrollY == null) {
		scrollY = 0;
	}
	if(scrollX == null) {
		scrollX = 0;
	}
	var x1 = object.absX + scrollX;
	var y1 = object.absY + scrollY;
	var x2 = width * object.matA + height * object.matC + x1;
	var y2 = width * object.matB + height * object.matD + y1;
	var tmp;
	if(x1 > x2) {
		tmp = x1;
		x1 = x2;
		x2 = tmp;
	}
	if(y1 > y2) {
		tmp = y1;
		y1 = y2;
		y2 = tmp;
	}
	ctx.pushRenderZone(x1,y1,x2 - x1,y2 - y1);
};
h2d_Mask.unmask = function(ctx) {
	ctx.popRenderZone();
};
h2d_Mask.__super__ = h2d_Object;
h2d_Mask.prototype = $extend(h2d_Object.prototype,{
	onHierarchyMoved: function(parentChanged) {
		h2d_Object.prototype.onHierarchyMoved.call(this,parentChanged);
		if(parentChanged) {
			this.updateMask();
		}
	}
	,onAdd: function() {
		h2d_Object.prototype.onAdd.call(this);
		this.updateMask();
	}
	,updateMask: function() {
		this.parentMask = null;
		var p = this.parent;
		while(p != null) {
			var m = ((p) instanceof h2d_Mask) ? p : null;
			if(m != null) {
				this.parentMask = m;
				break;
			}
			p = p.parent;
		}
	}
	,calcAbsPos: function() {
		h2d_Object.prototype.calcAbsPos.call(this);
		this.absX -= this.scrollX;
		this.absY -= this.scrollY;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		var xMin = out.xMin;
		var yMin = out.yMin;
		var xMax = out.xMax;
		var yMax = out.yMax;
		out.xMin = 1e20;
		out.yMin = 1e20;
		out.xMax = -1e20;
		out.yMax = -1e20;
		if(this.posChanged) {
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				c.posChanged = true;
			}
			this.posChanged = false;
		}
		this.addBounds(relativeTo,out,this.scrollX,this.scrollY,this.width,this.height);
		var bxMin = out.xMin;
		var byMin = out.yMin;
		var bxMax = out.xMax;
		var byMax = out.yMax;
		out.xMin = xMin;
		out.xMax = xMax;
		out.yMin = yMin;
		out.yMax = yMax;
		h2d_Object.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		if(out.xMin < bxMin) {
			out.xMin = xMin > bxMin ? bxMin : xMin;
		}
		if(out.yMin < byMin) {
			out.yMin = yMin > byMin ? byMin : yMin;
		}
		if(out.xMax > bxMax) {
			out.xMax = xMax < bxMax ? bxMax : xMax;
		}
		if(out.yMax > byMax) {
			out.yMax = yMax < byMax ? byMax : yMax;
		}
	}
	,drawRec: function(ctx) {
		h2d_Mask.maskWith(ctx,this,this.width,this.height,this.scrollX,this.scrollY);
		h2d_Object.prototype.drawRec.call(this,ctx);
		h2d_Mask.unmask(ctx);
	}
	,__class__: h2d_Mask
});
var h3d_impl_RenderContext = function() {
	this.engine = h3d_Engine.CURRENT;
	this.frame = 0;
	this.time = 0.;
	this.elapsedTime = 1. / hxd_System.getDefaultFrameRate();
	this.textures = new h3d_impl_TextureCache(this);
};
$hxClasses["h3d.impl.RenderContext"] = h3d_impl_RenderContext;
h3d_impl_RenderContext.__name__ = "h3d.impl.RenderContext";
h3d_impl_RenderContext.prototype = {
	dispose: function() {
		this.textures.dispose();
	}
	,__class__: h3d_impl_RenderContext
};
var h2d_RenderContext = function(scene) {
	this.renderZoneIndex = 0;
	this.renderZoneStack = [];
	this.tmpBounds = new h2d_col_Bounds();
	this.defaultSmooth = false;
	this.globalAlpha = 1.;
	h3d_impl_RenderContext.call(this);
	this.scene = scene;
	this.bufPos = 0;
	this.manager = new h3d_pass_ShaderManager();
	this.pass = new h3d_mat_Pass("",null);
	this.pass.depth(true,h3d_mat_Compare.Always);
	this.pass.set_culling(h3d_mat_Face.None);
	this.baseShader = new h3d_shader_Base2d();
	this.baseShader.setPriority(100);
	this.baseShader.zValue__ = 0.;
	this.baseShaderList = new hxsl_ShaderList(this.baseShader);
	this.targetsStack = [];
	this.targetsStackIndex = 0;
	this.cameraStack = [];
	this.cameraStackIndex = 0;
	this.filterStack = [];
};
$hxClasses["h2d.RenderContext"] = h2d_RenderContext;
h2d_RenderContext.__name__ = "h2d.RenderContext";
h2d_RenderContext.__super__ = h3d_impl_RenderContext;
h2d_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	dispose: function() {
		h3d_impl_RenderContext.prototype.dispose.call(this);
		if(this.fixedBuffer != null) {
			this.fixedBuffer.dispose();
		}
	}
	,begin: function() {
		this.texture = null;
		this.currentObj = null;
		this.bufPos = 0;
		this.stride = 0;
		this.viewA = this.scene.viewportA;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = this.scene.viewportD;
		this.viewX = this.scene.viewportX;
		this.viewY = this.scene.viewportY;
		this.targetFlipY = this.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) ? -1 : 1;
		this.baseFlipY = this.engine.getCurrentTarget() != null ? this.targetFlipY : 1;
		this.inFilter = null;
		this.manager.globals.set("time",this.time);
		this.manager.globals.set("global.time",this.time);
		var _this = this.baseShader;
		_this.constModified = true;
		_this.pixelAlign__ = false;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / this.engine.width;
		var y = 0.5 / this.engine.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewportA__;
		var x = this.scene.viewportA;
		var y = 0;
		var z = this.scene.viewportX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = 0;
		var y = this.scene.viewportD * -this.baseFlipY;
		var z = this.scene.viewportY * -this.baseFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.filterMatrixA__;
		var x = 1;
		var y = 0;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.filterMatrixB__;
		var x = 0;
		var y = 1;
		var z = 0;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.baseShaderList.next = null;
		this.initShaders(this.baseShaderList);
		this.engine.selectMaterial(this.pass);
		this.textures.begin();
	}
	,initShaders: function(shaders) {
		this.currentShaders = shaders;
		this.compiledShader = this.manager.compileShaders(shaders);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(this.compiledShader);
		} else {
			var _this = this.buffers;
			var s = this.compiledShader;
			_this.vertex.grow(s.vertex);
			_this.fragment.grow(s.fragment);
		}
		this.manager.fillGlobals(this.buffers,this.compiledShader);
		this.engine.selectShader(this.compiledShader);
		this.engine.uploadShaderBuffers(this.buffers,0);
	}
	,end: function() {
		this.texture = null;
		this.currentObj = null;
		this.baseShaderList.next = null;
		if(this.targetsStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popTarget()");
		}
		if(this.cameraStackIndex != 0) {
			throw haxe_Exception.thrown("Missing popCamera()");
		}
	}
	,pushCamera: function(cam) {
		var entry = this.cameraStack[this.cameraStackIndex++];
		if(entry == null) {
			entry = { va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0};
			this.cameraStack.push(entry);
		}
		var tmpA = this.viewA;
		var tmpB = this.viewB;
		var tmpC = this.viewC;
		var tmpD = this.viewD;
		entry.va = tmpA;
		entry.vb = tmpB;
		entry.vc = tmpC;
		entry.vd = tmpD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		this.viewA = cam.matA * tmpA + cam.matB * tmpC;
		this.viewB = cam.matA * tmpB + cam.matB * tmpD;
		this.viewC = cam.matC * tmpA + cam.matD * tmpC;
		this.viewD = cam.matC * tmpB + cam.matD * tmpD;
		this.viewX = cam.absX * tmpA + cam.absY * tmpC + this.viewX;
		this.viewY = cam.absX * tmpB + cam.absY * tmpD + this.viewY;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,popCamera: function() {
		if(this.cameraStackIndex == 0) {
			throw haxe_Exception.thrown("Too many popCamera()");
		}
		var inf = this.cameraStack[--this.cameraStackIndex];
		this.viewA = inf.va;
		this.viewB = inf.vb;
		this.viewC = inf.vc;
		this.viewD = inf.vd;
		this.viewX = inf.vx;
		this.viewY = inf.vy;
		var flipY = this.curTarget != null ? -this.targetFlipY : -this.baseFlipY;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
	}
	,pushFilter: function(spr) {
		if(this.filterStack.length == 0 && this.onEnterFilter != null) {
			if(!this.onEnterFilter(spr)) {
				return false;
			}
		}
		this.filterStack.push(spr);
		this.inFilter = spr;
		return true;
	}
	,popFilter: function() {
		var spr = this.filterStack.pop();
		if(this.filterStack.length > 0) {
			this.inFilter = this.filterStack[this.filterStack.length - 1];
		} else {
			this.inFilter = null;
			if(this.onLeaveFilter != null) {
				this.onLeaveFilter(spr);
			}
		}
	}
	,pushTarget: function(t,startX,startY,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(startY == null) {
			startY = 0;
		}
		if(startX == null) {
			startX = 0;
		}
		this.engine.pushTarget(t);
		this.initShaders(this.baseShaderList);
		var entry = this.targetsStack[this.targetsStackIndex++];
		if(entry == null) {
			entry = { t : null, va : 0, vb : 0, vc : 0, vd : 0, vx : 0, vy : 0, hasRZ : false, rzX : 0, rzY : 0, rzW : 0, rzH : 0};
			this.targetsStack.push(entry);
		}
		entry.t = this.curTarget;
		entry.va = this.viewA;
		entry.vb = this.viewB;
		entry.vc = this.viewC;
		entry.vd = this.viewD;
		entry.vx = this.viewX;
		entry.vy = this.viewY;
		entry.hasRZ = this.hasRenderZone;
		entry.rzX = this.renderX;
		entry.rzY = this.renderY;
		entry.rzW = this.renderW;
		entry.rzH = this.renderH;
		if(width < 0) {
			width = t == null ? this.scene.width : t.width;
		}
		if(height < 0) {
			height = t == null ? this.scene.height : t.height;
		}
		this.viewA = 2 / width;
		this.viewB = 0;
		this.viewC = 0;
		this.viewD = 2 / height;
		this.viewX = -1 - startX * this.viewA;
		this.viewY = -1 - startY * this.viewD;
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * -this.targetFlipY;
		var y = this.viewD * -this.targetFlipY;
		var z = this.viewY * -this.targetFlipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.curTarget = t;
		this.currentBlend = null;
		if(this.hasRenderZone) {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,pushTargets: function(texs) {
		this.pushTarget(texs[0]);
		if(texs.length > 1) {
			this.engine.popTarget();
			this.engine.pushTargets(texs);
		}
	}
	,popTarget: function() {
		if(this.targetsStackIndex <= 0) {
			throw haxe_Exception.thrown("Too many popTarget()");
		}
		this.engine.popTarget();
		var tinf = this.targetsStack[--this.targetsStackIndex];
		var t = this.curTarget = tinf.t;
		this.viewA = tinf.va;
		this.viewB = tinf.vb;
		this.viewC = tinf.vc;
		this.viewD = tinf.vd;
		this.viewX = tinf.vx;
		this.viewY = tinf.vy;
		var flipY = t == null ? -this.baseFlipY : -this.targetFlipY;
		this.initShaders(this.baseShaderList);
		var _this = this.baseShader.halfPixelInverse__;
		var x = 0.5 / (t == null ? this.engine.width : t.width);
		var y = 0.5 / (t == null ? this.engine.height : t.height);
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _this = this.baseShader.viewportA__;
		var x = this.viewA;
		var y = this.viewC;
		var z = this.viewX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.viewportB__;
		var x = this.viewB * flipY;
		var y = this.viewD * flipY;
		var z = this.viewY * flipY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		if(tinf.hasRZ) {
			this.setRZ(tinf.rzX,tinf.rzY,tinf.rzW,tinf.rzH);
		}
	}
	,pushRenderZone: function(x,y,w,h) {
		var inf = this.renderZoneStack[this.renderZoneIndex++];
		if(inf == null) {
			inf = { hasRZ : this.hasRenderZone, x : this.renderX, y : this.renderY, w : this.renderW, h : this.renderH};
			this.renderZoneStack[this.renderZoneIndex - 1] = inf;
		} else if(this.hasRenderZone) {
			inf.hasRZ = true;
			inf.x = this.renderX;
			inf.y = this.renderY;
			inf.w = this.renderW;
			inf.h = this.renderH;
		} else {
			inf.hasRZ = false;
		}
		this.setRZ(x,y,w,h);
	}
	,popRenderZone: function() {
		if(this.renderZoneIndex == 0) {
			throw haxe_Exception.thrown("Too many popRenderZone()");
		}
		var inf = this.renderZoneStack[--this.renderZoneIndex];
		if(inf.hasRZ) {
			this.setRZ(inf.x,inf.y,inf.w,inf.h);
		} else {
			this.hasRenderZone = false;
			this.engine.setRenderZone();
		}
	}
	,setRZ: function(x,y,w,h) {
		this.hasRenderZone = true;
		this.renderX = x;
		this.renderY = y;
		this.renderW = w;
		this.renderH = h;
		var scaleX = this.scene.viewportA * this.engine.width / 2;
		var scaleY = this.scene.viewportD * this.engine.height / 2;
		if(this.inFilter != null) {
			var fa = this.baseShader.filterMatrixA__;
			var fb = this.baseShader.filterMatrixB__;
			var x2 = x + w;
			var y2 = y + h;
			var rx1 = x * fa.x + y * fa.y + fa.z;
			var ry1 = x * fb.x + y * fb.y + fb.z;
			var rx2 = x2 * fa.x + y2 * fa.y + fa.z;
			var ry2 = x2 * fb.x + y2 * fb.y + fb.z;
			x = rx1;
			y = ry1;
			w = rx2 - rx1;
			h = ry2 - ry1;
		}
		this.engine.setRenderZone(x * scaleX + (this.scene.viewportX + 1) * (this.engine.width / 2) + 1e-10 | 0,y * scaleY + (this.scene.viewportY + 1) * (this.engine.height / 2) + 1e-10 | 0,w * scaleX + 1e-10 | 0,h * scaleY + 1e-10 | 0);
	}
	,drawScene: function() {
		this.scene.drawRec(this);
	}
	,beforeDraw: function() {
		if(this.texture == null) {
			this.texture = h3d_mat_Texture.fromColor(16711935);
		}
		this.baseShader.texture__ = this.texture;
		this.texture.set_filter((this.currentObj.smooth == null ? this.defaultSmooth : this.currentObj.smooth) ? h3d_mat_Filter.Linear : h3d_mat_Filter.Nearest);
		this.texture.set_wrap(this.currentObj.tileWrap && (this.currentObj.filter == null || this.inFilter != null) ? h3d_mat_Wrap.Repeat : h3d_mat_Wrap.Clamp);
		var blend = this.currentObj.blendMode;
		if(this.inFilter == this.currentObj && blend == h2d_BlendMode.Erase) {
			blend = h2d_BlendMode.Add;
		}
		if(this.inFilterBlend != null) {
			blend = this.inFilterBlend;
		}
		if(blend != this.currentBlend) {
			this.currentBlend = blend;
			this.pass.setBlendMode(blend);
			if(blend == h2d_BlendMode.Alpha || blend == h2d_BlendMode.Add) {
				this.pass.set_blendAlphaSrc(h3d_mat_Blend.One);
				if(this.inFilterBlend != null) {
					this.pass.set_blendSrc(h3d_mat_Blend.One);
				}
			}
		}
		this.manager.fillParams(this.buffers,this.compiledShader,this.currentShaders);
		this.engine.selectMaterial(this.pass);
		this.engine.uploadShaderBuffers(this.buffers,1);
		this.engine.uploadShaderBuffers(this.buffers,2);
		this.engine.uploadShaderBuffers(this.buffers,3);
	}
	,beginDrawBatchState: function(obj) {
		if(!this.beginDraw(obj,null,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		return true;
	}
	,beginDrawObject: function(obj,texture) {
		if(!this.beginDraw(obj,texture,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = obj.matA;
		var y = obj.matC;
		var z = obj.absX;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = obj.matB;
		var y = obj.matD;
		var z = obj.absY;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		this.beforeDraw();
		return true;
	}
	,drawTile: function(obj,tile) {
		var matA;
		var matB;
		var matC;
		var matD;
		var absX;
		var absY;
		if(this.inFilter != null) {
			var f1 = this.baseShader.filterMatrixA__;
			var f2 = this.baseShader.filterMatrixB__;
			var tmpA = obj.matA * f1.x + obj.matB * f1.y;
			var tmpB = obj.matA * f2.x + obj.matB * f2.y;
			var tmpC = obj.matC * f1.x + obj.matD * f1.y;
			var tmpD = obj.matC * f2.x + obj.matD * f2.y;
			var tmpX = obj.absX * f1.x + obj.absY * f1.y + f1.z;
			var tmpY = obj.absX * f2.x + obj.absY * f2.y + f2.z;
			matA = tmpA * this.viewA + tmpB * this.viewC;
			matB = tmpA * this.viewB + tmpB * this.viewD;
			matC = tmpC * this.viewA + tmpD * this.viewC;
			matD = tmpC * this.viewB + tmpD * this.viewD;
			absX = tmpX * this.viewA + tmpY * this.viewC + this.viewX;
			absY = tmpX * this.viewB + tmpY * this.viewD + this.viewY;
		} else {
			matA = obj.matA * this.viewA + obj.matB * this.viewC;
			matB = obj.matA * this.viewB + obj.matB * this.viewD;
			matC = obj.matC * this.viewA + obj.matD * this.viewC;
			matD = obj.matC * this.viewB + obj.matD * this.viewD;
			absX = obj.absX * this.viewA + obj.absY * this.viewC + this.viewX;
			absY = obj.absX * this.viewB + obj.absY * this.viewD + this.viewY;
		}
		if(matB == 0 && matC == 0) {
			var tx = tile.dx + tile.width * 0.5;
			var ty = tile.dy + tile.height * 0.5;
			var a = matA < 0 ? -matA : matA;
			var b = matD < 0 ? -matD : matD;
			var tr = (tile.width > tile.height ? tile.width : tile.height) * 1.5 * (a < b ? b : a);
			var cx = absX + tx * matA;
			var cy = absY + ty * matD;
			if(cx + tr < -1 || cx - tr > 1 || cy + tr < -1 || cy - tr > 1) {
				return false;
			}
		} else {
			var xMin = 1e20;
			var yMin = 1e20;
			var xMax = -1e20;
			var yMax = -1e20;
			var hw = tile.width * 0.5;
			var hh = tile.height * 0.5;
			var px = tile.dx * matA + tile.dy * matC;
			var py = tile.dx * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var px = (x + tile.dx) * matA + tile.dy * matC;
			var py = (x + tile.dx) * matB + tile.dy * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var y = tile.height;
			var px = tile.dx * matA + (y + tile.dy) * matC;
			var py = tile.dx * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			var x = tile.width;
			var y = tile.height;
			var px = (x + tile.dx) * matA + (y + tile.dy) * matC;
			var py = (x + tile.dx) * matB + (y + tile.dy) * matD;
			if(px < xMin) {
				xMin = px;
			}
			if(px > xMax) {
				xMax = px;
			}
			if(py < yMin) {
				yMin = py;
			}
			if(py > yMax) {
				yMax = py;
			}
			if(absX + xMax < -1 || absY + yMax < -1 || absX + xMin > 1 || absY + yMin > 1) {
				return false;
			}
		}
		if(!this.beginDraw(obj,tile.innerTex,true,true)) {
			return false;
		}
		if(this.inFilter == obj) {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else if(this.inFilterBlend != null) {
			var _this = this.baseShader.color__;
			var x = this.globalAlpha;
			var y = this.globalAlpha;
			var z = this.globalAlpha;
			var w = this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		} else {
			var _this = this.baseShader.color__;
			var x = obj.color.x;
			var y = obj.color.y;
			var z = obj.color.z;
			var w = obj.color.w * this.globalAlpha;
			if(w == null) {
				w = 1.;
			}
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = w;
		}
		var _this = this.baseShader.absoluteMatrixA__;
		var x = tile.width * obj.matA;
		var y = tile.height * obj.matC;
		var z = obj.absX + tile.dx * obj.matA + tile.dy * obj.matC;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.absoluteMatrixB__;
		var x = tile.width * obj.matB;
		var y = tile.height * obj.matD;
		var z = obj.absY + tile.dx * obj.matB + tile.dy * obj.matD;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = 1.;
		var _this = this.baseShader.uvPos__;
		var x = tile.u;
		var y = tile.v;
		var z = tile.u2 - tile.u;
		var w = tile.v2 - tile.v;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = z;
		_this.w = w;
		this.beforeDraw();
		if(this.fixedBuffer == null || this.fixedBuffer.isDisposed()) {
			this.fixedBuffer = new h3d_Buffer(4,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
			var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
			var k = this1;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 0;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			var v = 1;
			if(k.pos == k.array.length) {
				var newSize = k.array.length << 1;
				if(newSize < 128) {
					newSize = 128;
				}
				var newArray = new Float32Array(newSize);
				newArray.set(k.array);
				k.array = newArray;
			}
			k.array[k.pos++] = v;
			this.fixedBuffer.uploadVector(k,0,4);
		}
		var _this = this.engine;
		_this.renderBuffer(this.fixedBuffer,_this.mem.quadIndexes,2,0,-1);
		return true;
	}
	,beginDraw: function(obj,texture,isRelative,hasUVPos) {
		if(hasUVPos == null) {
			hasUVPos = false;
		}
		if(this.onBeginDraw != null && !this.onBeginDraw(obj)) {
			return false;
		}
		var stride = 8;
		var shaderChanged = false;
		var paramsChanged = false;
		var objShaders = obj.shaders;
		var curShaders = this.currentShaders.next;
		while(objShaders != null && curShaders != null) {
			var s = objShaders.s;
			var t = curShaders.s;
			objShaders = objShaders.next;
			curShaders = curShaders.next;
			var prevInst = t.instance;
			if(s != t) {
				paramsChanged = true;
			}
			s.updateConstants(this.manager.globals);
			if(s.instance != prevInst) {
				shaderChanged = true;
			}
		}
		if(objShaders != null || curShaders != null || this.baseShader.isRelative__ != isRelative || this.baseShader.hasUVPos__ != hasUVPos || this.baseShader.killAlpha__ != this.killAlpha) {
			shaderChanged = true;
		}
		if(shaderChanged) {
			var _this = this.baseShader;
			_this.constModified = true;
			_this.hasUVPos__ = hasUVPos;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.isRelative__ = isRelative;
			var _this = this.baseShader;
			_this.constModified = true;
			_this.killAlpha__ = this.killAlpha;
			this.baseShader.updateConstants(this.manager.globals);
			this.baseShaderList.next = obj.shaders;
			this.initShaders(this.baseShaderList);
		} else if(paramsChanged) {
			if(this.currentShaders != this.baseShaderList) {
				throw haxe_Exception.thrown("!");
			}
			this.currentShaders.next = obj.shaders;
		}
		this.texture = texture;
		this.stride = stride;
		this.currentObj = obj;
		return true;
	}
	,__class__: h2d_RenderContext
});
var h2d_TileGroup = function(t,parent) {
	h2d_Drawable.call(this,parent);
	this.tile = t;
	this.rangeMin = this.rangeMax = -1;
	this.curColor = new h3d_Vector(1,1,1,1);
	this.content = new h2d_TileLayerContent();
};
$hxClasses["h2d.TileGroup"] = h2d_TileGroup;
h2d_TileGroup.__name__ = "h2d.TileGroup";
h2d_TileGroup.__super__ = h2d_Drawable;
h2d_TileGroup.prototype = $extend(h2d_Drawable.prototype,{
	getBoundsRec: function(relativeTo,out,forSize) {
		h2d_Drawable.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
		this.addBounds(relativeTo,out,this.content.xMin,this.content.yMin,this.content.xMax - this.content.xMin,this.content.yMax - this.content.yMin);
	}
	,clear: function() {
		this.content.clear();
	}
	,onRemove: function() {
		this.content.dispose();
		h2d_Drawable.prototype.onRemove.call(this);
	}
	,draw: function(ctx) {
		this.drawWith(ctx,this);
	}
	,sync: function(ctx) {
		h2d_Drawable.prototype.sync.call(this,ctx);
		if(this.visible) {
			var _this = this.content;
			if(_this.buffer == null || _this.buffer.isDisposed()) {
				_this.alloc(h3d_Engine.CURRENT);
			}
		}
	}
	,drawWith: function(ctx,obj) {
		var max = this.content.triCount();
		if(max == 0) {
			return;
		}
		if(!ctx.beginDrawBatchState(obj)) {
			return;
		}
		var min = this.rangeMin < 0 ? 0 : this.rangeMin * 2;
		if(this.rangeMax > 0 && this.rangeMax < max * 2) {
			max = this.rangeMax * 2;
		}
		var _this = this.content;
		if(_this.buffer == null || _this.buffer.isDisposed()) {
			_this.alloc(h3d_Engine.CURRENT);
		}
		_this.state.drawQuads(ctx,_this.buffer,min,max - min);
	}
	,__class__: h2d_TileGroup
});
var h2d_ScaleGrid = function(tile,borderW,borderH,parent) {
	h2d_TileGroup.call(this,tile,parent);
	this.set_borderWidth(borderW);
	this.set_borderHeight(borderH);
	this.set_width(tile.width);
	this.set_height(tile.height);
	this.content.useAllocator = true;
};
$hxClasses["h2d.ScaleGrid"] = h2d_ScaleGrid;
h2d_ScaleGrid.__name__ = "h2d.ScaleGrid";
h2d_ScaleGrid.__super__ = h2d_TileGroup;
h2d_ScaleGrid.prototype = $extend(h2d_TileGroup.prototype,{
	set_width: function(w) {
		if(this.width == w) {
			return w;
		}
		this.width = w;
		this.clear();
		return w;
	}
	,set_height: function(h) {
		if(this.height == h) {
			return h;
		}
		this.height = h;
		this.clear();
		return h;
	}
	,set_borderWidth: function(w) {
		if(this.borderWidth == w) {
			return w;
		}
		this.borderWidth = w;
		this.clear();
		return w;
	}
	,set_borderHeight: function(h) {
		if(this.borderHeight == h) {
			return h;
		}
		this.borderHeight = h;
		this.clear();
		return h;
	}
	,getBoundsRec: function(relativeTo,out,forSize) {
		this.checkUpdate();
		h2d_TileGroup.prototype.getBoundsRec.call(this,relativeTo,out,forSize);
	}
	,checkUpdate: function() {
		if(this.content.isEmpty() || this.tile != this.contentTile) {
			this.clear();
			this.contentTile = this.tile;
			this.updateContent();
		}
	}
	,updateContent: function() {
		var bw = this.borderWidth;
		var bh = this.borderHeight;
		var _this = this.content;
		var color = this.curColor;
		var t = this.tile.sub(0,0,bw,bh);
		_this.add(0,0,color.x,color.y,color.z,color.w,t);
		var _this = this.content;
		var x = this.width - bw;
		var color = this.curColor;
		var t = this.tile.sub(this.tile.width - bw,0,bw,bh);
		_this.add(x,0,color.x,color.y,color.z,color.w,t);
		var _this = this.content;
		var y = this.height - bh;
		var color = this.curColor;
		var t = this.tile.sub(0,this.tile.height - bh,bw,bh);
		_this.add(0,y,color.x,color.y,color.z,color.w,t);
		var _this = this.content;
		var x = this.width - bw;
		var y = this.height - bh;
		var color = this.curColor;
		var t = this.tile.sub(this.tile.width - bw,this.tile.height - bh,bw,bh);
		_this.add(x,y,color.x,color.y,color.z,color.w,t);
		var sizeX = this.tile.width - bw * 2;
		var sizeY = this.tile.height - bh * 2;
		if(!this.tileBorders) {
			var w = this.width - bw * 2;
			var h = this.height - bh * 2;
			var t = this.tile.sub(bw,0,sizeX,bh);
			t.scaleToSize(w,bh);
			var color = this.curColor;
			this.content.add(bw,0,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
			t.scaleToSize(w,bh);
			var color = this.curColor;
			this.content.add(bw,h + bh,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(0,bh,bw,sizeY);
			t.scaleToSize(bw,h);
			var color = this.curColor;
			this.content.add(0,bh,color.x,color.y,color.z,color.w,t);
			var t = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
			t.scaleToSize(bw,h);
			var color = this.curColor;
			this.content.add(w + bw,bh,color.x,color.y,color.z,color.w,t);
		} else {
			var rw = (this.width - bw * 2) / sizeX | 0;
			var _g = 0;
			var _g1 = rw;
			while(_g < _g1) {
				var x = _g++;
				var _this = this.content;
				var color = this.curColor;
				var t = this.tile.sub(bw,0,sizeX,bh);
				_this.add(bw + x * sizeX,0,color.x,color.y,color.z,color.w,t);
				var _this1 = this.content;
				var y = this.height - bh;
				var color1 = this.curColor;
				var t1 = this.tile.sub(bw,this.tile.height - bh,sizeX,bh);
				_this1.add(bw + x * sizeX,y,color1.x,color1.y,color1.z,color1.w,t1);
			}
			var dx = this.width - bw * 2 - rw * sizeX;
			if(dx > 0) {
				var _this = this.content;
				var color = this.curColor;
				var t = this.tile.sub(bw,0,dx,bh);
				_this.add(bw + rw * sizeX,0,color.x,color.y,color.z,color.w,t);
				var _this = this.content;
				var y = this.height - bh;
				var color = this.curColor;
				var t = this.tile.sub(bw,this.tile.height - bh,dx,bh);
				_this.add(bw + rw * sizeX,y,color.x,color.y,color.z,color.w,t);
			}
			var rh = (this.height - bh * 2) / sizeY | 0;
			var _g = 0;
			var _g1 = rh;
			while(_g < _g1) {
				var y = _g++;
				var _this = this.content;
				var color = this.curColor;
				var t = this.tile.sub(0,bh,bw,sizeY);
				_this.add(0,bh + y * sizeY,color.x,color.y,color.z,color.w,t);
				var _this1 = this.content;
				var x = this.width - bw;
				var color1 = this.curColor;
				var t1 = this.tile.sub(this.tile.width - bw,bh,bw,sizeY);
				_this1.add(x,bh + y * sizeY,color1.x,color1.y,color1.z,color1.w,t1);
			}
			var dy = this.height - bh * 2 - rh * sizeY;
			if(dy > 0) {
				var _this = this.content;
				var color = this.curColor;
				var t = this.tile.sub(0,bh,bw,dy);
				_this.add(0,bh + rh * sizeY,color.x,color.y,color.z,color.w,t);
				var _this = this.content;
				var x = this.width - bw;
				var color = this.curColor;
				var t = this.tile.sub(this.tile.width - bw,bh,bw,dy);
				_this.add(x,bh + rh * sizeY,color.x,color.y,color.z,color.w,t);
			}
		}
		var t = this.tile.sub(bw,bh,sizeX,sizeY);
		t.scaleToSize(this.width - bw * 2,this.height - bh * 2);
		var color = this.curColor;
		this.content.add(bw,bh,color.x,color.y,color.z,color.w,t);
	}
	,sync: function(ctx) {
		this.checkUpdate();
		h2d_TileGroup.prototype.sync.call(this,ctx);
	}
	,__class__: h2d_ScaleGrid
});
var h2d_ScaleModeAlign = $hxEnums["h2d.ScaleModeAlign"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","Top","Bottom"]
	,Left: {_hx_index:0,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Top: {_hx_index:3,__enum__:"h2d.ScaleModeAlign",toString:$estr}
	,Bottom: {_hx_index:4,__enum__:"h2d.ScaleModeAlign",toString:$estr}
};
h2d_ScaleModeAlign.__empty_constructs__ = [h2d_ScaleModeAlign.Left,h2d_ScaleModeAlign.Right,h2d_ScaleModeAlign.Center,h2d_ScaleModeAlign.Top,h2d_ScaleModeAlign.Bottom];
var h2d_ScaleMode = $hxEnums["h2d.ScaleMode"] = { __ename__ : true, __constructs__ : ["Resize","Stretch","LetterBox","Fixed","Zoom","AutoZoom"]
	,Resize: {_hx_index:0,__enum__:"h2d.ScaleMode",toString:$estr}
	,Stretch: ($_=function(width,height) { return {_hx_index:1,width:width,height:height,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height"],$_)
	,LetterBox: ($_=function(width,height,integerScale,horizontalAlign,verticalAlign) { return {_hx_index:2,width:width,height:height,integerScale:integerScale,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","integerScale","horizontalAlign","verticalAlign"],$_)
	,Fixed: ($_=function(width,height,zoom,horizontalAlign,verticalAlign) { return {_hx_index:3,width:width,height:height,zoom:zoom,horizontalAlign:horizontalAlign,verticalAlign:verticalAlign,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["width","height","zoom","horizontalAlign","verticalAlign"],$_)
	,Zoom: ($_=function(level) { return {_hx_index:4,level:level,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["level"],$_)
	,AutoZoom: ($_=function(minWidth,minHeight,integerScaling) { return {_hx_index:5,minWidth:minWidth,minHeight:minHeight,integerScaling:integerScaling,__enum__:"h2d.ScaleMode",toString:$estr}; },$_.__params__ = ["minWidth","minHeight","integerScaling"],$_)
};
h2d_ScaleMode.__empty_constructs__ = [h2d_ScaleMode.Resize];
var hxd_InteractiveScene = function() { };
$hxClasses["hxd.InteractiveScene"] = hxd_InteractiveScene;
hxd_InteractiveScene.__name__ = "hxd.InteractiveScene";
hxd_InteractiveScene.__isInterface__ = true;
hxd_InteractiveScene.prototype = {
	__class__: hxd_InteractiveScene
};
var h2d_Scene = function() {
	this.scaleMode = h2d_ScaleMode.Resize;
	h2d_Layers.call(this,null);
	var e = h3d_Engine.CURRENT;
	this.ctx = new h2d_RenderContext(this);
	this._cameras = [];
	new h2d_Camera(this);
	this.set_interactiveCamera(this._cameras[0]);
	this.width = e.width;
	this.height = e.height;
	this.viewportA = 2 / e.width;
	this.viewportD = 2 / e.height;
	this.viewportX = -1;
	this.viewportY = -1;
	this.viewportScaleX = 1;
	this.viewportScaleY = 1;
	this.offsetX = 0;
	this.offsetY = 0;
	this.interactive = [];
	this.eventListeners = [];
	this.shapePoint = new h2d_col_Point();
	this.window = hxd_Window.getInstance();
	this.posChanged = true;
};
$hxClasses["h2d.Scene"] = h2d_Scene;
h2d_Scene.__name__ = "h2d.Scene";
h2d_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h2d_Scene.__super__ = h2d_Layers;
h2d_Scene.prototype = $extend(h2d_Layers.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,set_interactiveCamera: function(cam) {
		if(cam == null) {
			throw haxe_Exception.thrown("Interactive cammera cannot be null!");
		}
		if(cam.scene != this) {
			this.addCamera(cam);
		}
		return this.interactiveCamera = cam;
	}
	,addCamera: function(cam,pos) {
		if(cam.scene != null) {
			cam.scene.removeCamera(cam);
		}
		cam.scene = this;
		cam.posChanged = true;
		if(pos != null) {
			this._cameras.splice(pos,0,cam);
		} else {
			this._cameras.push(cam);
		}
	}
	,removeCamera: function(cam) {
		if(cam == this.interactiveCamera) {
			throw haxe_Exception.thrown("Current interactive Camera cannot be removed from camera list!");
		}
		cam.scene = null;
		HxOverrides.remove(this._cameras,cam);
	}
	,checkResize: function() {
		var _gthis = this;
		var engine = h3d_Engine.CURRENT;
		var _g = this.scaleMode;
		switch(_g._hx_index) {
		case 0:
			var w = engine.width;
			var h = engine.height;
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = 1;
			_gthis.viewportScaleY = 1;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 1:
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = engine.width / _width;
			_gthis.viewportScaleY = engine.height / _height;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 2:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var integerScale = _g.integerScale;
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var a = engine.width / _width;
			var b = engine.height / _height;
			var zoom = a > b ? b : a;
			if(integerScale) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 3:
			var verticalAlign = _g.verticalAlign;
			var horizontalAlign = _g.horizontalAlign;
			var zoom = _g.zoom;
			var _height = _g.height;
			var _width = _g.width;
			if(_width != _gthis.width || _height != _gthis.height) {
				_gthis.width = _width;
				_gthis.height = _height;
				_gthis.posChanged = true;
			}
			var horizontal = horizontalAlign;
			var vertical = verticalAlign;
			_gthis.viewportA = zoom * 2 / engine.width;
			_gthis.viewportD = zoom * 2 / engine.height;
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			if(horizontal == null) {
				horizontal = h2d_ScaleModeAlign.Center;
			}
			switch(horizontal._hx_index) {
			case 0:
				_gthis.viewportX = -1;
				_gthis.offsetX = 0;
				break;
			case 1:
				_gthis.viewportX = 1 - _gthis.width * _gthis.viewportA;
				_gthis.offsetX = engine.width - _gthis.width * zoom;
				break;
			default:
				_gthis.viewportX = Math.floor((engine.width - _gthis.width * zoom) / (zoom * 2)) * _gthis.viewportA - 1.;
				_gthis.offsetX = Math.floor((engine.width - _gthis.width * zoom) / 2);
			}
			if(vertical == null) {
				vertical = h2d_ScaleModeAlign.Center;
			}
			switch(vertical._hx_index) {
			case 3:
				_gthis.viewportY = -1;
				_gthis.offsetY = 0;
				break;
			case 4:
				_gthis.viewportY = 1 - _gthis.height * _gthis.viewportD;
				_gthis.offsetY = engine.height - _gthis.height * zoom;
				break;
			default:
				_gthis.viewportY = Math.floor((engine.height - _gthis.height * zoom) / (zoom * 2)) * _gthis.viewportD - 1.;
				_gthis.offsetY = Math.floor((engine.height - _gthis.height * zoom) / 2);
			}
			break;
		case 4:
			var level = _g.level;
			var w = Math.ceil(engine.width / level);
			var h = Math.ceil(engine.height / level);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = level;
			_gthis.viewportScaleY = level;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		case 5:
			var integerScaling = _g.integerScaling;
			var minHeight = _g.minHeight;
			var minWidth = _g.minWidth;
			var a = engine.width / minWidth;
			var b = engine.height / minHeight;
			var zoom = a > b ? b : a;
			if(integerScaling) {
				zoom = zoom | 0;
				if(zoom == 0) {
					zoom = 1;
				}
			}
			var w = Math.ceil(engine.width / zoom);
			var h = Math.ceil(engine.height / zoom);
			if(w != _gthis.width || h != _gthis.height) {
				_gthis.width = w;
				_gthis.height = h;
				_gthis.posChanged = true;
			}
			_gthis.viewportScaleX = zoom;
			_gthis.viewportScaleY = zoom;
			_gthis.viewportA = 2 / _gthis.width;
			_gthis.viewportD = 2 / _gthis.height;
			_gthis.viewportX = -1;
			_gthis.viewportY = -1;
			break;
		}
	}
	,get_mouseX: function() {
		this.syncPos();
		var mx = this.window.get_mouseX();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dx = (((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet - this.absX;
		if(this.matC == 0) {
			return dx / this.matA;
		}
		var my = this.window.get_mouseY();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dy = (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet - this.absY;
		return (dx * this.matD - dy * this.matC) / (this.matA * this.matD - this.matB * this.matC);
	}
	,get_mouseY: function() {
		this.syncPos();
		var my = this.window.get_mouseY();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dy = (-((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matB + ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matA) * _this.invDet - this.absY;
		if(this.matB == 0) {
			return dy / this.matD;
		}
		var mx = this.window.get_mouseX();
		var _this = this.interactiveCamera;
		var mx = this.window.get_mouseX();
		var my = this.window.get_mouseY();
		var dx = (((mx - _this.scene.offsetX) / _this.scene.viewportScaleX - _this.absX) * _this.matD - ((my - _this.scene.offsetY) / _this.scene.viewportScaleY - _this.absY) * _this.matC) * _this.invDet - this.absX;
		return (dy * this.matA - dx * this.matB) / (this.matA * this.matD - this.matB * this.matC);
	}
	,dispatchListeners: function(event) {
		this.screenToViewport(event);
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,isInteractiveVisible: function(i) {
		var s = i;
		while(s != this) {
			if(s == null || !s.visible) {
				return false;
			}
			s = s.parent;
		}
		return true;
	}
	,screenToViewport: function(e) {
		this.interactiveCamera.eventToCamera(e);
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		this.screenToViewport(event);
		var dx = event.relX - i.absX;
		var dy = event.relY - i.absY;
		var rx = (dx * i.matD - dy * i.matC) * i.invDet;
		var ry = (dy * i.matA - dx * i.matB) * i.invDet;
		event.relX = rx;
		event.relY = ry;
		i.handleEvent(event);
	}
	,handleEvent: function(event,last) {
		this.screenToViewport(event);
		var ex = event.relX;
		var ey = event.relY;
		var index = last == null ? 0 : this.interactive.indexOf(last) + 1;
		var pt = this.shapePoint;
		var _g = index;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var idx = _g++;
			var i = this.interactive[idx];
			if(i == null) {
				break;
			}
			if(i.invDet == 0) {
				continue;
			}
			var dx = ex - i.absX;
			var dy = ey - i.absY;
			var rx = (dx * i.matD - dy * i.matC) * i.invDet;
			var ry = (dy * i.matA - dx * i.matB) * i.invDet;
			if(i.shape != null) {
				var x = rx + i.shapeX;
				var y = ry + i.shapeY;
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				pt.x = x;
				pt.y = y;
				if(!i.shape.contains(pt)) {
					continue;
				}
			} else if(ry < 0 || rx < 0 || rx >= i.width || ry >= i.height) {
				continue;
			}
			var visible = true;
			var p = i;
			while(p != null) {
				if(!p.visible) {
					visible = false;
					break;
				}
				p = p.parent;
			}
			if(!visible) {
				continue;
			}
			event.relX = rx;
			event.relY = ry;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			return i;
		}
		return null;
	}
	,addEventListener: function(f) {
		this.eventListeners.push(f);
	}
	,removeEventListener: function(f) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(Reflect.compareMethods(e,f)) {
				HxOverrides.remove(this.eventListeners,e);
				return true;
			}
		}
		return false;
	}
	,addEventTarget: function(i) {
		var i1 = i;
		var lv = 0;
		while(i1 != null) {
			i1 = i1.parent;
			++lv;
		}
		var level = lv;
		var _g = 0;
		var _g1 = this.interactive.length;
		while(_g < _g1) {
			var index = _g++;
			var i1 = i;
			var i2 = this.interactive[index];
			var lv1 = level;
			var i3 = i2;
			var lv = 0;
			while(i3 != null) {
				i3 = i3.parent;
				++lv;
			}
			var lv2 = lv;
			var p1 = i1;
			var p2 = i2;
			while(lv1 > lv2) {
				i1 = p1;
				p1 = p1.parent;
				--lv1;
			}
			while(lv2 > lv1) {
				i2 = p2;
				p2 = p2.parent;
				--lv2;
			}
			while(p1 != p2) {
				i1 = p1;
				p1 = p1.parent;
				i2 = p2;
				p2 = p2.parent;
			}
			var id = -1;
			var _g2 = 0;
			var _g3 = p1.children.length;
			while(_g2 < _g3) {
				var k = _g2++;
				if(p1.children[k] == i1) {
					id = k;
					break;
				}
			}
			var tmp = id;
			var id1 = -1;
			var _g4 = 0;
			var _g5 = p2.children.length;
			while(_g4 < _g5) {
				var k1 = _g4++;
				if(p2.children[k1] == i2) {
					id1 = k1;
					break;
				}
			}
			if(tmp > id1) {
				this.interactive.splice(index,0,i);
				return;
			}
		}
		this.interactive.push(i);
	}
	,removeEventTarget: function(i,notify) {
		if(notify == null) {
			notify = false;
		}
		HxOverrides.remove(this.interactive,i);
		if(notify && this.events != null) {
			this.events.onRemove(i);
		}
	}
	,dispose: function() {
		if(this.allocated) {
			this.onRemove();
		}
		this.ctx.dispose();
	}
	,setElapsedTime: function(v) {
		this.ctx.elapsedTime = v;
	}
	,drawImplTo: function(s,texs,outputs) {
		var _g = 0;
		while(_g < texs.length) {
			var t = texs[_g];
			++_g;
			if((t.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) == 0) {
				throw haxe_Exception.thrown("Can only draw to texture created with Target flag");
			}
		}
		this.ctx.engine = h3d_Engine.CURRENT;
		var oldBG = this.ctx.engine.backgroundColor;
		this.ctx.engine.backgroundColor = null;
		if(!this.ctx.engine.inRender) {
			this.ctx.begin();
		}
		this.ctx.globalAlpha = this.alpha;
		this.ctx.begin();
		this.ctx.pushTargets(texs);
		if(outputs != null) {
			this.ctx.manager.setOutput(outputs);
		}
		s.drawRec(this.ctx);
		if(outputs != null) {
			this.ctx.manager.setOutput();
		}
		this.ctx.popTarget();
		this.ctx.engine.backgroundColor = oldBG;
	}
	,render: function(engine) {
		this.ctx.engine = engine;
		this.ctx.frame++;
		this.ctx.time += this.ctx.elapsedTime;
		this.ctx.globalAlpha = this.alpha;
		this.sync(this.ctx);
		if(this.children.length == 0) {
			return;
		}
		this.ctx.begin();
		this.ctx.drawScene();
		this.ctx.end();
	}
	,sync: function(ctx) {
		var forceCamSync = this.posChanged;
		if(!this.allocated) {
			this.onAdd();
		}
		h2d_Layers.prototype.sync.call(this,ctx);
		var _g = 0;
		var _g1 = this._cameras;
		while(_g < _g1.length) {
			var cam = _g1[_g];
			++_g;
			cam.sync(ctx,forceCamSync);
		}
	}
	,clipBounds: function(ctx,bounds) {
		var _gthis = this;
		if(this.rotation == 0) {
			var x = -this.absX;
			var y = -this.absY;
			if(x < bounds.xMin) {
				bounds.xMin = x;
			}
			if(x > bounds.xMax) {
				bounds.xMax = x;
			}
			if(y < bounds.yMin) {
				bounds.yMin = y;
			}
			if(y > bounds.yMax) {
				bounds.yMax = y;
			}
			var x = this.window.get_width() / this.matA - this.absX;
			var y = this.window.get_height() / this.matD - this.absY;
			if(x < bounds.xMin) {
				bounds.xMin = x;
			}
			if(x > bounds.xMax) {
				bounds.xMax = x;
			}
			if(y < bounds.yMin) {
				bounds.yMin = y;
			}
			if(y > bounds.yMax) {
				bounds.yMax = y;
			}
		} else {
			var ww = this.window.get_width() / this.matA - this.absX;
			var wh = this.window.get_height() / this.matD - this.absY;
			var x = -this.absX;
			var y = -this.absY;
			var x1 = x * _gthis.matA + y * _gthis.matC;
			var y1 = x * _gthis.matB + y * _gthis.matD;
			if(x1 < bounds.xMin) {
				bounds.xMin = x1;
			}
			if(x1 > bounds.xMax) {
				bounds.xMax = x1;
			}
			if(y1 < bounds.yMin) {
				bounds.yMin = y1;
			}
			if(y1 > bounds.yMax) {
				bounds.yMax = y1;
			}
			var x = ww - this.absX;
			var y = -this.absY;
			var x1 = x * _gthis.matA + y * _gthis.matC;
			var y1 = x * _gthis.matB + y * _gthis.matD;
			if(x1 < bounds.xMin) {
				bounds.xMin = x1;
			}
			if(x1 > bounds.xMax) {
				bounds.xMax = x1;
			}
			if(y1 < bounds.yMin) {
				bounds.yMin = y1;
			}
			if(y1 > bounds.yMax) {
				bounds.yMax = y1;
			}
			var x = -this.absX;
			var y = wh - this.absY;
			var x1 = x * _gthis.matA + y * _gthis.matC;
			var y1 = x * _gthis.matB + y * _gthis.matD;
			if(x1 < bounds.xMin) {
				bounds.xMin = x1;
			}
			if(x1 > bounds.xMax) {
				bounds.xMax = x1;
			}
			if(y1 < bounds.yMin) {
				bounds.yMin = y1;
			}
			if(y1 > bounds.yMax) {
				bounds.yMax = y1;
			}
			var x = ww - this.absX;
			var y = wh - this.absY;
			var x1 = x * _gthis.matA + y * _gthis.matC;
			var y1 = x * _gthis.matB + y * _gthis.matD;
			if(x1 < bounds.xMin) {
				bounds.xMin = x1;
			}
			if(x1 > bounds.xMax) {
				bounds.xMax = x1;
			}
			if(y1 < bounds.yMin) {
				bounds.yMin = y1;
			}
			if(y1 > bounds.yMax) {
				bounds.yMax = y1;
			}
		}
		h2d_Layers.prototype.clipBounds.call(this,ctx,bounds);
	}
	,drawContent: function(ctx) {
		if(ctx.front2back) {
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = this.children.length;
				var l = this.layerCount;
				cam.enter(ctx);
				while(l-- > 0) {
					var top = l == 0 ? 0 : this.layersIndexes[l - 1];
					if(cam.layerVisible(l)) {
						while(i >= top) this.children[i--].drawRec(ctx);
					} else {
						i = top - 1;
					}
				}
				cam.exit(ctx);
			}
			this.draw(ctx);
		} else {
			this.draw(ctx);
			var _g = 0;
			var _g1 = this._cameras;
			while(_g < _g1.length) {
				var cam = _g1[_g];
				++_g;
				if(!cam.visible) {
					continue;
				}
				var i = 0;
				var l = 0;
				cam.enter(ctx);
				while(l < this.layerCount) {
					var top = this.layersIndexes[l++];
					if(cam.layerVisible(l - 1)) {
						while(i < top) this.children[i++].drawRec(ctx);
					} else {
						i = top;
					}
				}
				cam.exit(ctx);
			}
		}
	}
	,onAdd: function() {
		this.checkResize();
		h2d_Layers.prototype.onAdd.call(this);
		this.window.addResizeEvent($bind(this,this.checkResize));
	}
	,onRemove: function() {
		h2d_Layers.prototype.onRemove.call(this);
		this.window.removeResizeEvent($bind(this,this.checkResize));
	}
	,__class__: h2d_Scene
});
var h2d_Align = $hxEnums["h2d.Align"] = { __ename__ : true, __constructs__ : ["Left","Right","Center","MultilineRight","MultilineCenter"]
	,Left: {_hx_index:0,__enum__:"h2d.Align",toString:$estr}
	,Right: {_hx_index:1,__enum__:"h2d.Align",toString:$estr}
	,Center: {_hx_index:2,__enum__:"h2d.Align",toString:$estr}
	,MultilineRight: {_hx_index:3,__enum__:"h2d.Align",toString:$estr}
	,MultilineCenter: {_hx_index:4,__enum__:"h2d.Align",toString:$estr}
};
h2d_Align.__empty_constructs__ = [h2d_Align.Left,h2d_Align.Right,h2d_Align.Center,h2d_Align.MultilineRight,h2d_Align.MultilineCenter];
var h2d_Tile = function(tex,x,y,w,h,dx,dy) {
	if(dy == null) {
		dy = 0;
	}
	if(dx == null) {
		dx = 0;
	}
	this.innerTex = tex;
	this.x = x;
	this.y = y;
	this.width = w;
	this.height = h;
	this.dx = dx;
	this.dy = dy;
	if(tex != null) {
		this.setTexture(tex);
	}
};
$hxClasses["h2d.Tile"] = h2d_Tile;
h2d_Tile.__name__ = "h2d.Tile";
h2d_Tile.fromColor = function(color,width,height,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	if(height == null) {
		height = 1;
	}
	if(width == null) {
		width = 1;
	}
	var t = new h2d_Tile(h3d_mat_Texture.fromColor(color,alpha),0,0,1,1);
	t.width = width;
	t.height = height;
	return t;
};
h2d_Tile.fromTexture = function(t) {
	return new h2d_Tile(t,0,0,t.width,t.height);
};
h2d_Tile.prototype = {
	setTexture: function(tex) {
		this.innerTex = tex;
		if(tex != null) {
			this.u = this.x / tex.width;
			this.v = this.y / tex.height;
			this.u2 = (this.x + this.width) / tex.width;
			this.v2 = (this.y + this.height) / tex.height;
		}
	}
	,sub: function(x,y,w,h,dx,dy) {
		if(dy == null) {
			dy = 0.;
		}
		if(dx == null) {
			dx = 0.;
		}
		return new h2d_Tile(this.innerTex,this.x + x,this.y + y,w,h,dx,dy);
	}
	,setPosition: function(x,y) {
		this.x = x;
		this.y = y;
		var tex = this.innerTex;
		if(tex != null) {
			this.u = x / tex.width;
			this.v = y / tex.height;
			this.u2 = (x + this.width) / tex.width;
			this.v2 = (y + this.height) / tex.height;
		}
	}
	,setSize: function(w,h) {
		this.width = w;
		this.height = h;
		var tex = this.innerTex;
		if(tex != null) {
			this.u2 = (this.x + w) / tex.width;
			this.v2 = (this.y + h) / tex.height;
		}
	}
	,scaleToSize: function(w,h) {
		this.width = w;
		this.height = h;
	}
	,clone: function() {
		var t = new h2d_Tile(null,this.x,this.y,this.width,this.height,this.dx,this.dy);
		t.innerTex = this.innerTex;
		t.u = this.u;
		t.u2 = this.u2;
		t.v = this.v;
		t.v2 = this.v2;
		return t;
	}
	,__class__: h2d_Tile
};
var h2d_TileLayerContent = function() {
	this.useAllocator = false;
	h3d_prim_Primitive.call(this);
	this.state = new h2d_impl_BatchDrawState();
	this.clear();
};
$hxClasses["h2d.TileLayerContent"] = h2d_TileLayerContent;
h2d_TileLayerContent.__name__ = "h2d.TileLayerContent";
h2d_TileLayerContent.__super__ = h3d_prim_Primitive;
h2d_TileLayerContent.prototype = $extend(h3d_prim_Primitive.prototype,{
	clear: function() {
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		this.tmp = this1;
		if(this.buffer != null) {
			if(this.useAllocator) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
		}
		this.buffer = null;
		this.xMin = Infinity;
		this.yMin = Infinity;
		this.xMax = -Infinity;
		this.yMax = -Infinity;
		this.state.clear();
	}
	,isEmpty: function() {
		return this.triCount() == 0;
	}
	,triCount: function() {
		if(this.buffer == null) {
			return this.tmp.pos >> 4;
		} else {
			return this.buffer.totalVertices() >> 1;
		}
	}
	,add: function(x,y,r,g,b,a,t) {
		var sx = x + t.dx;
		var sy = y + t.dy;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sy;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = sx;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var this1 = this.tmp;
		var v = sx + t.width;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = sy + t.height;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.u2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		var v = t.v2;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = v;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = r;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = g;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = b;
		var this1 = this.tmp;
		if(this1.pos == this1.array.length) {
			var newSize = this1.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(this1.array);
			this1.array = newArray;
		}
		this1.array[this1.pos++] = a;
		var x1 = x + t.dx;
		var y1 = y + t.dy;
		if(x1 < this.xMin) {
			this.xMin = x1;
		}
		if(y1 < this.yMin) {
			this.yMin = y1;
		}
		x1 += t.width;
		y1 += t.height;
		if(x1 > this.xMax) {
			this.xMax = x1;
		}
		if(y1 > this.yMax) {
			this.yMax = y1;
		}
		if(t != null) {
			this.state.setTexture(t.innerTex);
		}
		var _this = this.state;
		_this.tail.count += 4;
		_this.totalCount += 4;
	}
	,alloc: function(engine) {
		if(this.tmp == null) {
			this.clear();
		}
		if(this.tmp.pos > 0) {
			this.buffer = this.useAllocator ? hxd_impl_Allocator.get().ofFloats(this.tmp,8,3) : h3d_Buffer.ofFloats(this.tmp,8,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			if(this.useAllocator) {
				hxd_impl_Allocator.get().disposeBuffer(this.buffer);
			} else {
				this.buffer.dispose();
			}
			this.buffer = null;
		}
		h3d_prim_Primitive.prototype.dispose.call(this);
	}
	,__class__: h2d_TileLayerContent
});
var h2d_col_Bounds = function() {
	this.xMin = 1e20;
	this.yMin = 1e20;
	this.xMax = -1e20;
	this.yMax = -1e20;
};
$hxClasses["h2d.col.Bounds"] = h2d_col_Bounds;
h2d_col_Bounds.__name__ = "h2d.col.Bounds";
h2d_col_Bounds.prototype = {
	__class__: h2d_col_Bounds
};
var h2d_col_Collider = function() { };
$hxClasses["h2d.col.Collider"] = h2d_col_Collider;
h2d_col_Collider.__name__ = "h2d.col.Collider";
h2d_col_Collider.__isInterface__ = true;
h2d_col_Collider.prototype = {
	__class__: h2d_col_Collider
};
var h2d_col_Point = function(x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["h2d.col.Point"] = h2d_col_Point;
h2d_col_Point.__name__ = "h2d.col.Point";
h2d_col_Point.prototype = {
	__class__: h2d_col_Point
};
var h2d_filter_Blur = function(radius,gain,quality,linear) {
	if(linear == null) {
		linear = 0.;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	h2d_filter_Filter.call(this);
	this.smooth = true;
	this.pass = new h3d_pass_Blur(radius,gain,linear,quality);
};
$hxClasses["h2d.filter.Blur"] = h2d_filter_Blur;
h2d_filter_Blur.__name__ = "h2d.filter.Blur";
h2d_filter_Blur.__super__ = h2d_filter_Filter;
h2d_filter_Blur.prototype = $extend(h2d_filter_Filter.prototype,{
	sync: function(ctx,s) {
		this.boundsExtend = this.pass.radius * 2;
	}
	,draw: function(ctx,t) {
		var out = t.innerTex;
		var old = out.filter;
		out.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,out);
		out.set_filter(old);
		return t;
	}
	,__class__: h2d_filter_Blur
});
var h2d_filter_Glow = function(color,alpha,radius,gain,quality,smoothColor) {
	if(smoothColor == null) {
		smoothColor = false;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	if(alpha == null) {
		alpha = 1.;
	}
	if(color == null) {
		color = 16777215;
	}
	h2d_filter_Blur.call(this,radius,gain,quality);
	this.color = color;
	this.alpha = alpha;
	this.smoothColor = smoothColor;
	var _this = this.pass.shader;
	_this.constModified = true;
	_this.hasFixedColor__ = true;
};
$hxClasses["h2d.filter.Glow"] = h2d_filter_Glow;
h2d_filter_Glow.__name__ = "h2d.filter.Glow";
h2d_filter_Glow.__super__ = h2d_filter_Blur;
h2d_filter_Glow.prototype = $extend(h2d_filter_Blur.prototype,{
	setParams: function() {
		var _this = this.pass.shader.fixedColor__;
		var c = this.color;
		_this.x = (c >> 16 & 255) / 255;
		_this.y = (c >> 8 & 255) / 255;
		_this.z = (c & 255) / 255;
		_this.w = (c >>> 24) / 255;
		this.pass.shader.fixedColor__.w = this.smoothColor ? this.alpha * 1.5 : this.alpha;
		var _this = this.pass.shader;
		_this.constModified = true;
		_this.smoothFixedColor__ = this.smoothColor;
	}
	,draw: function(ctx,t) {
		this.setParams();
		var tex = t.innerTex;
		var old = tex.filter;
		var save = ctx.textures.allocTileTarget("glowSave",t);
		h3d_pass_Copy.run(tex,save,h2d_BlendMode.None);
		tex.set_filter(h3d_mat_Filter.Linear);
		this.pass.apply(ctx,tex);
		tex.set_filter(old);
		if(this.knockout) {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Erase);
		} else {
			h3d_pass_Copy.run(save,tex,h2d_BlendMode.Alpha);
		}
		return t;
	}
	,__class__: h2d_filter_Glow
});
var h2d_filter_DropShadow = function(distance,angle,color,alpha,radius,gain,quality,smoothColor) {
	if(smoothColor == null) {
		smoothColor = false;
	}
	if(quality == null) {
		quality = 1.;
	}
	if(gain == null) {
		gain = 1;
	}
	if(radius == null) {
		radius = 1.;
	}
	if(alpha == null) {
		alpha = 1.;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 0.785;
	}
	if(distance == null) {
		distance = 4.;
	}
	this.alphaPass = new h3d_mat_Pass("");
	h2d_filter_Glow.call(this,color,alpha,radius,gain,quality,smoothColor);
	this.distance = distance;
	this.angle = angle;
	this.alphaPass.addShader(new h3d_shader_UVDelta());
};
$hxClasses["h2d.filter.DropShadow"] = h2d_filter_DropShadow;
h2d_filter_DropShadow.__name__ = "h2d.filter.DropShadow";
h2d_filter_DropShadow.__super__ = h2d_filter_Glow;
h2d_filter_DropShadow.prototype = $extend(h2d_filter_Glow.prototype,{
	sync: function(ctx,s) {
		h2d_filter_Glow.prototype.sync.call(this,ctx,s);
		var f = Math.cos(this.angle) * this.distance;
		var a = f < 0 ? -f : f;
		var f = Math.sin(this.angle) * this.distance;
		var b = f < 0 ? -f : f;
		this.boundsExtend += a < b ? b : a;
	}
	,draw: function(ctx,t) {
		this.setParams();
		var save = ctx.textures.allocTileTarget("glowSave",t);
		h3d_pass_Copy.run(t.innerTex,save,h2d_BlendMode.None);
		this.pass.apply(ctx,save);
		var dx = Math.round(Math.cos(this.angle) * this.distance);
		var dy = Math.round(Math.sin(this.angle) * this.distance);
		var _this = this.alphaPass.getShader(h3d_shader_UVDelta).uvDelta__;
		var x = dx / t.width;
		var y = dy / t.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		h3d_pass_Copy.run(t.innerTex,save,h2d_BlendMode.Alpha,this.alphaPass);
		var ret = h2d_Tile.fromTexture(save);
		ret.dx = dx;
		ret.dy = dy;
		return ret;
	}
	,__class__: h2d_filter_DropShadow
});
var h2d_filter_Group = function(filters) {
	h2d_filter_Filter.call(this);
	this.filters = filters == null ? [] : filters;
};
$hxClasses["h2d.filter.Group"] = h2d_filter_Group;
h2d_filter_Group.__name__ = "h2d.filter.Group";
h2d_filter_Group.__super__ = h2d_filter_Filter;
h2d_filter_Group.prototype = $extend(h2d_filter_Filter.prototype,{
	get_enable: function() {
		if(!this.enable) {
			return false;
		}
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(this.enable) {
				return true;
			}
		}
		return false;
	}
	,bind: function(s) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.get_enable()) {
				f.bind(s);
			}
		}
	}
	,unbind: function(s) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.get_enable()) {
				f.unbind(s);
			}
		}
	}
	,sync: function(ctx,s) {
		this.autoBounds = true;
		this.boundsExtend = 0;
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(!f.get_enable()) {
				continue;
			}
			f.sync(ctx,s);
			if(f.boundsExtend > 0) {
				this.boundsExtend += f.boundsExtend;
			}
			if(!f.autoBounds) {
				this.autoBounds = false;
			}
		}
	}
	,getBounds: function(s,bounds) {
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(f.get_enable() && !f.autoBounds) {
				f.getBounds(s,bounds);
			}
		}
	}
	,draw: function(ctx,input) {
		var xMin = input.dx;
		var yMin = input.dy;
		var start = input;
		var _g = 0;
		var _g1 = this.filters;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(!f.get_enable()) {
				continue;
			}
			var prev = input;
			input = f.draw(ctx,input);
			if(input == null) {
				return null;
			}
			if(input != prev) {
				input.dx += xMin;
				input.dy += yMin;
			}
		}
		if(start != input) {
			input.dx -= xMin;
			input.dy -= yMin;
		}
		return input;
	}
	,__class__: h2d_filter_Group
});
var h2d_impl_BatchDrawState = function() {
	this.head = this.tail = new h2d_impl__$BatchDrawState_StateEntry(null);
	this.totalCount = 0;
};
$hxClasses["h2d.impl.BatchDrawState"] = h2d_impl_BatchDrawState;
h2d_impl_BatchDrawState.__name__ = "h2d.impl.BatchDrawState";
h2d_impl_BatchDrawState.prototype = {
	setTexture: function(texture) {
		if(texture != null) {
			if(this.tail.texture == null) {
				this.tail.texture = texture;
			} else if(this.tail.texture != texture) {
				var cur = this.tail;
				if(cur.next == null) {
					cur.next = this.tail = new h2d_impl__$BatchDrawState_StateEntry(texture);
				} else {
					this.tail = cur.next.set(texture);
				}
			}
		}
	}
	,clear: function() {
		var state = this.head;
		while(true) {
			state.texture = null;
			state = state.next;
			if(!(state != null)) {
				break;
			}
		}
		this.tail = this.head;
		this.tail.count = 0;
		this.totalCount = 0;
	}
	,drawQuads: function(ctx,buffer,offset,length) {
		if(length == null) {
			length = -1;
		}
		if(offset == null) {
			offset = 0;
		}
		var state = this.head;
		var last = this.tail.next;
		var engine = ctx.engine;
		var stateLen;
		if(offset == 0 && length == -1) {
			while(true) {
				ctx.texture = state.texture;
				ctx.beforeDraw();
				stateLen = state.count >> 1;
				var start = offset;
				var max = stateLen;
				if(max == null) {
					max = -1;
				}
				if(start == null) {
					start = 0;
				}
				engine.renderBuffer(buffer,engine.mem.quadIndexes,2,start,max);
				offset += stateLen;
				state = state.next;
				if(!(state != last)) {
					break;
				}
			}
		} else {
			if(length == -1) {
				length = (this.totalCount >> 1) - offset;
			}
			var caret = 0;
			while(true) {
				stateLen = state.count >> 1;
				if(caret + stateLen >= offset) {
					var stateMin = offset >= caret ? offset : caret;
					var stateLen1 = length > stateLen ? stateLen : length;
					ctx.texture = state.texture;
					ctx.beforeDraw();
					var start = stateMin;
					var max = stateLen1;
					if(max == null) {
						max = -1;
					}
					if(start == null) {
						start = 0;
					}
					engine.renderBuffer(buffer,engine.mem.quadIndexes,2,start,max);
					length -= stateLen1;
					if(length == 0) {
						break;
					}
				}
				caret += stateLen;
				state = state.next;
				if(!(state != last)) {
					break;
				}
			}
		}
	}
	,__class__: h2d_impl_BatchDrawState
};
var h2d_impl__$BatchDrawState_StateEntry = function(texture) {
	this.texture = texture;
	this.count = 0;
};
$hxClasses["h2d.impl._BatchDrawState.StateEntry"] = h2d_impl__$BatchDrawState_StateEntry;
h2d_impl__$BatchDrawState_StateEntry.__name__ = "h2d.impl._BatchDrawState.StateEntry";
h2d_impl__$BatchDrawState_StateEntry.prototype = {
	set: function(texture) {
		this.texture = texture;
		this.count = 0;
		return this;
	}
	,__class__: h2d_impl__$BatchDrawState_StateEntry
};
var h3d_BufferFlag = $hxEnums["h3d.BufferFlag"] = { __ename__ : true, __constructs__ : ["Dynamic","Triangles","Quads","Managed","RawFormat","NoAlloc","UniformBuffer","LargeBuffer"]
	,Dynamic: {_hx_index:0,__enum__:"h3d.BufferFlag",toString:$estr}
	,Triangles: {_hx_index:1,__enum__:"h3d.BufferFlag",toString:$estr}
	,Quads: {_hx_index:2,__enum__:"h3d.BufferFlag",toString:$estr}
	,Managed: {_hx_index:3,__enum__:"h3d.BufferFlag",toString:$estr}
	,RawFormat: {_hx_index:4,__enum__:"h3d.BufferFlag",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.BufferFlag",toString:$estr}
	,UniformBuffer: {_hx_index:6,__enum__:"h3d.BufferFlag",toString:$estr}
	,LargeBuffer: {_hx_index:7,__enum__:"h3d.BufferFlag",toString:$estr}
};
h3d_BufferFlag.__empty_constructs__ = [h3d_BufferFlag.Dynamic,h3d_BufferFlag.Triangles,h3d_BufferFlag.Quads,h3d_BufferFlag.Managed,h3d_BufferFlag.RawFormat,h3d_BufferFlag.NoAlloc,h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.LargeBuffer];
var h3d_Buffer = function(vertices,stride,flags) {
	this.id = h3d_Buffer.GUID++;
	this.vertices = vertices;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	if((this.flags & 1 << h3d_BufferFlag.NoAlloc._hx_index) == 0) {
		h3d_Engine.CURRENT.mem.allocBuffer(this,stride);
	}
};
$hxClasses["h3d.Buffer"] = h3d_Buffer;
h3d_Buffer.__name__ = "h3d.Buffer";
h3d_Buffer.ofFloats = function(v,stride,flags) {
	var nvert = v.pos / stride | 0;
	var b = new h3d_Buffer(nvert,stride,flags);
	b.uploadVector(v,0,nvert);
	return b;
};
h3d_Buffer.prototype = {
	isDisposed: function() {
		if(this.buffer != null) {
			return this.buffer.vbuf == null;
		} else {
			return true;
		}
	}
	,dispose: function() {
		if(this.buffer != null) {
			this.buffer.freeBuffer(this);
			this.buffer = null;
			if(this.next != null) {
				this.next.dispose();
			}
		}
	}
	,totalVertices: function() {
		var count = 0;
		var b = this;
		while(b != null) {
			count += b.vertices;
			b = b.next;
		}
		return count;
	}
	,uploadVector: function(buf,bufPos,vertices,startVertice) {
		if(startVertice == null) {
			startVertice = 0;
		}
		var cur = this;
		while(cur != null && startVertice >= cur.vertices) {
			startVertice -= cur.vertices;
			cur = cur.next;
		}
		while(vertices > 0) {
			if(cur == null) {
				throw haxe_Exception.thrown("Too many vertices");
			}
			var count = vertices + startVertice > cur.vertices ? cur.vertices - startVertice : vertices;
			cur.buffer.uploadVertexBuffer(cur.position + startVertice,count,buf,bufPos);
			startVertice = 0;
			bufPos += count * this.buffer.stride;
			vertices -= count;
			cur = cur.next;
		}
	}
	,__class__: h3d_Buffer
};
var h3d_Camera = function(fovY,zoom,screenRatio,zNear,zFar,rightHanded) {
	if(rightHanded == null) {
		rightHanded = false;
	}
	if(zFar == null) {
		zFar = 4000.;
	}
	if(zNear == null) {
		zNear = 0.02;
	}
	if(screenRatio == null) {
		screenRatio = 1.333333;
	}
	if(zoom == null) {
		zoom = 1.;
	}
	if(fovY == null) {
		fovY = 25.;
	}
	this.viewY = 0.;
	this.viewX = 0.;
	this.fovY = fovY;
	this.zoom = zoom;
	this.screenRatio = screenRatio;
	this.zNear = zNear;
	this.zFar = zFar;
	this.rightHanded = rightHanded;
	this.pos = new h3d_Vector(2,3,4);
	this.up = new h3d_Vector(0,0,1);
	this.target = new h3d_Vector(0,0,0);
	this.m = new h3d_Matrix();
	this.mcam = new h3d_Matrix();
	this.mproj = new h3d_Matrix();
	this.frustum = new h3d_col_Frustum();
	this.update();
};
$hxClasses["h3d.Camera"] = h3d_Camera;
h3d_Camera.__name__ = "h3d.Camera";
h3d_Camera.prototype = {
	getInverseViewProj: function() {
		if(this.minv == null) {
			this.minv = new h3d_Matrix();
		}
		if(this.needInv) {
			this.minv.initInverse(this.m);
			this.needInv = false;
		}
		return this.minv;
	}
	,unproject: function(screenX,screenY,camZ) {
		var p = new h3d_Vector(screenX,screenY,camZ);
		var m = this.getInverseViewProj();
		var px = p.x * m._11 + p.y * m._21 + p.z * m._31 + p.w * m._41;
		var py = p.x * m._12 + p.y * m._22 + p.z * m._32 + p.w * m._42;
		var pz = p.x * m._13 + p.y * m._23 + p.z * m._33 + p.w * m._43;
		var iw = 1 / (p.x * m._14 + p.y * m._24 + p.z * m._34 + p.w * m._44);
		p.x = px * iw;
		p.y = py * iw;
		p.z = pz * iw;
		p.w = 1;
		return p;
	}
	,update: function() {
		if(this.follow != null) {
			var fpos = this.follow.pos.localToGlobal();
			var ftarget = this.follow.target.localToGlobal();
			var _this = this.pos;
			var x = fpos.x;
			var y = fpos.y;
			var z = fpos.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			var _this = this.target;
			var x = ftarget.x;
			var y = ftarget.y;
			var z = ftarget.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			_this.x = x;
			_this.y = y;
			_this.z = z;
			_this.w = 1.;
			if(this.follow.pos.name != null) {
				var p = this.follow.pos;
				while(p != null) {
					if(p.currentAnimation != null) {
						var v = p.currentAnimation.getPropValue(this.follow.pos.name,"FOVY");
						if(v != null) {
							this.fovY = v;
							break;
						}
					}
					p = p.parent;
				}
			}
		}
		this.makeCameraMatrix(this.mcam);
		this.makeFrustumMatrix(this.mproj);
		this.m.multiply(this.mcam,this.mproj);
		this.needInv = true;
		if(this.mcamInv != null) {
			this.mcamInv._44 = 0;
		}
		if(this.mprojInv != null) {
			this.mprojInv._44 = 0;
		}
		this.frustum.loadMatrix(this.m);
	}
	,getFrustumCorners: function(zMax,zMin) {
		if(zMin == null) {
			zMin = 0.;
		}
		if(zMax == null) {
			zMax = 1.;
		}
		return [this.unproject(-1,1,zMin),this.unproject(1,1,zMin),this.unproject(1,-1,zMin),this.unproject(-1,-1,zMin),this.unproject(-1,1,zMax),this.unproject(1,1,zMax),this.unproject(1,-1,zMax),this.unproject(-1,-1,zMax)];
	}
	,makeCameraMatrix: function(m) {
		var _this = this.target;
		var v = this.pos;
		var x = _this.x - v.x;
		var y = _this.y - v.y;
		var z = _this.z - v.z;
		var w = _this.w - v.w;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var az_x = x;
		var az_y = y;
		var az_z = z;
		var az_w = w;
		if(this.rightHanded) {
			az_x *= -1;
			az_y *= -1;
			az_z *= -1;
		}
		var k = az_x * az_x + az_y * az_y + az_z * az_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		az_x *= k;
		az_y *= k;
		az_z *= k;
		var _this = this.up;
		var x = _this.y * az_z - _this.z * az_y;
		var y = _this.z * az_x - _this.x * az_z;
		var z = _this.x * az_y - _this.y * az_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ax_x = x;
		var ax_y = y;
		var ax_z = z;
		var ax_w = w;
		var k = ax_x * ax_x + ax_y * ax_y + ax_z * ax_z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		ax_x *= k;
		ax_y *= k;
		ax_z *= k;
		if(Math.sqrt(ax_x * ax_x + ax_y * ax_y + ax_z * ax_z) == 0) {
			ax_x = az_y;
			ax_y = az_z;
			ax_z = az_x;
		}
		var x = az_y * ax_z - az_z * ax_y;
		var y = az_z * ax_x - az_x * ax_z;
		var z = az_x * ax_y - az_y * ax_x;
		var w = 1;
		if(w == null) {
			w = 1.;
		}
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var ay_x = x;
		var ay_y = y;
		var ay_z = z;
		var ay_w = w;
		m._11 = ax_x;
		m._12 = ay_x;
		m._13 = az_x;
		m._14 = 0;
		m._21 = ax_y;
		m._22 = ay_y;
		m._23 = az_y;
		m._24 = 0;
		m._31 = ax_z;
		m._32 = ay_z;
		m._33 = az_z;
		m._34 = 0;
		var v = this.pos;
		m._41 = -(ax_x * v.x + ax_y * v.y + ax_z * v.z);
		var v = this.pos;
		m._42 = -(ay_x * v.x + ay_y * v.y + ay_z * v.z);
		var v = this.pos;
		m._43 = -(az_x * v.x + az_y * v.y + az_z * v.z);
		m._44 = 1;
	}
	,makeFrustumMatrix: function(m) {
		m.zero();
		var bounds = this.orthoBounds;
		if(bounds != null) {
			var w = 1 / (bounds.xMax - bounds.xMin);
			var h = 1 / (bounds.yMax - bounds.yMin);
			var d = 1 / (bounds.zMax - bounds.zMin);
			m._11 = 2 * w;
			m._22 = 2 * h;
			m._33 = d;
			m._41 = -(bounds.xMin + bounds.xMax) * w;
			m._42 = -(bounds.yMin + bounds.yMax) * h;
			m._43 = -bounds.zMin * d;
			m._44 = 1;
		} else {
			var degToRad = Math.PI / 180;
			var halfFovX = Math.atan(Math.tan(this.fovY * 0.5 * degToRad) * this.screenRatio);
			var scale = this.zoom / Math.tan(halfFovX);
			m._11 = scale;
			m._22 = scale * this.screenRatio;
			m._33 = this.zFar / (this.zFar - this.zNear);
			m._34 = 1;
			m._43 = -(this.zNear * this.zFar) / (this.zFar - this.zNear);
		}
		m._11 += this.viewX * m._14;
		m._21 += this.viewX * m._24;
		m._31 += this.viewX * m._34;
		m._41 += this.viewX * m._44;
		m._12 += this.viewY * m._14;
		m._22 += this.viewY * m._24;
		m._32 += this.viewY * m._34;
		m._42 += this.viewY * m._44;
		if(this.rightHanded) {
			m._33 *= -1;
			m._34 *= -1;
		}
	}
	,__class__: h3d_Camera
};
var h3d__$Engine_TargetTmp = function(t,n,l,m) {
	this.t = t;
	this.next = n;
	this.layer = l;
	this.mipLevel = m;
};
$hxClasses["h3d._Engine.TargetTmp"] = h3d__$Engine_TargetTmp;
h3d__$Engine_TargetTmp.__name__ = "h3d._Engine.TargetTmp";
h3d__$Engine_TargetTmp.prototype = {
	__class__: h3d__$Engine_TargetTmp
};
var h3d_Engine = function() {
	this.resCache = new haxe_ds_ObjectMap();
	this.ready = false;
	this.inRender = false;
	this.textureColorCache = new haxe_ds_IntMap();
	this.tmpVector = new h3d_Vector();
	this.backgroundColor = -16777216;
	this.hardware = !h3d_Engine.SOFTWARE_DRIVER;
	this.antiAlias = h3d_Engine.ANTIALIASING;
	this.autoResize = true;
	this.set_fullScreen(!hxd_System.getValue(hxd_SystemValue.IsWindowed));
	this.window = hxd_Window.getInstance();
	this.realFps = hxd_System.getDefaultFrameRate();
	this.lastTime = HxOverrides.now() / 1000;
	this.window.addResizeEvent($bind(this,this.onWindowResize));
	this.driver = new h3d_impl_GlDriver(this.antiAlias);
	h3d_Engine.CURRENT = this;
};
$hxClasses["h3d.Engine"] = h3d_Engine;
h3d_Engine.__name__ = "h3d.Engine";
h3d_Engine.prototype = {
	init: function() {
		this.driver.init($bind(this,this.onCreate),!this.hardware);
	}
	,selectShader: function(shader) {
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		if(this.driver.selectShader(shader)) {
			this.shaderSwitches++;
		}
	}
	,selectMaterial: function(pass) {
		this.driver.selectMaterial(pass);
	}
	,uploadShaderBuffers: function(buffers,which) {
		this.driver.uploadShaderBuffers(buffers,which);
	}
	,selectBuffer: function(buf) {
		if(buf.isDisposed()) {
			return false;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.selectBuffer(buf);
		return true;
	}
	,renderBuffer: function(b,indexes,vertPerTri,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(indexes.isDisposed()) {
			return;
		}
		while(true) {
			var ntri = b.vertices / vertPerTri | 0;
			var pos = b.position / vertPerTri | 0;
			if(startTri > 0) {
				if(startTri >= ntri) {
					startTri -= ntri;
					b = b.next;
					if(!(b != null)) {
						break;
					} else {
						continue;
					}
				}
				pos += startTri;
				ntri -= startTri;
				startTri = 0;
			}
			if(drawTri >= 0) {
				if(drawTri == 0) {
					return;
				}
				drawTri -= ntri;
				if(drawTri < 0) {
					ntri += drawTri;
					drawTri = 0;
				}
			}
			if(ntri > 0 && this.selectBuffer(b)) {
				this.driver.draw(indexes.ibuf,pos * 3,ntri);
				this.drawTriangles += ntri;
				this.drawCalls++;
			}
			b = b.next;
			if(!(b != null)) {
				break;
			}
		}
	}
	,renderIndexed: function(b,indexes,startTri,drawTri) {
		if(drawTri == null) {
			drawTri = -1;
		}
		if(startTri == null) {
			startTri = 0;
		}
		if(b.next != null) {
			throw haxe_Exception.thrown("Buffer is split");
		}
		if(indexes.isDisposed()) {
			return;
		}
		var maxTri = indexes.count / 3 | 0;
		if(drawTri < 0) {
			drawTri = maxTri - startTri;
		}
		if(drawTri > 0 && this.selectBuffer(b)) {
			this.driver.draw(indexes.ibuf,startTri * 3,drawTri);
			this.drawTriangles += drawTri;
			this.drawCalls++;
		}
	}
	,set_debug: function(d) {
		this.debug = d;
		this.driver.setDebug(this.debug);
		return d;
	}
	,onCreate: function(disposed) {
		h3d_Engine.CURRENT = this;
		if(this.autoResize) {
			this.width = this.window.get_width();
			this.height = this.window.get_height();
		}
		if(disposed) {
			hxd_impl_Allocator.get().onContextLost();
			this.mem.onContextLost();
		} else {
			this.mem = new h3d_impl_MemoryManager(this.driver);
			this.mem.init();
			this.nullTexture = new h3d_mat_Texture(0,0,[h3d_mat_TextureFlags.NoAlloc]);
		}
		this.hardware = this.driver.hasFeature(h3d_impl_Feature.HardwareAccelerated);
		this.set_debug(this.debug);
		this.set_fullScreen(this.fullScreen);
		this.resize(this.width,this.height);
		if(disposed) {
			this.onContextLost();
		} else {
			this.onReady();
		}
		this.ready = true;
	}
	,onContextLost: function() {
	}
	,onReady: function() {
	}
	,onWindowResize: function() {
		if(this.autoResize && !this.driver.isDisposed()) {
			var w = this.window.get_width();
			var h = this.window.get_height();
			if(w != this.width || h != this.height) {
				this.resize(w,h);
			}
			this.onResized();
		}
	}
	,set_fullScreen: function(v) {
		this.fullScreen = v;
		if(this.mem != null && hxd_System.getValue(hxd_SystemValue.IsWindowed)) {
			this.window.set_displayMode(v ? hxd_DisplayMode.Borderless : hxd_DisplayMode.Windowed);
		}
		return v;
	}
	,onResized: function() {
	}
	,resize: function(width,height) {
		if(width < 32) {
			width = 32;
		}
		if(height < 32) {
			height = 32;
		}
		this.width = width;
		this.height = height;
		if(!this.driver.isDisposed()) {
			this.driver.resize(width,height);
		}
	}
	,begin: function() {
		if(this.driver.isDisposed()) {
			return false;
		}
		this.inRender = true;
		this.drawTriangles = 0;
		this.shaderSwitches = 0;
		this.drawCalls = 0;
		this.targetStack = null;
		this.needFlushTarget = this.currentTargetTex != null;
		this.driver.begin(hxd_Timer.frameCount);
		if(this.backgroundColor != null) {
			this.clear(this.backgroundColor,1,0);
		}
		return true;
	}
	,end: function() {
		this.inRender = false;
		this.driver.end();
	}
	,getCurrentTarget: function() {
		if(this.targetStack == null) {
			return null;
		} else {
			return this.targetStack.t;
		}
	}
	,pushTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		var c = this.targetTmp;
		if(c == null) {
			c = new h3d__$Engine_TargetTmp(tex,this.targetStack,layer,mipLevel);
		} else {
			this.targetTmp = c.next;
			c.t = tex;
			c.next = this.targetStack;
			c.mipLevel = mipLevel;
			c.layer = layer;
		}
		this.targetStack = c;
		this.updateNeedFlush();
	}
	,updateNeedFlush: function() {
		var t = this.targetStack;
		if(t == null) {
			this.needFlushTarget = this.currentTargetTex != null;
		} else {
			this.needFlushTarget = this.currentTargetTex != t.t || this.currentTargetLayer != t.layer || this.currentTargetMip != t.mipLevel || t.textures != null;
		}
	}
	,pushTargets: function(textures) {
		this.pushTarget(this.nullTexture);
		this.targetStack.textures = textures;
		this.needFlushTarget = true;
	}
	,popTarget: function() {
		var c = this.targetStack;
		if(c == null) {
			throw haxe_Exception.thrown("popTarget() with no matching pushTarget()");
		}
		this.targetStack = c.next;
		this.updateNeedFlush();
		c.t = null;
		c.textures = null;
		c.next = this.targetTmp;
		this.targetTmp = c;
	}
	,doFlushTarget: function() {
		var t = this.targetStack;
		if(t == null) {
			this.driver.setRenderTarget(null);
			this.currentTargetTex = null;
		} else {
			if(t.textures != null) {
				this.driver.setRenderTargets(t.textures);
			} else {
				this.driver.setRenderTarget(t.t,t.layer,t.mipLevel);
			}
			this.currentTargetTex = t.t;
			this.currentTargetLayer = t.layer;
			this.currentTargetMip = t.mipLevel;
		}
		this.needFlushTarget = false;
	}
	,clear: function(color,depth,stencil) {
		if(color != null) {
			var _this = this.tmpVector;
			_this.x = (color >> 16 & 255) / 255;
			_this.y = (color >> 8 & 255) / 255;
			_this.z = (color & 255) / 255;
			_this.w = (color >>> 24) / 255;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.clear(color == null ? null : this.tmpVector,depth,stencil);
	}
	,setRenderZone: function(x,y,width,height) {
		if(height == null) {
			height = -1;
		}
		if(width == null) {
			width = -1;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(this.needFlushTarget) {
			this.doFlushTarget();
		}
		this.driver.setRenderZone(x,y,width,height);
	}
	,render: function(obj) {
		if(!this.begin()) {
			return false;
		}
		obj.render(this);
		this.end();
		var delta = HxOverrides.now() / 1000 - this.lastTime;
		this.lastTime += delta;
		if(delta > 0) {
			var curFps = 1. / delta;
			if(curFps > this.realFps * 2) {
				curFps = this.realFps * 2;
			} else if(curFps < this.realFps * 0.5) {
				curFps = this.realFps * 0.5;
			}
			var f = delta / .5;
			if(f > 0.3) {
				f = 0.3;
			}
			this.realFps = this.realFps * (1 - f) + curFps * f;
		}
		return true;
	}
	,__class__: h3d_Engine
};
var h3d_Indexes = function(count,is32) {
	if(is32 == null) {
		is32 = false;
	}
	this.mem = h3d_Engine.CURRENT.mem;
	this.count = count;
	this.is32 = is32;
	this.mem.allocIndexes(this);
};
$hxClasses["h3d.Indexes"] = h3d_Indexes;
h3d_Indexes.__name__ = "h3d.Indexes";
h3d_Indexes.alloc = function(i,startPos,length) {
	if(length == null) {
		length = -1;
	}
	if(startPos == null) {
		startPos = 0;
	}
	if(length < 0) {
		length = i.length;
	}
	var idx = new h3d_Indexes(length);
	idx.upload(i,0,length);
	return idx;
};
h3d_Indexes.prototype = {
	isDisposed: function() {
		return this.ibuf == null;
	}
	,upload: function(indexes,pos,count,bufferPos) {
		if(bufferPos == null) {
			bufferPos = 0;
		}
		this.mem.driver.uploadIndexBuffer(this.ibuf,pos,count,indexes,bufferPos);
	}
	,dispose: function() {
		if(this.ibuf != null) {
			this.mem.deleteIndexes(this);
		}
	}
	,__class__: h3d_Indexes
};
var h3d_Matrix = function() {
};
$hxClasses["h3d.Matrix"] = h3d_Matrix;
h3d_Matrix.__name__ = "h3d.Matrix";
h3d_Matrix.L = function(a) {
	var m = new h3d_Matrix();
	m.loadValues(a);
	return m;
};
h3d_Matrix.prototype = {
	zero: function() {
		this._11 = 0.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 0.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 0.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 0.0;
	}
	,identity: function() {
		this._11 = 1.0;
		this._12 = 0.0;
		this._13 = 0.0;
		this._14 = 0.0;
		this._21 = 0.0;
		this._22 = 1.0;
		this._23 = 0.0;
		this._24 = 0.0;
		this._31 = 0.0;
		this._32 = 0.0;
		this._33 = 1.0;
		this._34 = 0.0;
		this._41 = 0.0;
		this._42 = 0.0;
		this._43 = 0.0;
		this._44 = 1.0;
	}
	,multiply3x4: function(a,b) {
		var m11 = a._11;
		var m12 = a._12;
		var m13 = a._13;
		var m21 = a._21;
		var m22 = a._22;
		var m23 = a._23;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		this._11 = m11 * b11 + m12 * b21 + m13 * b31;
		this._12 = m11 * b12 + m12 * b22 + m13 * b32;
		this._13 = m11 * b13 + m12 * b23 + m13 * b33;
		this._14 = 0;
		this._21 = m21 * b11 + m22 * b21 + m23 * b31;
		this._22 = m21 * b12 + m22 * b22 + m23 * b32;
		this._23 = m21 * b13 + m22 * b23 + m23 * b33;
		this._24 = 0;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33;
		this._34 = 0;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
		this._44 = 1;
	}
	,multiply: function(a,b) {
		var a11 = a._11;
		var a12 = a._12;
		var a13 = a._13;
		var a14 = a._14;
		var a21 = a._21;
		var a22 = a._22;
		var a23 = a._23;
		var a24 = a._24;
		var a31 = a._31;
		var a32 = a._32;
		var a33 = a._33;
		var a34 = a._34;
		var a41 = a._41;
		var a42 = a._42;
		var a43 = a._43;
		var a44 = a._44;
		var b11 = b._11;
		var b12 = b._12;
		var b13 = b._13;
		var b14 = b._14;
		var b21 = b._21;
		var b22 = b._22;
		var b23 = b._23;
		var b24 = b._24;
		var b31 = b._31;
		var b32 = b._32;
		var b33 = b._33;
		var b34 = b._34;
		var b41 = b._41;
		var b42 = b._42;
		var b43 = b._43;
		var b44 = b._44;
		this._11 = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
		this._12 = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
		this._13 = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
		this._14 = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
		this._21 = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
		this._22 = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
		this._23 = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
		this._24 = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
		this._31 = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
		this._32 = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
		this._33 = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
		this._34 = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
		this._41 = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
		this._42 = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
		this._43 = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
		this._44 = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
	}
	,inverse3x4: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		this._11 = m22 * m33 - m23 * m32;
		this._12 = m13 * m32 - m12 * m33;
		this._13 = m12 * m23 - m13 * m22;
		this._14 = 0;
		this._21 = m23 * m31 - m21 * m33;
		this._22 = m11 * m33 - m13 * m31;
		this._23 = m13 * m21 - m11 * m23;
		this._24 = 0;
		this._31 = m21 * m32 - m22 * m31;
		this._32 = m12 * m31 - m11 * m32;
		this._33 = m11 * m22 - m12 * m21;
		this._34 = 0;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		this._44 = 1;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		var invDet = 1.0 / det;
		this._11 *= invDet;
		this._12 *= invDet;
		this._13 *= invDet;
		this._21 *= invDet;
		this._22 *= invDet;
		this._23 *= invDet;
		this._31 *= invDet;
		this._32 *= invDet;
		this._33 *= invDet;
		this._41 *= invDet;
		this._42 *= invDet;
		this._43 *= invDet;
	}
	,initInverse: function(m) {
		var m11 = m._11;
		var m12 = m._12;
		var m13 = m._13;
		var m14 = m._14;
		var m21 = m._21;
		var m22 = m._22;
		var m23 = m._23;
		var m24 = m._24;
		var m31 = m._31;
		var m32 = m._32;
		var m33 = m._33;
		var m34 = m._34;
		var m41 = m._41;
		var m42 = m._42;
		var m43 = m._43;
		var m44 = m._44;
		this._11 = m22 * m33 * m44 - m22 * m34 * m43 - m32 * m23 * m44 + m32 * m24 * m43 + m42 * m23 * m34 - m42 * m24 * m33;
		this._12 = -m12 * m33 * m44 + m12 * m34 * m43 + m32 * m13 * m44 - m32 * m14 * m43 - m42 * m13 * m34 + m42 * m14 * m33;
		this._13 = m12 * m23 * m44 - m12 * m24 * m43 - m22 * m13 * m44 + m22 * m14 * m43 + m42 * m13 * m24 - m42 * m14 * m23;
		this._14 = -m12 * m23 * m34 + m12 * m24 * m33 + m22 * m13 * m34 - m22 * m14 * m33 - m32 * m13 * m24 + m32 * m14 * m23;
		this._21 = -m21 * m33 * m44 + m21 * m34 * m43 + m31 * m23 * m44 - m31 * m24 * m43 - m41 * m23 * m34 + m41 * m24 * m33;
		this._22 = m11 * m33 * m44 - m11 * m34 * m43 - m31 * m13 * m44 + m31 * m14 * m43 + m41 * m13 * m34 - m41 * m14 * m33;
		this._23 = -m11 * m23 * m44 + m11 * m24 * m43 + m21 * m13 * m44 - m21 * m14 * m43 - m41 * m13 * m24 + m41 * m14 * m23;
		this._24 = m11 * m23 * m34 - m11 * m24 * m33 - m21 * m13 * m34 + m21 * m14 * m33 + m31 * m13 * m24 - m31 * m14 * m23;
		this._31 = m21 * m32 * m44 - m21 * m34 * m42 - m31 * m22 * m44 + m31 * m24 * m42 + m41 * m22 * m34 - m41 * m24 * m32;
		this._32 = -m11 * m32 * m44 + m11 * m34 * m42 + m31 * m12 * m44 - m31 * m14 * m42 - m41 * m12 * m34 + m41 * m14 * m32;
		this._33 = m11 * m22 * m44 - m11 * m24 * m42 - m21 * m12 * m44 + m21 * m14 * m42 + m41 * m12 * m24 - m41 * m14 * m22;
		this._34 = -m11 * m22 * m34 + m11 * m24 * m32 + m21 * m12 * m34 - m21 * m14 * m32 - m31 * m12 * m24 + m31 * m14 * m22;
		this._41 = -m21 * m32 * m43 + m21 * m33 * m42 + m31 * m22 * m43 - m31 * m23 * m42 - m41 * m22 * m33 + m41 * m23 * m32;
		this._42 = m11 * m32 * m43 - m11 * m33 * m42 - m31 * m12 * m43 + m31 * m13 * m42 + m41 * m12 * m33 - m41 * m13 * m32;
		this._43 = -m11 * m22 * m43 + m11 * m23 * m42 + m21 * m12 * m43 - m21 * m13 * m42 - m41 * m12 * m23 + m41 * m13 * m22;
		this._44 = m11 * m22 * m33 - m11 * m23 * m32 - m21 * m12 * m33 + m21 * m13 * m32 + m31 * m12 * m23 - m31 * m13 * m22;
		var det = m11 * this._11 + m12 * this._21 + m13 * this._31 + m14 * this._41;
		if((det < 0 ? -det : det) < 1e-10) {
			this.zero();
			return;
		}
		det = 1.0 / det;
		this._11 *= det;
		this._12 *= det;
		this._13 *= det;
		this._14 *= det;
		this._21 *= det;
		this._22 *= det;
		this._23 *= det;
		this._24 *= det;
		this._31 *= det;
		this._32 *= det;
		this._33 *= det;
		this._34 *= det;
		this._41 *= det;
		this._42 *= det;
		this._43 *= det;
		this._44 *= det;
	}
	,loadValues: function(a) {
		this._11 = a[0];
		this._12 = a[1];
		this._13 = a[2];
		this._14 = a[3];
		this._21 = a[4];
		this._22 = a[5];
		this._23 = a[6];
		this._24 = a[7];
		this._31 = a[8];
		this._32 = a[9];
		this._33 = a[10];
		this._34 = a[11];
		this._41 = a[12];
		this._42 = a[13];
		this._43 = a[14];
		this._44 = a[15];
	}
	,__class__: h3d_Matrix
};
var h3d_Quat = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Quat"] = h3d_Quat;
h3d_Quat.__name__ = "h3d.Quat";
h3d_Quat.prototype = {
	toMatrix: function(m) {
		if(m == null) {
			m = new h3d_Matrix();
		}
		var xx = this.x * this.x;
		var xy = this.x * this.y;
		var xz = this.x * this.z;
		var xw = this.x * this.w;
		var yy = this.y * this.y;
		var yz = this.y * this.z;
		var yw = this.y * this.w;
		var zz = this.z * this.z;
		var zw = this.z * this.w;
		m._11 = 1 - 2 * (yy + zz);
		m._12 = 2 * (xy + zw);
		m._13 = 2 * (xz - yw);
		m._14 = 0;
		m._21 = 2 * (xy - zw);
		m._22 = 1 - 2 * (xx + zz);
		m._23 = 2 * (yz + xw);
		m._24 = 0;
		m._31 = 2 * (xz + yw);
		m._32 = 2 * (yz - xw);
		m._33 = 1 - 2 * (xx + yy);
		m._34 = 0;
		m._41 = 0;
		m._42 = 0;
		m._43 = 0;
		m._44 = 1;
		return m;
	}
	,__class__: h3d_Quat
};
var h3d_Vector = function(x,y,z,w) {
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
	this.w = w;
};
$hxClasses["h3d.Vector"] = h3d_Vector;
h3d_Vector.__name__ = "h3d.Vector";
h3d_Vector.prototype = {
	__class__: h3d_Vector
};
var h3d_anim_AnimatedObject = function() { };
$hxClasses["h3d.anim.AnimatedObject"] = h3d_anim_AnimatedObject;
h3d_anim_AnimatedObject.__name__ = "h3d.anim.AnimatedObject";
var h3d_anim_Animation = function(name,frameCount,sampling) {
	this.name = name;
	this.frameCount = frameCount;
	this.sampling = sampling;
	this.objects = [];
	this.lastEvent = -1;
	this.frame = 0.;
	this.speed = 1.;
	this.loop = true;
	this.pause = false;
};
$hxClasses["h3d.anim.Animation"] = h3d_anim_Animation;
h3d_anim_Animation.__name__ = "h3d.anim.Animation";
h3d_anim_Animation.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_anim_Animation.prototype = {
	getPropValue: function(objectName,propName) {
		return null;
	}
	,sync: function(decompose) {
		if(decompose == null) {
			decompose = false;
		}
		throw haxe_Exception.thrown("assert");
	}
	,isPlaying: function() {
		if(!this.pause) {
			return (this.speed < 0 ? -this.speed : this.speed) > 0.000001;
		} else {
			return false;
		}
	}
	,endFrame: function() {
		return this.frameCount;
	}
	,update: function(dt) {
		if(!this.isInstance) {
			throw haxe_Exception.thrown("You must instanciate this animation first");
		}
		if(!this.isPlaying()) {
			return 0;
		}
		if(this.events != null && this.onEvent != null) {
			var f0 = this.frame | 0;
			var f1 = this.frame + dt * this.speed * this.sampling | 0;
			if(f1 >= this.frameCount) {
				f1 = this.frameCount - 1;
			}
			var _g = f0;
			var _g1 = f1 + 1;
			while(_g < _g1) {
				var f = _g++;
				if(f == this.lastEvent) {
					continue;
				}
				this.lastEvent = f;
				if(this.events[f] != null) {
					var oldF = this.frame;
					var oldDT = dt;
					dt -= (f - this.frame) / (this.speed * this.sampling);
					this.frame = f;
					var _g2 = 0;
					var _g3 = this.events[f];
					while(_g2 < _g3.length) {
						var e = _g3[_g2];
						++_g2;
						this.onEvent(e);
					}
					if(this.frame == f && f == this.frameCount - 1) {
						this.frame = oldF;
						dt = oldDT;
						break;
					} else {
						return dt;
					}
				}
			}
		}
		if(this.onAnimEnd != null) {
			var end = this.endFrame();
			var et = this.speed == 0 ? 0 : (end - this.frame) / (this.speed * this.sampling);
			if(et <= dt && et > 0) {
				this.frame = end;
				dt -= et;
				this.onAnimEnd();
				if(this.frame == end && this.isPlaying()) {
					if(this.loop) {
						this.frame = 0;
					} else {
						dt = 0;
					}
				}
				return dt;
			}
		}
		this.frame += dt * this.speed * this.sampling;
		if(this.frame >= this.frameCount) {
			if(this.loop) {
				this.frame %= this.frameCount;
			} else {
				this.frame = this.frameCount;
			}
		}
		return 0;
	}
	,__class__: h3d_anim_Animation
};
var h3d_col_Collider = function() { };
$hxClasses["h3d.col.Collider"] = h3d_col_Collider;
h3d_col_Collider.__name__ = "h3d.col.Collider";
h3d_col_Collider.__isInterface__ = true;
h3d_col_Collider.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_col_Collider.prototype = {
	__class__: h3d_col_Collider
};
var h3d_col_Bounds = function() {
	this.xMin = 1e20;
	this.xMax = -1e20;
	this.yMin = 1e20;
	this.yMax = -1e20;
	this.zMin = 1e20;
	this.zMax = -1e20;
};
$hxClasses["h3d.col.Bounds"] = h3d_col_Bounds;
h3d_col_Bounds.__name__ = "h3d.col.Bounds";
h3d_col_Bounds.__interfaces__ = [h3d_col_Collider];
h3d_col_Bounds.prototype = {
	inFrustum: function(f,m) {
		if(m != null) {
			throw haxe_Exception.thrown("Not implemented");
		}
		return f.hasBounds(this);
	}
	,rayIntersection: function(r,bestMatch) {
		var minTx = (this.xMin - r.px) / r.lx;
		var minTy = (this.yMin - r.py) / r.ly;
		var minTz = (this.zMin - r.pz) / r.lz;
		var maxTx = (this.xMax - r.px) / r.lx;
		var maxTy = (this.yMax - r.py) / r.ly;
		var maxTz = (this.zMax - r.pz) / r.lz;
		var realMinTx = minTx > maxTx ? maxTx : minTx;
		var realMinTy = minTy > maxTy ? maxTy : minTy;
		var realMinTz = minTz > maxTz ? maxTz : minTz;
		var realMaxTx = minTx < maxTx ? maxTx : minTx;
		var realMaxTy = minTy < maxTy ? maxTy : minTy;
		var realMaxTz = minTz < maxTz ? maxTz : minTz;
		var a = realMaxTx > realMaxTy ? realMaxTy : realMaxTx;
		var minmax = a > realMaxTz ? realMaxTz : a;
		var a = realMinTx < realMinTy ? realMinTy : realMinTx;
		var maxmin = a < realMinTz ? realMinTz : a;
		if(minmax < maxmin) {
			return -1;
		}
		return maxmin;
	}
	,intersection: function(a,b) {
		var a1 = a.xMin;
		var b1 = b.xMin;
		var xMin = a1 < b1 ? b1 : a1;
		var a1 = a.yMin;
		var b1 = b.yMin;
		var yMin = a1 < b1 ? b1 : a1;
		var a1 = a.zMin;
		var b1 = b.zMin;
		var zMin = a1 < b1 ? b1 : a1;
		var a1 = a.xMax;
		var b1 = b.xMax;
		var xMax = a1 > b1 ? b1 : a1;
		var a1 = a.yMax;
		var b1 = b.yMax;
		var yMax = a1 > b1 ? b1 : a1;
		var a1 = a.zMax;
		var b1 = b.zMax;
		var zMax = a1 > b1 ? b1 : a1;
		this.xMin = xMin;
		this.xMax = xMax;
		this.yMin = yMin;
		this.yMax = yMax;
		this.zMin = zMin;
		this.zMax = zMax;
	}
	,load: function(b) {
		this.xMin = b.xMin;
		this.xMax = b.xMax;
		this.yMin = b.yMin;
		this.yMax = b.yMax;
		this.zMin = b.zMin;
		this.zMax = b.zMax;
	}
	,scaleCenter: function(v) {
		var dx = (this.xMax - this.xMin) * 0.5 * v;
		var dy = (this.yMax - this.yMin) * 0.5 * v;
		var dz = (this.zMax - this.zMin) * 0.5 * v;
		var mx = (this.xMax + this.xMin) * 0.5;
		var my = (this.yMax + this.yMin) * 0.5;
		var mz = (this.zMax + this.zMin) * 0.5;
		this.xMin = mx - dx;
		this.yMin = my - dy;
		this.zMin = mz - dz;
		this.xMax = mx + dx;
		this.yMax = my + dy;
		this.zMax = mz + dz;
	}
	,__class__: h3d_col_Bounds
};
var h3d_col_Frustum = function(mvp) {
	this.checkNearFar = true;
	this.pleft = new h3d_col_Plane(1,0,0,0.0);
	this.pright = new h3d_col_Plane(1,0,0,0.0);
	this.ptop = new h3d_col_Plane(1,0,0,0.0);
	this.pbottom = new h3d_col_Plane(1,0,0,0.0);
	this.pnear = new h3d_col_Plane(1,0,0,0.0);
	this.pfar = new h3d_col_Plane(1,0,0,0.0);
	if(mvp != null) {
		this.loadMatrix(mvp);
	}
};
$hxClasses["h3d.col.Frustum"] = h3d_col_Frustum;
h3d_col_Frustum.__name__ = "h3d.col.Frustum";
h3d_col_Frustum.prototype = {
	loadMatrix: function(mvp) {
		var _this = this.pleft;
		var p_nx = mvp._14 + mvp._11;
		var p_ny = mvp._24 + mvp._21;
		var p_nz = mvp._34 + mvp._31;
		var p_d = -(mvp._44 + mvp._41);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pright;
		var p_nx = mvp._14 - mvp._11;
		var p_ny = mvp._24 - mvp._21;
		var p_nz = mvp._34 - mvp._31;
		var p_d = mvp._41 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.ptop;
		var p_nx = mvp._14 - mvp._12;
		var p_ny = mvp._24 - mvp._22;
		var p_nz = mvp._34 - mvp._32;
		var p_d = mvp._42 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pbottom;
		var p_nx = mvp._14 + mvp._12;
		var p_ny = mvp._24 + mvp._22;
		var p_nz = mvp._34 + mvp._32;
		var p_d = -(mvp._44 + mvp._42);
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pnear;
		var p_nx = mvp._13;
		var p_ny = mvp._23;
		var p_nz = mvp._33;
		var p_d = -mvp._43;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pfar;
		var p_nx = mvp._14 - mvp._13;
		var p_ny = mvp._24 - mvp._23;
		var p_nz = mvp._34 - mvp._33;
		var p_d = mvp._43 - mvp._44;
		_this.nx = p_nx;
		_this.ny = p_ny;
		_this.nz = p_nz;
		_this.d = p_d;
		var _this = this.pleft;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pright;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.ptop;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pbottom;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pnear;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
		var _this = this.pfar;
		var len = 1. / Math.sqrt(_this.nx * _this.nx + _this.ny * _this.ny + _this.nz * _this.nz);
		_this.nx *= len;
		_this.ny *= len;
		_this.nz *= len;
		_this.d *= len;
	}
	,hasSphere: function(s) {
		var x = s.x;
		var y = s.y;
		var z = s.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var p_x = x;
		var p_y = y;
		var p_z = z;
		var _this = this.pleft;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pright;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.ptop;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		var _this = this.pbottom;
		if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
			return false;
		}
		if(this.checkNearFar) {
			var _this = this.pnear;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
			var _this = this.pfar;
			if(_this.nx * p_x + _this.ny * p_y + _this.nz * p_z - _this.d < -s.r) {
				return false;
			}
		}
		return true;
	}
	,hasBounds: function(b) {
		var p = this.pleft;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pright;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.ptop;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pnear;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		var p = this.pfar;
		var a = p.nx;
		var b1 = p.ny;
		var c = p.nz;
		var dd = a * (b.xMax + b.xMin) + b1 * (b.yMax + b.yMin) + c * (b.zMax + b.zMin);
		if(a < 0) {
			a = -a;
		}
		if(b1 < 0) {
			b1 = -b1;
		}
		if(c < 0) {
			c = -c;
		}
		var rr = a * (b.xMax - b.xMin) + b1 * (b.yMax - b.yMin) + c * (b.zMax - b.zMin);
		if(dd + rr - p.d * 2 < 0) {
			return false;
		}
		return true;
	}
	,__class__: h3d_col_Frustum
};
var h3d_col_Ray = function() {
};
$hxClasses["h3d.col.Ray"] = h3d_col_Ray;
h3d_col_Ray.__name__ = "h3d.col.Ray";
h3d_col_Ray.prototype = {
	normalize: function() {
		var l = this.lx * this.lx + this.ly * this.ly + this.lz * this.lz;
		if(l == 1.) {
			return;
		}
		if(l < 1e-10) {
			l = 0;
		} else {
			l = 1. / Math.sqrt(l);
		}
		this.lx *= l;
		this.ly *= l;
		this.lz *= l;
	}
	,__class__: h3d_col_Ray
};
var h3d_col_Plane = function(nx,ny,nz,d) {
	this.nx = nx;
	this.ny = ny;
	this.nz = nz;
	this.d = d;
};
$hxClasses["h3d.col.Plane"] = h3d_col_Plane;
h3d_col_Plane.__name__ = "h3d.col.Plane";
h3d_col_Plane.prototype = {
	__class__: h3d_col_Plane
};
var h3d_col_Point = function(x,y,z) {
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["h3d.col.Point"] = h3d_col_Point;
h3d_col_Point.__name__ = "h3d.col.Point";
h3d_col_Point.prototype = {
	__class__: h3d_col_Point
};
var h3d_col_Sphere = function(x,y,z,r) {
	if(r == null) {
		r = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	var sx = x;
	var sy = y;
	var sz = z;
	var sr = r;
	if(sr == null) {
		sr = 0.;
	}
	if(sz == null) {
		sz = 0.;
	}
	if(sy == null) {
		sy = 0.;
	}
	if(sx == null) {
		sx = 0.;
	}
	this.x = sx;
	this.y = sy;
	this.z = sz;
	this.r = sr;
};
$hxClasses["h3d.col.Sphere"] = h3d_col_Sphere;
h3d_col_Sphere.__name__ = "h3d.col.Sphere";
h3d_col_Sphere.__interfaces__ = [h3d_col_Collider];
h3d_col_Sphere.prototype = {
	rayIntersection: function(r,bestMatch) {
		var r2 = this.r * this.r;
		var px = r.px + r.lx;
		var py = r.py + r.ly;
		var pz = r.pz + r.lz;
		var a = r.lx * r.lx + r.ly * r.ly + r.lz * r.lz;
		var b = 2 * r.lx * (this.x - px) + 2 * r.ly * (this.y - py) + 2 * r.lz * (this.z - pz);
		var c = this.x * this.x + this.y * this.y + this.z * this.z + (px * px + py * py + pz * pz) - 2 * (this.x * px + this.y * py + this.z * pz) - r2;
		var d = b * b - 4 * a * c;
		if(d < 0) {
			return -1;
		}
		d = Math.sqrt(d);
		var t = (-b + d) / (2 * a);
		return 1 - t;
	}
	,inFrustum: function(f,m) {
		if(m != null) {
			return this.inFrustumMatrix(f,m);
		}
		return f.hasSphere(this);
	}
	,inFrustumMatrix: function(f,m) {
		var oldX = this.x;
		var oldY = this.y;
		var oldZ = this.z;
		var oldR = this.r;
		var x = this.x;
		var y = this.y;
		var z = this.z;
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var v_x = x;
		var v_y = y;
		var v_z = z;
		var px = v_x * m._11 + v_y * m._21 + v_z * m._31 + m._41;
		var py = v_x * m._12 + v_y * m._22 + v_z * m._32 + m._42;
		var pz = v_x * m._13 + v_y * m._23 + v_z * m._33 + m._43;
		v_x = px;
		v_y = py;
		v_z = pz;
		this.x = v_x;
		this.y = v_y;
		this.z = v_z;
		var v = null;
		if(v == null) {
			v = new h3d_Vector();
		}
		v.x = Math.sqrt(m._11 * m._11 + m._12 * m._12 + m._13 * m._13);
		v.y = Math.sqrt(m._21 * m._21 + m._22 * m._22 + m._23 * m._23);
		v.z = Math.sqrt(m._31 * m._31 + m._32 * m._32 + m._33 * m._33);
		if(m._11 * (m._22 * m._33 - m._23 * m._32) + m._12 * (m._23 * m._31 - m._21 * m._33) + m._13 * (m._21 * m._32 - m._22 * m._31) < 0) {
			v.x *= -1;
			v.y *= -1;
			v.z *= -1;
		}
		var scale = v;
		this.r *= Math.max(Math.max(scale.x,scale.y),scale.z);
		var res = f.hasSphere(this);
		this.x = oldX;
		this.y = oldY;
		this.z = oldZ;
		this.r = oldR;
		return res;
	}
	,__class__: h3d_col_Sphere
};
var h3d_impl_Feature = $hxEnums["h3d.impl.Feature"] = { __ename__ : true, __constructs__ : ["StandardDerivatives","FloatTextures","AllocDepthBuffer","HardwareAccelerated","MultipleRenderTargets","Queries","SRGBTextures","ShaderModel3","BottomLeftCoords","Wireframe","InstancedRendering"]
	,StandardDerivatives: {_hx_index:0,__enum__:"h3d.impl.Feature",toString:$estr}
	,FloatTextures: {_hx_index:1,__enum__:"h3d.impl.Feature",toString:$estr}
	,AllocDepthBuffer: {_hx_index:2,__enum__:"h3d.impl.Feature",toString:$estr}
	,HardwareAccelerated: {_hx_index:3,__enum__:"h3d.impl.Feature",toString:$estr}
	,MultipleRenderTargets: {_hx_index:4,__enum__:"h3d.impl.Feature",toString:$estr}
	,Queries: {_hx_index:5,__enum__:"h3d.impl.Feature",toString:$estr}
	,SRGBTextures: {_hx_index:6,__enum__:"h3d.impl.Feature",toString:$estr}
	,ShaderModel3: {_hx_index:7,__enum__:"h3d.impl.Feature",toString:$estr}
	,BottomLeftCoords: {_hx_index:8,__enum__:"h3d.impl.Feature",toString:$estr}
	,Wireframe: {_hx_index:9,__enum__:"h3d.impl.Feature",toString:$estr}
	,InstancedRendering: {_hx_index:10,__enum__:"h3d.impl.Feature",toString:$estr}
};
h3d_impl_Feature.__empty_constructs__ = [h3d_impl_Feature.StandardDerivatives,h3d_impl_Feature.FloatTextures,h3d_impl_Feature.AllocDepthBuffer,h3d_impl_Feature.HardwareAccelerated,h3d_impl_Feature.MultipleRenderTargets,h3d_impl_Feature.Queries,h3d_impl_Feature.SRGBTextures,h3d_impl_Feature.ShaderModel3,h3d_impl_Feature.BottomLeftCoords,h3d_impl_Feature.Wireframe,h3d_impl_Feature.InstancedRendering];
var h3d_impl_RenderFlag = $hxEnums["h3d.impl.RenderFlag"] = { __ename__ : true, __constructs__ : ["CameraHandness"]
	,CameraHandness: {_hx_index:0,__enum__:"h3d.impl.RenderFlag",toString:$estr}
};
h3d_impl_RenderFlag.__empty_constructs__ = [h3d_impl_RenderFlag.CameraHandness];
var h3d_impl_InputNames = function(names) {
	this.id = h3d_impl_InputNames.UID++;
	this.names = names;
};
$hxClasses["h3d.impl.InputNames"] = h3d_impl_InputNames;
h3d_impl_InputNames.__name__ = "h3d.impl.InputNames";
h3d_impl_InputNames.get = function(names) {
	var key = names.join("|");
	var i = h3d_impl_InputNames.CACHE.h[key];
	if(i == null) {
		i = new h3d_impl_InputNames(names.slice());
		h3d_impl_InputNames.CACHE.h[key] = i;
	}
	return i;
};
h3d_impl_InputNames.prototype = {
	__class__: h3d_impl_InputNames
};
var h3d_impl_Driver = function() { };
$hxClasses["h3d.impl.Driver"] = h3d_impl_Driver;
h3d_impl_Driver.__name__ = "h3d.impl.Driver";
h3d_impl_Driver.prototype = {
	hasFeature: function(f) {
		return false;
	}
	,setRenderFlag: function(r,value) {
	}
	,isSupportedFormat: function(fmt) {
		return false;
	}
	,isDisposed: function() {
		return true;
	}
	,begin: function(frame) {
	}
	,generateMipMaps: function(texture) {
		throw haxe_Exception.thrown("Mipmaps auto generation is not supported on this platform");
	}
	,clear: function(color,depth,stencil) {
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
	}
	,resize: function(width,height) {
	}
	,selectShader: function(shader) {
		return false;
	}
	,selectMaterial: function(pass) {
	}
	,uploadShaderBuffers: function(buffers,which) {
	}
	,selectBuffer: function(buffer) {
	}
	,draw: function(ibuf,startIndex,ntriangles) {
	}
	,setRenderZone: function(x,y,width,height) {
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
	}
	,setRenderTargets: function(textures) {
	}
	,allocDepthBuffer: function(b) {
		return null;
	}
	,disposeDepthBuffer: function(b) {
	}
	,getDefaultDepthBuffer: function() {
		return null;
	}
	,end: function() {
	}
	,setDebug: function(b) {
	}
	,allocTexture: function(t) {
		return null;
	}
	,allocIndexes: function(count,is32) {
		return null;
	}
	,allocVertexes: function(m) {
		return null;
	}
	,disposeTexture: function(t) {
	}
	,disposeIndexes: function(i) {
	}
	,disposeVertexes: function(v) {
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
	}
	,copyTexture: function(from,to) {
		return false;
	}
	,__class__: h3d_impl_Driver
};
var h3d_impl__$GlDriver_CompiledShader = function(s,vertex,shader) {
	this.s = s;
	this.vertex = vertex;
	this.shader = shader;
};
$hxClasses["h3d.impl._GlDriver.CompiledShader"] = h3d_impl__$GlDriver_CompiledShader;
h3d_impl__$GlDriver_CompiledShader.__name__ = "h3d.impl._GlDriver.CompiledShader";
h3d_impl__$GlDriver_CompiledShader.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledShader
};
var h3d_impl__$GlDriver_CompiledAttribute = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledAttribute"] = h3d_impl__$GlDriver_CompiledAttribute;
h3d_impl__$GlDriver_CompiledAttribute.__name__ = "h3d.impl._GlDriver.CompiledAttribute";
h3d_impl__$GlDriver_CompiledAttribute.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledAttribute
};
var h3d_impl__$GlDriver_CompiledProgram = function() {
};
$hxClasses["h3d.impl._GlDriver.CompiledProgram"] = h3d_impl__$GlDriver_CompiledProgram;
h3d_impl__$GlDriver_CompiledProgram.__name__ = "h3d.impl._GlDriver.CompiledProgram";
h3d_impl__$GlDriver_CompiledProgram.prototype = {
	__class__: h3d_impl__$GlDriver_CompiledProgram
};
var h3d_impl_GlDriver = function(antiAlias) {
	if(antiAlias == null) {
		antiAlias = 0;
	}
	this.features = new haxe_ds_EnumValueMap();
	this.maxCompressedTexturesSupport = 0;
	this.rightHanded = false;
	this.firstShader = true;
	this.boundTextures = [];
	this.curTargets = [];
	var _g = [];
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	_g.push(0);
	this.currentDivisor = _g;
	this.curColorMask = -1;
	this.lastActiveIndex = 0;
	this.curStEnabled = false;
	this.curStMaskBits = -1;
	this.curStOpBits = -1;
	this.curMatBits = -1;
	this.maxIdxCurAttribs = 0;
	this.curAttribs = [];
	this.canvas = hxd_Window.getInstance().canvas;
	var options = { alpha : false, stencil : true, antialias : antiAlias > 0};
	if(h3d_impl_GlDriver.ALLOW_WEBGL2) {
		this.gl = this.canvas.getContext("webgl2",options);
	}
	if(this.gl == null) {
		this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,options);
	}
	if(this.gl == null) {
		throw haxe_Exception.thrown("Could not acquire GL context");
	}
	if(typeof(WebGLDebugUtils) != "undefined") {
		this.gl = WebGLDebugUtils.makeDebugContext(this.gl);
		this.glDebug = true;
	}
	this.commonFB = this.gl.createFramebuffer();
	this.programs = new haxe_ds_IntMap();
	this.defStencil = new h3d_mat_Stencil();
	var v = this.gl.getParameter(7938);
	var reg = new EReg("ES ([0-9]+\\.[0-9]+)","");
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(1));
	}
	var reg = new EReg("[0-9]+\\.[0-9]+","");
	var v = this.gl.getParameter(35724);
	if(reg.match(v)) {
		this.glES = parseFloat(reg.matched(0));
		this.shaderVersion = Math.round(parseFloat(reg.matched(0)) * 100);
	}
	this.drawMode = 4;
	this.makeFeatures();
	if(this.hasFeature(h3d_impl_Feature.InstancedRendering) && this.glES < 3) {
		var extension = this.gl.getExtension("ANGLE_instanced_arrays");
		this.gl["vertexAttribDivisor"] = $bind(extension,extension.vertexAttribDivisorANGLE);
		this.gl["drawElementsInstanced"] = $bind(extension,extension.drawElementsInstancedANGLE);
	}
	hxsl_SharedShader.UNROLL_LOOPS = !this.hasFeature(h3d_impl_Feature.ShaderModel3);
	this.gl.pixelStorei(3333,1);
	this.gl.pixelStorei(3317,1);
};
$hxClasses["h3d.impl.GlDriver"] = h3d_impl_GlDriver;
h3d_impl_GlDriver.__name__ = "h3d.impl.GlDriver";
h3d_impl_GlDriver.__super__ = h3d_impl_Driver;
h3d_impl_GlDriver.prototype = $extend(h3d_impl_Driver.prototype,{
	setRenderFlag: function(r,value) {
		this.rightHanded = value > 0;
	}
	,setDebug: function(d) {
		this.debug = d;
	}
	,begin: function(frame) {
		this.frame = frame;
		this.resetStream();
		this.gl.useProgram(null);
		this.curShader = null;
		this.curBuffer = null;
	}
	,getDriverName: function(details) {
		var render = this.gl.getParameter(7937);
		if(details) {
			render += " GLv" + Std.string(this.gl.getParameter(7938));
		} else {
			render = render.split("/").shift();
		}
		render = render.split("WebGL ").join("");
		return "OpenGL " + render;
	}
	,compileShader: function(glout,shader) {
		var type = shader.vertex ? 35633 : 35632;
		var s = this.gl.createShader(type);
		if(shader.code == null) {
			shader.code = glout.run(shader.data);
			shader.data.funs = null;
		}
		this.gl.shaderSource(s,shader.code);
		this.gl.compileShader(s);
		var log = this.gl.getShaderInfoLog(s);
		if(this.gl.getShaderParameter(s,35713) != 1) {
			var log = this.gl.getShaderInfoLog(s);
			var lid = Std.parseInt(HxOverrides.substr(log,9,null));
			var line = lid == null ? null : shader.code.split("\n")[lid - 1];
			if(line == null) {
				line = "";
			} else {
				line = "(" + StringTools.trim(line) + ")";
			}
			var codeLines = shader.code.split("\n");
			var _g = 0;
			var _g1 = codeLines.length;
			while(_g < _g1) {
				var i = _g++;
				codeLines[i] = i + 1 + "\t" + codeLines[i];
			}
			throw haxe_Exception.thrown("An error occurred compiling the shaders: " + log + line + "\n\n" + codeLines.join("\n"));
		}
		return new h3d_impl__$GlDriver_CompiledShader(s,shader.vertex,shader);
	}
	,initShader: function(p,s,shader) {
		var prefix = s.vertex ? "vertex" : "fragment";
		s.globals = this.gl.getUniformLocation(p.p,prefix + "Globals");
		s.params = this.gl.getUniformLocation(p.p,prefix + "Params");
		s.textures = [];
		var index = 0;
		var curT = null;
		var mode = 0;
		var name = "";
		var t = shader.textures;
		while(t != null) {
			var tt = t.type;
			var count = 1;
			switch(tt._hx_index) {
			case 15:
				var _g = tt.size;
				if(_g._hx_index == 0) {
					var t1 = tt.t;
					var n = _g.v;
					tt = t1;
					count = n;
				}
				break;
			case 17:
				var _g1 = tt.size;
				tt = hxsl_Type.TSampler2D;
				break;
			default:
			}
			if(tt != curT) {
				curT = tt;
				switch(tt._hx_index) {
				case 10:
					mode = 3553;
					name = "Textures";
					break;
				case 11:
					mode = 35866;
					name = "TexturesArray";
					break;
				case 12:
					mode = 34067;
					name = "TexturesCube";
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture type " + Std.string(tt));
				}
				index = 0;
			}
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				s.textures.push({ u : this.gl.getUniformLocation(p.p,prefix + name + "[" + index + "]"), t : curT, mode : mode});
				++index;
			}
			t = t.next;
		}
		if(shader.bufferCount > 0) {
			var _g = [];
			var _g1 = 0;
			var _g2 = shader.bufferCount;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.gl.getUniformBlockIndex(p.p,"uniform_buffer" + i));
			}
			s.buffers = _g;
			var _g = 0;
			var _g1 = shader.bufferCount;
			while(_g < _g1) {
				var i = _g++;
				this.gl.uniformBlockBinding(p.p,s.buffers[i],i);
			}
		}
	}
	,selectShader: function(shader) {
		var p = this.programs.h[shader.id];
		if(p == null) {
			p = new h3d_impl__$GlDriver_CompiledProgram();
			var glout = new hxsl_GlslOut();
			glout.glES = this.glES;
			glout.version = this.shaderVersion;
			p.vertex = this.compileShader(glout,shader.vertex);
			p.fragment = this.compileShader(glout,shader.fragment);
			p.p = this.gl.createProgram();
			this.gl.attachShader(p.p,p.vertex.s);
			this.gl.attachShader(p.p,p.fragment.s);
			var log = null;
			try {
				this.gl.linkProgram(p.p);
				if(this.gl.getProgramParameter(p.p,35714) != 1) {
					log = this.gl.getProgramInfoLog(p.p);
				}
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Shader linkage error: " + Std.string(e) + " (" + this.getDriverName(false) + ")");
			}
			this.gl.deleteShader(p.vertex.s);
			this.gl.deleteShader(p.fragment.s);
			if(log != null) {
				this.gl.deleteProgram(p.p);
				throw haxe_Exception.thrown("Program linkage failure: " + log + "\nVertex=\n" + shader.vertex.code + "\n\nFragment=\n" + shader.fragment.code);
			}
			this.firstShader = false;
			this.initShader(p,p.vertex,shader.vertex);
			this.initShader(p,p.fragment,shader.fragment);
			var attribNames = [];
			p.attribs = [];
			p.hasAttribIndex = [];
			p.stride = 0;
			var _g = 0;
			var _g1 = shader.vertex.data.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.kind._hx_index == 1) {
					var t = 5126;
					var size;
					var _g2 = v.type;
					switch(_g2._hx_index) {
					case 3:
						size = 1;
						break;
					case 5:
						var _g3 = _g2.t;
						var n = _g2.size;
						size = n;
						break;
					case 9:
						var n1 = _g2.size;
						t = 5120;
						size = n1;
						break;
					default:
						throw haxe_Exception.thrown("assert " + Std.string(v.type));
					}
					var index = this.gl.getAttribLocation(p.p,glout.varNames.h.hasOwnProperty(v.id) ? glout.varNames.h[v.id] : v.name);
					if(index < 0) {
						p.stride += size;
						continue;
					}
					var a = new h3d_impl__$GlDriver_CompiledAttribute();
					a.type = t;
					a.size = size;
					a.index = index;
					a.offset = p.stride;
					a.divisor = 0;
					if(v.qualifiers != null) {
						var _g4 = 0;
						var _g5 = v.qualifiers;
						while(_g4 < _g5.length) {
							var q = _g5[_g4];
							++_g4;
							if(q._hx_index == 9) {
								var n2 = q.v;
								a.divisor = n2;
							}
						}
					}
					p.attribs.push(a);
					p.hasAttribIndex[a.index] = true;
					attribNames.push(v.name);
					p.stride += size;
				}
			}
			p.inputs = h3d_impl_InputNames.get(attribNames);
			this.programs.h[shader.id] = p;
		}
		if(this.curShader == p) {
			return false;
		}
		this.setProgram(p);
		return true;
	}
	,setProgram: function(p) {
		this.gl.useProgram(p.p);
		var _g = 0;
		var _g1 = p.attribs;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(!this.curAttribs[a.index]) {
				this.gl.enableVertexAttribArray(a.index);
				this.curAttribs[a.index] = true;
				if(this.maxIdxCurAttribs < a.index) {
					this.maxIdxCurAttribs = a.index;
				}
			}
		}
		var lastIdxCurAttribTrue = 0;
		var _g = 0;
		var _g1 = this.maxIdxCurAttribs + 1;
		while(_g < _g1) {
			var i = _g++;
			if(this.curAttribs[i] && !p.hasAttribIndex[i]) {
				this.gl.disableVertexAttribArray(i);
				this.curAttribs[i] = false;
			} else if(this.curAttribs[i]) {
				lastIdxCurAttribTrue = i;
			}
		}
		this.maxIdxCurAttribs = lastIdxCurAttribTrue;
		this.curShader = p;
		this.curBuffer = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
	}
	,uploadShaderBuffers: function(buf,which) {
		this.uploadBuffer(buf,this.curShader.vertex,buf.vertex,which);
		this.uploadBuffer(buf,this.curShader.fragment,buf.fragment,which);
	}
	,uploadBuffer: function(buffer,s,buf,which) {
		switch(which) {
		case 0:
			if(s.globals != null) {
				var a = buf.globals.subarray(0,s.shader.globalsSize * 4);
				this.gl.uniform4fv(s.globals,a);
			}
			break;
		case 1:
			if(s.params != null) {
				var a = buf.params.subarray(0,s.shader.paramsSize * 4);
				this.gl.uniform4fv(s.params,a);
			}
			break;
		case 2:
			var tcount = s.textures.length;
			var _g = 0;
			var _g1 = s.textures.length;
			while(_g < _g1) {
				var i = _g++;
				var t = buf.tex[i];
				var pt = s.textures[i];
				if(t == null || t.t == null && t.realloc == null) {
					switch(pt.t._hx_index) {
					case 10:
						var color = h3d_mat_Defaults.loadingTextureColor;
						t = h3d_mat_Texture.fromColor(color,(color >>> 24) / 255);
						break;
					case 12:
						t = h3d_mat_Texture.defaultCubeTexture();
						break;
					default:
						throw haxe_Exception.thrown("Missing texture");
					}
				}
				if(t != null && t.t == null && t.realloc != null) {
					var s1 = this.curShader;
					t.alloc();
					t.realloc();
					if(this.curShader != s1) {
						this.setProgram(s1);
						this.uploadShaderBuffers(buffer,0);
						this.uploadShaderBuffers(buffer,1);
						this.uploadShaderBuffers(buffer,2);
						return;
					}
				}
				t.set_lastFrame(this.frame);
				if(pt.u == null) {
					continue;
				}
				var idx = s.vertex ? i : this.curShader.vertex.textures.length + i;
				if(this.boundTextures[idx] != t.t) {
					this.boundTextures[idx] = t.t;
					var mode = this.getBindType(t);
					if(mode != pt.mode) {
						throw haxe_Exception.thrown("Texture format mismatch: " + Std.string(t) + " should be " + Std.string(pt.t));
					}
					this.gl.activeTexture(33984 + idx);
					this.gl.uniform1i(pt.u,idx);
					this.gl.bindTexture(mode,t.t.t);
					this.lastActiveIndex = idx;
				}
				var mip = t.mipMap._hx_index;
				var filter = t.filter._hx_index;
				var wrap = t.wrap._hx_index;
				var bits = mip | filter << 3 | wrap << 6;
				if(bits != t.t.bits) {
					t.t.bits = bits;
					var flags = h3d_impl_GlDriver.TFILTERS[mip][filter];
					var mode1 = pt.mode;
					this.gl.texParameteri(mode1,10240,flags[0]);
					this.gl.texParameteri(mode1,10241,flags[1]);
					var w = h3d_impl_GlDriver.TWRAP[wrap];
					this.gl.texParameteri(mode1,10242,w);
					this.gl.texParameteri(mode1,10243,w);
				}
				if(t.lodBias != t.t.bias) {
					t.t.bias = t.lodBias;
					this.gl.texParameterf(pt.mode,34045,t.lodBias);
				}
			}
			break;
		case 3:
			if(s.buffers != null) {
				var _g = 0;
				var _g1 = s.buffers.length;
				while(_g < _g1) {
					var i = _g++;
					this.gl.bindBufferBase(35345,i,buf.buffers[i].buffer.vbuf.b);
				}
			}
			break;
		}
	}
	,selectMaterial: function(pass) {
		var bits = pass.bits;
		if(this.curTarget == null == this.rightHanded) {
			switch(pass.culling._hx_index) {
			case 1:
				bits = bits & -4 | 2;
				break;
			case 2:
				bits = bits & -4 | 1;
				break;
			default:
			}
		}
		this.selectMaterialBits(bits);
		if(this.curColorMask != pass.colorMask) {
			var m = pass.colorMask;
			this.gl.colorMask((m & 1) != 0,(m & 2) != 0,(m & 4) != 0,(m & 8) != 0);
			this.curColorMask = m;
		}
		var s = this.defStencil;
		if(pass.stencil == null) {
			if(this.curStEnabled) {
				this.gl.disable(2960);
				this.curStEnabled = false;
			}
		} else {
			s = pass.stencil;
			if(!this.curStEnabled) {
				this.gl.enable(2960);
				this.curStEnabled = true;
			}
		}
		this.selectStencilBits(s.opBits,s.maskBits);
	}
	,selectMaterialBits: function(bits) {
		var diff = bits ^ this.curMatBits;
		if(this.curMatBits < 0) {
			diff = -1;
		}
		if(diff == 0) {
			return;
		}
		var wireframe = (bits & 268435456) != 0;
		this.drawMode = wireframe ? 3 : 4;
		if((diff & 3) != 0) {
			var cull = bits & 3;
			if(cull == 0) {
				this.gl.disable(2884);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits & 3) == 0) {
					this.gl.enable(2884);
				}
				this.gl.cullFace(h3d_impl_GlDriver.FACES[cull]);
			}
		}
		if((diff & 4194240) != 0) {
			var csrc = bits >> 6 & 15;
			var cdst = bits >> 10 & 15;
			var asrc = bits >> 14 & 15;
			var adst = bits >> 18 & 15;
			if(csrc == asrc && cdst == adst) {
				if(csrc == 0 && cdst == 1) {
					this.gl.disable(3042);
				} else {
					if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
						this.gl.enable(3042);
					}
					this.gl.blendFunc(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst]);
				}
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 6 & 15) == 0 && (this.curMatBits >> 10 & 15) == 1) {
					this.gl.enable(3042);
				}
				this.gl.blendFuncSeparate(h3d_impl_GlDriver.BLEND[csrc],h3d_impl_GlDriver.BLEND[cdst],h3d_impl_GlDriver.BLEND[asrc],h3d_impl_GlDriver.BLEND[adst]);
			}
		}
		if((diff & 264241152) != 0) {
			var cop = bits >> 22 & 7;
			var aop = bits >> 25 & 7;
			if(cop == aop) {
				this.gl.blendEquation(h3d_impl_GlDriver.OP[cop]);
			} else {
				this.gl.blendEquationSeparate(h3d_impl_GlDriver.OP[cop],h3d_impl_GlDriver.OP[aop]);
			}
		}
		if((diff & 4) != 0) {
			this.gl.depthMask((bits >> 2 & 1) != 0);
		}
		if((diff & 56) != 0) {
			var cmp = bits >> 3 & 7;
			if(cmp == 0) {
				this.gl.disable(2929);
			} else {
				if(this.curMatBits < 0 || (this.curMatBits >> 3 & 7) == 0) {
					this.gl.enable(2929);
				}
				this.gl.depthFunc(h3d_impl_GlDriver.COMPARE[cmp]);
			}
		}
		this.curMatBits = bits;
	}
	,selectStencilBits: function(opBits,maskBits) {
		var diffOp = opBits ^ this.curStOpBits;
		var diffMask = maskBits ^ this.curStMaskBits;
		if((diffOp | diffMask) == 0) {
			return;
		}
		if((diffOp & 4088) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.STENCIL_OP[opBits >> 6 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 9 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 3 & 7]);
		}
		if((diffOp & 16744448) != 0) {
			this.gl.stencilOpSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.STENCIL_OP[opBits >> 18 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 21 & 7],h3d_impl_GlDriver.STENCIL_OP[opBits >> 15 & 7]);
		}
		if((diffOp & 7 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[2],h3d_impl_GlDriver.COMPARE[opBits & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffOp & 28672 | diffMask & 16711935) != 0) {
			this.gl.stencilFuncSeparate(h3d_impl_GlDriver.FACES[1],h3d_impl_GlDriver.COMPARE[opBits >> 12 & 7],maskBits >> 16 & 255,maskBits & 255);
		}
		if((diffMask & 65280) != 0) {
			var w = maskBits >> 8 & 255;
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[2],w);
			this.gl.stencilMaskSeparate(h3d_impl_GlDriver.FACES[1],w);
		}
		this.curStOpBits = opBits;
		this.curStMaskBits = maskBits;
	}
	,clear: function(color,depth,stencil) {
		var bits = 0;
		if(color != null) {
			this.gl.colorMask(true,true,true,true);
			this.curColorMask = 15;
			this.gl.clearColor(color.x,color.y,color.z,color.w);
			bits |= 16384;
		}
		if(depth != null) {
			this.gl.depthMask(true);
			if(this.curMatBits >= 0) {
				this.curMatBits |= 4;
			}
			this.gl.clearDepth(depth);
			bits |= 256;
		}
		if(stencil != null) {
			this.selectStencilBits(this.defStencil.opBits,this.defStencil.maskBits);
			this.gl.clearStencil(stencil);
			bits |= 1024;
		}
		if(bits != 0) {
			this.gl.clear(bits);
		}
		if(this.curTarget != null) {
			this.curTarget.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		}
	}
	,resize: function(width,height) {
		if(this.canvas.style.width == "") {
			var tmp = width / window.devicePixelRatio | 0;
			this.canvas.style.width = tmp + "px";
			var tmp = height / window.devicePixelRatio | 0;
			this.canvas.style.height = tmp + "px";
		}
		this.canvas.width = width;
		this.canvas.height = height;
		this.bufferWidth = width;
		this.bufferHeight = height;
		this.gl.viewport(0,0,width,height);
		if(this.defaultDepth != null) {
			this.disposeDepthBuffer(this.defaultDepth);
			this.defaultDepth.width = this.bufferWidth;
			this.defaultDepth.height = this.bufferHeight;
			this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		}
	}
	,getChannels: function(t) {
		switch(t.internalFmt) {
		case 6407:
			return 6407;
		case 6408:
			return 6408;
		case 32856:
			return 32993;
		case 32857:
			return 6408;
		case 6403:case 33321:case 33325:case 33326:
			return 6403;
		case 33319:case 33323:case 33327:case 33328:
			return 33319;
		case 33777:case 33778:case 33779:
			return 6408;
		case 34837:case 34843:
			return 6407;
		case 35898:
			return 6407;
		case 35904:case 35905:
			return 6407;
		case 34836:case 34842:case 35906:case 35907:
			return 6408;
		default:
			throw haxe_Exception.thrown("Invalid format " + t.internalFmt);
		}
	}
	,isSupportedFormat: function(fmt) {
		switch(fmt._hx_index) {
		case 2:
			return true;
		case 3:case 4:
			return this.hasFeature(h3d_impl_Feature.FloatTextures);
		case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 16:case 17:
			return this.glES >= 3;
		case 14:case 15:
			return this.hasFeature(h3d_impl_Feature.SRGBTextures);
		case 21:
			var n = fmt.v;
			return n <= this.maxCompressedTexturesSupport;
		default:
			return false;
		}
	}
	,getBindType: function(t) {
		var isCube = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var isArray = (t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0;
		if(isCube) {
			return 34067;
		} else if(isArray) {
			return 35866;
		} else {
			return 3553;
		}
	}
	,allocTexture: function(t) {
		var _gthis = this;
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var tt = this.gl.createTexture();
		var bind = this.getBindType(t);
		var tt1 = { t : tt, width : t.width, height : t.height, internalFmt : 6408, pixelFmt : 5121, bits : -1, bind : bind, bias : 0};
		var _g = t.format;
		switch(_g._hx_index) {
		case 1:
			tt1.internalFmt = 32856;
			break;
		case 2:
			break;
		case 3:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.pixelFmt = 5131;
				tt1.internalFmt = 34842;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 4:
			if(this.hasFeature(h3d_impl_Feature.FloatTextures)) {
				tt1.internalFmt = 34836;
				tt1.pixelFmt = 5126;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		case 5:
			tt1.internalFmt = 33321;
			break;
		case 6:
			tt1.internalFmt = 33325;
			tt1.pixelFmt = 5131;
			break;
		case 7:
			tt1.internalFmt = 33326;
			tt1.pixelFmt = 5126;
			break;
		case 8:
			tt1.internalFmt = 33323;
			break;
		case 9:
			tt1.internalFmt = 33327;
			tt1.pixelFmt = 5131;
			break;
		case 10:
			tt1.internalFmt = 33328;
			tt1.pixelFmt = 5126;
			break;
		case 11:
			tt1.internalFmt = 6407;
			break;
		case 12:
			tt1.internalFmt = 34843;
			tt1.pixelFmt = 5131;
			break;
		case 13:
			tt1.internalFmt = 34837;
			tt1.pixelFmt = 5126;
			break;
		case 14:
			tt1.internalFmt = 35905;
			break;
		case 15:
			tt1.internalFmt = 35907;
			break;
		case 16:
			tt1.internalFmt = 32857;
			tt1.pixelFmt = 33640;
			break;
		case 17:
			tt1.internalFmt = 35898;
			tt1.pixelFmt = 35899;
			break;
		case 21:
			var n = _g.v;
			if(n <= this.maxCompressedTexturesSupport) {
				if((t.width & 3) != 0 || (t.height & 3) != 0) {
					throw haxe_Exception.thrown("Compressed texture " + Std.string(t) + " has size " + t.width + "x" + t.height + " - must be a multiple of 4");
				}
				switch(n) {
				case 1:
					tt1.internalFmt = 33777;
					break;
				case 2:
					tt1.internalFmt = 33778;
					break;
				case 3:
					tt1.internalFmt = 33779;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
				}
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
			}
			break;
		default:
			throw haxe_Exception.thrown("Unsupported texture format " + Std.string(t.format));
		}
		t.set_lastFrame(this.frame);
		t.flags &= -1 - (1 << h3d_mat_TextureFlags.WasCleared._hx_index);
		this.gl.bindTexture(bind,tt1.t);
		var outOfMem = false;
		if((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var _g = 0;
			while(_g < 6) {
				var i = _g++;
				this.gl.texImage2D(h3d_impl_GlDriver.CUBE_FACES[i],0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
				var tmp;
				if(!h3d_impl_GlDriver.outOfMemoryCheck) {
					tmp = false;
				} else {
					var err = _gthis.gl.getError();
					if(err == 1285) {
						outOfMem = true;
						tmp = true;
					} else {
						if(err != 0) {
							throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
						}
						tmp = false;
					}
				}
				if(tmp) {
					break;
				}
			}
		} else if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.texImage3D(35866,0,tt1.internalFmt,tt1.width,tt1.height,t.get_layerCount(),0,this.getChannels(tt1),tt1.pixelFmt,null);
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		} else {
			var _g = t.format;
			var tmp;
			if(_g._hx_index == 21) {
				var _g1 = _g.v;
				tmp = true;
			} else {
				tmp = false;
			}
			if(!tmp) {
				this.gl.texImage2D(bind,0,tt1.internalFmt,tt1.width,tt1.height,0,this.getChannels(tt1),tt1.pixelFmt,null);
			}
			if(h3d_impl_GlDriver.outOfMemoryCheck) {
				var err = _gthis.gl.getError();
				if(err == 1285) {
					outOfMem = true;
				} else if(err != 0) {
					throw haxe_Exception.thrown("Failed to alloc texture " + Std.string(t.format) + "(error " + err + ")");
				}
			}
		}
		this.restoreBind();
		if(outOfMem) {
			this.gl.deleteTexture(tt1.t);
			return null;
		}
		return tt1;
	}
	,restoreBind: function() {
		var t = this.boundTextures[this.lastActiveIndex];
		if(t == null) {
			this.gl.bindTexture(3553,null);
		} else {
			this.gl.bindTexture(t.bind,t.t);
		}
	}
	,allocDepthBuffer: function(b) {
		var r = this.gl.createRenderbuffer();
		if(b.format == null) {
			b.format = this.glES >= 3 ? h3d_mat_DepthFormat.Depth24Stencil8 : h3d_mat_DepthFormat.Depth16;
		}
		var format;
		switch(b.format._hx_index) {
		case 0:
			format = 33189;
			break;
		case 1:
			if(this.glES >= 3) {
				format = 33190;
			} else {
				throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
			}
			break;
		case 2:
			format = 34041;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported depth format " + Std.string(b.format));
		}
		this.gl.bindRenderbuffer(36161,r);
		this.gl.renderbufferStorage(36161,format,b.width,b.height);
		this.gl.bindRenderbuffer(36161,null);
		return { r : r};
	}
	,disposeDepthBuffer: function(b) {
		if(b.b != null && b.b.r != null) {
			this.gl.deleteRenderbuffer(b.b.r);
			b.b = null;
		}
	}
	,getDefaultDepthBuffer: function() {
		if(this.defaultDepth != null) {
			return this.defaultDepth;
		}
		this.defaultDepth = new h3d_mat_DepthBuffer(0,0);
		this.defaultDepth.width = this.bufferWidth;
		this.defaultDepth.height = this.bufferHeight;
		this.defaultDepth.b = this.allocDepthBuffer(this.defaultDepth);
		return this.defaultDepth;
	}
	,allocVertexes: function(m) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		this.gl.bindBuffer(34962,b);
		if(m.size * m.stride == 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.gl.bufferData(34962,m.size * m.stride * 4,(m.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0 ? 35048 : 35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34962,null);
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, stride : m.stride};
	}
	,allocIndexes: function(count,is32) {
		if(h3d_impl_GlDriver.outOfMemoryCheck) {
			this.gl.getError();
		}
		var b = this.gl.createBuffer();
		var size = is32 ? 4 : 2;
		this.gl.bindBuffer(34963,b);
		this.gl.bufferData(34963,count * size,35044);
		var outOfMem = h3d_impl_GlDriver.outOfMemoryCheck && this.gl.getError() == 1285;
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
		if(outOfMem) {
			this.gl.deleteBuffer(b);
			return null;
		}
		return { b : b, is32 : is32};
	}
	,disposeTexture: function(t) {
		var tt = t.t;
		if(tt == null) {
			return;
		}
		t.t = null;
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			if(this.boundTextures[i] == tt) {
				this.boundTextures[i] = null;
			}
		}
		this.gl.deleteTexture(tt.t);
	}
	,disposeIndexes: function(i) {
		this.gl.deleteBuffer(i.b);
	}
	,disposeVertexes: function(v) {
		this.gl.deleteBuffer(v.b);
	}
	,generateMipMaps: function(t) {
		var bind = this.getBindType(t);
		this.gl.bindTexture(bind,t.t.t);
		this.gl.generateMipmap(bind);
		this.restoreBind();
	}
	,uploadTextureBitmap: function(t,bmp,mipLevel,side) {
		if(t.format != hxd_PixelFormat.RGBA || (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			var pixels = bmp.getPixels();
			this.uploadTexturePixels(t,pixels,mipLevel,side);
			pixels.dispose();
		} else {
			var img = bmp.ctx;
			this.gl.bindTexture(3553,t.t.t);
			this.gl.texImage2D(3553,mipLevel,t.t.internalFmt,this.getChannels(t.t),t.t.pixelFmt,img.getImageData(0,0,bmp.ctx.canvas.width,bmp.ctx.canvas.height));
			this.restoreBind();
		}
	}
	,resetStream: function() {
	}
	,uploadTexturePixels: function(t,pixels,mipLevel,side) {
		var cubic = (t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var bind = this.getBindType(t);
		if((t.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			throw haxe_Exception.thrown("TODO:texImage3D");
		}
		var face = cubic ? h3d_impl_GlDriver.CUBE_FACES[side] : 3553;
		this.gl.bindTexture(bind,t.t.t);
		pixels.convert(t.format);
		pixels.setFlip(false);
		var dataLen = pixels.dataSize;
		var buffer;
		switch(t.format._hx_index) {
		case 4:case 7:case 10:case 13:
			buffer = new Float32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		case 3:case 6:case 9:case 12:
			buffer = new Uint16Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 1);
			break;
		case 16:case 17:
			buffer = new Uint32Array(pixels.bytes.b.buffer,pixels.offset,dataLen >> 2);
			break;
		default:
			buffer = new Uint8Array(pixels.bytes.b.buffer,pixels.offset,dataLen);
		}
		var _g = t.format;
		var tmp;
		if(_g._hx_index == 21) {
			var _g1 = _g.v;
			tmp = true;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.gl.compressedTexImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,buffer);
		} else {
			this.gl.texImage2D(face,mipLevel,t.t.internalFmt,pixels.width,pixels.height,0,this.getChannels(t.t),t.t.pixelFmt,buffer);
		}
		t.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.restoreBind();
	}
	,uploadVertexBuffer: function(v,startVertex,vertexCount,buf,bufPos) {
		var stride = v.stride;
		this.gl.bindBuffer(34962,v.b);
		var buf1 = buf.array;
		var sub = new Float32Array(buf1.buffer,bufPos * 4,vertexCount * stride);
		this.gl.bufferSubData(34962,startVertex * stride * 4,sub);
		this.gl.bindBuffer(34962,null);
	}
	,uploadIndexBuffer: function(i,startIndice,indiceCount,buf,bufPos) {
		var bits = i.is32 ? 2 : 1;
		this.gl.bindBuffer(34963,i.b);
		var buf1 = new Uint16Array(buf);
		var sub = new Uint16Array(buf1.buffer,bufPos << bits,indiceCount);
		this.gl.bufferSubData(34963,startIndice << bits,sub);
		this.gl.bindBuffer(34963,null);
		this.curIndexBuffer = null;
	}
	,selectBuffer: function(v) {
		if(v == this.curBuffer) {
			return;
		}
		if(this.curBuffer != null && v.buffer == this.curBuffer.buffer && (v.buffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0 == ((this.curBuffer.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0)) {
			this.curBuffer = v;
			return;
		}
		if(this.curShader == null) {
			throw haxe_Exception.thrown("No shader selected");
		}
		this.curBuffer = v;
		var m = v.buffer.vbuf;
		if(m.stride < this.curShader.stride) {
			throw haxe_Exception.thrown("Buffer stride (" + m.stride + ") and shader stride (" + this.curShader.stride + ") mismatch");
		}
		this.gl.bindBuffer(34962,m.b);
		if((v.flags & 1 << h3d_BufferFlag.RawFormat._hx_index) != 0) {
			var _g = 0;
			var _g1 = this.curShader.attribs;
			while(_g < _g1.length) {
				var a = _g1[_g];
				++_g;
				var pos = a.offset;
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		} else {
			var offset = 8;
			var _g = 0;
			var _g1 = this.curShader.attribs.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.curShader.attribs[i];
				var pos;
				var _g2 = this.curShader.inputs.names[i];
				switch(_g2) {
				case "normal":
					if(m.stride < 6) {
						throw haxe_Exception.thrown("Buffer is missing NORMAL data, set it to RAW format ?");
					}
					pos = 3;
					break;
				case "position":
					pos = 0;
					break;
				case "uv":
					if(m.stride < 8) {
						throw haxe_Exception.thrown("Buffer is missing UV data, set it to RAW format ?");
					}
					pos = 6;
					break;
				default:
					var s = _g2;
					pos = offset;
					offset += a.size;
					if(offset > m.stride) {
						throw haxe_Exception.thrown("Buffer is missing '" + s + "' data, set it to RAW format ?");
					}
				}
				this.gl.vertexAttribPointer(a.index,a.size,a.type,false,m.stride * 4,pos * 4);
				if(this.currentDivisor[a.index] != a.divisor) {
					this.currentDivisor[a.index] = a.divisor;
					this.gl.vertexAttribDivisor(a.index,a.divisor);
				}
			}
		}
	}
	,draw: function(ibuf,startIndex,ntriangles) {
		if(ibuf != this.curIndexBuffer) {
			this.curIndexBuffer = ibuf;
			this.gl.bindBuffer(34963,ibuf.b);
		}
		if(ibuf.is32) {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5125,startIndex * 4);
		} else {
			this.gl.drawElements(this.drawMode,ntriangles * 3,5123,startIndex * 2);
		}
	}
	,end: function() {
	}
	,isDisposed: function() {
		return this.gl.isContextLost();
	}
	,setRenderZone: function(x,y,width,height) {
		if(x == 0 && y == 0 && width < 0 && height < 0) {
			this.gl.disable(3089);
		} else {
			this.gl.enable(3089);
			if(this.curTarget == null) {
				y = this.bufferHeight - (y + height);
			}
			this.gl.scissor(x,y,width,height);
		}
	}
	,setDrawBuffers: function(k) {
		if(this.glES >= 3) {
			this.gl.drawBuffers(h3d_impl_GlDriver.CBUFFERS[k]);
		} else if(this.mrtExt != null) {
			this.mrtExt.drawBuffersWEBGL(h3d_impl_GlDriver.CBUFFERS[k]);
		}
	}
	,unbindTargets: function() {
		if(this.curTarget != null && this.numTargets > 1) {
			while(this.numTargets > 1) {
				this.gl.framebufferTexture2D(36160,36064 + --this.numTargets,3553,null,0);
				this.curTargets[this.numTargets] = null;
			}
			this.setDrawBuffers(1);
		}
	}
	,setRenderTarget: function(tex,layer,mipLevel) {
		if(mipLevel == null) {
			mipLevel = 0;
		}
		if(layer == null) {
			layer = 0;
		}
		this.unbindTargets();
		this.curTarget = tex;
		if(tex == null) {
			this.gl.bindFramebuffer(36160,null);
			this.gl.viewport(0,0,this.bufferWidth,this.bufferHeight);
			return;
		}
		if(tex.depthBuffer != null && (tex.depthBuffer.width != tex.width || tex.depthBuffer.height != tex.height)) {
			throw haxe_Exception.thrown("Invalid depth buffer size : does not match render target size");
		}
		if(mipLevel > 0 && this.glES == 1) {
			throw haxe_Exception.thrown("Cannot render to mipLevel in WebGL1, use upload() instead");
		}
		if(tex.t == null) {
			tex.alloc();
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			var bind = this.getBindType(tex);
			this.gl.bindTexture(bind,tex.t.t);
			this.gl.generateMipmap(bind);
			this.restoreBind();
		}
		tex.set_lastFrame(this.frame);
		this.curTargetLayer = layer;
		this.curTargetMip = mipLevel;
		this.gl.bindFramebuffer(36160,this.commonFB);
		if((tex.flags & 1 << h3d_mat_TextureFlags.IsArray._hx_index) != 0) {
			this.gl.framebufferTextureLayer(36160,36064,tex.t.t,mipLevel,layer);
		} else {
			this.gl.framebufferTexture2D(36160,36064,(tex.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0 ? h3d_impl_GlDriver.CUBE_FACES[layer] : 3553,tex.t.t,mipLevel);
		}
		if(tex.depthBuffer != null) {
			if(tex.depthBuffer.hasStencil() && tex.depthBuffer.format == h3d_mat_DepthFormat.Depth24Stencil8) {
				this.gl.framebufferRenderbuffer(36160,33306,36161,tex.depthBuffer.b.r);
			} else {
				this.gl.framebufferRenderbuffer(36160,33306,36161,null);
				this.gl.framebufferRenderbuffer(36160,36096,36161,tex.depthBuffer.b.r);
				this.gl.framebufferRenderbuffer(36160,36128,36161,tex.depthBuffer.hasStencil() ? tex.depthBuffer.b.r : null);
			}
		} else {
			this.gl.framebufferRenderbuffer(36160,33306,36161,null);
			this.gl.framebufferRenderbuffer(36160,36096,36161,null);
			this.gl.framebufferRenderbuffer(36160,36128,36161,null);
		}
		var w = tex.width >> mipLevel;
		if(w == 0) {
			w = 1;
		}
		var h = tex.height >> mipLevel;
		if(h == 0) {
			h = 1;
		}
		this.gl.viewport(0,0,w,h);
		var _g = 0;
		var _g1 = this.boundTextures.length;
		while(_g < _g1) {
			var i = _g++;
			this.boundTextures[i] = null;
		}
		if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
			tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
			this.clear(h3d_impl_GlDriver.BLACK);
		}
		if(this.glDebug) {
			var code = this.gl.checkFramebufferStatus(36160);
			if(code != 36053) {
				throw haxe_Exception.thrown("Invalid frame buffer: " + code);
			}
		}
	}
	,setRenderTargets: function(textures) {
		this.unbindTargets();
		this.setRenderTarget(textures[0]);
		if(textures.length < 2) {
			return;
		}
		this.numTargets = textures.length;
		var needClear = false;
		var _g = 1;
		var _g1 = textures.length;
		while(_g < _g1) {
			var i = _g++;
			var tex = textures[i];
			if(tex.t == null) {
				tex.alloc();
			}
			this.gl.framebufferTexture2D(36160,36064 + i,3553,tex.t.t,0);
			this.curTargets[i] = tex;
			tex.set_lastFrame(this.frame);
			if((tex.flags & 1 << h3d_mat_TextureFlags.WasCleared._hx_index) == 0) {
				tex.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
				needClear = true;
			}
		}
		this.setDrawBuffers(textures.length);
		if(needClear) {
			this.clear(h3d_impl_GlDriver.BLACK);
		}
	}
	,init: function(onCreate,forceSoftware) {
		if(forceSoftware == null) {
			forceSoftware = false;
		}
		var ready = false;
		if(window.document.readyState == "complete") {
			var _g = onCreate;
			var a1 = false;
			haxe_Timer.delay(function() {
				_g(a1);
			},1);
		} else {
			window.addEventListener("load",function(_) {
				if(!ready) {
					ready = true;
					onCreate(false);
				}
			});
		}
	}
	,hasFeature: function(f) {
		return this.features.get(f);
	}
	,makeFeatures: function() {
		var _g = 0;
		var _g1 = h3d_impl_Feature.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.features.set(f,this.checkFeature(f));
		}
		if(this.gl.getExtension("WEBGL_compressed_texture_s3tc") != null) {
			this.maxCompressedTexturesSupport = 3;
		}
	}
	,checkFeature: function(f) {
		switch(f._hx_index) {
		case 0:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("OES_standard_derivatives") != null;
			}
			break;
		case 1:
			if(this.glES >= 3) {
				if(this.gl.getExtension("EXT_color_buffer_float") != null) {
					return this.gl.getExtension("OES_texture_float_linear") != null;
				} else {
					return false;
				}
			} else if(this.gl.getExtension("OES_texture_float") != null && this.gl.getExtension("OES_texture_float_linear") != null && this.gl.getExtension("OES_texture_half_float") != null) {
				return this.gl.getExtension("OES_texture_half_float_linear") != null;
			} else {
				return false;
			}
			break;
		case 4:
			if(this.glES >= 3) {
				return true;
			} else if(this.mrtExt == null) {
				return (this.mrtExt = this.gl.getExtension("WEBGL_draw_buffers")) != null;
			} else {
				return true;
			}
			break;
		case 6:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("EXT_sRGB") != null;
			}
			break;
		case 7:
			if(this.glES >= 3) {
				return true;
			} else {
				return false;
			}
			break;
		case 2:case 3:case 8:case 9:
			return true;
		case 10:
			if(this.glES >= 3) {
				return true;
			} else {
				return this.gl.getExtension("ANGLE_instanced_arrays") != null;
			}
			break;
		default:
			return false;
		}
	}
	,__class__: h3d_impl_GlDriver
});
var h3d_impl__$ManagedBuffer_FreeCell = function(pos,count,next) {
	this.pos = pos;
	this.count = count;
	this.next = next;
};
$hxClasses["h3d.impl._ManagedBuffer.FreeCell"] = h3d_impl__$ManagedBuffer_FreeCell;
h3d_impl__$ManagedBuffer_FreeCell.__name__ = "h3d.impl._ManagedBuffer.FreeCell";
h3d_impl__$ManagedBuffer_FreeCell.prototype = {
	__class__: h3d_impl__$ManagedBuffer_FreeCell
};
var h3d_impl_ManagedBuffer = function(stride,size,flags) {
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	this.size = size;
	this.stride = stride;
	this.freeList = new h3d_impl__$ManagedBuffer_FreeCell(0,size,null);
	this.mem = h3d_Engine.CURRENT.mem;
	this.mem.allocManaged(this);
};
$hxClasses["h3d.impl.ManagedBuffer"] = h3d_impl_ManagedBuffer;
h3d_impl_ManagedBuffer.__name__ = "h3d.impl.ManagedBuffer";
h3d_impl_ManagedBuffer.prototype = {
	uploadVertexBuffer: function(start,vertices,buf,bufPos) {
		if(bufPos == null) {
			bufPos = 0;
		}
		this.mem.driver.uploadVertexBuffer(this.vbuf,start,vertices,buf,bufPos);
	}
	,allocPosition: function(nvert,align) {
		var free = this.freeList;
		while(free != null) {
			if(free.count >= nvert) {
				var d = (align - free.pos % align) % align;
				if(d == 0) {
					break;
				}
				if(free.count >= nvert + d) {
					free.next = new h3d_impl__$ManagedBuffer_FreeCell(free.pos + d,free.count - d,free.next);
					free.count = d;
					free = free.next;
					break;
				}
			}
			free = free.next;
		}
		if(free == null) {
			return -1;
		}
		var pos = free.pos;
		free.pos += nvert;
		free.count -= nvert;
		return pos;
	}
	,allocBuffer: function(b) {
		var align = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : 1;
		var p = this.allocPosition(b.vertices,align);
		if(p < 0) {
			return false;
		}
		b.position = p;
		b.buffer = this;
		return true;
	}
	,freeBuffer: function(b) {
		var prev = null;
		var f = this.freeList;
		var nvert = b.vertices;
		var end = b.position + nvert;
		while(f != null) {
			if(f.pos == end) {
				f.pos -= nvert;
				f.count += nvert;
				if(prev != null && prev.pos + prev.count == f.pos) {
					prev.count += f.count;
					prev.next = f.next;
				}
				nvert = 0;
				break;
			}
			if(f.pos > end) {
				if(prev != null && prev.pos + prev.count == b.position) {
					prev.count += nvert;
				} else {
					var n = new h3d_impl__$ManagedBuffer_FreeCell(b.position,nvert,f);
					if(prev == null) {
						this.freeList = n;
					} else {
						prev.next = n;
					}
				}
				nvert = 0;
				break;
			}
			prev = f;
			f = f.next;
		}
		if(nvert != 0) {
			throw haxe_Exception.thrown("assert");
		}
		if(this.freeList.count == this.size && (this.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			this.dispose();
		}
	}
	,dispose: function() {
		this.mem.freeManaged(this);
	}
	,__class__: h3d_impl_ManagedBuffer
};
var h3d_impl_MemoryManager = function(driver) {
	this.bufferCount = 0;
	this.texMemory = 0;
	this.usedMemory = 0;
	this.driver = driver;
};
$hxClasses["h3d.impl.MemoryManager"] = h3d_impl_MemoryManager;
h3d_impl_MemoryManager.__name__ = "h3d.impl.MemoryManager";
h3d_impl_MemoryManager.prototype = {
	init: function() {
		this.indexes = [];
		this.textures = [];
		this.buffers = [];
		this.depths = [];
		this.initIndexes();
	}
	,initIndexes: function() {
		var this1 = new Array(0);
		var indices = this1;
		var _g = 0;
		while(_g < 65533) {
			var i = _g++;
			indices.push(i);
		}
		this.triIndexes = h3d_Indexes.alloc(indices);
		var this1 = new Array(0);
		var indices = this1;
		var p = 0;
		var _g = 0;
		var _g1 = 16383;
		while(_g < _g1) {
			var i = _g++;
			var k = i << 2;
			indices.push(k);
			indices.push(k + 1);
			indices.push(k + 2);
			indices.push(k + 2);
			indices.push(k + 1);
			indices.push(k + 3);
		}
		indices.push(65533);
		this.quadIndexes = h3d_Indexes.alloc(indices);
	}
	,garbage: function() {
	}
	,cleanManagedBuffers: function() {
		var _g = 1;
		var _g1 = this.buffers.length;
		while(_g < _g1) {
			var i = _g++;
			var b = this.buffers[i];
			var prev = null;
			while(b != null) {
				if(b.freeList.count == b.size) {
					b.dispose();
					if(prev == null) {
						this.buffers[i] = b.next;
					} else {
						prev.next = b.next;
					}
				} else {
					prev = b;
				}
				b = b.next;
			}
		}
	}
	,allocManaged: function(m) {
		if(m.vbuf != null) {
			return;
		}
		var mem = m.size * m.stride * 4;
		if(mem == 0) {
			return;
		}
		while(this.usedMemory + mem > 4294967296. || this.bufferCount >= 65536 || (m.vbuf = this.driver.allocVertexes(m)) == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			var size = this.usedMemory - this.freeMemorySize();
			this.garbage();
			this.cleanManagedBuffers();
			if(this.usedMemory - this.freeMemorySize() == size) {
				if(this.bufferCount >= 65536) {
					throw haxe_Exception.thrown("Too many buffers");
				}
				throw haxe_Exception.thrown("Memory full (" + Math.ceil(size / 1024) + " KB," + this.bufferCount + " buffers)");
			}
		}
		this.usedMemory += mem;
		this.bufferCount++;
	}
	,freeManaged: function(m) {
		if(m.vbuf == null) {
			return;
		}
		this.driver.disposeVertexes(m.vbuf);
		m.vbuf = null;
		this.usedMemory -= m.size * m.stride * 4;
		this.bufferCount--;
		if((m.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var c = this.buffers[0];
			var prev = null;
			while(c != null) {
				if(c == m) {
					if(prev == null) {
						this.buffers[0] = m.next;
					} else {
						prev.next = m.next;
					}
					break;
				}
				prev = c;
				c = c.next;
			}
		}
	}
	,allocBuffer: function(b,stride) {
		var max = (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 65532 : (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 65533 : 65534;
		if(b.vertices > max && (b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) == 0 && (b.flags & 1 << h3d_BufferFlag.LargeBuffer._hx_index) == 0) {
			if(max == 65534) {
				throw haxe_Exception.thrown("Cannot split buffer with " + b.vertices + " vertices if it's not Quads/Triangles");
			}
			var rem = b.vertices - max;
			b.vertices = max;
			this.allocBuffer(b,stride);
			var n = b;
			while(n.next != null) n = n.next;
			var flags = [];
			var _g = 0;
			var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
			while(_g < _g1.length) {
				var f = _g1[_g];
				++_g;
				if((b.flags & 1 << f._hx_index) != 0) {
					flags.push(f);
				}
			}
			n.next = new h3d_Buffer(rem,stride,flags);
			return;
		}
		if((b.flags & 1 << h3d_BufferFlag.Managed._hx_index) == 0) {
			var flags = null;
			if((b.flags & 1 << h3d_BufferFlag.Dynamic._hx_index) != 0) {
				if(flags == null) {
					flags = [];
				}
				flags.push(h3d_BufferFlag.Dynamic);
			}
			if((b.flags & 1 << h3d_BufferFlag.UniformBuffer._hx_index) != 0) {
				if(flags == null) {
					flags = [];
				}
				flags.push(h3d_BufferFlag.UniformBuffer);
			}
			var m = new h3d_impl_ManagedBuffer(stride,b.vertices,flags);
			m.next = this.buffers[0];
			this.buffers[0] = m;
			if(!m.allocBuffer(b)) {
				throw haxe_Exception.thrown("assert");
			}
			return;
		}
		var m = this.buffers[stride];
		var prev = null;
		while(m != null) {
			if(m.allocBuffer(b)) {
				return;
			}
			prev = m;
			m = m.next;
		}
		var align = (b.flags & 1 << h3d_BufferFlag.Triangles._hx_index) != 0 ? 3 : (b.flags & 1 << h3d_BufferFlag.Quads._hx_index) != 0 ? 4 : 0;
		if(m == null && align > 0) {
			var total = b.vertices;
			var size = total;
			while(size > 2048) {
				m = this.buffers[stride];
				size >>= 1;
				size -= size % align;
				b.vertices = size;
				while(m != null) {
					if(m.allocBuffer(b)) {
						var flags = [];
						var _g = 0;
						var _g1 = h3d_impl_MemoryManager.ALL_FLAGS;
						while(_g < _g1.length) {
							var f = _g1[_g];
							++_g;
							if((b.flags & 1 << f._hx_index) != 0) {
								flags.push(f);
							}
						}
						b.next = new h3d_Buffer(total - size,stride,flags);
						return;
					}
					m = m.next;
				}
			}
			b.vertices = total;
		}
		m = new h3d_impl_ManagedBuffer(stride,65533,[h3d_BufferFlag.Managed]);
		if(prev == null) {
			this.buffers[stride] = m;
		} else {
			prev.next = m;
		}
		if(!m.allocBuffer(b)) {
			throw haxe_Exception.thrown("assert");
		}
	}
	,deleteIndexes: function(i) {
		HxOverrides.remove(this.indexes,i);
		this.driver.disposeIndexes(i.ibuf);
		i.ibuf = null;
		this.usedMemory -= i.count * (i.is32 ? 4 : 2);
	}
	,allocIndexes: function(i) {
		i.ibuf = this.driver.allocIndexes(i.count,i.is32);
		this.indexes.push(i);
		this.usedMemory += i.count * (i.is32 ? 4 : 2);
	}
	,bpp: function(t) {
		return 4;
	}
	,cleanTextures: function(force) {
		if(force == null) {
			force = true;
		}
		this.textures.sort($bind(this,this.sortByLRU));
		var _g = 0;
		var _g1 = this.textures;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			if(t.realloc == null || t.t == null && t.realloc == null) {
				continue;
			}
			if(force || t.get_lastFrame() < hxd_Timer.frameCount - 3600) {
				t.dispose();
				return true;
			}
		}
		return false;
	}
	,sortByLRU: function(t1,t2) {
		return t1.get_lastFrame() - t2.get_lastFrame();
	}
	,deleteTexture: function(t) {
		if(!HxOverrides.remove(this.textures,t)) {
			return;
		}
		this.driver.disposeTexture(t);
		this.texMemory -= t.width * t.height * this.bpp(t);
	}
	,allocTexture: function(t) {
		var free = this.cleanTextures(false);
		t.t = this.driver.allocTexture(t);
		if(t.t == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
			this.allocTexture(t);
			return;
		}
		this.textures.push(t);
		this.texMemory += t.width * t.height * this.bpp(t);
	}
	,allocDepth: function(b) {
		var free = this.cleanTextures(false);
		b.b = this.driver.allocDepthBuffer(b);
		if(b.b == null) {
			if(this.driver.isDisposed()) {
				return;
			}
			if(!this.cleanTextures(true)) {
				throw haxe_Exception.thrown("Maximum texture memory reached");
			}
			this.allocDepth(b);
			return;
		}
		this.depths.push(b);
		this.texMemory += b.width * b.height * 4;
	}
	,deleteDepth: function(b) {
		if(!HxOverrides.remove(this.depths,b)) {
			return;
		}
		this.driver.disposeDepthBuffer(b);
		this.texMemory -= b.width * b.height * 4;
	}
	,onContextLost: function() {
		this.dispose();
		this.initIndexes();
	}
	,dispose: function() {
		if(this.triIndexes != null) {
			this.triIndexes.dispose();
		}
		if(this.quadIndexes != null) {
			this.quadIndexes.dispose();
		}
		this.triIndexes = null;
		this.quadIndexes = null;
		var _g = 0;
		var _g1 = this.textures.slice();
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		var _g = 0;
		var _g1 = this.depths.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			b.dispose();
		}
		var _g = 0;
		var _g1 = this.buffers.slice();
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				b1.dispose();
				b1 = b1.next;
			}
		}
		var _g = 0;
		var _g1 = this.indexes.slice();
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			i.dispose();
		}
		this.buffers = [];
		this.indexes = [];
		this.textures = [];
		this.bufferCount = 0;
		this.usedMemory = 0;
		this.texMemory = 0;
	}
	,freeMemorySize: function() {
		var size = 0;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			var b1 = b;
			while(b1 != null) {
				var free = b1.freeList;
				while(free != null) {
					size += free.count * b1.stride * 4;
					free = free.next;
				}
				b1 = b1.next;
			}
		}
		return size;
	}
	,__class__: h3d_impl_MemoryManager
};
var h3d_impl_TextureCache = function(ctx) {
	this.position = 0;
	this.ctx = ctx;
	this.cache = [];
	var engine = h3d_Engine.CURRENT;
	this.defaultFormat = h3d_mat_Texture.nativeFormat;
	this.defaultDepthBuffer = h3d_mat_DepthBuffer.getDefault();
};
$hxClasses["h3d.impl.TextureCache"] = h3d_impl_TextureCache;
h3d_impl_TextureCache.__name__ = "h3d.impl.TextureCache";
h3d_impl_TextureCache.prototype = {
	begin: function() {
		while(this.cache.length > this.position) {
			var t = this.cache.pop();
			if(t != null) {
				t.dispose();
			}
		}
		this.position = 0;
	}
	,lookupTarget: function(name,width,height,format,isCube) {
		var t = this.cache[this.position];
		var _g = this.position + 1;
		var _g1 = this.cache.length;
		while(_g < _g1) {
			var i = _g++;
			var t2 = this.cache[i];
			if(t2 != null && !(t2.t == null && t2.realloc == null) && t2.width == width && t2.height == height && t2.format == format && isCube == ((t2.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
				this.cache[this.position] = t2;
				this.cache[i] = t;
				return t2;
			}
		}
		if(t != null && t.name == name) {
			t.dispose();
			t = null;
		}
		var flags = [h3d_mat_TextureFlags.Target];
		if(isCube) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		var newt = new h3d_mat_Texture(width,height,flags,format);
		if(t != null) {
			this.cache.splice(this.position,0,newt);
		} else {
			this.cache[this.position] = newt;
		}
		return newt;
	}
	,allocTarget: function(name,width,height,defaultDepth,format,isCube) {
		if(isCube == null) {
			isCube = false;
		}
		if(defaultDepth == null) {
			defaultDepth = true;
		}
		var t = this.cache[this.position];
		if(format == null) {
			format = this.defaultFormat;
		}
		if(t == null || t.t == null && t.realloc == null || t.width != width || t.height != height || t.format != format || isCube != ((t.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0)) {
			t = this.lookupTarget(name,width,height,format,isCube);
		}
		t.depthBuffer = defaultDepth ? this.defaultDepthBuffer : null;
		t.setName(name);
		this.position++;
		return t;
	}
	,allocTileTarget: function(name,tile,defaultDepth,format) {
		if(defaultDepth == null) {
			defaultDepth = false;
		}
		return this.allocTarget(name,Math.ceil(tile.width + tile.x) - Math.floor(tile.x),Math.ceil(tile.height + tile.y) - Math.floor(tile.y),defaultDepth,format);
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.cache;
		while(_g < _g1.length) {
			var t = _g1[_g];
			++_g;
			t.dispose();
		}
		this.cache = [];
	}
	,__class__: h3d_impl_TextureCache
};
var hxd_impl_AnyProps = function() { };
$hxClasses["hxd.impl.AnyProps"] = hxd_impl_AnyProps;
hxd_impl_AnyProps.__name__ = "hxd.impl.AnyProps";
hxd_impl_AnyProps.prototype = {
	set_props: function(p) {
		this.props = p;
		this.refreshProps();
		return p;
	}
	,getDefaultProps: function(kind) {
		return { };
	}
	,refreshProps: function() {
	}
	,__class__: hxd_impl_AnyProps
};
var h3d_mat_BaseMaterial = function(shader) {
	if(shader != null) {
		this.addPass(new h3d_mat_Pass("default",null)).addShader(shader);
	}
};
$hxClasses["h3d.mat.BaseMaterial"] = h3d_mat_BaseMaterial;
h3d_mat_BaseMaterial.__name__ = "h3d.mat.BaseMaterial";
h3d_mat_BaseMaterial.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_BaseMaterial.__super__ = hxd_impl_AnyProps;
h3d_mat_BaseMaterial.prototype = $extend(hxd_impl_AnyProps.prototype,{
	addPass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			prev = cur;
			cur = cur.nextPass;
		}
		if(prev == null) {
			this.passes = p;
		} else {
			prev.nextPass = p;
		}
		p.nextPass = null;
		return p;
	}
	,removePass: function(p) {
		var prev = null;
		var cur = this.passes;
		while(cur != null) {
			if(cur == p) {
				if(prev == null) {
					this.passes = p.nextPass;
				} else {
					prev.nextPass = p.nextPass;
				}
				p.nextPass = null;
				return true;
			}
			prev = cur;
			cur = cur.nextPass;
		}
		return false;
	}
	,getPass: function(name) {
		var p = this.passes;
		while(p != null) {
			if(p.name == name) {
				return p;
			}
			p = p.nextPass;
		}
		return null;
	}
	,__class__: h3d_mat_BaseMaterial
});
var h3d_mat_Face = $hxEnums["h3d.mat.Face"] = { __ename__ : true, __constructs__ : ["None","Back","Front","Both"]
	,None: {_hx_index:0,__enum__:"h3d.mat.Face",toString:$estr}
	,Back: {_hx_index:1,__enum__:"h3d.mat.Face",toString:$estr}
	,Front: {_hx_index:2,__enum__:"h3d.mat.Face",toString:$estr}
	,Both: {_hx_index:3,__enum__:"h3d.mat.Face",toString:$estr}
};
h3d_mat_Face.__empty_constructs__ = [h3d_mat_Face.None,h3d_mat_Face.Back,h3d_mat_Face.Front,h3d_mat_Face.Both];
var h3d_mat_Blend = $hxEnums["h3d.mat.Blend"] = { __ename__ : true, __constructs__ : ["One","Zero","SrcAlpha","SrcColor","DstAlpha","DstColor","OneMinusSrcAlpha","OneMinusSrcColor","OneMinusDstAlpha","OneMinusDstColor","ConstantColor","ConstantAlpha","OneMinusConstantColor","OneMinusConstantAlpha","SrcAlphaSaturate"]
	,One: {_hx_index:0,__enum__:"h3d.mat.Blend",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlpha: {_hx_index:2,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcColor: {_hx_index:3,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstAlpha: {_hx_index:4,__enum__:"h3d.mat.Blend",toString:$estr}
	,DstColor: {_hx_index:5,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcAlpha: {_hx_index:6,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusSrcColor: {_hx_index:7,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstAlpha: {_hx_index:8,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusDstColor: {_hx_index:9,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantColor: {_hx_index:10,__enum__:"h3d.mat.Blend",toString:$estr}
	,ConstantAlpha: {_hx_index:11,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantColor: {_hx_index:12,__enum__:"h3d.mat.Blend",toString:$estr}
	,OneMinusConstantAlpha: {_hx_index:13,__enum__:"h3d.mat.Blend",toString:$estr}
	,SrcAlphaSaturate: {_hx_index:14,__enum__:"h3d.mat.Blend",toString:$estr}
};
h3d_mat_Blend.__empty_constructs__ = [h3d_mat_Blend.One,h3d_mat_Blend.Zero,h3d_mat_Blend.SrcAlpha,h3d_mat_Blend.SrcColor,h3d_mat_Blend.DstAlpha,h3d_mat_Blend.DstColor,h3d_mat_Blend.OneMinusSrcAlpha,h3d_mat_Blend.OneMinusSrcColor,h3d_mat_Blend.OneMinusDstAlpha,h3d_mat_Blend.OneMinusDstColor,h3d_mat_Blend.ConstantColor,h3d_mat_Blend.ConstantAlpha,h3d_mat_Blend.OneMinusConstantColor,h3d_mat_Blend.OneMinusConstantAlpha,h3d_mat_Blend.SrcAlphaSaturate];
var h3d_mat_Compare = $hxEnums["h3d.mat.Compare"] = { __ename__ : true, __constructs__ : ["Always","Never","Equal","NotEqual","Greater","GreaterEqual","Less","LessEqual"]
	,Always: {_hx_index:0,__enum__:"h3d.mat.Compare",toString:$estr}
	,Never: {_hx_index:1,__enum__:"h3d.mat.Compare",toString:$estr}
	,Equal: {_hx_index:2,__enum__:"h3d.mat.Compare",toString:$estr}
	,NotEqual: {_hx_index:3,__enum__:"h3d.mat.Compare",toString:$estr}
	,Greater: {_hx_index:4,__enum__:"h3d.mat.Compare",toString:$estr}
	,GreaterEqual: {_hx_index:5,__enum__:"h3d.mat.Compare",toString:$estr}
	,Less: {_hx_index:6,__enum__:"h3d.mat.Compare",toString:$estr}
	,LessEqual: {_hx_index:7,__enum__:"h3d.mat.Compare",toString:$estr}
};
h3d_mat_Compare.__empty_constructs__ = [h3d_mat_Compare.Always,h3d_mat_Compare.Never,h3d_mat_Compare.Equal,h3d_mat_Compare.NotEqual,h3d_mat_Compare.Greater,h3d_mat_Compare.GreaterEqual,h3d_mat_Compare.Less,h3d_mat_Compare.LessEqual];
var h3d_mat_StencilOp = $hxEnums["h3d.mat.StencilOp"] = { __ename__ : true, __constructs__ : ["Keep","Zero","Replace","Increment","IncrementWrap","Decrement","DecrementWrap","Invert"]
	,Keep: {_hx_index:0,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Zero: {_hx_index:1,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Replace: {_hx_index:2,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Increment: {_hx_index:3,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,IncrementWrap: {_hx_index:4,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Decrement: {_hx_index:5,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,DecrementWrap: {_hx_index:6,__enum__:"h3d.mat.StencilOp",toString:$estr}
	,Invert: {_hx_index:7,__enum__:"h3d.mat.StencilOp",toString:$estr}
};
h3d_mat_StencilOp.__empty_constructs__ = [h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Zero,h3d_mat_StencilOp.Replace,h3d_mat_StencilOp.Increment,h3d_mat_StencilOp.IncrementWrap,h3d_mat_StencilOp.Decrement,h3d_mat_StencilOp.DecrementWrap,h3d_mat_StencilOp.Invert];
var h3d_mat_MipMap = $hxEnums["h3d.mat.MipMap"] = { __ename__ : true, __constructs__ : ["None","Nearest","Linear"]
	,None: {_hx_index:0,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Nearest: {_hx_index:1,__enum__:"h3d.mat.MipMap",toString:$estr}
	,Linear: {_hx_index:2,__enum__:"h3d.mat.MipMap",toString:$estr}
};
h3d_mat_MipMap.__empty_constructs__ = [h3d_mat_MipMap.None,h3d_mat_MipMap.Nearest,h3d_mat_MipMap.Linear];
var h3d_mat_Filter = $hxEnums["h3d.mat.Filter"] = { __ename__ : true, __constructs__ : ["Nearest","Linear"]
	,Nearest: {_hx_index:0,__enum__:"h3d.mat.Filter",toString:$estr}
	,Linear: {_hx_index:1,__enum__:"h3d.mat.Filter",toString:$estr}
};
h3d_mat_Filter.__empty_constructs__ = [h3d_mat_Filter.Nearest,h3d_mat_Filter.Linear];
var h3d_mat_Wrap = $hxEnums["h3d.mat.Wrap"] = { __ename__ : true, __constructs__ : ["Clamp","Repeat"]
	,Clamp: {_hx_index:0,__enum__:"h3d.mat.Wrap",toString:$estr}
	,Repeat: {_hx_index:1,__enum__:"h3d.mat.Wrap",toString:$estr}
};
h3d_mat_Wrap.__empty_constructs__ = [h3d_mat_Wrap.Clamp,h3d_mat_Wrap.Repeat];
var h3d_mat_Operation = $hxEnums["h3d.mat.Operation"] = { __ename__ : true, __constructs__ : ["Add","Sub","ReverseSub","Min","Max"]
	,Add: {_hx_index:0,__enum__:"h3d.mat.Operation",toString:$estr}
	,Sub: {_hx_index:1,__enum__:"h3d.mat.Operation",toString:$estr}
	,ReverseSub: {_hx_index:2,__enum__:"h3d.mat.Operation",toString:$estr}
	,Min: {_hx_index:3,__enum__:"h3d.mat.Operation",toString:$estr}
	,Max: {_hx_index:4,__enum__:"h3d.mat.Operation",toString:$estr}
};
h3d_mat_Operation.__empty_constructs__ = [h3d_mat_Operation.Add,h3d_mat_Operation.Sub,h3d_mat_Operation.ReverseSub,h3d_mat_Operation.Min,h3d_mat_Operation.Max];
var h3d_mat_TextureFlags = $hxEnums["h3d.mat.TextureFlags"] = { __ename__ : true, __constructs__ : ["Target","Cube","MipMapped","ManualMipMapGen","IsNPOT","NoAlloc","Dynamic","AlphaPremultiplied","WasCleared","Loading","Serialize","IsArray"]
	,Target: {_hx_index:0,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Cube: {_hx_index:1,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,MipMapped: {_hx_index:2,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,ManualMipMapGen: {_hx_index:3,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsNPOT: {_hx_index:4,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,NoAlloc: {_hx_index:5,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Dynamic: {_hx_index:6,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:7,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,WasCleared: {_hx_index:8,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Loading: {_hx_index:9,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,Serialize: {_hx_index:10,__enum__:"h3d.mat.TextureFlags",toString:$estr}
	,IsArray: {_hx_index:11,__enum__:"h3d.mat.TextureFlags",toString:$estr}
};
h3d_mat_TextureFlags.__empty_constructs__ = [h3d_mat_TextureFlags.Target,h3d_mat_TextureFlags.Cube,h3d_mat_TextureFlags.MipMapped,h3d_mat_TextureFlags.ManualMipMapGen,h3d_mat_TextureFlags.IsNPOT,h3d_mat_TextureFlags.NoAlloc,h3d_mat_TextureFlags.Dynamic,h3d_mat_TextureFlags.AlphaPremultiplied,h3d_mat_TextureFlags.WasCleared,h3d_mat_TextureFlags.Loading,h3d_mat_TextureFlags.Serialize,h3d_mat_TextureFlags.IsArray];
var h3d_mat_Defaults = function() { };
$hxClasses["h3d.mat.Defaults"] = h3d_mat_Defaults;
h3d_mat_Defaults.__name__ = "h3d.mat.Defaults";
h3d_mat_Defaults.get_shadowShader = function() {
	var s = h3d_mat_Defaults.shadowShader;
	if(s == null) {
		s = new h3d_shader_Shadow();
		h3d_mat_Defaults.set_shadowShader(s);
		h3d_mat_Defaults.shadowShader.setPriority(-1);
	}
	return s;
};
h3d_mat_Defaults.set_shadowShader = function(s) {
	return h3d_mat_Defaults.shadowShader = s;
};
var h3d_mat_DepthFormat = $hxEnums["h3d.mat.DepthFormat"] = { __ename__ : true, __constructs__ : ["Depth16","Depth24","Depth24Stencil8"]
	,Depth16: {_hx_index:0,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24: {_hx_index:1,__enum__:"h3d.mat.DepthFormat",toString:$estr}
	,Depth24Stencil8: {_hx_index:2,__enum__:"h3d.mat.DepthFormat",toString:$estr}
};
h3d_mat_DepthFormat.__empty_constructs__ = [h3d_mat_DepthFormat.Depth16,h3d_mat_DepthFormat.Depth24,h3d_mat_DepthFormat.Depth24Stencil8];
var h3d_mat_DepthBuffer = function(width,height,format) {
	this.width = width;
	this.height = height;
	this.format = format;
	if(width > 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.DepthBuffer"] = h3d_mat_DepthBuffer;
h3d_mat_DepthBuffer.__name__ = "h3d.mat.DepthBuffer";
h3d_mat_DepthBuffer.getDefault = function() {
	return h3d_Engine.CURRENT.driver.getDefaultDepthBuffer();
};
h3d_mat_DepthBuffer.prototype = {
	hasStencil: function() {
		switch(this.format._hx_index) {
		case 0:case 1:
			return false;
		case 2:
			return true;
		}
	}
	,alloc: function() {
		h3d_Engine.CURRENT.mem.allocDepth(this);
	}
	,dispose: function() {
		if(this.b != null) {
			h3d_Engine.CURRENT.mem.deleteDepth(this);
			this.b = null;
		}
	}
	,isDisposed: function() {
		return this.b == null;
	}
	,__class__: h3d_mat_DepthBuffer
};
var h3d_mat_Material = function(texture) {
	this.mshader = new h3d_shader_BaseMesh();
	this.set_blendMode(h2d_BlendMode.None);
	h3d_mat_BaseMaterial.call(this,this.mshader);
	this.set_texture(texture);
};
$hxClasses["h3d.mat.Material"] = h3d_mat_Material;
h3d_mat_Material.__name__ = "h3d.mat.Material";
h3d_mat_Material.__super__ = h3d_mat_BaseMaterial;
h3d_mat_Material.prototype = $extend(h3d_mat_BaseMaterial.prototype,{
	set_castShadows: function(v) {
		if(this.castShadows == v) {
			return v;
		}
		if(this.passes != null) {
			if(v) {
				this.addPass(new h3d_mat_Pass("shadow",null,this.passes)).set_isStatic(this.staticShadows);
			} else {
				this.removePass(this.getPass("shadow"));
			}
		}
		return this.castShadows = v;
	}
	,set_receiveShadows: function(v) {
		if(v == this.receiveShadows) {
			return v;
		}
		if(this.passes != null) {
			var shadows = h3d_mat_Defaults.get_shadowShader();
			if(v) {
				this.passes.addShader(shadows);
			} else {
				this.passes.removeShader(shadows);
			}
		}
		return this.receiveShadows = v;
	}
	,set_blendMode: function(v) {
		if(this.passes != null) {
			this.passes.setBlendMode(v);
			switch(v._hx_index) {
			case 0:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("default");
				break;
			case 1:
				this.passes.set_depthWrite(true);
				this.passes.setPassName("alpha");
				break;
			case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:
				this.passes.set_depthWrite(false);
				this.passes.setPassName("additive");
				break;
			}
		}
		return this.blendMode = v;
	}
	,set_texture: function(t) {
		if(t == null) {
			if(this.textureShader != null) {
				this.passes.removeShader(this.textureShader);
				this.textureShader = null;
			}
		} else {
			if(this.textureShader == null) {
				this.textureShader = new h3d_shader_Texture();
				this.passes.addShader(this.textureShader);
			}
			this.textureShader.texture__ = t;
		}
		return t;
	}
	,getDefaultProps: function(type) {
		var props;
		if(type == null) {
			props = { kind : "Opaque", shadows : true, culling : true, light : true};
		} else {
			switch(type) {
			case "particles3D":case "trail3D":
				props = { kind : "Alpha", shadows : false, culling : false, light : true};
				break;
			case "ui":
				props = { kind : "Alpha", shadows : false, culling : false, light : false};
				break;
			default:
				props = { kind : "Opaque", shadows : true, culling : true, light : true};
			}
		}
		return props;
	}
	,refreshProps: function() {
		if(this.props == null || this.passes == null) {
			return;
		}
		var props = this.props;
		switch(props.kind) {
		case "Add":
			this.set_blendMode(h2d_BlendMode.Add);
			break;
		case "Alpha":
			this.set_blendMode(h2d_BlendMode.Alpha);
			break;
		case "AlphaKill":case "Hidden":case "Opaque":
			this.set_blendMode(h2d_BlendMode.None);
			break;
		case "SoftAdd":
			this.set_blendMode(h2d_BlendMode.SoftAdd);
			break;
		}
		var tshader = this.textureShader;
		if(tshader != null) {
			tshader.constModified = true;
			tshader.killAlpha__ = props.kind == "AlphaKill";
			tshader.killAlphaThreshold__ = 0.5;
		}
		this.passes.set_culling(props.kind == "Hidden" ? h3d_mat_Face.Both : props.culling ? h3d_mat_Face.Back : h3d_mat_Face.None);
		this.passes.set_enableLights(props.light);
		var v = props.shadows;
		this.set_castShadows(v);
		this.set_receiveShadows(v);
		if(this.castShadows && this.receiveShadows) {
			this.getPass("shadow").set_culling(this.passes.culling);
		}
	}
	,__class__: h3d_mat_Material
});
var h3d_mat_MaterialDatabase = function() {
};
$hxClasses["h3d.mat.MaterialDatabase"] = h3d_mat_MaterialDatabase;
h3d_mat_MaterialDatabase.__name__ = "h3d.mat.MaterialDatabase";
h3d_mat_MaterialDatabase.prototype = {
	__class__: h3d_mat_MaterialDatabase
};
var h3d_mat_MaterialSetup = function(name) {
	if(this.database == null) {
		this.database = new h3d_mat_MaterialDatabase();
	}
	this.name = name;
};
$hxClasses["h3d.mat.MaterialSetup"] = h3d_mat_MaterialSetup;
h3d_mat_MaterialSetup.__name__ = "h3d.mat.MaterialSetup";
h3d_mat_MaterialSetup.prototype = {
	createRenderer: function() {
		return new h3d_scene_fwd_Renderer();
	}
	,createLightSystem: function() {
		return new h3d_scene_fwd_LightSystem();
	}
	,createMaterial: function() {
		return new h3d_mat_Material();
	}
	,__class__: h3d_mat_MaterialSetup
};
var h3d_mat_Pass = function(name,shaders,parent) {
	this.layer = 0;
	this.bits = 0;
	this.parentPass = parent;
	this.shaders = shaders;
	this.setPassName(name);
	this.set_culling(h3d_mat_Face.Back);
	var src = h3d_mat_Blend.One;
	var dst = h3d_mat_Blend.Zero;
	this.set_blendSrc(src);
	this.set_blendAlphaSrc(src);
	this.set_blendDst(dst);
	this.set_blendAlphaDst(dst);
	this.depth(true,h3d_mat_Compare.Less);
	this.set_blendOp(this.set_blendAlphaOp(h3d_mat_Operation.Add));
	this.colorMask = 15;
};
$hxClasses["h3d.mat.Pass"] = h3d_mat_Pass;
h3d_mat_Pass.__name__ = "h3d.mat.Pass";
h3d_mat_Pass.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Pass.prototype = {
	setPassName: function(name) {
		this.name = name;
		this.passId = hxsl_Globals.allocID(name);
	}
	,setBlendMode: function(b) {
		switch(b._hx_index) {
		case 0:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 1:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 2:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 3:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 4:
			var src = h3d_mat_Blend.OneMinusDstColor;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 5:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.Zero;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 6:
			var src = h3d_mat_Blend.DstColor;
			var dst = h3d_mat_Blend.OneMinusSrcAlpha;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 7:
			var src = h3d_mat_Blend.Zero;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 8:
			var src = h3d_mat_Blend.One;
			var dst = h3d_mat_Blend.OneMinusSrcColor;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.Add);
			this.set_blendAlphaOp(h3d_mat_Operation.Add);
			break;
		case 9:
			var src = h3d_mat_Blend.SrcAlpha;
			var dst = h3d_mat_Blend.One;
			this.set_blendSrc(src);
			this.set_blendAlphaSrc(src);
			this.set_blendDst(dst);
			this.set_blendAlphaDst(dst);
			this.set_blendOp(h3d_mat_Operation.ReverseSub);
			this.set_blendAlphaOp(h3d_mat_Operation.ReverseSub);
			break;
		case 10:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Max);
			this.set_blendOp(h3d_mat_Operation.Max);
			break;
		case 11:
			this.set_blendSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaSrc(h3d_mat_Blend.Zero);
			this.set_blendAlphaDst(h3d_mat_Blend.Zero);
			this.set_blendAlphaOp(h3d_mat_Operation.Min);
			this.set_blendOp(h3d_mat_Operation.Min);
			break;
		}
	}
	,depth: function(write,test) {
		this.set_depthWrite(write);
		this.set_depthTest(test);
	}
	,addShader: function(s) {
		if(s == null) {
			return null;
		}
		this.shaders = hxsl_ShaderList.addSort(s,this.shaders);
		return s;
	}
	,removeShader: function(s) {
		var sl = this.shaders;
		var prev = null;
		while(sl != null) {
			if(sl.s == s) {
				if(prev == null) {
					this.shaders = sl.next;
				} else {
					prev.next = sl.next;
				}
				return true;
			}
			prev = sl;
			sl = sl.next;
		}
		return false;
	}
	,getShader: function(t) {
		var s = this.shaders;
		while(s != this.parentShaders) {
			var value = s.s;
			var sh = js_Boot.__downcastCheck(value,t) ? value : null;
			if(sh != null) {
				return sh;
			}
			s = s.next;
		}
		return null;
	}
	,getShadersRec: function() {
		if(this.parentPass == null || this.parentShaders == this.parentPass.shaders) {
			return this.shaders;
		}
		var s = this.shaders;
		var prev = null;
		while(s != null && s != this.parentShaders) {
			prev = s;
			s = s.next;
		}
		this.parentShaders = this.parentPass.shaders;
		if(prev == null) {
			this.shaders = this.parentShaders;
		} else {
			prev.next = this.parentShaders;
		}
		return this.shaders;
	}
	,set_enableLights: function(v) {
		this.flags = this.flags & -2 | (v ? 1 : 0);
		return this.enableLights = v;
	}
	,set_isStatic: function(v) {
		this.flags = this.flags & -5 | (v ? 1 : 0) << 2;
		return this.isStatic = v;
	}
	,set_culling: function(v) {
		this.bits = this.bits & -4 | v._hx_index;
		return this.culling = v;
	}
	,set_depthWrite: function(v) {
		this.bits = this.bits & -5 | (v ? 1 : 0) << 2;
		return this.depthWrite = v;
	}
	,set_depthTest: function(v) {
		this.bits = this.bits & -57 | v._hx_index << 3;
		return this.depthTest = v;
	}
	,set_blendSrc: function(v) {
		this.bits = this.bits & -961 | v._hx_index << 6;
		return this.blendSrc = v;
	}
	,set_blendDst: function(v) {
		this.bits = this.bits & -15361 | v._hx_index << 10;
		return this.blendDst = v;
	}
	,set_blendAlphaSrc: function(v) {
		this.bits = this.bits & -245761 | v._hx_index << 14;
		return this.blendAlphaSrc = v;
	}
	,set_blendAlphaDst: function(v) {
		this.bits = this.bits & -3932161 | v._hx_index << 18;
		return this.blendAlphaDst = v;
	}
	,set_blendOp: function(v) {
		this.bits = this.bits & -29360129 | v._hx_index << 22;
		return this.blendOp = v;
	}
	,set_blendAlphaOp: function(v) {
		this.bits = this.bits & -234881025 | v._hx_index << 25;
		return this.blendAlphaOp = v;
	}
	,__class__: h3d_mat_Pass
};
var h3d_mat_Stencil = function() {
	this.opBits = 0;
	this.maskBits = 0;
	this.setOp(h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep,h3d_mat_StencilOp.Keep);
	this.setFunc(h3d_mat_Compare.Always);
};
$hxClasses["h3d.mat.Stencil"] = h3d_mat_Stencil;
h3d_mat_Stencil.__name__ = "h3d.mat.Stencil";
h3d_mat_Stencil.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_mat_Stencil.prototype = {
	setFront: function(stfail,dpfail,pass) {
		this.set_frontSTfail(stfail);
		this.set_frontDPfail(dpfail);
		this.set_frontPass(pass);
	}
	,setBack: function(stfail,dpfail,pass) {
		this.set_backSTfail(stfail);
		this.set_backDPfail(dpfail);
		this.set_backPass(pass);
	}
	,setOp: function(stfail,dpfail,pass) {
		this.setFront(stfail,dpfail,pass);
		this.setBack(stfail,dpfail,pass);
	}
	,setFunc: function(f,reference,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		if(reference == null) {
			reference = 0;
		}
		this.set_frontTest(this.set_backTest(f));
		this.set_reference(reference);
		this.set_readMask(readMask);
		this.set_writeMask(writeMask);
	}
	,set_readMask: function(v) {
		this.maskBits = this.maskBits & -256 | v & 255;
		return this.readMask = v;
	}
	,set_writeMask: function(v) {
		this.maskBits = this.maskBits & -65281 | (v & 255) << 8;
		return this.writeMask = v;
	}
	,set_reference: function(v) {
		this.maskBits = this.maskBits & -16711681 | (v & 255) << 16;
		return this.reference = v;
	}
	,set_frontTest: function(v) {
		this.opBits = this.opBits & -8 | v._hx_index;
		return this.frontTest = v;
	}
	,set_frontPass: function(v) {
		this.opBits = this.opBits & -57 | v._hx_index << 3;
		return this.frontPass = v;
	}
	,set_frontSTfail: function(v) {
		this.opBits = this.opBits & -449 | v._hx_index << 6;
		return this.frontSTfail = v;
	}
	,set_frontDPfail: function(v) {
		this.opBits = this.opBits & -3585 | v._hx_index << 9;
		return this.frontDPfail = v;
	}
	,set_backTest: function(v) {
		this.opBits = this.opBits & -28673 | v._hx_index << 12;
		return this.backTest = v;
	}
	,set_backPass: function(v) {
		this.opBits = this.opBits & -229377 | v._hx_index << 15;
		return this.backPass = v;
	}
	,set_backSTfail: function(v) {
		this.opBits = this.opBits & -1835009 | v._hx_index << 18;
		return this.backSTfail = v;
	}
	,set_backDPfail: function(v) {
		this.opBits = this.opBits & -14680065 | v._hx_index << 21;
		return this.backDPfail = v;
	}
	,__class__: h3d_mat_Stencil
};
var hxd_PixelFormat = $hxEnums["hxd.PixelFormat"] = { __ename__ : true, __constructs__ : ["ARGB","BGRA","RGBA","RGBA16F","RGBA32F","R8","R16F","R32F","RG8","RG16F","RG32F","RGB8","RGB16F","RGB32F","SRGB","SRGB_ALPHA","RGB10A2","RG11B10UF","R16U","RGB16U","RGBA16U","S3TC"]
	,ARGB: {_hx_index:0,__enum__:"hxd.PixelFormat",toString:$estr}
	,BGRA: {_hx_index:1,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA: {_hx_index:2,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16F: {_hx_index:3,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA32F: {_hx_index:4,__enum__:"hxd.PixelFormat",toString:$estr}
	,R8: {_hx_index:5,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16F: {_hx_index:6,__enum__:"hxd.PixelFormat",toString:$estr}
	,R32F: {_hx_index:7,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG8: {_hx_index:8,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG16F: {_hx_index:9,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG32F: {_hx_index:10,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB8: {_hx_index:11,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16F: {_hx_index:12,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB32F: {_hx_index:13,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB: {_hx_index:14,__enum__:"hxd.PixelFormat",toString:$estr}
	,SRGB_ALPHA: {_hx_index:15,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB10A2: {_hx_index:16,__enum__:"hxd.PixelFormat",toString:$estr}
	,RG11B10UF: {_hx_index:17,__enum__:"hxd.PixelFormat",toString:$estr}
	,R16U: {_hx_index:18,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGB16U: {_hx_index:19,__enum__:"hxd.PixelFormat",toString:$estr}
	,RGBA16U: {_hx_index:20,__enum__:"hxd.PixelFormat",toString:$estr}
	,S3TC: ($_=function(v) { return {_hx_index:21,v:v,__enum__:"hxd.PixelFormat",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxd_PixelFormat.__empty_constructs__ = [hxd_PixelFormat.ARGB,hxd_PixelFormat.BGRA,hxd_PixelFormat.RGBA,hxd_PixelFormat.RGBA16F,hxd_PixelFormat.RGBA32F,hxd_PixelFormat.R8,hxd_PixelFormat.R16F,hxd_PixelFormat.R32F,hxd_PixelFormat.RG8,hxd_PixelFormat.RG16F,hxd_PixelFormat.RG32F,hxd_PixelFormat.RGB8,hxd_PixelFormat.RGB16F,hxd_PixelFormat.RGB32F,hxd_PixelFormat.SRGB,hxd_PixelFormat.SRGB_ALPHA,hxd_PixelFormat.RGB10A2,hxd_PixelFormat.RG11B10UF,hxd_PixelFormat.R16U,hxd_PixelFormat.RGB16U,hxd_PixelFormat.RGBA16U];
var h3d_mat_Texture = function(w,h,flags,format) {
	this.lodBias = 0.;
	var engine = h3d_Engine.CURRENT;
	this.mem = engine.mem;
	if(format == null) {
		format = h3d_mat_Texture.nativeFormat;
	}
	this.id = ++h3d_mat_Texture.UID;
	this.format = format;
	var this1 = 0;
	this.flags = this1;
	if(flags != null) {
		var _g = 0;
		while(_g < flags.length) {
			var f = flags[_g];
			++_g;
			this.flags |= 1 << f._hx_index;
		}
	}
	var tw = 1;
	var th = 1;
	while(tw < w) tw <<= 1;
	while(th < h) th <<= 1;
	if(tw != w || th != h) {
		this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
	}
	if((this.flags & 1 << h3d_mat_TextureFlags.Target._hx_index) != 0) {
		this.realloc = function() {
		};
	}
	this.width = w;
	this.height = h;
	this.set_mipMap((this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 ? h3d_mat_MipMap.Nearest : h3d_mat_MipMap.None);
	this.set_filter(h3d_mat_Filter.Linear);
	this.set_wrap(h3d_mat_Wrap.Clamp);
	this.bits &= 32767;
	if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
		this.alloc();
	}
};
$hxClasses["h3d.mat.Texture"] = h3d_mat_Texture;
h3d_mat_Texture.__name__ = "h3d.mat.Texture";
h3d_mat_Texture.fromBitmap = function(bmp) {
	var t = new h3d_mat_Texture(bmp.ctx.canvas.width,bmp.ctx.canvas.height);
	t.uploadBitmap(bmp);
	return t;
};
h3d_mat_Texture.fromColor = function(color,alpha) {
	if(alpha == null) {
		alpha = 1.;
	}
	var engine = h3d_Engine.CURRENT;
	var aval = alpha * 255 | 0;
	if(aval < 0) {
		aval = 0;
	} else if(aval > 255) {
		aval = 255;
	}
	var key = color & 16777215 | aval << 24;
	var t = engine.textureColorCache.h[key];
	if(t != null) {
		return t;
	}
	var t = new h3d_mat_Texture(1,1,null);
	t.clear(color,alpha);
	t.realloc = function() {
		t.clear(color,alpha);
	};
	engine.textureColorCache.h[key] = t;
	return t;
};
h3d_mat_Texture.defaultCubeTexture = function() {
	var engine = h3d_Engine.CURRENT;
	var t = engine.resCache.h[h3d_mat_Texture.__id__];
	if(t != null) {
		return t;
	}
	t = new h3d_mat_Texture(1,1,[h3d_mat_TextureFlags.Cube]);
	t.clear(2105376);
	t.realloc = function() {
		t.clear(2105376);
	};
	engine.resCache.set(h3d_mat_Texture,t);
	return t;
};
h3d_mat_Texture.prototype = {
	set_lastFrame: function(lf) {
		if(this._lastFrame != h3d_mat_Texture.PREVENT_AUTO_DISPOSE) {
			this._lastFrame = lf;
		}
		return this._lastFrame;
	}
	,get_lastFrame: function() {
		return this._lastFrame;
	}
	,get_layerCount: function() {
		if((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0) {
			return 6;
		} else {
			return 1;
		}
	}
	,alloc: function() {
		if(this.t == null) {
			this.mem.allocTexture(this);
		}
	}
	,toString: function() {
		var str = this.name;
		if(this.name == null) {
			str = "Texture_" + this.id;
		}
		return str + "(" + this.width + "x" + this.height + ")";
	}
	,setName: function(n) {
		this.name = n;
	}
	,set_mipMap: function(m) {
		this.bits = this.bits & -4 | m._hx_index;
		return this.mipMap = m;
	}
	,set_filter: function(f) {
		this.bits = this.bits & -25 | f._hx_index << 3;
		return this.filter = f;
	}
	,set_wrap: function(w) {
		this.bits = this.bits & -193 | w._hx_index << 6;
		return this.wrap = w;
	}
	,resize: function(width,height) {
		this.dispose();
		var tw = 1;
		var th = 1;
		while(tw < width) tw <<= 1;
		while(th < height) th <<= 1;
		if(tw != width || th != height) {
			this.flags |= 1 << h3d_mat_TextureFlags.IsNPOT._hx_index;
		} else {
			this.flags &= -1 - (1 << h3d_mat_TextureFlags.IsNPOT._hx_index);
		}
		this.width = width;
		this.height = height;
		if((this.flags & 1 << h3d_mat_TextureFlags.NoAlloc._hx_index) == 0) {
			this.alloc();
		}
	}
	,clear: function(color,alpha,layer) {
		if(layer == null) {
			layer = -1;
		}
		if(alpha == null) {
			alpha = 1.;
		}
		this.alloc();
		if(this.width == 0 || this.height == 0) {
			return;
		}
		if(this.width != 1 || this.height != 1) {
			var engine = h3d_Engine.CURRENT;
			color |= ((alpha < 0. ? 0. : alpha > 1. ? 1. : alpha) * 255 | 0) << 24;
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					engine.pushTarget(this,i);
					engine.clear(color);
					engine.popTarget();
				}
			} else {
				engine.pushTarget(this,layer);
				engine.clear(color);
				engine.popTarget();
			}
		} else {
			var p = hxd_Pixels.alloc(this.width,this.height,h3d_mat_Texture.nativeFormat);
			var k = 0;
			var b = color & 255;
			var g = color >> 8 & 255;
			var r = color >> 16 & 255;
			var a = alpha * 255 | 0;
			if(a < 0) {
				a = 0;
			} else if(a > 255) {
				a = 255;
			}
			switch(h3d_mat_Texture.nativeFormat._hx_index) {
			case 1:
				var tmp = r;
				r = b;
				b = tmp;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("TODO");
			}
			var _g = 0;
			var _g1 = this.width * this.height;
			while(_g < _g1) {
				var i = _g++;
				p.bytes.b[k++] = r;
				p.bytes.b[k++] = g;
				p.bytes.b[k++] = b;
				p.bytes.b[k++] = a;
			}
			if(layer < 0) {
				var _g = 0;
				var _g1 = this.get_layerCount();
				while(_g < _g1) {
					var i = _g++;
					this.uploadPixels(p,0,i);
				}
			} else {
				this.uploadPixels(p,0,layer);
			}
			p.dispose();
		}
	}
	,checkSize: function(width,height,mip) {
		var mw = this.width >> mip;
		if(mw == 0) {
			mw = 1;
		}
		var mh = this.height >> mip;
		if(mh == 0) {
			mh = 1;
		}
		if(width != mw || height != mh) {
			throw haxe_Exception.thrown("Invalid upload size : " + width + "x" + height + " should be " + mw + "x" + mh);
		}
	}
	,checkMipMapGen: function(mipLevel,layer) {
		if(mipLevel == 0 && (this.flags & 1 << h3d_mat_TextureFlags.MipMapped._hx_index) != 0 && (this.flags & 1 << h3d_mat_TextureFlags.ManualMipMapGen._hx_index) == 0 && ((this.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) == 0 || layer == 5)) {
			this.mem.driver.generateMipMaps(this);
		}
	}
	,uploadBitmap: function(bmp,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(bmp.ctx.canvas.width,bmp.ctx.canvas.height,mipLevel);
		this.mem.driver.uploadTextureBitmap(this,bmp,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,uploadPixels: function(pixels,mipLevel,layer) {
		if(layer == null) {
			layer = 0;
		}
		if(mipLevel == null) {
			mipLevel = 0;
		}
		this.alloc();
		this.checkSize(pixels.width,pixels.height,mipLevel);
		this.mem.driver.uploadTexturePixels(this,pixels,mipLevel,layer);
		this.flags |= 1 << h3d_mat_TextureFlags.WasCleared._hx_index;
		this.checkMipMapGen(mipLevel,layer);
	}
	,dispose: function() {
		if(this.t != null) {
			this.mem.deleteTexture(this);
		}
	}
	,__class__: h3d_mat_Texture
};
var h3d_mat_TextureArray = function(w,h,layers,flags,format) {
	this.layers = layers;
	if(flags == null) {
		flags = [];
	}
	flags.push(h3d_mat_TextureFlags.IsArray);
	h3d_mat_Texture.call(this,w,h,flags,format);
};
$hxClasses["h3d.mat.TextureArray"] = h3d_mat_TextureArray;
h3d_mat_TextureArray.__name__ = "h3d.mat.TextureArray";
h3d_mat_TextureArray.__super__ = h3d_mat_Texture;
h3d_mat_TextureArray.prototype = $extend(h3d_mat_Texture.prototype,{
	get_layerCount: function() {
		return this.layers;
	}
	,toString: function() {
		return h3d_mat_Texture.prototype.toString.call(this) + "[" + this.layers + "]";
	}
	,__class__: h3d_mat_TextureArray
});
var h3d_pass_Base = function(name) {
	this.name = name;
};
$hxClasses["h3d.pass.Base"] = h3d_pass_Base;
h3d_pass_Base.__name__ = "h3d.pass.Base";
h3d_pass_Base.prototype = {
	setContext: function(ctx) {
		this.ctx = ctx;
	}
	,draw: function(passes,sort) {
	}
	,__class__: h3d_pass_Base
};
var h3d_pass_ScreenFx = function(shader,output) {
	this.shader = shader;
	this.shaders = new hxsl_ShaderList(shader);
	this.manager = new h3d_pass_ShaderManager(output);
	this.pass = new h3d_mat_Pass("screenfx",new hxsl_ShaderList(shader));
	this.pass.set_culling(h3d_mat_Face.None);
	this.pass.depth(false,h3d_mat_Compare.Always);
};
$hxClasses["h3d.pass.ScreenFx"] = h3d_pass_ScreenFx;
h3d_pass_ScreenFx.__name__ = "h3d.pass.ScreenFx";
h3d_pass_ScreenFx.prototype = {
	get_engine: function() {
		if(this._engine == null) {
			this._engine = h3d_Engine.CURRENT;
		}
		return this._engine;
	}
	,render: function() {
		if(this.primitive == null) {
			this.primitive = h3d_prim_Plane2D.get();
		}
		this.shader.flipY__ = this.get_engine().driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.get_engine().getCurrentTarget() != null ? -1 : 1;
		var rts = this.manager.compileShaders(this.shaders);
		this.get_engine().selectMaterial(this.pass);
		this.get_engine().selectShader(rts);
		if(this.buffers == null) {
			this.buffers = new h3d_shader_Buffers(rts);
		} else {
			var _this = this.buffers;
			_this.vertex.grow(rts.vertex);
			_this.fragment.grow(rts.fragment);
		}
		this.manager.fillGlobals(this.buffers,rts);
		this.manager.fillParams(this.buffers,rts,this.shaders);
		this.get_engine().uploadShaderBuffers(this.buffers,0);
		this.get_engine().uploadShaderBuffers(this.buffers,1);
		this.get_engine().uploadShaderBuffers(this.buffers,2);
		this.primitive.render(this.get_engine());
	}
	,dispose: function() {
	}
	,__class__: h3d_pass_ScreenFx
};
var h3d_pass_Blur = function(radius,gain,linear,quality) {
	if(quality == null) {
		quality = 1.;
	}
	if(linear == null) {
		linear = 0.;
	}
	if(gain == null) {
		gain = 1.;
	}
	if(radius == null) {
		radius = 1.;
	}
	this.cubeDir = [h3d_Matrix.L([0,0,-1,0,0,-1,0,0,1,0,0,0]),h3d_Matrix.L([0,0,1,0,0,-1,0,0,-1,0,0,0]),h3d_Matrix.L([1,0,0,0,0,0,1,0,0,1,0,0]),h3d_Matrix.L([1,0,0,0,0,0,-1,0,0,-1,0,0]),h3d_Matrix.L([1,0,0,0,0,-1,0,0,0,1,0,0]),h3d_Matrix.L([-1,0,0,0,0,-1,0,0,0,0,-1,0])];
	h3d_pass_ScreenFx.call(this,new h3d_shader_Blur());
	this.set_radius(radius);
	this.set_quality(quality);
	this.set_gain(gain);
	this.set_linear(linear);
};
$hxClasses["h3d.pass.Blur"] = h3d_pass_Blur;
h3d_pass_Blur.__name__ = "h3d.pass.Blur";
h3d_pass_Blur.__super__ = h3d_pass_ScreenFx;
h3d_pass_Blur.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	set_radius: function(r) {
		if(this.radius == r) {
			return r;
		}
		this.values = null;
		return this.radius = r;
	}
	,set_quality: function(q) {
		if(this.quality == q) {
			return q;
		}
		this.values = null;
		return this.quality = q;
	}
	,set_gain: function(s) {
		if(this.gain == s) {
			return s;
		}
		this.values = null;
		return this.gain = s;
	}
	,set_linear: function(b) {
		if(this.linear == b) {
			return b;
		}
		this.values = null;
		return this.linear = b;
	}
	,gauss: function(x,s) {
		if(s <= 0) {
			if(x == 0) {
				return 1;
			} else {
				return 0;
			}
		}
		var sq = s * s;
		var p = Math.pow(2.718281828459,-(x * x) / (2 * sq));
		return p / Math.sqrt(2 * Math.PI * sq);
	}
	,calcValues: function() {
		this.values = [];
		this.offsets = [];
		var tot = 0.;
		var f = this.quality;
		var qadj = (f < 0. ? 0. : f > 1. ? 1. : f) * 0.7 + 0.3;
		var width;
		if(this.radius > 0) {
			var a = this.radius - 1;
			width = Math.ceil((a < 1 ? 1 : a) * qadj / 2);
		} else {
			width = 0;
		}
		var sigma = Math.sqrt(this.radius);
		var _g = 0;
		var _g1 = width + 1;
		while(_g < _g1) {
			var i = _g++;
			var i1 = i * 2;
			var i2 = i == 0 ? 0 : i * 2 - 1;
			var g1 = this.gauss(i1,sigma);
			var g2 = this.gauss(i2,sigma);
			var g = g1 + g2;
			this.values[i] = g;
			this.offsets[i] = i == 0 ? 0 : (g1 * i1 + g2 * i2) / (g * i * Math.sqrt(qadj));
			tot += g;
			if(i > 0) {
				tot += g;
			}
		}
		var minVal = this.values[0] * (0.01 / qadj);
		while(this.values.length > 2) {
			var last = this.values[this.values.length - 1];
			if(last > minVal) {
				break;
			}
			tot -= last * 2;
			this.values.pop();
		}
		tot /= this.gain;
		var _g = 0;
		var _g1 = this.values.length;
		while(_g < _g1) {
			var i = _g++;
			this.values[i] /= tot;
		}
		if(this.linear > 0) {
			var m = this.gain / (this.values.length * 2 - 1);
			var _g = 0;
			var _g1 = this.values.length;
			while(_g < _g1) {
				var i = _g++;
				var a = this.values[i];
				this.values[i] = a + this.linear * (m - a);
				var a1 = this.offsets[i];
				this.offsets[i] = a1 + this.linear * ((i == 0 ? 0 : (i * 2 - 0.5) / (i * qadj)) - a1);
			}
		}
	}
	,apply: function(ctx,src,output) {
		if(this.radius <= 0 && this.shader.fixedColor__ == null) {
			if(output != null) {
				h3d_pass_Copy.run(src,output);
			}
			return;
		}
		if(output == null) {
			output = src;
		}
		if(this.values == null) {
			this.calcValues();
		}
		var isCube = (src.flags & 1 << h3d_mat_TextureFlags.Cube._hx_index) != 0;
		var faceCount = isCube ? 6 : 1;
		var tmp = ctx.textures.allocTarget(src.name + "BlurTmp",src.width,src.height,false,src.format,isCube);
		var _this = this.shader;
		_this.constModified = true;
		_this.Quality__ = this.values.length;
		this.shader.values__ = this.values;
		this.shader.offsets__ = this.offsets;
		if(isCube) {
			this.shader.cubeTexture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = true;
		} else {
			this.shader.texture__ = src;
			var _this = this.shader;
			_this.constModified = true;
			_this.isCube__ = false;
		}
		var _this = this.shader.pixel__;
		var x = 1 / src.width;
		var y = 0;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(tmp,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		if(isCube) {
			this.shader.cubeTexture__ = tmp;
		} else {
			this.shader.texture__ = tmp;
		}
		var _this = this.shader.pixel__;
		var x = 0;
		var y = 1 / src.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		var outDepth = output.depthBuffer;
		output.depthBuffer = null;
		var _g = 0;
		var _g1 = faceCount;
		while(_g < _g1) {
			var i = _g++;
			this.get_engine().pushTarget(output,i);
			if(isCube) {
				this.shader.cubeDir__ = this.cubeDir[i];
			}
			this.render();
			this.get_engine().popTarget();
		}
		output.depthBuffer = outDepth;
	}
	,__class__: h3d_pass_Blur
});
var h3d_pass__$Border_BorderShader = function() {
	this.color__ = new h3d_Vector();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Border.BorderShader"] = h3d_pass__$Border_BorderShader;
h3d_pass__$Border_BorderShader.__name__ = "h3d.pass._Border.BorderShader";
h3d_pass__$Border_BorderShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Border_BorderShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Border_BorderShader
});
var h3d_pass_Border = function(width,height,size) {
	if(size == null) {
		size = 1;
	}
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Border_BorderShader());
	var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
	var bbuf = this1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - size / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = size / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - (height - size) / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 0 / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - 0 / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = (width - size) / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = width / width * 2 - 1;
	if(bbuf.pos == bbuf.array.length) {
		var newSize = bbuf.array.length << 1;
		if(newSize < 128) {
			newSize = 128;
		}
		var newArray = new Float32Array(newSize);
		newArray.set(bbuf.array);
		bbuf.array = newArray;
	}
	bbuf.array[bbuf.pos++] = 1 - height / height * 2;
	this.primitive = new h3d_prim_RawPrimitive({ vbuf : bbuf, stride : 2, quads : true},true);
	var _this = this.shader.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	var w = 1;
	if(w == null) {
		w = 1.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = w;
};
$hxClasses["h3d.pass.Border"] = h3d_pass_Border;
h3d_pass_Border.__name__ = "h3d.pass.Border";
h3d_pass_Border.__super__ = h3d_pass_ScreenFx;
h3d_pass_Border.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	dispose: function() {
		h3d_pass_ScreenFx.prototype.dispose.call(this);
		this.primitive.dispose();
	}
	,__class__: h3d_pass_Border
});
var h3d_pass_ColorMatrixShader = function() {
	this.maskChannel__ = new h3d_Vector();
	this.maskPower__ = 0;
	this.maskMatB__ = new h3d_Vector();
	this.maskMatA__ = new h3d_Vector();
	this.matrix2__ = new h3d_Matrix();
	this.matrix__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass.ColorMatrixShader"] = h3d_pass_ColorMatrixShader;
h3d_pass_ColorMatrixShader.__name__ = "h3d.pass.ColorMatrixShader";
h3d_pass_ColorMatrixShader.__super__ = h3d_shader_ScreenShader;
h3d_pass_ColorMatrixShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.useAlpha__) {
			this.constBits |= 1;
		}
		if(this.useMask__) {
			this.constBits |= 2;
		}
		if(this.maskInvert__) {
			this.constBits |= 4;
		}
		if(this.hasSecondMatrix__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.matrix__;
		case 3:
			return this.useAlpha__;
		case 4:
			return this.useMask__;
		case 5:
			return this.maskInvert__;
		case 6:
			return this.hasSecondMatrix__;
		case 7:
			return this.matrix2__;
		case 8:
			return this.mask__;
		case 9:
			return this.maskMatA__;
		case 10:
			return this.maskMatB__;
		case 11:
			return this.maskPower__;
		case 12:
			return this.maskChannel__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 11:
			return this.maskPower__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_pass_ColorMatrixShader
});
var h3d_pass__$Copy_ArrayCopyShader = function() {
	this.layer__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.ArrayCopyShader"] = h3d_pass__$Copy_ArrayCopyShader;
h3d_pass__$Copy_ArrayCopyShader.__name__ = "h3d.pass._Copy.ArrayCopyShader";
h3d_pass__$Copy_ArrayCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_ArrayCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.layer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_ArrayCopyShader
});
var h3d_pass__$Copy_CopyShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._Copy.CopyShader"] = h3d_pass__$Copy_CopyShader;
h3d_pass__$Copy_CopyShader.__name__ = "h3d.pass._Copy.CopyShader";
h3d_pass__$Copy_CopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$Copy_CopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$Copy_CopyShader
});
var h3d_pass_Copy = function() {
	h3d_pass_ScreenFx.call(this,new h3d_pass__$Copy_CopyShader());
};
$hxClasses["h3d.pass.Copy"] = h3d_pass_Copy;
h3d_pass_Copy.__name__ = "h3d.pass.Copy";
h3d_pass_Copy.run = function(from,to,blend,pass,layer) {
	var engine = h3d_Engine.CURRENT;
	if(to != null && from != null && (blend == null || blend == h2d_BlendMode.None) && pass == null && engine.driver.copyTexture(from,to)) {
		return;
	}
	var inst = engine.resCache.h[h3d_pass_Copy.__id__];
	if(inst == null) {
		inst = new h3d_pass_Copy();
		engine.resCache.set(h3d_pass_Copy,inst);
	}
	inst.apply(from,to,blend,pass,layer);
};
h3d_pass_Copy.__super__ = h3d_pass_ScreenFx;
h3d_pass_Copy.prototype = $extend(h3d_pass_ScreenFx.prototype,{
	apply: function(from,to,blend,customPass,layer) {
		if(to != null) {
			this.get_engine().pushTarget(to,layer != null ? layer : 0);
		}
		this.shader.texture__ = from;
		if(customPass != null) {
			var old = this.pass;
			this.pass = customPass;
			if(blend != null) {
				this.pass.setBlendMode(blend);
			}
			var h = this.shaders;
			while(h.next != null) h = h.next;
			h.next = this.pass.shaders;
			this.render();
			this.pass = old;
			h.next = null;
		} else {
			this.pass.setBlendMode(blend == null ? h2d_BlendMode.None : blend);
			this.render();
		}
		this.shader.texture__ = null;
		if(to != null) {
			this.get_engine().popTarget();
		}
	}
	,__class__: h3d_pass_Copy
});
var h3d_pass__$CubeCopy_CubeCopyShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.pass._CubeCopy.CubeCopyShader"] = h3d_pass__$CubeCopy_CubeCopyShader;
h3d_pass__$CubeCopy_CubeCopyShader.__name__ = "h3d.pass._CubeCopy.CubeCopyShader";
h3d_pass__$CubeCopy_CubeCopyShader.__super__ = h3d_shader_ScreenShader;
h3d_pass__$CubeCopy_CubeCopyShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texture__;
		case 2:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_pass__$CubeCopy_CubeCopyShader
});
var h3d_pass_Default = function(name) {
	this.defaultSort = ($_=new h3d_pass_SortByMaterial(),$bind($_,$_.sort));
	h3d_pass_Base.call(this,name);
	this.manager = new h3d_pass_ShaderManager(this.getOutputs());
	this.initGlobals();
};
$hxClasses["h3d.pass.Default"] = h3d_pass_Default;
h3d_pass_Default.__name__ = "h3d.pass.Default";
h3d_pass_Default.__super__ = h3d_pass_Base;
h3d_pass_Default.prototype = $extend(h3d_pass_Base.prototype,{
	getOutputs: function() {
		return [hxsl_Output.Value("output.color")];
	}
	,processShaders: function(p,shaders) {
		var p = this.ctx.extraShaders;
		while(p != null) {
			shaders = this.ctx.allocShaderList(p.s,shaders);
			p = p.next;
		}
		return shaders;
	}
	,setupShaders: function(passes) {
		var lightInit = false;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var shaders = p.pass.getShadersRec();
			shaders = this.processShaders(p,shaders);
			if(p.pass.enableLights && this.ctx.lightSystem != null) {
				if(!lightInit) {
					this.ctx.lightSystem.initGlobals(this.manager.globals);
					lightInit = true;
				}
				shaders = this.ctx.lightSystem.computeLight(p.obj,shaders);
			}
			p.shader = this.manager.compileShaders(shaders,p.pass.batchMode);
			p.shaders = shaders;
			var t = p.shader.fragment.textures;
			if(t == null) {
				p.texture = 0;
			} else {
				var _this = this.manager;
				var opt = true;
				if(opt == null) {
					opt = false;
				}
				var t1;
				if(t.perObjectGlobal != null) {
					var v = _this.globals.map.h[t.perObjectGlobal.gid];
					if(v == null) {
						throw haxe_Exception.thrown("Missing global value " + t.perObjectGlobal.path + " for shader " + _this.shaderInfo(shaders,t.perObjectGlobal.path));
					}
					var _g = t.type;
					var t2;
					if(_g._hx_index == 17) {
						var _g1 = _g.size;
						t2 = true;
					} else {
						t2 = false;
					}
					t1 = t2 ? v.texture : v;
				} else {
					var si = shaders;
					var n = t.instance;
					while(--n > 0) si = si.next;
					var v1 = si.s.getParamValue(t.index);
					if(v1 == null && !opt) {
						throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + t.name);
					}
					t1 = v1;
				}
				p.texture = t1 == null ? 0 : t1.id;
			}
		}
	}
	,drawObject: function(p) {
		this.ctx.drawPass = p;
		this.ctx.engine.selectMaterial(p.pass);
		p.obj.draw(this.ctx);
	}
	,draw: function(passes,sort) {
		if(passes.current == null) {
			return;
		}
		var _g = 0;
		var _g1 = this.ctx.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			this.manager.globals.map.h[g.gid] = g.value;
		}
		this.setGlobals();
		this.setupShaders(passes);
		if(sort == null) {
			this.defaultSort(passes);
		} else {
			sort(passes);
		}
		this.ctx.currentManager = this.manager;
		var buf = this.ctx.shaderBuffers;
		var prevShader = null;
		var _g2_o = passes.current;
		while(_g2_o != null) {
			var tmp = _g2_o;
			_g2_o = _g2_o.next;
			var p = tmp;
			var v = p.obj.absPos;
			this.manager.globals.map.h[this.globalModelView_id] = v;
			if(p.shader.globals.h.hasOwnProperty(this.globalModelViewInverse_id)) {
				var v1 = p.obj.getInvPos();
				this.manager.globals.map.h[this.globalModelViewInverse_id] = v1;
			}
			if(prevShader != p.shader) {
				prevShader = p.shader;
				this.ctx.engine.selectShader(p.shader);
				if(buf == null) {
					buf = this.ctx.shaderBuffers = new h3d_shader_Buffers(p.shader);
				} else {
					var s = p.shader;
					buf.vertex.grow(s.vertex);
					buf.fragment.grow(s.fragment);
				}
				this.manager.fillGlobals(buf,p.shader);
				this.ctx.engine.uploadShaderBuffers(buf,0);
			}
			if(!p.pass.dynamicParameters) {
				this.manager.fillParams(buf,p.shader,p.shaders);
				this.ctx.engine.uploadShaderBuffers(buf,1);
				this.ctx.engine.uploadShaderBuffers(buf,2);
				this.ctx.engine.uploadShaderBuffers(buf,3);
			}
			this.drawObject(p);
		}
		var _this = this.ctx;
		_this.cachedPos = 0;
		_this.drawPass = null;
	}
	,initGlobals: function() {
		var this1 = hxsl_Globals.allocID("camera.view");
		this.cameraView_id = this1;
		var this1 = hxsl_Globals.allocID("camera.zNear");
		this.cameraNear_id = this1;
		var this1 = hxsl_Globals.allocID("camera.zFar");
		this.cameraFar_id = this1;
		var this1 = hxsl_Globals.allocID("camera.proj");
		this.cameraProj_id = this1;
		var this1 = hxsl_Globals.allocID("camera.position");
		this.cameraPos_id = this1;
		var this1 = hxsl_Globals.allocID("camera.projDiag");
		this.cameraProjDiag_id = this1;
		var this1 = hxsl_Globals.allocID("camera.projFlip");
		this.cameraProjFlip_id = this1;
		var this1 = hxsl_Globals.allocID("camera.viewProj");
		this.cameraViewProj_id = this1;
		var this1 = hxsl_Globals.allocID("camera.inverseViewProj");
		this.cameraInverseViewProj_id = this1;
		var this1 = hxsl_Globals.allocID("global.time");
		this.globalTime_id = this1;
		var this1 = hxsl_Globals.allocID("global.pixelSize");
		this.pixelSize_id = this1;
		var this1 = hxsl_Globals.allocID("global.modelView");
		this.globalModelView_id = this1;
		var this1 = hxsl_Globals.allocID("global.modelViewInverse");
		this.globalModelViewInverse_id = this1;
	}
	,setGlobals: function() {
		var v = this.ctx.camera.mcam;
		this.manager.globals.map.h[this.cameraView_id] = v;
		var v = this.ctx.camera.zNear;
		this.manager.globals.map.h[this.cameraNear_id] = v;
		var v = this.ctx.camera.zFar;
		this.manager.globals.map.h[this.cameraFar_id] = v;
		var v = this.ctx.camera.mproj;
		this.manager.globals.map.h[this.cameraProj_id] = v;
		var v = this.ctx.camera.pos;
		this.manager.globals.map.h[this.cameraPos_id] = v;
		var v = new h3d_Vector(this.ctx.camera.mproj._11,this.ctx.camera.mproj._22,this.ctx.camera.mproj._33,this.ctx.camera.mproj._44);
		this.manager.globals.map.h[this.cameraProjDiag_id] = v;
		var v = this.ctx.engine.driver.hasFeature(h3d_impl_Feature.BottomLeftCoords) && this.ctx.engine.getCurrentTarget() != null ? -1 : 1;
		this.manager.globals.map.h[this.cameraProjFlip_id] = v;
		var v = this.ctx.camera.m;
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
		var v = this.ctx.camera.getInverseViewProj();
		this.manager.globals.map.h[this.cameraInverseViewProj_id] = v;
		var v = this.ctx.time;
		this.manager.globals.map.h[this.globalTime_id] = v;
		var v = new h3d_Vector(2 / this.ctx.engine.width,2 / this.ctx.engine.height);
		this.manager.globals.map.h[this.pixelSize_id] = v;
	}
	,__class__: h3d_pass_Default
});
var h3d_pass_Shadows = function(light) {
	this.pcfScale = 1.0;
	this.pcfQuality = 1;
	this.bias = 0.01;
	this.power = 30.0;
	this.samplingKind = h3d_pass_ShadowSamplingKind.None;
	this.size = 1024;
	this.mode = h3d_pass_RenderMode.None;
	this.enabled = true;
	if(this.format == null) {
		this.format = hxd_PixelFormat.R16F;
	}
	if(!h3d_Engine.CURRENT.driver.isSupportedFormat(this.format)) {
		this.format = h3d_mat_Texture.nativeFormat;
	}
	h3d_pass_Default.call(this,"shadow");
	this.light = light;
	this.blur = new h3d_pass_Blur(5);
	this.blur.set_quality(0.5);
	var _this = this.blur.shader;
	_this.constModified = true;
	_this.isDepth__ = this.format == h3d_mat_Texture.nativeFormat;
};
$hxClasses["h3d.pass.Shadows"] = h3d_pass_Shadows;
h3d_pass_Shadows.__name__ = "h3d.pass.Shadows";
h3d_pass_Shadows.__super__ = h3d_pass_Default;
h3d_pass_Shadows.prototype = $extend(h3d_pass_Default.prototype,{
	set_size: function(s) {
		if(s != this.size && this.staticTexture != null) {
			this.staticTexture.dispose();
			this.staticTexture = null;
		}
		return this.size = s;
	}
	,getShadowProj: function() {
		return this.lightCamera.m;
	}
	,isUsingWorldDist: function() {
		return false;
	}
	,getOutputs: function() {
		if(this.isUsingWorldDist()) {
			return [hxsl_Output.Swiz(hxsl_Output.Value("output.worldDist",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
		}
		if(this.format == h3d_mat_Texture.nativeFormat) {
			return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
		}
		return [hxsl_Output.Swiz(hxsl_Output.Value("output.depth",1),[hxsl_Component.X,hxsl_Component.X,hxsl_Component.X,hxsl_Component.X])];
	}
	,createDefaultShadowMap: function() {
		var tex = h3d_mat_Texture.fromColor(16777215);
		tex.name = "defaultShadowMap";
		return tex;
	}
	,syncShader: function(texture) {
	}
	,filterPasses: function(passes) {
		if(!this.ctx.computingStatic) {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				this.syncShader(this.staticTexture);
				return false;
			case 2:
				return true;
			case 3:
				var tmp;
				if(this.staticTexture != null) {
					var _this = this.staticTexture;
					tmp = _this.t == null && _this.realloc == null;
				} else {
					tmp = true;
				}
				if(tmp) {
					this.staticTexture = this.createDefaultShadowMap();
				}
				return true;
			}
		} else {
			switch(this.mode._hx_index) {
			case 0:
				return false;
			case 1:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			case 2:
				return false;
			case 3:
				var head = null;
				var prev = null;
				var disc = passes.discarded;
				var discQueue = passes.lastDisc;
				var cur = passes.current;
				while(cur != null) {
					if(cur.pass.isStatic == true) {
						if(head == null) {
							prev = cur;
							head = prev;
						} else {
							prev.next = cur;
							prev = cur;
						}
					} else if(disc == null) {
						discQueue = cur;
						disc = discQueue;
					} else {
						discQueue.next = cur;
						discQueue = cur;
					}
					cur = cur.next;
				}
				if(prev != null) {
					prev.next = null;
				}
				if(discQueue != null) {
					discQueue.next = null;
				}
				passes.current = head;
				passes.discarded = disc;
				passes.lastDisc = discQueue;
				return true;
			}
		}
	}
	,__class__: h3d_pass_Shadows
});
var h3d_pass_DirShadowMap = function(light) {
	this.minDist = -1.0;
	this.maxDist = -1.0;
	this.autoShrink = true;
	this.mergePass = new h3d_pass_ScreenFx(new h3d_shader_MinMaxShader());
	h3d_pass_Shadows.call(this,light);
	this.lightCamera = new h3d_Camera();
	this.lightCamera.orthoBounds = new h3d_col_Bounds();
	this.shader = this.dshader = new h3d_shader_DirShadow();
	this.border = new h3d_pass_Border(this.size,this.size);
	this.customDepth = h3d_Engine.CURRENT.driver.hasFeature(h3d_impl_Feature.AllocDepthBuffer);
	if(!this.customDepth) {
		this.depth = h3d_mat_DepthBuffer.getDefault();
	}
};
$hxClasses["h3d.pass.DirShadowMap"] = h3d_pass_DirShadowMap;
h3d_pass_DirShadowMap.__name__ = "h3d.pass.DirShadowMap";
h3d_pass_DirShadowMap.__super__ = h3d_pass_Shadows;
h3d_pass_DirShadowMap.prototype = $extend(h3d_pass_Shadows.prototype,{
	set_mode: function(m) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.enable__ = m != h3d_pass_RenderMode.None;
		return this.mode = m;
	}
	,set_size: function(s) {
		if(this.border != null && this.size != s) {
			this.border.dispose();
			this.border = new h3d_pass_Border(s,s);
		}
		return h3d_pass_Shadows.prototype.set_size.call(this,s);
	}
	,calcShadowBounds: function(camera) {
		var bounds = camera.orthoBounds;
		if(this.autoShrink) {
			var mtmp = new h3d_Matrix();
			this.ctx.scene.iterVisibleMeshes(function(m) {
				if(m.primitive == null || !m.material.castShadows) {
					return;
				}
				var b = m.primitive.getBounds();
				if(b.xMin > b.xMax) {
					return;
				}
				mtmp.multiply3x4(m.getAbsPos(),camera.mcam);
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMin;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMin;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMin;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
				var x = b.xMax;
				var y = b.yMax;
				var z = b.zMax;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var px = p_x * mtmp._11 + p_y * mtmp._21 + p_z * mtmp._31 + mtmp._41;
				var py = p_x * mtmp._12 + p_y * mtmp._22 + p_z * mtmp._32 + mtmp._42;
				var pz = p_x * mtmp._13 + p_y * mtmp._23 + p_z * mtmp._33 + mtmp._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				if(p_x < bounds.xMin) {
					bounds.xMin = p_x;
				}
				if(p_x > bounds.xMax) {
					bounds.xMax = p_x;
				}
				if(p_y < bounds.yMin) {
					bounds.yMin = p_y;
				}
				if(p_y > bounds.yMax) {
					bounds.yMax = p_y;
				}
				if(p_z < bounds.zMin) {
					bounds.zMin = p_z;
				}
				if(p_z > bounds.zMax) {
					bounds.zMax = p_z;
				}
			});
		} else if(this.mode == h3d_pass_RenderMode.Dynamic) {
			bounds.xMin = -1e20;
			bounds.xMax = 1e20;
			bounds.yMin = -1e20;
			bounds.yMax = 1e20;
			bounds.zMin = -1e20;
			bounds.zMax = 1e20;
		}
		if(this.mode == h3d_pass_RenderMode.Dynamic) {
			var cameraBounds = new h3d_col_Bounds();
			var zMax = 1.0;
			var zMin = 0.0;
			var n = this.ctx.camera.zNear;
			var f = this.ctx.camera.zFar;
			if(this.maxDist > 0) {
				var f1 = this.maxDist;
				var min = n;
				var max = f;
				if(max == null) {
					max = 1.;
				}
				if(min == null) {
					min = 0.;
				}
				zMax = ((f + n - 2.0 * n * f / (f1 < min ? min : f1 > max ? max : f1)) / (f - n) + 1.0) / 2.0;
			}
			if(this.minDist > 0) {
				var f1 = this.minDist;
				var min = n;
				var max = f;
				if(max == null) {
					max = 1.;
				}
				if(min == null) {
					min = 0.;
				}
				zMin = ((f + n - 2.0 * n * f / (f1 < min ? min : f1 > max ? max : f1)) / (f - n) + 1.0) / 2.0;
			}
			var _g = 0;
			var _g1 = this.ctx.camera.getFrustumCorners(zMax,zMin);
			while(_g < _g1.length) {
				var pt = _g1[_g];
				++_g;
				var m = camera.mcam;
				var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + pt.w * m._41;
				var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + pt.w * m._42;
				var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + pt.w * m._43;
				var pw = pt.x * m._14 + pt.y * m._24 + pt.z * m._34 + pt.w * m._44;
				pt.x = px;
				pt.y = py;
				pt.z = pz;
				pt.w = pw;
				var x = pt.x;
				var y = pt.y;
				var z = pt.z;
				if(x < cameraBounds.xMin) {
					cameraBounds.xMin = x;
				}
				if(x > cameraBounds.xMax) {
					cameraBounds.xMax = x;
				}
				if(y < cameraBounds.yMin) {
					cameraBounds.yMin = y;
				}
				if(y > cameraBounds.yMax) {
					cameraBounds.yMax = y;
				}
				if(z < cameraBounds.zMin) {
					cameraBounds.zMin = z;
				}
				if(z > cameraBounds.zMax) {
					cameraBounds.zMax = z;
				}
			}
			if(this.autoShrink) {
				cameraBounds.zMin = bounds.zMin;
				bounds.intersection(bounds,cameraBounds);
			} else {
				bounds.load(cameraBounds);
			}
		}
		bounds.scaleCenter(1.01);
	}
	,setGlobals: function() {
		h3d_pass_Shadows.prototype.setGlobals.call(this);
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var _this = this.lightCamera.orthoBounds;
			_this.xMin = 1e20;
			_this.xMax = -1e20;
			_this.yMin = 1e20;
			_this.yMax = -1e20;
			_this.zMin = 1e20;
			_this.zMax = -1e20;
			this.calcShadowBounds(this.lightCamera);
			this.lightCamera.update();
		}
		var v = this.getShadowProj();
		this.manager.globals.map.h[this.cameraViewProj_id] = v;
	}
	,syncShader: function(texture) {
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMap__ = texture;
		var _this = this.dshader;
		_this.constModified = true;
		_this.shadowMapChannel__ = this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R;
		this.dshader.shadowBias__ = this.bias;
		this.dshader.shadowPower__ = this.power;
		this.dshader.shadowProj__ = this.getShadowProj();
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_ESM__ = this.samplingKind == h3d_pass_ShadowSamplingKind.ESM;
		this.dshader.shadowPower__ = this.power;
		var _this = this.dshader;
		_this.constModified = true;
		_this.USE_PCF__ = this.samplingKind == h3d_pass_ShadowSamplingKind.PCF;
		var _this = this.dshader.shadowRes__;
		var x = texture.width;
		var y = texture.height;
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		_this.x = x;
		_this.y = y;
		_this.z = 0.;
		_this.w = 1.;
		this.dshader.pcfScale__ = this.pcfScale;
		var _this = this.dshader;
		_this.constModified = true;
		_this.pcfQuality__ = this.pcfQuality;
	}
	,draw: function(passes,sort) {
		var _gthis = this;
		if(!this.enabled) {
			return;
		}
		if(!this.filterPasses(passes)) {
			return;
		}
		var f = function(col) {
			return col.inFrustum(_gthis.lightCamera.frustum);
		};
		var prevCollider = null;
		var prevResult = true;
		var head = null;
		var prev = null;
		var disc = passes.discarded;
		var discQueue = passes.lastDisc;
		var cur = passes.current;
		while(cur != null) {
			var col = cur.obj.cullingCollider;
			var tmp;
			if(col == null) {
				tmp = true;
			} else {
				if(col != prevCollider) {
					prevCollider = col;
					prevResult = f(col);
				}
				tmp = prevResult;
			}
			if(tmp) {
				if(head == null) {
					prev = cur;
					head = prev;
				} else {
					prev.next = cur;
					prev = cur;
				}
			} else if(disc == null) {
				discQueue = cur;
				disc = discQueue;
			} else {
				discQueue.next = cur;
				discQueue = cur;
			}
			cur = cur.next;
		}
		if(prev != null) {
			prev.next = null;
		}
		if(discQueue != null) {
			discQueue.next = null;
		}
		passes.current = head;
		passes.discarded = disc;
		passes.lastDisc = discQueue;
		var texture = this.ctx.textures.allocTarget("dirShadowMap",this.size,this.size,false,this.format);
		if(this.customDepth && (this.depth == null || this.depth.width != this.size || this.depth.height != this.size || this.depth.isDisposed())) {
			if(this.depth != null) {
				this.depth.dispose();
			}
			this.depth = new h3d_mat_DepthBuffer(this.size,this.size);
		}
		texture.depthBuffer = this.depth;
		if(this.mode != h3d_pass_RenderMode.Mixed || this.ctx.computingStatic) {
			var ct = this.ctx.camera.target;
			var slight = this.light == null ? this.ctx.lightSystem.shadowLight : this.light;
			var ldir = slight == null ? null : slight.getShadowDirection();
			if(ldir == null) {
				var _this = this.lightCamera.target;
				var x = 0;
				var y = 0;
				var z = -1;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
			} else {
				var _this = this.lightCamera.target;
				var x = ldir.x;
				var y = ldir.y;
				var z = ldir.z;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				_this.x = x;
				_this.y = y;
				_this.z = z;
				_this.w = 1.;
				var _this = this.lightCamera.target;
				var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
				if(k < 1e-10) {
					k = 0;
				} else {
					k = 1. / Math.sqrt(k);
				}
				_this.x *= k;
				_this.y *= k;
				_this.z *= k;
			}
			this.lightCamera.target.x += ct.x;
			this.lightCamera.target.y += ct.y;
			this.lightCamera.target.z += ct.z;
			var _this = this.lightCamera.pos;
			_this.x = ct.x;
			_this.y = ct.y;
			_this.z = ct.z;
			_this.w = ct.w;
			this.lightCamera.update();
		}
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(16777215,1);
		h3d_pass_Shadows.prototype.draw.call(this,passes,sort);
		if(this.border != null) {
			this.border.render();
		}
		this.ctx.engine.popTarget();
		if(this.mode == h3d_pass_RenderMode.Mixed && !this.ctx.computingStatic) {
			var merge = this.ctx.textures.allocTarget("mergedDirShadowMap",this.size,this.size,false,this.format);
			this.mergePass.shader.texA__ = texture;
			this.mergePass.shader.texB__ = this.staticTexture;
			this.ctx.engine.pushTarget(merge);
			this.mergePass.render();
			this.ctx.engine.popTarget();
			texture = merge;
		}
		if(this.blur.radius > 0 && (this.mode != h3d_pass_RenderMode.Mixed || !this.ctx.computingStatic)) {
			this.blur.apply(this.ctx,texture);
		}
		this.syncShader(texture);
	}
	,__class__: h3d_pass_DirShadowMap
});
var h3d_pass_DefaultShadowMap = function(size,format) {
	if(size == null) {
		size = 1024;
	}
	if(format != null) {
		this.format = format;
	}
	h3d_pass_DirShadowMap.call(this,null);
	this.set_size(size);
	this.color = new h3d_Vector();
	this.set_mode(h3d_pass_RenderMode.Dynamic);
	this.shadowMapId = hxsl_Globals.allocID("shadow.map");
	this.shadowProjId = hxsl_Globals.allocID("shadow.proj");
	this.shadowColorId = hxsl_Globals.allocID("shadow.color");
	this.shadowPowerId = hxsl_Globals.allocID("shadow.power");
	this.shadowBiasId = hxsl_Globals.allocID("shadow.bias");
};
$hxClasses["h3d.pass.DefaultShadowMap"] = h3d_pass_DefaultShadowMap;
h3d_pass_DefaultShadowMap.__name__ = "h3d.pass.DefaultShadowMap";
h3d_pass_DefaultShadowMap.__super__ = h3d_pass_DirShadowMap;
h3d_pass_DefaultShadowMap.prototype = $extend(h3d_pass_DirShadowMap.prototype,{
	draw: function(passes,sort) {
		h3d_pass_DirShadowMap.prototype.draw.call(this,passes,sort);
		this.ctx.setGlobalID(this.shadowMapId,{ texture : this.dshader.shadowMap__, channel : this.format == h3d_mat_Texture.nativeFormat ? hxsl_Channel.PackedFloat : hxsl_Channel.R});
		this.ctx.setGlobalID(this.shadowProjId,this.getShadowProj());
		this.ctx.setGlobalID(this.shadowColorId,this.color);
		this.ctx.setGlobalID(this.shadowPowerId,this.power);
		this.ctx.setGlobalID(this.shadowBiasId,this.bias);
	}
	,__class__: h3d_pass_DefaultShadowMap
});
var h3d_pass__$HardwarePick_FixedColor = function() {
	this.viewport__ = new h3d_Vector();
	this.colorID__ = new h3d_Vector();
	hxsl_Shader.call(this);
};
$hxClasses["h3d.pass._HardwarePick.FixedColor"] = h3d_pass__$HardwarePick_FixedColor;
h3d_pass__$HardwarePick_FixedColor.__name__ = "h3d.pass._HardwarePick.FixedColor";
h3d_pass__$HardwarePick_FixedColor.__super__ = hxsl_Shader;
h3d_pass__$HardwarePick_FixedColor.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.colorID__;
		case 1:
			return this.viewport__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_pass__$HardwarePick_FixedColor
});
var h3d_pass_PassList = function(current) {
	this.current = current;
	this.discarded = this.lastDisc = null;
};
$hxClasses["h3d.pass.PassList"] = h3d_pass_PassList;
h3d_pass_PassList.__name__ = "h3d.pass.PassList";
h3d_pass_PassList.prototype = {
	__class__: h3d_pass_PassList
};
var h3d_pass_PassObject = function() {
	this.texture = 0;
};
$hxClasses["h3d.pass.PassObject"] = h3d_pass_PassObject;
h3d_pass_PassObject.__name__ = "h3d.pass.PassObject";
h3d_pass_PassObject.prototype = {
	__class__: h3d_pass_PassObject
};
var h3d_pass_ShaderManager = function(output) {
	this.shaderCache = hxsl_Cache.get();
	this.globals = new hxsl_Globals();
	this.currentOutput = new hxsl_ShaderList(null);
	this.setOutput(output);
};
$hxClasses["h3d.pass.ShaderManager"] = h3d_pass_ShaderManager;
h3d_pass_ShaderManager.__name__ = "h3d.pass.ShaderManager";
h3d_pass_ShaderManager.prototype = {
	setOutput: function(output) {
		if(output == null) {
			output = [hxsl_Output.Value("output.color")];
		}
		this.currentOutput.s = this.shaderCache.getLinkShader(output);
	}
	,fillRec: function(v,type,out,pos) {
		switch(type._hx_index) {
		case 1:
			out[pos] = v;
			return 1;
		case 3:
			out[pos] = v;
			return 1;
		case 5:
			var _g = type.t;
			var n = type.size;
			var v1 = v;
			out[pos++] = v1.x;
			out[pos++] = v1.y;
			switch(n) {
			case 3:
				out[pos++] = v1.z;
				break;
			case 4:
				out[pos++] = v1.z;
				out[pos++] = v1.w;
				break;
			}
			return n;
		case 6:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = 0;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = 0;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = 0;
			return 12;
		case 7:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			out[pos++] = m._14;
			out[pos++] = m._24;
			out[pos++] = m._34;
			out[pos++] = m._44;
			return 16;
		case 8:
			var m = v;
			out[pos++] = m._11;
			out[pos++] = m._21;
			out[pos++] = m._31;
			out[pos++] = m._41;
			out[pos++] = m._12;
			out[pos++] = m._22;
			out[pos++] = m._32;
			out[pos++] = m._42;
			out[pos++] = m._13;
			out[pos++] = m._23;
			out[pos++] = m._33;
			out[pos++] = m._43;
			return 12;
		case 13:
			var vl = type.vl;
			var tot = 0;
			var _g = 0;
			while(_g < vl.length) {
				var vv = vl[_g];
				++_g;
				tot += this.fillRec(Reflect.field(v,vv.name),vv.type,out,pos + tot);
			}
			return tot;
		case 15:
			var _g = type.size;
			var _g1 = type.t;
			switch(_g1._hx_index) {
			case 3:
				if(_g._hx_index == 0) {
					var len = _g.v;
					var v1 = v;
					var size = 0;
					var count = v1.length < len ? v1.length : len;
					var _g2 = 0;
					var _g3 = count;
					while(_g2 < _g3) {
						var i = _g2++;
						out[pos++] = v1[i];
					}
					return len;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 5:
				if(_g1.size == 4) {
					if(_g1.t._hx_index == 1) {
						if(_g._hx_index == 0) {
							var len = _g.v;
							var v1 = v;
							var _g2 = 0;
							var _g3 = len;
							while(_g2 < _g3) {
								var i = _g2++;
								var n = v1[i];
								if(n == null) {
									break;
								}
								out[pos++] = n.x;
								out[pos++] = n.y;
								out[pos++] = n.z;
								out[pos++] = n.w;
							}
							return len * 4;
						} else {
							throw haxe_Exception.thrown("assert " + Std.string(type));
						}
					} else if(_g._hx_index == 0) {
						var len = _g.v;
						var t = _g1;
						var v1 = v;
						var size = 0;
						var _g2 = 0;
						var _g3 = len;
						while(_g2 < _g3) {
							var i = _g2++;
							var n = v1[i];
							if(n == null) {
								break;
							}
							size = this.fillRec(n,t,out,pos);
							pos += size;
						}
						return len * size;
					} else {
						throw haxe_Exception.thrown("assert " + Std.string(type));
					}
				} else if(_g._hx_index == 0) {
					var len = _g.v;
					var t = _g1;
					var v1 = v;
					var size = 0;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			case 8:
				if(_g._hx_index == 0) {
					var len = _g.v;
					var v1 = v;
					var _g2 = 0;
					var _g3 = len;
					while(_g2 < _g3) {
						var i = _g2++;
						var m = v1[i];
						if(m == null) {
							break;
						}
						out[pos++] = m._11;
						out[pos++] = m._21;
						out[pos++] = m._31;
						out[pos++] = m._41;
						out[pos++] = m._12;
						out[pos++] = m._22;
						out[pos++] = m._32;
						out[pos++] = m._42;
						out[pos++] = m._13;
						out[pos++] = m._23;
						out[pos++] = m._33;
						out[pos++] = m._43;
					}
					return len * 12;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
				break;
			default:
				if(_g._hx_index == 0) {
					var len = _g.v;
					var t = _g1;
					var v1 = v;
					var size = 0;
					var _g = 0;
					var _g1 = len;
					while(_g < _g1) {
						var i = _g++;
						var n = v1[i];
						if(n == null) {
							break;
						}
						size = this.fillRec(n,t,out,pos);
						pos += size;
					}
					return len * size;
				} else {
					throw haxe_Exception.thrown("assert " + Std.string(type));
				}
			}
			break;
		default:
			throw haxe_Exception.thrown("assert " + Std.string(type));
		}
	}
	,shaderInfo: function(shaders,path) {
		var name = path.split(".").pop();
		while(shaders != null) {
			var inst = shaders.s.instance;
			var _g = 0;
			var _g1 = inst.shader.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				if(v.name == name) {
					return shaders.s.toString();
				}
			}
			shaders = shaders.next;
		}
		return "(not found)";
	}
	,fillGlobals: function(buf,s) {
		var _gthis = this;
		var s1 = s.vertex;
		var g = s1.globals;
		var ptr = buf.vertex.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
		var s1 = s.fragment;
		var g = s1.globals;
		var ptr = buf.fragment.globals;
		while(g != null) {
			var v = _gthis.globals.map.h[g.gid];
			if(v == null) {
				if(g.path == "__consts__") {
					_gthis.fillRec(s1.consts,g.type,ptr,g.pos);
					g = g.next;
					continue;
				}
				throw haxe_Exception.thrown("Missing global value " + g.path);
			}
			_gthis.fillRec(v,g.type,ptr,g.pos);
			g = g.next;
		}
	}
	,fillParams: function(buf,s,shaders) {
		var _gthis = this;
		var curInstance = -1;
		var curInstanceValue = null;
		var buf1 = buf.vertex;
		var s1 = s.vertex;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var t1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				t = v1;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g2 = 0;
				var _g3 = -p.pos;
				while(_g2 < _g3) {
					var i = _g2++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var b1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				b = v1;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
		var buf1 = buf.fragment;
		var s1 = s.fragment;
		var p = s1.params;
		var ptr = buf1.params;
		while(p != null) {
			var v;
			if(p.perObjectGlobal == null) {
				if(p.type == hxsl_Type.TFloat) {
					var index = p.instance;
					var i;
					if(curInstance == index) {
						i = curInstanceValue;
					} else {
						var si = shaders;
						curInstance = index;
						while(--index > 0) si = si.next;
						curInstanceValue = si.s;
						i = curInstanceValue;
					}
					ptr[p.pos] = i.getParamFloatValue(p.index);
					p = p.next;
					continue;
				}
				var index1 = p.instance;
				var v1;
				if(curInstance == index1) {
					v1 = curInstanceValue;
				} else {
					var si1 = shaders;
					curInstance = index1;
					while(--index1 > 0) si1 = si1.next;
					curInstanceValue = si1.s;
					v1 = curInstanceValue;
				}
				v = v1.getParamValue(p.index);
				if(v == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(curInstanceValue) + "." + p.name);
				}
			} else if(p.perObjectGlobal != null) {
				var v2 = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v2 == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var v3;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					v3 = true;
				} else {
					v3 = false;
				}
				v = v3 ? v2.texture : v2;
			} else {
				var si2 = shaders;
				var n = p.instance;
				while(--n > 0) si2 = si2.next;
				var v4 = si2.s.getParamValue(p.index);
				if(v4 == null) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si2.s) + "." + p.name);
				}
				v = v4;
			}
			_gthis.fillRec(v,p.type,ptr,p.pos);
			p = p.next;
		}
		var tid = 0;
		var p = s1.textures;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var t;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var t1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					t1 = true;
				} else {
					t1 = false;
				}
				t = t1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				t = v1;
			}
			if(p.pos < 0) {
				var arr = t;
				var _g2 = 0;
				var _g3 = -p.pos;
				while(_g2 < _g3) {
					var i = _g2++;
					buf1.tex[tid++] = arr[i];
				}
			} else {
				buf1.tex[tid++] = t;
			}
			p = p.next;
		}
		var p = s1.buffers;
		var bid = 0;
		while(p != null) {
			var opt = !h3d_pass_ShaderManager.STRICT;
			if(opt == null) {
				opt = false;
			}
			var b;
			if(p.perObjectGlobal != null) {
				var v = _gthis.globals.map.h[p.perObjectGlobal.gid];
				if(v == null) {
					throw haxe_Exception.thrown("Missing global value " + p.perObjectGlobal.path + " for shader " + _gthis.shaderInfo(shaders,p.perObjectGlobal.path));
				}
				var _g = p.type;
				var b1;
				if(_g._hx_index == 17) {
					var _g1 = _g.size;
					b1 = true;
				} else {
					b1 = false;
				}
				b = b1 ? v.texture : v;
			} else {
				var si = shaders;
				var n = p.instance;
				while(--n > 0) si = si.next;
				var v1 = si.s.getParamValue(p.index);
				if(v1 == null && !opt) {
					throw haxe_Exception.thrown("Missing param value " + Std.string(si.s) + "." + p.name);
				}
				b = v1;
			}
			buf1.buffers[bid++] = b;
			p = p.next;
		}
	}
	,compileShaders: function(shaders,batchMode) {
		if(batchMode == null) {
			batchMode = false;
		}
		this.globals.maxChannels = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			s1.updateConstants(this.globals);
		}
		this.currentOutput.next = shaders;
		var s = this.shaderCache.link(this.currentOutput,batchMode);
		this.currentOutput.next = null;
		return s;
	}
	,__class__: h3d_pass_ShaderManager
};
var h3d_pass_RenderMode = $hxEnums["h3d.pass.RenderMode"] = { __ename__ : true, __constructs__ : ["None","Static","Dynamic","Mixed"]
	,None: {_hx_index:0,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Static: {_hx_index:1,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Dynamic: {_hx_index:2,__enum__:"h3d.pass.RenderMode",toString:$estr}
	,Mixed: {_hx_index:3,__enum__:"h3d.pass.RenderMode",toString:$estr}
};
h3d_pass_RenderMode.__empty_constructs__ = [h3d_pass_RenderMode.None,h3d_pass_RenderMode.Static,h3d_pass_RenderMode.Dynamic,h3d_pass_RenderMode.Mixed];
var h3d_pass_ShadowSamplingKind = $hxEnums["h3d.pass.ShadowSamplingKind"] = { __ename__ : true, __constructs__ : ["None","PCF","ESM"]
	,None: {_hx_index:0,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,PCF: {_hx_index:1,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
	,ESM: {_hx_index:2,__enum__:"h3d.pass.ShadowSamplingKind",toString:$estr}
};
h3d_pass_ShadowSamplingKind.__empty_constructs__ = [h3d_pass_ShadowSamplingKind.None,h3d_pass_ShadowSamplingKind.PCF,h3d_pass_ShadowSamplingKind.ESM];
var h3d_pass_SortByMaterial = function() {
	this.textureCount = 1;
	this.shaderCount = 1;
	this.shaderIdMap = [];
	this.textureIdMap = [];
};
$hxClasses["h3d.pass.SortByMaterial"] = h3d_pass_SortByMaterial;
h3d_pass_SortByMaterial.__name__ = "h3d.pass.SortByMaterial";
h3d_pass_SortByMaterial.prototype = {
	sort: function(passes) {
		var _gthis = this;
		var shaderStart = this.shaderCount;
		var textureStart = this.textureCount;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			if(this.shaderIdMap[p.shader.id] < shaderStart || this.shaderIdMap[p.shader.id] == null) {
				this.shaderIdMap[p.shader.id] = this.shaderCount++;
			}
			if(this.textureIdMap[p.texture] < textureStart || this.textureIdMap[p.shader.id] == null) {
				this.textureIdMap[p.texture] = this.textureCount++;
			}
		}
		var list = passes.current;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else {
							var tmp1;
							if(!(qsize == 0 || q == null)) {
								var d = _gthis.shaderIdMap[p.shader.id] - _gthis.shaderIdMap[q.shader.id];
								tmp1 = (d != 0 ? d : _gthis.textureIdMap[p.texture] - _gthis.textureIdMap[q.texture]) <= 0;
							} else {
								tmp1 = true;
							}
							if(tmp1) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		passes.current = tmp;
	}
	,__class__: h3d_pass_SortByMaterial
};
var h3d_prim_Plane2D = function() {
	h3d_prim_Primitive.call(this);
};
$hxClasses["h3d.prim.Plane2D"] = h3d_prim_Plane2D;
h3d_prim_Plane2D.__name__ = "h3d.prim.Plane2D";
h3d_prim_Plane2D.get = function() {
	var engine = h3d_Engine.CURRENT;
	var inst = engine.resCache.h[h3d_prim_Plane2D.__id__];
	if(inst == null) {
		inst = new h3d_prim_Plane2D();
		engine.resCache.set(h3d_prim_Plane2D,inst);
	}
	return inst;
};
h3d_prim_Plane2D.__super__ = h3d_prim_Primitive;
h3d_prim_Plane2D.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		var this1 = hxd__$FloatBuffer_Float32Expand._new(0);
		var v = this1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = -1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 1;
		if(v.pos == v.array.length) {
			var newSize = v.array.length << 1;
			if(newSize < 128) {
				newSize = 128;
			}
			var newArray = new Float32Array(newSize);
			newArray.set(v.array);
			v.array = newArray;
		}
		v.array[v.pos++] = 0;
		this.buffer = h3d_Buffer.ofFloats(v,4,[h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat]);
	}
	,render: function(engine) {
		if(this.buffer == null || this.buffer.isDisposed()) {
			this.alloc(engine);
		}
		engine.renderBuffer(this.buffer,engine.mem.quadIndexes,2,0,-1);
	}
	,__class__: h3d_prim_Plane2D
});
var h3d_prim_RawPrimitive = function(inf,persist) {
	if(persist == null) {
		persist = false;
	}
	h3d_prim_Primitive.call(this);
	this.onContextLost = function() {
		return inf;
	};
	this.bounds = inf.bounds;
	this.alloc(null);
	if(!persist) {
		this.onContextLost = null;
	}
};
$hxClasses["h3d.prim.RawPrimitive"] = h3d_prim_RawPrimitive;
h3d_prim_RawPrimitive.__name__ = "h3d.prim.RawPrimitive";
h3d_prim_RawPrimitive.__super__ = h3d_prim_Primitive;
h3d_prim_RawPrimitive.prototype = $extend(h3d_prim_Primitive.prototype,{
	alloc: function(engine) {
		if(this.onContextLost == null) {
			throw haxe_Exception.thrown("Cannot realloc " + Std.string(this));
		}
		var inf = this.onContextLost();
		var flags = [];
		if(inf.ibuf == null) {
			flags.push(inf.quads ? h3d_BufferFlag.Quads : h3d_BufferFlag.Triangles);
		}
		if(inf.stride < 8) {
			flags.push(h3d_BufferFlag.RawFormat);
		}
		this.buffer = h3d_Buffer.ofFloats(inf.vbuf,inf.stride,flags);
		this.vcount = this.buffer.vertices;
		this.tcount = inf.ibuf != null ? inf.ibuf.length / 3 | 0 : inf.quads ? this.vcount >> 1 : this.vcount / 3 | 0;
		if(inf.ibuf != null) {
			this.indexes = h3d_Indexes.alloc(inf.ibuf);
		} else if(this.indexes != null) {
			this.indexes.dispose();
			this.indexes = null;
		}
	}
	,getBounds: function() {
		if(this.bounds == null) {
			throw haxe_Exception.thrown("Bounds not defined for " + Std.string(this));
		}
		return this.bounds;
	}
	,__class__: h3d_prim_RawPrimitive
});
var h3d_scene_Object = function(parent) {
	var this1 = 0;
	this.flags = this1;
	this.absPos = new h3d_Matrix();
	this.absPos.identity();
	this.x = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.y = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.z = 0;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleX = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleY = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.scaleZ = 1;
	var f = 1;
	var b = true;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	this.qRot = new h3d_Quat();
	var f = 1;
	var b = this.follow != null;
	if(b) {
		this.flags |= f;
	} else {
		this.flags &= ~f;
	}
	var f = 2;
	this.flags |= f;
	this.children = [];
	if(parent != null) {
		parent.addChild(this);
	}
};
$hxClasses["h3d.scene.Object"] = h3d_scene_Object;
h3d_scene_Object.__name__ = "h3d.scene.Object";
h3d_scene_Object.__interfaces__ = [hxd_impl__$Serializable_NoSerializeSupport];
h3d_scene_Object.prototype = {
	set_cullingCollider: function(c) {
		this.cullingCollider = c;
		var f = 4096;
		this.flags &= ~f;
		return c;
	}
	,localToGlobal: function(pt) {
		this.syncPos();
		if(pt == null) {
			pt = new h3d_col_Point();
		}
		var m = this.absPos;
		var px = pt.x * m._11 + pt.y * m._21 + pt.z * m._31 + m._41;
		var py = pt.x * m._12 + pt.y * m._22 + pt.z * m._32 + m._42;
		var pz = pt.x * m._13 + pt.y * m._23 + pt.z * m._33 + m._43;
		pt.x = px;
		pt.y = py;
		pt.z = pz;
		return pt;
	}
	,getInvPos: function() {
		this.syncPos();
		if(this.invPos == null) {
			this.invPos = new h3d_Matrix();
			this.invPos._44 = 0;
		}
		if(this.invPos._44 == 0) {
			this.invPos.inverse3x4(this.absPos);
		}
		return this.invPos;
	}
	,addChild: function(o) {
		this.addChildAt(o,this.children.length);
	}
	,addChildAt: function(o,pos) {
		if(pos < 0) {
			pos = 0;
		}
		if(pos > this.children.length) {
			pos = this.children.length;
		}
		var p = this;
		while(p != null) {
			if(p == o) {
				throw haxe_Exception.thrown("Recursive addChild");
			}
			p = p.parent;
		}
		if(o.parent != null) {
			var old = (o.flags & 32) != 0;
			var f = 32;
			o.flags &= ~f;
			o.parent.removeChild(o);
			var f = 32;
			if(old) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
		this.children.splice(pos,0,o);
		if((this.flags & 32) == 0 && (o.flags & 32) != 0) {
			o.onRemove();
		}
		o.parent = this;
		var f = 1;
		var b = true;
		if(b) {
			o.flags |= f;
		} else {
			o.flags &= ~f;
		}
		if((this.flags & 32) != 0) {
			if((o.flags & 32) == 0) {
				o.onAdd();
			} else {
				o.onParentChanged();
			}
		}
	}
	,iterVisibleMeshes: function(callb) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			return;
		}
		if((this.flags & 4) == 0) {
			var m = ((this) instanceof h3d_scene_Mesh) ? this : null;
			if(m != null) {
				callb(m);
			}
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			o.iterVisibleMeshes(callb);
		}
	}
	,onParentChanged: function() {
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onParentChanged();
		}
	}
	,onAdd: function() {
		var f = 32;
		this.flags |= f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onAdd();
		}
	}
	,onRemove: function() {
		var f = 32;
		this.flags &= ~f;
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.onRemove();
		}
	}
	,removeChild: function(o) {
		if(HxOverrides.remove(this.children,o)) {
			if((o.flags & 32) != 0) {
				o.onRemove();
			}
			o.parent = null;
			var f = 1;
			var b = true;
			if(b) {
				o.flags |= f;
			} else {
				o.flags &= ~f;
			}
		}
	}
	,getScene: function() {
		var p = this;
		while(p.parent != null) p = p.parent;
		if(((p) instanceof h3d_scene_Scene)) {
			return p;
		} else {
			return null;
		}
	}
	,getAbsPos: function() {
		this.syncPos();
		return this.absPos;
	}
	,draw: function(ctx) {
	}
	,calcAbsPos: function() {
		this.qRot.toMatrix(this.absPos);
		this.absPos._11 *= this.scaleX;
		this.absPos._12 *= this.scaleX;
		this.absPos._13 *= this.scaleX;
		this.absPos._21 *= this.scaleY;
		this.absPos._22 *= this.scaleY;
		this.absPos._23 *= this.scaleY;
		this.absPos._31 *= this.scaleZ;
		this.absPos._32 *= this.scaleZ;
		this.absPos._33 *= this.scaleZ;
		this.absPos._41 = this.x;
		this.absPos._42 = this.y;
		this.absPos._43 = this.z;
		if(this.follow != null) {
			this.follow.syncPos();
			if((this.flags & 8) != 0) {
				var _this = this.absPos;
				var a = this.absPos;
				var b = this.parent.absPos;
				var m11 = a._11;
				var m12 = a._12;
				var m13 = a._13;
				var m21 = a._21;
				var m22 = a._22;
				var m23 = a._23;
				var a31 = a._31;
				var a32 = a._32;
				var a33 = a._33;
				var a41 = a._41;
				var a42 = a._42;
				var a43 = a._43;
				var b11 = b._11;
				var b12 = b._12;
				var b13 = b._13;
				var b21 = b._21;
				var b22 = b._22;
				var b23 = b._23;
				var b31 = b._31;
				var b32 = b._32;
				var b33 = b._33;
				var b41 = b._41;
				var b42 = b._42;
				var b43 = b._43;
				_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
				_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
				_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
				_this._14 = 0;
				_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
				_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
				_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
				_this._24 = 0;
				_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
				_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
				_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
				_this._34 = 0;
				_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
				_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
				_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
				_this._44 = 1;
				this.absPos._41 = this.x + this.follow.absPos._41;
				this.absPos._42 = this.y + this.follow.absPos._42;
				this.absPos._43 = this.z + this.follow.absPos._43;
			} else {
				this.absPos.multiply3x4(this.absPos,this.follow.absPos);
			}
		} else if(this.parent != null && (this.flags & 2048) == 0) {
			var _this = this.absPos;
			var a = this.absPos;
			var b = this.parent.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.defaultTransform != null) {
			var _this = this.absPos;
			var a = this.defaultTransform;
			var b = this.absPos;
			var m11 = a._11;
			var m12 = a._12;
			var m13 = a._13;
			var m21 = a._21;
			var m22 = a._22;
			var m23 = a._23;
			var a31 = a._31;
			var a32 = a._32;
			var a33 = a._33;
			var a41 = a._41;
			var a42 = a._42;
			var a43 = a._43;
			var b11 = b._11;
			var b12 = b._12;
			var b13 = b._13;
			var b21 = b._21;
			var b22 = b._22;
			var b23 = b._23;
			var b31 = b._31;
			var b32 = b._32;
			var b33 = b._33;
			var b41 = b._41;
			var b42 = b._42;
			var b43 = b._43;
			_this._11 = m11 * b11 + m12 * b21 + m13 * b31;
			_this._12 = m11 * b12 + m12 * b22 + m13 * b32;
			_this._13 = m11 * b13 + m12 * b23 + m13 * b33;
			_this._14 = 0;
			_this._21 = m21 * b11 + m22 * b21 + m23 * b31;
			_this._22 = m21 * b12 + m22 * b22 + m23 * b32;
			_this._23 = m21 * b13 + m22 * b23 + m23 * b33;
			_this._24 = 0;
			_this._31 = a31 * b11 + a32 * b21 + a33 * b31;
			_this._32 = a31 * b12 + a32 * b22 + a33 * b32;
			_this._33 = a31 * b13 + a32 * b23 + a33 * b33;
			_this._34 = 0;
			_this._41 = a41 * b11 + a42 * b21 + a43 * b31 + b41;
			_this._42 = a41 * b12 + a42 * b22 + a43 * b32 + b42;
			_this._43 = a41 * b13 + a42 * b23 + a43 * b33 + b43;
			_this._44 = 1;
		}
		if(this.invPos != null) {
			this.invPos._44 = 0;
		}
	}
	,sync: function(ctx) {
	}
	,syncRec: function(ctx) {
		if(this.currentAnimation != null) {
			var old = this.parent;
			var dt = ctx.elapsedTime;
			while(dt > 0 && this.currentAnimation != null) dt = this.currentAnimation.update(dt);
			if(this.currentAnimation != null && (ctx.visibleFlag && (this.flags & 2) != 0 && (this.flags & 4) == 0 || (this.flags & 64) != 0)) {
				this.currentAnimation.sync();
			}
			if(this.parent == null && old != null) {
				return;
			}
		}
		var old = ctx.visibleFlag;
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0) {
			ctx.visibleFlag = false;
		}
		if(ctx.cullingCollider != null && (this.cullingCollider == null || (this.flags & 4096) != 0)) {
			this.set_cullingCollider(ctx.cullingCollider);
			var f = 4096;
			this.flags |= f;
		} else if((this.flags & 4096) != 0) {
			this.set_cullingCollider(null);
		}
		var prevCollider = ctx.cullingCollider;
		if((this.flags & 128) != 0) {
			ctx.cullingCollider = this.cullingCollider;
		}
		var changed = (this.flags & 1) != 0;
		if(changed) {
			this.calcAbsPos();
		}
		this.sync(ctx);
		var f = 1;
		var b = this.follow != null;
		if(b) {
			this.flags |= f;
		} else {
			this.flags &= ~f;
		}
		this.lastFrame = ctx.frame;
		var p = 0;
		var len = this.children.length;
		while(p < len) {
			var c = this.children[p];
			if(c == null) {
				break;
			}
			if(c.lastFrame != ctx.frame) {
				if(changed) {
					var f = 1;
					var b = true;
					if(b) {
						c.flags |= f;
					} else {
						c.flags &= ~f;
					}
				}
				c.syncRec(ctx);
			}
			if(this.children[p] != c) {
				p = 0;
				len = this.children.length;
			} else {
				++p;
			}
		}
		ctx.visibleFlag = old;
		ctx.cullingCollider = prevCollider;
	}
	,syncPos: function() {
		if(this.parent != null) {
			this.parent.syncPos();
		}
		if((this.flags & 1) != 0) {
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
	}
	,emit: function(ctx) {
	}
	,emitRec: function(ctx) {
		if((this.flags & 2) == 0 || (this.flags & 4) != 0 && (this.flags & 128) != 0 && !ctx.computingStatic) {
			return;
		}
		if((this.flags & 1) != 0) {
			if(this.currentAnimation != null) {
				this.currentAnimation.sync();
			}
			var f = 1;
			var b = this.follow != null;
			if(b) {
				this.flags |= f;
			} else {
				this.flags &= ~f;
			}
			this.calcAbsPos();
			var _g = 0;
			var _g1 = this.children;
			while(_g < _g1.length) {
				var c = _g1[_g];
				++_g;
				var f = 1;
				var b = true;
				if(b) {
					c.flags |= f;
				} else {
					c.flags &= ~f;
				}
			}
		}
		if((this.flags & 4) == 0 || ctx.computingStatic) {
			this.emit(ctx);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.emitRec(ctx);
		}
	}
	,__class__: h3d_scene_Object
};
var h3d_scene_Mesh = function(primitive,material,parent) {
	h3d_scene_Object.call(this,parent);
	this.set_primitive(primitive);
	if(material == null) {
		material = h3d_mat_MaterialSetup.current.createMaterial();
		material.set_props(material.getDefaultProps());
	}
	this.material = material;
};
$hxClasses["h3d.scene.Mesh"] = h3d_scene_Mesh;
h3d_scene_Mesh.__name__ = "h3d.scene.Mesh";
h3d_scene_Mesh.__super__ = h3d_scene_Object;
h3d_scene_Mesh.prototype = $extend(h3d_scene_Object.prototype,{
	draw: function(ctx) {
		this.primitive.render(ctx.engine);
	}
	,emit: function(ctx) {
		var p = this.material.passes;
		while(p != null) {
			ctx.emitPass(p,this).index = 0;
			p = p.nextPass;
		}
	}
	,onAdd: function() {
		h3d_scene_Object.prototype.onAdd.call(this);
		if(this.primitive != null) {
			this.primitive.incref();
		}
	}
	,onRemove: function() {
		if(this.primitive != null) {
			this.primitive.decref();
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,set_primitive: function(prim) {
		if(prim != this.primitive && (this.flags & 32) != 0) {
			if(this.primitive != null) {
				this.primitive.decref();
			}
			if(prim != null) {
				prim.incref();
			}
		}
		return this.primitive = prim;
	}
	,__class__: h3d_scene_Mesh
});
var h3d_scene_Interactive = function(shape,parent) {
	this.hitPoint = new h3d_Vector();
	this.mouseDownButton = -1;
	this.propagateEvents = false;
	this.cancelEvents = false;
	h3d_scene_Object.call(this,parent);
	this.shape = shape;
	this.set_cursor(hxd_Cursor.Button);
};
$hxClasses["h3d.scene.Interactive"] = h3d_scene_Interactive;
h3d_scene_Interactive.__name__ = "h3d.scene.Interactive";
h3d_scene_Interactive.__interfaces__ = [hxd_Interactive];
h3d_scene_Interactive.__super__ = h3d_scene_Object;
h3d_scene_Interactive.prototype = $extend(h3d_scene_Object.prototype,{
	onAdd: function() {
		this.scene = this.getScene();
		if(this.scene != null) {
			this.scene.addEventTarget(this);
		}
		h3d_scene_Object.prototype.onAdd.call(this);
	}
	,onRemove: function() {
		if(this.scene != null) {
			this.scene.removeEventTarget(this);
			this.scene = null;
		}
		h3d_scene_Object.prototype.onRemove.call(this);
	}
	,getInteractiveScene: function() {
		return this.scene;
	}
	,handleEvent: function(e) {
		if(this.propagateEvents) {
			e.propagate = true;
		}
		if(this.cancelEvents) {
			e.cancel = true;
		}
		switch(e.kind._hx_index) {
		case 0:
			if(this.enableRightButton || e.button == 0) {
				this.mouseDownButton = e.button;
				this.onPush(e);
				if(e.cancel) {
					this.mouseDownButton = -1;
				}
			}
			break;
		case 1:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onClick(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 2:
			this.onMove(e);
			break;
		case 3:
			this.onOver(e);
			break;
		case 4:
			this.onOut(e);
			break;
		case 5:
			this.onWheel(e);
			break;
		case 6:
			this.onFocus(e);
			break;
		case 7:
			this.onFocusLost(e);
			break;
		case 8:
			this.onKeyDown(e);
			break;
		case 9:
			this.onKeyUp(e);
			break;
		case 10:
			if(this.enableRightButton || e.button == 0) {
				this.onRelease(e);
				if(this.mouseDownButton == e.button) {
					this.onReleaseOutside(e);
				}
			}
			this.mouseDownButton = -1;
			break;
		case 11:
			this.onTextInput(e);
			break;
		case 12:
			this.onCheck(e);
			break;
		}
	}
	,set_cursor: function(c) {
		this.cursor = c;
		if(this.scene != null && this.scene.events != null) {
			this.scene.events.updateCursor(this);
		}
		return c;
	}
	,onOver: function(e) {
	}
	,onOut: function(e) {
	}
	,onPush: function(e) {
	}
	,onRelease: function(e) {
	}
	,onReleaseOutside: function(e) {
	}
	,onClick: function(e) {
	}
	,onMove: function(e) {
	}
	,onWheel: function(e) {
	}
	,onFocus: function(e) {
	}
	,onFocusLost: function(e) {
	}
	,onKeyUp: function(e) {
	}
	,onKeyDown: function(e) {
	}
	,onCheck: function(e) {
	}
	,onTextInput: function(e) {
	}
	,__class__: h3d_scene_Interactive
});
var h3d_scene_Light = function(shader,parent) {
	this.priority = 0;
	this.cullingDistance = -1;
	h3d_scene_Object.call(this,parent);
	this.shader = shader;
};
$hxClasses["h3d.scene.Light"] = h3d_scene_Light;
h3d_scene_Light.__name__ = "h3d.scene.Light";
h3d_scene_Light.__super__ = h3d_scene_Object;
h3d_scene_Light.prototype = $extend(h3d_scene_Object.prototype,{
	emit: function(ctx) {
		ctx.emitLight(this);
	}
	,getShadowDirection: function() {
		return null;
	}
	,__class__: h3d_scene_Light
});
var h3d_scene_LightSystem = function() {
	this.ambientLight = new h3d_Vector(1,1,1);
};
$hxClasses["h3d.scene.LightSystem"] = h3d_scene_LightSystem;
h3d_scene_LightSystem.__name__ = "h3d.scene.LightSystem";
h3d_scene_LightSystem.prototype = {
	initGlobals: function(globals) {
	}
	,cullLights: function() {
		var l = this.ctx.lights;
		var prev = null;
		var s = new h3d_col_Sphere();
		while(l != null) {
			s.x = l.absPos._41;
			s.y = l.absPos._42;
			s.z = l.absPos._43;
			s.r = l.cullingDistance;
			if(l.cullingDistance > 0 && !this.ctx.computingStatic && !this.ctx.camera.frustum.hasSphere(s)) {
				if(prev == null) {
					this.ctx.lights = l.next;
				} else {
					prev.next = l.next;
				}
				l = l.next;
				continue;
			}
			this.lightCount++;
			l.objectDistance = 0.;
			prev = l;
			l = l.next;
		}
	}
	,initLights: function(ctx) {
		this.lightCount = 0;
		this.ctx = ctx;
		this.cullLights();
		if(this.shadowLight == null || (this.shadowLight.flags & 32) == 0) {
			var l = ctx.lights;
			while(l != null) {
				var dir = l.getShadowDirection();
				if(dir != null) {
					this.shadowLight = l;
					break;
				}
				l = l.next;
			}
		}
	}
	,computeLight: function(obj,shaders) {
		return shaders;
	}
	,__class__: h3d_scene_LightSystem
};
var h3d_scene__$RenderContext_SharedGlobal = function(gid,value) {
	this.gid = gid;
	this.value = value;
};
$hxClasses["h3d.scene._RenderContext.SharedGlobal"] = h3d_scene__$RenderContext_SharedGlobal;
h3d_scene__$RenderContext_SharedGlobal.__name__ = "h3d.scene._RenderContext.SharedGlobal";
h3d_scene__$RenderContext_SharedGlobal.prototype = {
	__class__: h3d_scene__$RenderContext_SharedGlobal
};
var h3d_scene_RenderContext = function() {
	h3d_impl_RenderContext.call(this);
	this.cachedShaderList = [];
	this.cachedPassObjects = [];
};
$hxClasses["h3d.scene.RenderContext"] = h3d_scene_RenderContext;
h3d_scene_RenderContext.__name__ = "h3d.scene.RenderContext";
h3d_scene_RenderContext.__super__ = h3d_impl_RenderContext;
h3d_scene_RenderContext.prototype = $extend(h3d_impl_RenderContext.prototype,{
	start: function() {
		this.sharedGlobals = [];
		this.lights = null;
		this.drawPass = null;
		this.passes = null;
		this.lights = null;
		this.cachedPos = 0;
		this.visibleFlag = true;
		this.time += this.elapsedTime;
		this.frame++;
	}
	,setGlobalID: function(gid,value) {
		var _g = 0;
		var _g1 = this.sharedGlobals;
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			if(g.gid == gid) {
				g.value = value;
				return;
			}
		}
		this.sharedGlobals.push(new h3d_scene__$RenderContext_SharedGlobal(gid,value));
	}
	,emitPass: function(pass,obj) {
		var o = this.allocPool;
		if(o == null) {
			o = new h3d_pass_PassObject();
			o.nextAlloc = this.allocFirst;
			this.allocFirst = o;
		} else {
			this.allocPool = o.nextAlloc;
		}
		o.pass = pass;
		o.obj = obj;
		o.next = this.passes;
		this.passes = o;
		return o;
	}
	,allocShaderList: function(s,next) {
		var sl = this.cachedShaderList[this.cachedPos++];
		if(sl == null) {
			sl = new hxsl_ShaderList(null);
			this.cachedShaderList[this.cachedPos - 1] = sl;
		}
		sl.s = s;
		sl.next = next;
		return sl;
	}
	,emitLight: function(l) {
		l.next = this.lights;
		this.lights = l;
	}
	,done: function() {
		this.drawPass = null;
		var p = this.allocFirst;
		while(p != null && p != this.allocPool) {
			p.obj = null;
			p.pass = null;
			p.shader = null;
			p.shaders = null;
			p.next = null;
			p.index = 0;
			p.texture = 0;
			p = p.nextAlloc;
		}
		if(this.allocPool != null) {
			this.allocFirst = this.allocFirst.nextAlloc;
		}
		this.allocPool = this.allocFirst;
		var _g = 0;
		var _g1 = this.cachedShaderList;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			c.s = null;
			c.next = null;
		}
		this.passes = null;
		this.lights = null;
	}
	,__class__: h3d_scene_RenderContext
});
var h3d_scene_PassObjects = function() {
	this.passes = new h3d_pass_PassList();
};
$hxClasses["h3d.scene.PassObjects"] = h3d_scene_PassObjects;
h3d_scene_PassObjects.__name__ = "h3d.scene.PassObjects";
h3d_scene_PassObjects.prototype = {
	__class__: h3d_scene_PassObjects
};
var h3d_scene_Renderer = function() {
	this.hasSetTarget = false;
	this.emptyPasses = new h3d_pass_PassList();
	this.allPasses = [];
	this.passObjects = new haxe_ds_StringMap();
	this.set_props(this.getDefaultProps());
	var _g = $bind(this,this.depthSort);
	var frontToBack = true;
	this.frontToBack = function(passes) {
		_g(frontToBack,passes);
	};
	var _g1 = $bind(this,this.depthSort);
	var frontToBack1 = false;
	this.backToFront = function(passes) {
		_g1(frontToBack1,passes);
	};
};
$hxClasses["h3d.scene.Renderer"] = h3d_scene_Renderer;
h3d_scene_Renderer.__name__ = "h3d.scene.Renderer";
h3d_scene_Renderer.__super__ = hxd_impl_AnyProps;
h3d_scene_Renderer.prototype = $extend(hxd_impl_AnyProps.prototype,{
	depthSort: function(frontToBack,passes) {
		var cam = this.ctx.camera.m;
		var _g_o = passes.current;
		while(_g_o != null) {
			var tmp = _g_o;
			_g_o = _g_o.next;
			var p = tmp;
			var z = p.obj.absPos._41 * cam._13 + p.obj.absPos._42 * cam._23 + p.obj.absPos._43 * cam._33 + cam._43;
			var w = p.obj.absPos._41 * cam._14 + p.obj.absPos._42 * cam._24 + p.obj.absPos._43 * cam._34 + cam._44;
			p.depth = z / w;
		}
		if(frontToBack) {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? 1 : -1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		} else {
			var list = passes.current;
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || (p.pass.layer == q.pass.layer ? p.depth > q.depth ? -1 : 1 : p.pass.layer - q.pass.layer) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			passes.current = tmp;
		}
	}
	,resetTarget: function() {
		if(this.hasSetTarget) {
			this.ctx.engine.popTarget();
			this.hasSetTarget = false;
		}
	}
	,has: function(name) {
		return this.passObjects.h[name] != null;
	}
	,get: function(name) {
		var p = this.passObjects.h[name];
		if(p == null) {
			return this.emptyPasses;
		}
		p.rendered = true;
		return p.passes;
	}
	,render: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,computeStatic: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,start: function() {
	}
	,process: function(passes) {
		this.hasSetTarget = false;
		var _g = 0;
		var _g1 = this.allPasses;
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			p.setContext(this.ctx);
		}
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = p;
		}
		this.ctx.textures.begin();
		if(this.ctx.computingStatic) {
			this.computeStatic();
		} else {
			this.render();
		}
		this.resetTarget();
		var _g = 0;
		while(_g < passes.length) {
			var p = passes[_g];
			++_g;
			this.passObjects.h[p.name] = null;
		}
	}
	,__class__: h3d_scene_Renderer
});
var h3d_scene_Scene = function(createRenderer,createLightSystem) {
	if(createLightSystem == null) {
		createLightSystem = true;
	}
	if(createRenderer == null) {
		createRenderer = true;
	}
	h3d_scene_Object.call(this,null);
	this.window = hxd_Window.getInstance();
	this.eventListeners = [];
	this.hitInteractives = [];
	this.interactives = [];
	this.camera = new h3d_Camera();
	var engine = h3d_Engine.CURRENT;
	if(engine != null) {
		this.camera.screenRatio = engine.width / engine.height;
	}
	this.ctx = new h3d_scene_RenderContext();
	if(createRenderer) {
		this.set_renderer(h3d_mat_MaterialSetup.current.createRenderer());
	}
	if(createLightSystem) {
		this.lightSystem = h3d_mat_MaterialSetup.current.createLightSystem();
	}
};
$hxClasses["h3d.scene.Scene"] = h3d_scene_Scene;
h3d_scene_Scene.__name__ = "h3d.scene.Scene";
h3d_scene_Scene.__interfaces__ = [hxd_InteractiveScene,h3d_IDrawable];
h3d_scene_Scene.__super__ = h3d_scene_Object;
h3d_scene_Scene.prototype = $extend(h3d_scene_Object.prototype,{
	setEvents: function(events) {
		this.events = events;
	}
	,dispatchListeners: function(event) {
		var _g = 0;
		var _g1 = this.eventListeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			l(event);
			if(!event.propagate) {
				break;
			}
		}
	}
	,set_renderer: function(r) {
		this.renderer = r;
		if(r != null) {
			r.ctx = this.ctx;
		}
		return r;
	}
	,sortHitPointByCameraDistance: function(i1,i2) {
		var z1 = i1.hitPoint.w;
		var z2 = i2.hitPoint.w;
		if(z1 > z2) {
			return -1;
		}
		return 1;
	}
	,dispatchEvent: function(event,to) {
		var i = to;
		i.handleEvent(event);
	}
	,isInteractiveVisible: function(i) {
		var o = i;
		while(o != this) {
			if(o == null || (o.flags & 2) == 0) {
				return false;
			}
			o = o.parent;
		}
		return true;
	}
	,handleEvent: function(event,last) {
		if(this.interactives.length == 0) {
			return null;
		}
		if(this.hitInteractives.length == 0) {
			var screenX = (event.relX / this.window.get_width() - 0.5) * 2;
			var screenY = -(event.relY / this.window.get_height() - 0.5) * 2;
			var p0 = this.camera.unproject(screenX,screenY,0);
			var p1 = this.camera.unproject(screenX,screenY,1);
			var x = p0.x;
			var y = p0.y;
			var z = p0.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p1_x = x;
			var p1_y = y;
			var p1_z = z;
			var x = p1.x;
			var y = p1.y;
			var z = p1.z;
			if(z == null) {
				z = 0.;
			}
			if(y == null) {
				y = 0.;
			}
			if(x == null) {
				x = 0.;
			}
			var p2_x = x;
			var p2_y = y;
			var p2_z = z;
			var r = new h3d_col_Ray();
			r.px = p1_x;
			r.py = p1_y;
			r.pz = p1_z;
			r.lx = p2_x - p1_x;
			r.ly = p2_y - p1_y;
			r.lz = p2_z - p1_z;
			r.normalize();
			var r1 = r;
			var saveR_px = r1.px;
			var saveR_py = r1.py;
			var saveR_pz = r1.pz;
			var saveR_lx = r1.lx;
			var saveR_ly = r1.ly;
			var saveR_lz = r1.lz;
			var priority = -2147483648;
			var _g = 0;
			var _g1 = this.interactives;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i.priority < priority) {
					continue;
				}
				var p = i;
				while(p != null && (p.flags & 2) != 0) p = p.parent;
				if(p != null) {
					continue;
				}
				var minv = i.getInvPos();
				var x = r1.px;
				var y = r1.py;
				var z = r1.pz;
				if(z == null) {
					z = 0.;
				}
				if(y == null) {
					y = 0.;
				}
				if(x == null) {
					x = 0.;
				}
				var p_x = x;
				var p_y = y;
				var p_z = z;
				var p_w = 1.;
				var px = p_x * minv._11 + p_y * minv._21 + p_z * minv._31 + p_w * minv._41;
				var py = p_x * minv._12 + p_y * minv._22 + p_z * minv._32 + p_w * minv._42;
				var pz = p_x * minv._13 + p_y * minv._23 + p_z * minv._33 + p_w * minv._43;
				p_x = px;
				p_y = py;
				p_z = pz;
				r1.px = p_x;
				r1.py = p_y;
				r1.pz = p_z;
				var x1 = r1.lx;
				var y1 = r1.ly;
				var z1 = r1.lz;
				if(z1 == null) {
					z1 = 0.;
				}
				if(y1 == null) {
					y1 = 0.;
				}
				if(x1 == null) {
					x1 = 0.;
				}
				var l_x = x1;
				var l_y = y1;
				var l_z = z1;
				var l_w = 1.;
				var px1 = l_x * minv._11 + l_y * minv._21 + l_z * minv._31;
				var py1 = l_x * minv._12 + l_y * minv._22 + l_z * minv._32;
				var pz1 = l_x * minv._13 + l_y * minv._23 + l_z * minv._33;
				l_x = px1;
				l_y = py1;
				l_z = pz1;
				r1.lx = l_x;
				r1.ly = l_y;
				r1.lz = l_z;
				r1.normalize();
				if(r1.lx != r1.lx) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var hit = i.shape.rayIntersection(r1,i.bestMatch);
				if(hit < 0) {
					r1.px = saveR_px;
					r1.py = saveR_py;
					r1.pz = saveR_pz;
					r1.lx = saveR_lx;
					r1.ly = saveR_ly;
					r1.lz = saveR_lz;
					continue;
				}
				var x2 = r1.px + hit * r1.lx;
				var y2 = r1.py + hit * r1.ly;
				var z2 = r1.pz + hit * r1.lz;
				if(z2 == null) {
					z2 = 0.;
				}
				if(y2 == null) {
					y2 = 0.;
				}
				if(x2 == null) {
					x2 = 0.;
				}
				var hitPoint_x = x2;
				var hitPoint_y = y2;
				var hitPoint_z = z2;
				r1.px = saveR_px;
				r1.py = saveR_py;
				r1.pz = saveR_pz;
				r1.lx = saveR_lx;
				r1.ly = saveR_ly;
				r1.lz = saveR_lz;
				i.hitPoint.x = hitPoint_x;
				i.hitPoint.y = hitPoint_y;
				i.hitPoint.z = hitPoint_z;
				if(i.priority > priority) {
					while(this.hitInteractives.length > 0) this.hitInteractives.pop();
					priority = i.priority;
				}
				this.hitInteractives.push(i);
			}
			if(this.hitInteractives.length == 0) {
				return null;
			}
			if(this.hitInteractives.length > 1) {
				var _g = 0;
				var _g1 = this.hitInteractives;
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					var m = i.invPos;
					var wfactor = 0.;
					if(i.preciseShape != null) {
						var x = r1.px;
						var y = r1.py;
						var z = r1.pz;
						if(z == null) {
							z = 0.;
						}
						if(y == null) {
							y = 0.;
						}
						if(x == null) {
							x = 0.;
						}
						var p_x = x;
						var p_y = y;
						var p_z = z;
						var p_w = 1.;
						var px = p_x * m._11 + p_y * m._21 + p_z * m._31 + p_w * m._41;
						var py = p_x * m._12 + p_y * m._22 + p_z * m._32 + p_w * m._42;
						var pz = p_x * m._13 + p_y * m._23 + p_z * m._33 + p_w * m._43;
						p_x = px;
						p_y = py;
						p_z = pz;
						r1.px = p_x;
						r1.py = p_y;
						r1.pz = p_z;
						var x1 = r1.lx;
						var y1 = r1.ly;
						var z1 = r1.lz;
						if(z1 == null) {
							z1 = 0.;
						}
						if(y1 == null) {
							y1 = 0.;
						}
						if(x1 == null) {
							x1 = 0.;
						}
						var l_x = x1;
						var l_y = y1;
						var l_z = z1;
						var l_w = 1.;
						var px1 = l_x * m._11 + l_y * m._21 + l_z * m._31;
						var py1 = l_x * m._12 + l_y * m._22 + l_z * m._32;
						var pz1 = l_x * m._13 + l_y * m._23 + l_z * m._33;
						l_x = px1;
						l_y = py1;
						l_z = pz1;
						r1.lx = l_x;
						r1.ly = l_y;
						r1.lz = l_z;
						r1.normalize();
						var hit = i.preciseShape.rayIntersection(r1,i.bestMatch);
						if(hit > 0) {
							var x2 = r1.px + hit * r1.lx;
							var y2 = r1.py + hit * r1.ly;
							var z2 = r1.pz + hit * r1.lz;
							if(z2 == null) {
								z2 = 0.;
							}
							if(y2 == null) {
								y2 = 0.;
							}
							if(x2 == null) {
								x2 = 0.;
							}
							var hitPoint_x = x2;
							var hitPoint_y = y2;
							var hitPoint_z = z2;
							i.hitPoint.x = hitPoint_x;
							i.hitPoint.y = hitPoint_y;
							i.hitPoint.z = hitPoint_z;
						} else {
							wfactor = 1.;
						}
						r1.px = saveR_px;
						r1.py = saveR_py;
						r1.pz = saveR_pz;
						r1.lx = saveR_lx;
						r1.ly = saveR_ly;
						r1.lz = saveR_lz;
					}
					var _this = i.hitPoint;
					var x3 = _this.x;
					var y3 = _this.y;
					var z3 = _this.z;
					var w = _this.w;
					if(w == null) {
						w = 1.;
					}
					if(z3 == null) {
						z3 = 0.;
					}
					if(y3 == null) {
						y3 = 0.;
					}
					if(x3 == null) {
						x3 = 0.;
					}
					var p_x1 = x3;
					var p_y1 = y3;
					var p_z1 = z3;
					var p_w1 = w;
					p_w1 = 1;
					var m1 = i.absPos;
					var px2 = p_x1 * m1._11 + p_y1 * m1._21 + p_z1 * m1._31 + p_w1 * m1._41;
					var py2 = p_x1 * m1._12 + p_y1 * m1._22 + p_z1 * m1._32 + p_w1 * m1._42;
					var pz2 = p_x1 * m1._13 + p_y1 * m1._23 + p_z1 * m1._33 + p_w1 * m1._43;
					p_x1 = px2;
					p_y1 = py2;
					p_z1 = pz2;
					var m2 = this.camera.m;
					var px3 = p_x1 * m2._11 + p_y1 * m2._21 + p_z1 * m2._31 + p_w1 * m2._41;
					var py3 = p_x1 * m2._12 + p_y1 * m2._22 + p_z1 * m2._32 + p_w1 * m2._42;
					var pz3 = p_x1 * m2._13 + p_y1 * m2._23 + p_z1 * m2._33 + p_w1 * m2._43;
					var iw = 1 / (p_x1 * m2._14 + p_y1 * m2._24 + p_z1 * m2._34 + p_w1 * m2._44);
					p_x1 = px3 * iw;
					p_y1 = py3 * iw;
					p_z1 = pz3 * iw;
					p_w1 = 1;
					i.hitPoint.w = p_z1 + wfactor;
				}
				this.hitInteractives.sort($bind(this,this.sortHitPointByCameraDistance));
			}
			this.hitInteractives.unshift(null);
		}
		while(this.hitInteractives.length > 0) {
			var i = this.hitInteractives.pop();
			if(i == null) {
				return null;
			}
			event.relX = i.hitPoint.x;
			event.relY = i.hitPoint.y;
			event.relZ = i.hitPoint.z;
			i.handleEvent(event);
			if(event.cancel) {
				event.cancel = false;
				event.propagate = false;
				continue;
			}
			if(!event.propagate) {
				while(this.hitInteractives.length > 0) this.hitInteractives.pop();
			}
			return i;
		}
		return null;
	}
	,addEventTarget: function(i) {
		if(this.interactives.indexOf(i) >= 0) {
			throw haxe_Exception.thrown("assert");
		}
		this.interactives.push(i);
	}
	,removeEventTarget: function(i) {
		if(HxOverrides.remove(this.interactives,i)) {
			if(this.events != null) {
				this.events.onRemove(i);
			}
			HxOverrides.remove(this.hitInteractives,i);
		}
	}
	,setElapsedTime: function(elapsedTime) {
		this.ctx.elapsedTime = elapsedTime;
	}
	,render: function(engine) {
		if((this.flags & 32) == 0) {
			this.onAdd();
		}
		var t = engine.getCurrentTarget();
		if(t == null) {
			this.camera.screenRatio = engine.width / engine.height;
		} else {
			this.camera.screenRatio = t.width / t.height;
		}
		this.camera.update();
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,1);
		}
		this.ctx.camera = this.camera;
		this.ctx.engine = engine;
		this.ctx.scene = this;
		this.ctx.start();
		this.renderer.start();
		this.syncRec(this.ctx);
		this.emitRec(this.ctx);
		var list = this.ctx.passes;
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || p.pass.passId - q.pass.passId <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.ctx.passes = tmp;
		var curPass = this.ctx.passes;
		var passes = [];
		var passIndex = -1;
		while(curPass != null) {
			var passId = curPass.pass.passId;
			var p = curPass;
			var prev = null;
			while(p != null && p.pass.passId == passId) {
				prev = p;
				p = p.next;
			}
			prev.next = null;
			var pobjs = this.ctx.cachedPassObjects[++passIndex];
			if(pobjs == null) {
				pobjs = new h3d_scene_PassObjects();
				this.ctx.cachedPassObjects[passIndex] = pobjs;
			}
			pobjs.name = curPass.pass.name;
			var _this = pobjs.passes;
			_this.current = curPass;
			_this.discarded = _this.lastDisc = null;
			passes.push(pobjs);
			curPass = p;
		}
		if(this.lightSystem != null) {
			this.ctx.lightSystem = this.lightSystem;
			this.lightSystem.initLights(this.ctx);
		}
		this.renderer.process(passes);
		if(this.camera.rightHanded) {
			engine.driver.setRenderFlag(h3d_impl_RenderFlag.CameraHandness,0);
		}
		this.ctx.done();
		this.ctx.scene = null;
		this.ctx.camera = null;
		this.ctx.engine = null;
		var _g = 0;
		var _g1 = passIndex;
		while(_g < _g1) {
			var i = _g++;
			var p = this.ctx.cachedPassObjects[i];
			p.name = null;
			var _this = p.passes;
			_this.current = null;
			_this.discarded = _this.lastDisc = null;
		}
	}
	,__class__: h3d_scene_Scene
});
var h3d_scene_fwd_LightSystem = function() {
	this.perPixelLighting = true;
	this.maxLightsPerObject = 6;
	h3d_scene_LightSystem.call(this);
	var _this = this.ambientLight;
	var x = 0.5;
	var y = 0.5;
	var z = 0.5;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.ambientShader = new h3d_shader_AmbientLight();
	this.set_additiveLighting(true);
};
$hxClasses["h3d.scene.fwd.LightSystem"] = h3d_scene_fwd_LightSystem;
h3d_scene_fwd_LightSystem.__name__ = "h3d.scene.fwd.LightSystem";
h3d_scene_fwd_LightSystem.__super__ = h3d_scene_LightSystem;
h3d_scene_fwd_LightSystem.prototype = $extend(h3d_scene_LightSystem.prototype,{
	set_additiveLighting: function(b) {
		var value = this.ambientShader;
		var _this = ((value) instanceof h3d_shader_AmbientLight) ? value : null;
		_this.constModified = true;
		return _this.additive__ = b;
	}
	,initLights: function(ctx) {
		h3d_scene_LightSystem.prototype.initLights.call(this,ctx);
		if(this.lightCount <= this.maxLightsPerObject) {
			var list = ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			ctx.lights = tmp;
		}
	}
	,initGlobals: function(globals) {
		globals.set("global.ambientLight",this.ambientLight);
		globals.set("global.perPixelLighting",this.perPixelLighting);
	}
	,sortLight: function(l1,l2) {
		var p = l1.priority - l2.priority;
		if(p != 0) {
			return -p;
		}
		if(l1.objectDistance < l2.objectDistance) {
			return -1;
		} else {
			return 1;
		}
	}
	,computeLight: function(obj,shaders) {
		var _gthis = this;
		if(this.lightCount > this.maxLightsPerObject) {
			var l = this.ctx.lights;
			while(l != null) {
				if((obj.flags & 16) != 0) {
					var dx = l.absPos._41 - this.ctx.camera.target.x;
					var dy = l.absPos._42 - this.ctx.camera.target.y;
					var dz = l.absPos._43 - this.ctx.camera.target.z;
					if(dz == null) {
						dz = 0.;
					}
					l.objectDistance = dx * dx + dy * dy + dz * dz;
				} else {
					var dx1 = l.absPos._41 - obj.absPos._41;
					var dy1 = l.absPos._42 - obj.absPos._42;
					var dz1 = l.absPos._43 - obj.absPos._43;
					if(dz1 == null) {
						dz1 = 0.;
					}
					l.objectDistance = dx1 * dx1 + dy1 * dy1 + dz1 * dz1;
				}
				l = l.next;
			}
			var list = this.ctx.lights;
			var cmp = $bind(this,this.sortLight);
			var tmp;
			if(list == null) {
				tmp = null;
			} else {
				var insize = 1;
				var nmerges;
				var psize = 0;
				var qsize = 0;
				var p;
				var q;
				var e;
				var tail;
				while(true) {
					p = list;
					list = null;
					tail = null;
					nmerges = 0;
					while(p != null) {
						++nmerges;
						q = p;
						psize = 0;
						var _g = 0;
						var _g1 = insize;
						while(_g < _g1) {
							var i = _g++;
							++psize;
							q = q.next;
							if(q == null) {
								break;
							}
						}
						qsize = insize;
						while(psize > 0 || qsize > 0 && q != null) {
							if(psize == 0) {
								e = q;
								q = q.next;
								--qsize;
							} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
								e = p;
								p = p.next;
								--psize;
							} else {
								e = q;
								q = q.next;
								--qsize;
							}
							if(tail != null) {
								tail.next = e;
							} else {
								list = e;
							}
							tail = e;
						}
						p = q;
					}
					tail.next = null;
					if(nmerges <= 1) {
						break;
					}
					insize *= 2;
				}
				tmp = list;
			}
			this.ctx.lights = tmp;
		}
		shaders = _gthis.ctx.allocShaderList(this.ambientShader,shaders);
		var l = this.ctx.lights;
		var i = 0;
		while(l != null) {
			if(i++ == this.maxLightsPerObject) {
				break;
			}
			shaders = _gthis.ctx.allocShaderList(l.shader,shaders);
			l = l.next;
		}
		return shaders;
	}
	,__class__: h3d_scene_fwd_LightSystem
});
var h3d_scene_fwd_DepthPass = function() {
	this.enableSky = false;
	h3d_pass_Default.call(this,"depth");
	this.depthMapId = hxsl_Globals.allocID("depthMap");
};
$hxClasses["h3d.scene.fwd.DepthPass"] = h3d_scene_fwd_DepthPass;
h3d_scene_fwd_DepthPass.__name__ = "h3d.scene.fwd.DepthPass";
h3d_scene_fwd_DepthPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_DepthPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackFloat(hxsl_Output.Value("output.depth"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("depthMap",this.ctx.engine.width,this.ctx.engine.height,true);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(this.enableSky ? 0 : 16711680,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.depthMapId,{ texture : texture});
	}
	,__class__: h3d_scene_fwd_DepthPass
});
var h3d_scene_fwd_NormalPass = function() {
	h3d_pass_Default.call(this,"normal");
	this.normalMapId = hxsl_Globals.allocID("normalMap");
};
$hxClasses["h3d.scene.fwd.NormalPass"] = h3d_scene_fwd_NormalPass;
h3d_scene_fwd_NormalPass.__name__ = "h3d.scene.fwd.NormalPass";
h3d_scene_fwd_NormalPass.__super__ = h3d_pass_Default;
h3d_scene_fwd_NormalPass.prototype = $extend(h3d_pass_Default.prototype,{
	getOutputs: function() {
		return [hxsl_Output.PackNormal(hxsl_Output.Value("output.normal"))];
	}
	,draw: function(passes,sort) {
		var texture = this.ctx.textures.allocTarget("normalMap",this.ctx.engine.width,this.ctx.engine.height);
		this.ctx.engine.pushTarget(texture);
		this.ctx.engine.clear(8421504,1);
		h3d_pass_Default.prototype.draw.call(this,passes,sort);
		this.ctx.engine.popTarget();
		this.ctx.setGlobalID(this.normalMapId,texture);
	}
	,__class__: h3d_scene_fwd_NormalPass
});
var h3d_scene_fwd_Renderer = function() {
	this.shadow = new h3d_pass_DefaultShadowMap(1024);
	this.normal = new h3d_scene_fwd_NormalPass();
	this.depth = new h3d_scene_fwd_DepthPass();
	h3d_scene_Renderer.call(this);
	this.defaultPass = new h3d_pass_Default("default");
	this.allPasses = [this.defaultPass,this.depth,this.normal,this.shadow];
};
$hxClasses["h3d.scene.fwd.Renderer"] = h3d_scene_fwd_Renderer;
h3d_scene_fwd_Renderer.__name__ = "h3d.scene.fwd.Renderer";
h3d_scene_fwd_Renderer.__super__ = h3d_scene_Renderer;
h3d_scene_fwd_Renderer.prototype = $extend(h3d_scene_Renderer.prototype,{
	renderPass: function(p,passes,sort) {
		p.draw(passes,sort);
	}
	,render: function() {
		if(this.has("shadow")) {
			this.renderPass(this.shadow,this.get("shadow"));
		}
		if(this.has("depth")) {
			this.renderPass(this.depth,this.get("depth"));
		}
		if(this.has("normal")) {
			this.renderPass(this.normal,this.get("normal"));
		}
		this.renderPass(this.defaultPass,this.get("default"));
		this.renderPass(this.defaultPass,this.get("alpha"),this.backToFront);
		this.renderPass(this.defaultPass,this.get("additive"));
	}
	,__class__: h3d_scene_fwd_Renderer
});
var h3d_shader_AmbientLight = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.AmbientLight"] = h3d_shader_AmbientLight;
h3d_shader_AmbientLight.__name__ = "h3d.shader.AmbientLight";
h3d_shader_AmbientLight.__super__ = hxsl_Shader;
h3d_shader_AmbientLight.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 2;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_AmbientLight
});
var h3d_shader_Base2d = function() {
	this.viewportB__ = new h3d_Vector();
	this.viewportA__ = new h3d_Vector();
	this.halfPixelInverse__ = new h3d_Vector();
	this.uvPos__ = new h3d_Vector();
	this.filterMatrixB__ = new h3d_Vector();
	this.filterMatrixA__ = new h3d_Vector();
	this.absoluteMatrixB__ = new h3d_Vector();
	this.absoluteMatrixA__ = new h3d_Vector();
	this.color__ = new h3d_Vector();
	this.zValue__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Base2d"] = h3d_shader_Base2d;
h3d_shader_Base2d.__name__ = "h3d.shader.Base2d";
h3d_shader_Base2d.__super__ = hxsl_Shader;
h3d_shader_Base2d.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isRelative__) {
			this.constBits |= 1;
		}
		if(this.hasUVPos__) {
			this.constBits |= 2;
		}
		if(this.killAlpha__) {
			this.constBits |= 4;
		}
		if(this.pixelAlign__) {
			this.constBits |= 8;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.zValue__;
		case 1:
			return this.texture__;
		case 2:
			return this.isRelative__;
		case 3:
			return this.color__;
		case 4:
			return this.absoluteMatrixA__;
		case 5:
			return this.absoluteMatrixB__;
		case 6:
			return this.filterMatrixA__;
		case 7:
			return this.filterMatrixB__;
		case 8:
			return this.hasUVPos__;
		case 9:
			return this.uvPos__;
		case 10:
			return this.killAlpha__;
		case 11:
			return this.pixelAlign__;
		case 12:
			return this.halfPixelInverse__;
		case 13:
			return this.viewportA__;
		case 14:
			return this.viewportB__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.zValue__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Base2d
});
var h3d_shader_BaseMesh = function() {
	this.specularColor__ = new h3d_Vector();
	this.specularAmount__ = 0;
	this.specularPower__ = 0;
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.specularColor__;
	var x = 1;
	var y = 1;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	this.specularPower__ = 50;
	this.specularAmount__ = 1;
};
$hxClasses["h3d.shader.BaseMesh"] = h3d_shader_BaseMesh;
h3d_shader_BaseMesh.__name__ = "h3d.shader.BaseMesh";
h3d_shader_BaseMesh.__super__ = hxsl_Shader;
h3d_shader_BaseMesh.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.color__;
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		case 3:
			return this.specularColor__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.specularPower__;
		case 2:
			return this.specularAmount__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_BaseMesh
});
var h3d_shader_Blur = function() {
	this.cubeDir__ = new h3d_Matrix();
	this.fixedColor__ = new h3d_Vector();
	this.pixel__ = new h3d_Vector();
	this.offsets__ = [];
	this.values__ = [];
	this.Quality__ = 0;
	this.cameraInverseViewProj__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.Blur"] = h3d_shader_Blur;
h3d_shader_Blur.__name__ = "h3d.shader.Blur";
h3d_shader_Blur.__super__ = h3d_shader_ScreenShader;
h3d_shader_Blur.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Quality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("Quality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		if(this.isDepth__) {
			this.constBits |= 256;
		}
		if(this.hasFixedColor__) {
			this.constBits |= 512;
		}
		if(this.smoothFixedColor__) {
			this.constBits |= 1024;
		}
		if(this.isDepthDependant__) {
			this.constBits |= 2048;
		}
		if(this.hasNormal__) {
			this.constBits |= 4096;
		}
		if(this.isCube__) {
			this.constBits |= 8192;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.cameraInverseViewProj__;
		case 2:
			return this.texture__;
		case 3:
			return this.depthTexture__;
		case 4:
			return this.Quality__;
		case 5:
			return this.isDepth__;
		case 6:
			return this.values__;
		case 7:
			return this.offsets__;
		case 8:
			return this.pixel__;
		case 9:
			return this.hasFixedColor__;
		case 10:
			return this.smoothFixedColor__;
		case 11:
			return this.fixedColor__;
		case 12:
			return this.isDepthDependant__;
		case 13:
			return this.hasNormal__;
		case 14:
			return this.normalTexture__;
		case 15:
			return this.isCube__;
		case 16:
			return this.cubeTexture__;
		case 17:
			return this.cubeDir__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Blur
});
var h3d_shader_ShaderBuffers = function(s) {
	this.globals = new Float32Array(s.globalsSize << 2);
	this.params = new Float32Array(s.paramsSize << 2);
	var this1 = new Array(s.texturesCount);
	this.tex = this1;
	var tmp;
	if(s.bufferCount > 0) {
		var this1 = new Array(s.bufferCount);
		tmp = this1;
	} else {
		tmp = null;
	}
	this.buffers = tmp;
};
$hxClasses["h3d.shader.ShaderBuffers"] = h3d_shader_ShaderBuffers;
h3d_shader_ShaderBuffers.__name__ = "h3d.shader.ShaderBuffers";
h3d_shader_ShaderBuffers.prototype = {
	grow: function(s) {
		var ng = s.globalsSize << 2;
		var np = s.paramsSize << 2;
		var nt = s.texturesCount;
		var nb = s.bufferCount;
		if(this.globals.length < ng) {
			this.globals = new Float32Array(ng);
		}
		if(this.params.length < np) {
			this.params = new Float32Array(np);
		}
		if(this.tex.length < nt) {
			var this1 = new Array(nt);
			this.tex = this1;
		}
		if(nb > 0 && (this.buffers == null || this.buffers.length < nb)) {
			var this1 = new Array(nb);
			this.buffers = this1;
		}
	}
	,__class__: h3d_shader_ShaderBuffers
};
var h3d_shader_Buffers = function(s) {
	this.vertex = new h3d_shader_ShaderBuffers(s.vertex);
	this.fragment = new h3d_shader_ShaderBuffers(s.fragment);
};
$hxClasses["h3d.shader.Buffers"] = h3d_shader_Buffers;
h3d_shader_Buffers.__name__ = "h3d.shader.Buffers";
h3d_shader_Buffers.prototype = {
	__class__: h3d_shader_Buffers
};
var h3d_shader_ColorAdd = function(color) {
	if(color == null) {
		color = 0;
	}
	this.color__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.color__;
	_this.x = (color >> 16 & 255) / 255;
	_this.y = (color >> 8 & 255) / 255;
	_this.z = (color & 255) / 255;
	_this.w = (color >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorAdd"] = h3d_shader_ColorAdd;
h3d_shader_ColorAdd.__name__ = "h3d.shader.ColorAdd";
h3d_shader_ColorAdd.__super__ = hxsl_Shader;
h3d_shader_ColorAdd.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.color__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorAdd
});
var h3d_shader_ColorKey = function(v) {
	if(v == null) {
		v = 0;
	}
	this.colorKey__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.colorKey__;
	_this.x = (v >> 16 & 255) / 255;
	_this.y = (v >> 8 & 255) / 255;
	_this.z = (v & 255) / 255;
	_this.w = (v >>> 24) / 255;
};
$hxClasses["h3d.shader.ColorKey"] = h3d_shader_ColorKey;
h3d_shader_ColorKey.__name__ = "h3d.shader.ColorKey";
h3d_shader_ColorKey.__super__ = hxsl_Shader;
h3d_shader_ColorKey.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.colorKey__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorKey
});
var h3d_shader_ColorMatrix = function(m) {
	this.matrix__ = new h3d_Matrix();
	hxsl_Shader.call(this);
	if(m != null) {
		this.matrix__.loadValues(m);
	} else {
		this.matrix__.identity();
	}
};
$hxClasses["h3d.shader.ColorMatrix"] = h3d_shader_ColorMatrix;
h3d_shader_ColorMatrix.__name__ = "h3d.shader.ColorMatrix";
h3d_shader_ColorMatrix.__super__ = hxsl_Shader;
h3d_shader_ColorMatrix.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.matrix__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_ColorMatrix
});
var h3d_shader_DirShadow = function() {
	this.poissonDiskVeryHigh__ = [];
	this.poissonDiskHigh__ = [];
	this.poissonDiskLow__ = [];
	this.shadowBias__ = 0;
	this.shadowProj__ = new h3d_Matrix();
	this.shadowMapChannel__ = hxsl_Channel.Unknown;
	this.shadowRes__ = new h3d_Vector();
	this.pcfScale__ = 0;
	this.pcfQuality__ = 0;
	this.shadowPower__ = 0;
	hxsl_Shader.call(this);
	this.poissonDiskLow__ = [new h3d_Vector(-0.942,-0.399),new h3d_Vector(0.945,-0.768),new h3d_Vector(-0.094,-0.929),new h3d_Vector(0.344,0.293)];
	this.poissonDiskHigh__ = [new h3d_Vector(-0.326,-0.406),new h3d_Vector(-0.840,-0.074),new h3d_Vector(-0.696,0.457),new h3d_Vector(-0.203,0.621),new h3d_Vector(0.962,-0.195),new h3d_Vector(0.473,-0.480),new h3d_Vector(0.519,0.767),new h3d_Vector(0.185,-0.893),new h3d_Vector(0.507,0.064),new h3d_Vector(0.896,0.412),new h3d_Vector(-0.322,-0.933),new h3d_Vector(-0.792,-0.598)];
	this.poissonDiskVeryHigh__ = [new h3d_Vector(-0.613392,0.617481),new h3d_Vector(0.170019,-0.040254),new h3d_Vector(-0.299417,0.791925),new h3d_Vector(0.645680,0.493210),new h3d_Vector(-0.651784,0.717887),new h3d_Vector(0.421003,0.027070),new h3d_Vector(-0.817194,-0.271096),new h3d_Vector(-0.705374,-0.668203),new h3d_Vector(0.977050,-0.108615),new h3d_Vector(0.063326,0.142369),new h3d_Vector(0.203528,0.214331),new h3d_Vector(-0.667531,0.326090),new h3d_Vector(-0.098422,-0.295755),new h3d_Vector(-0.885922,0.215369),new h3d_Vector(0.566637,0.605213),new h3d_Vector(0.039766,-0.396100),new h3d_Vector(0.751946,0.453352),new h3d_Vector(0.078707,-0.715323),new h3d_Vector(-0.075838,-0.529344),new h3d_Vector(0.724479,-0.580798),new h3d_Vector(0.222999,-0.215125),new h3d_Vector(-0.467574,-0.405438),new h3d_Vector(-0.248268,-0.814753),new h3d_Vector(0.354411,-0.887570),new h3d_Vector(0.175817,0.382366),new h3d_Vector(0.487472,-0.063082),new h3d_Vector(-0.084078,0.898312),new h3d_Vector(0.488876,-0.783441),new h3d_Vector(0.470016,0.217933),new h3d_Vector(-0.696890,-0.549791),new h3d_Vector(-0.149693,0.605762),new h3d_Vector(0.034211,0.979980),new h3d_Vector(0.503098,-0.308878),new h3d_Vector(-0.016205,-0.872921),new h3d_Vector(0.385784,-0.393902),new h3d_Vector(-0.146886,-0.859249),new h3d_Vector(0.643361,0.164098),new h3d_Vector(0.634388,-0.049471),new h3d_Vector(-0.688894,0.007843),new h3d_Vector(0.464034,-0.188818),new h3d_Vector(-0.440840,0.137486),new h3d_Vector(0.364483,0.511704),new h3d_Vector(0.034028,0.325968),new h3d_Vector(0.099094,-0.308023),new h3d_Vector(0.693960,-0.366253),new h3d_Vector(0.678884,-0.204688),new h3d_Vector(0.001801,0.780328),new h3d_Vector(0.145177,-0.898984),new h3d_Vector(0.062655,-0.611866),new h3d_Vector(0.315226,-0.604297),new h3d_Vector(-0.780145,0.486251),new h3d_Vector(-0.371868,0.882138),new h3d_Vector(0.200476,0.494430),new h3d_Vector(-0.494552,-0.711051),new h3d_Vector(0.612476,0.705252),new h3d_Vector(-0.578845,-0.768792),new h3d_Vector(-0.772454,-0.090976),new h3d_Vector(0.504440,0.372295),new h3d_Vector(0.155736,0.065157),new h3d_Vector(0.391522,0.849605),new h3d_Vector(-0.620106,-0.328104),new h3d_Vector(0.789239,-0.419965),new h3d_Vector(-0.545396,0.538133),new h3d_Vector(-0.178564,-0.596057)];
};
$hxClasses["h3d.shader.DirShadow"] = h3d_shader_DirShadow;
h3d_shader_DirShadow.__name__ = "h3d.shader.DirShadow";
h3d_shader_DirShadow.__super__ = hxsl_Shader;
h3d_shader_DirShadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.enable__) {
			this.constBits |= 1;
		}
		if(this.USE_ESM__) {
			this.constBits |= 2;
		}
		if(this.USE_PCF__) {
			this.constBits |= 4;
		}
		var v = this.pcfQuality__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("pcfQuality" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v << 3;
		if(this.shadowMap__ == null) {
			this.shadowMapChannel__ = hxsl_Channel.Unknown;
		} else if(this.shadowMapChannel__ == hxsl_Channel.Unknown) {
			if(this.shadowMap__.format == h3d_mat_Texture.nativeFormat) {
				this.shadowMapChannel__ = hxsl_Channel.PackedFloat;
			} else {
				throw haxe_Exception.thrown("shadowMap" + "Channel is not set");
			}
		}
		this.constBits |= (globals.allocChannelID(this.shadowMap__) << 3 | this.shadowMapChannel__._hx_index) << 11;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.enable__;
		case 1:
			return this.USE_ESM__;
		case 2:
			return this.shadowPower__;
		case 3:
			return this.USE_PCF__;
		case 4:
			return this.pcfQuality__;
		case 5:
			return this.pcfScale__;
		case 6:
			return this.shadowRes__;
		case 7:
			return this.shadowMap__;
		case 8:
			return this.shadowProj__;
		case 9:
			return this.shadowBias__;
		case 10:
			return this.poissonDiskLow__;
		case 11:
			return this.poissonDiskHigh__;
		case 12:
			return this.poissonDiskVeryHigh__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 2:
			return this.shadowPower__;
		case 5:
			return this.pcfScale__;
		case 9:
			return this.shadowBias__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_DirShadow
});
var h3d_shader_GenTexture = function() {
	this.color__ = new h3d_Vector();
	this.mode__ = 0;
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.GenTexture"] = h3d_shader_GenTexture;
h3d_shader_GenTexture.__name__ = "h3d.shader.GenTexture";
h3d_shader_GenTexture.__super__ = h3d_shader_ScreenShader;
h3d_shader_GenTexture.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.mode__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("mode" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.mode__;
		case 2:
			return this.color__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_GenTexture
});
var h3d_shader_LineShader = function(width,lengthScale) {
	if(lengthScale == null) {
		lengthScale = 1.;
	}
	if(width == null) {
		width = 1.5;
	}
	this.width__ = 0;
	this.lengthScale__ = 0;
	hxsl_Shader.call(this);
	this.width__ = width;
	this.lengthScale__ = lengthScale;
};
$hxClasses["h3d.shader.LineShader"] = h3d_shader_LineShader;
h3d_shader_LineShader.__name__ = "h3d.shader.LineShader";
h3d_shader_LineShader.__super__ = hxsl_Shader;
h3d_shader_LineShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 0:
			return this.lengthScale__;
		case 1:
			return this.width__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_LineShader
});
var h3d_shader_MinMaxShader = function() {
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.MinMaxShader"] = h3d_shader_MinMaxShader;
h3d_shader_MinMaxShader.__name__ = "h3d.shader.MinMaxShader";
h3d_shader_MinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_MinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_MinMaxShader
});
var h3d_shader_CubeMinMaxShader = function() {
	this.mat__ = new h3d_Matrix();
	h3d_shader_ScreenShader.call(this);
};
$hxClasses["h3d.shader.CubeMinMaxShader"] = h3d_shader_CubeMinMaxShader;
h3d_shader_CubeMinMaxShader.__name__ = "h3d.shader.CubeMinMaxShader";
h3d_shader_CubeMinMaxShader.__super__ = h3d_shader_ScreenShader;
h3d_shader_CubeMinMaxShader.prototype = $extend(h3d_shader_ScreenShader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isMax__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.flipY__;
		case 1:
			return this.texA__;
		case 2:
			return this.texB__;
		case 3:
			return this.isMax__;
		case 4:
			return this.mat__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 0) {
			return this.flipY__;
		}
		return 0.;
	}
	,__class__: h3d_shader_CubeMinMaxShader
});
var h3d_shader_NormalMap = function(texture) {
	hxsl_Shader.call(this);
	this.texture__ = texture;
};
$hxClasses["h3d.shader.NormalMap"] = h3d_shader_NormalMap;
h3d_shader_NormalMap.__name__ = "h3d.shader.NormalMap";
h3d_shader_NormalMap.__super__ = hxsl_Shader;
h3d_shader_NormalMap.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_NormalMap
});
var h3d_shader_Shadow = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.Shadow"] = h3d_shader_Shadow;
h3d_shader_Shadow.__name__ = "h3d.shader.Shadow";
h3d_shader_Shadow.__super__ = hxsl_Shader;
h3d_shader_Shadow.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Shadow
});
var h3d_shader_SignedDistanceField = function() {
	this.smoothing__ = 0.041666666666666664;
	this.alphaCutoff__ = 0.5;
	this.channel__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.SignedDistanceField"] = h3d_shader_SignedDistanceField;
h3d_shader_SignedDistanceField.__name__ = "h3d.shader.SignedDistanceField";
h3d_shader_SignedDistanceField.__super__ = hxsl_Shader;
h3d_shader_SignedDistanceField.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.channel__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("channel" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.channel__;
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		switch(index) {
		case 1:
			return this.alphaCutoff__;
		case 2:
			return this.smoothing__;
		default:
		}
		return 0.;
	}
	,__class__: h3d_shader_SignedDistanceField
});
var h3d_shader_SkinBase = function() {
	this.bonesMatrixes__ = [];
	this.MaxBones__ = 0;
	hxsl_Shader.call(this);
	this.constModified = true;
	this.MaxBones__ = 34;
};
$hxClasses["h3d.shader.SkinBase"] = h3d_shader_SkinBase;
h3d_shader_SkinBase.__name__ = "h3d.shader.SkinBase";
h3d_shader_SkinBase.__super__ = hxsl_Shader;
h3d_shader_SkinBase.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinBase
});
var h3d_shader_Skin = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.Skin"] = h3d_shader_Skin;
h3d_shader_Skin.__name__ = "h3d.shader.Skin";
h3d_shader_Skin.__super__ = h3d_shader_SkinBase;
h3d_shader_Skin.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_Skin
});
var h3d_shader_SkinTangent = function() {
	h3d_shader_SkinBase.call(this);
};
$hxClasses["h3d.shader.SkinTangent"] = h3d_shader_SkinTangent;
h3d_shader_SkinTangent.__name__ = "h3d.shader.SkinTangent";
h3d_shader_SkinTangent.__super__ = h3d_shader_SkinBase;
h3d_shader_SkinTangent.prototype = $extend(h3d_shader_SkinBase.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.MaxBones__;
		if(v >>> 8 != 0) {
			throw haxe_Exception.thrown("MaxBones" + " is out of range " + v + ">" + 255);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.MaxBones__;
		case 1:
			return this.bonesMatrixes__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SkinTangent
});
var h3d_shader_SpecularTexture = function(tex) {
	hxsl_Shader.call(this);
	this.texture__ = tex;
};
$hxClasses["h3d.shader.SpecularTexture"] = h3d_shader_SpecularTexture;
h3d_shader_SpecularTexture.__name__ = "h3d.shader.SpecularTexture";
h3d_shader_SpecularTexture.__super__ = hxsl_Shader;
h3d_shader_SpecularTexture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.texture__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_SpecularTexture
});
var h3d_shader_Texture = function(tex) {
	this.killAlphaThreshold__ = 0;
	hxsl_Shader.call(this);
	this.texture__ = tex;
	this.killAlphaThreshold__ = h3d_mat_Defaults.defaultKillAlphaThreshold;
};
$hxClasses["h3d.shader.Texture"] = h3d_shader_Texture;
h3d_shader_Texture.__name__ = "h3d.shader.Texture";
h3d_shader_Texture.__super__ = hxsl_Shader;
h3d_shader_Texture.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		if(this.killAlpha__) {
			this.constBits |= 2;
		}
		if(this.specularAlpha__) {
			this.constBits |= 4;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.additive__;
		case 1:
			return this.killAlpha__;
		case 2:
			return this.specularAlpha__;
		case 3:
			return this.killAlphaThreshold__;
		case 4:
			return this.texture__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		if(index == 3) {
			return this.killAlphaThreshold__;
		}
		return 0.;
	}
	,__class__: h3d_shader_Texture
});
var h3d_shader_UVDelta = function(dx,dy,sx,sy) {
	if(sy == null) {
		sy = 1.;
	}
	if(sx == null) {
		sx = 1.;
	}
	if(dy == null) {
		dy = 0.;
	}
	if(dx == null) {
		dx = 0.;
	}
	this.uvScale__ = new h3d_Vector();
	this.uvDelta__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.uvDelta__;
	var x = dx;
	var y = dy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
	var _this = this.uvScale__;
	var x = sx;
	var y = sy;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
};
$hxClasses["h3d.shader.UVDelta"] = h3d_shader_UVDelta;
h3d_shader_UVDelta.__name__ = "h3d.shader.UVDelta";
h3d_shader_UVDelta.__super__ = hxsl_Shader;
h3d_shader_UVDelta.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.uvDelta__;
		case 1:
			return this.uvScale__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_UVDelta
});
var h3d_shader_VertexColorAlpha = function() {
	hxsl_Shader.call(this);
};
$hxClasses["h3d.shader.VertexColorAlpha"] = h3d_shader_VertexColorAlpha;
h3d_shader_VertexColorAlpha.__name__ = "h3d.shader.VertexColorAlpha";
h3d_shader_VertexColorAlpha.__super__ = hxsl_Shader;
h3d_shader_VertexColorAlpha.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.additive__) {
			this.constBits |= 1;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		if(index == 0) {
			return this.additive__;
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VertexColorAlpha
});
var h3d_shader_VolumeDecal = function(objectWidth,objectHeight) {
	this.isCentered__ = true;
	this.tangent__ = new h3d_Vector();
	this.normal__ = new h3d_Vector();
	this.scale__ = new h3d_Vector();
	hxsl_Shader.call(this);
	var _this = this.normal__;
	var x = 0;
	var y = 0;
	var z = 1;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.tangent__;
	var x = 1;
	var y = 0;
	var z = 0;
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = z;
	_this.w = 1.;
	var _this = this.scale__;
	var x = 1 / objectWidth;
	var y = 1 / objectHeight;
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	_this.x = x;
	_this.y = y;
	_this.z = 0.;
	_this.w = 1.;
};
$hxClasses["h3d.shader.VolumeDecal"] = h3d_shader_VolumeDecal;
h3d_shader_VolumeDecal.__name__ = "h3d.shader.VolumeDecal";
h3d_shader_VolumeDecal.__super__ = hxsl_Shader;
h3d_shader_VolumeDecal.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		if(this.isCentered__) {
			this.constBits |= 64;
		}
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.scale__;
		case 1:
			return this.normal__;
		case 2:
			return this.tangent__;
		case 3:
			return this.isCentered__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: h3d_shader_VolumeDecal
});
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_EntryPoint = function() { };
$hxClasses["haxe.EntryPoint"] = haxe_EntryPoint;
haxe_EntryPoint.__name__ = "haxe.EntryPoint";
haxe_EntryPoint.processEvents = function() {
	while(true) {
		var f = haxe_EntryPoint.pending.shift();
		if(f == null) {
			break;
		}
		f();
	}
	var time = haxe_MainLoop.tick();
	if(!haxe_MainLoop.hasEvents() && haxe_EntryPoint.threadCount == 0) {
		return -1;
	}
	return time;
};
haxe_EntryPoint.run = function() {
	var nextTick = haxe_EntryPoint.processEvents();
	if(typeof(window) != "undefined") {
		var $window = window;
		var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
		if(rqf != null) {
			rqf(haxe_EntryPoint.run);
		} else if(nextTick >= 0) {
			setTimeout(haxe_EntryPoint.run,nextTick * 1000);
		}
	} else if(nextTick >= 0) {
		setTimeout(haxe_EntryPoint.run,nextTick * 1000);
	}
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
$hxClasses["haxe.Exception"] = haxe_Exception;
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.caught = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value;
	} else if(((value) instanceof Error)) {
		return new haxe_Exception(value.message,null,value);
	} else {
		return new haxe_ValueException(value,null,value);
	}
};
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	unwrap: function() {
		return this.__nativeException;
	}
	,get_native: function() {
		return this.__nativeException;
	}
	,__class__: haxe_Exception
});
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = "haxe.Log";
haxe_Log.formatOutput = function(v,infos) {
	var str = Std.string(v);
	if(infos == null) {
		return str;
	}
	var pstr = infos.fileName + ":" + infos.lineNumber;
	if(infos.customParams != null) {
		var _g = 0;
		var _g1 = infos.customParams;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			str += ", " + Std.string(v);
		}
	}
	return pstr + ": " + str;
};
haxe_Log.trace = function(v,infos) {
	var str = haxe_Log.formatOutput(v,infos);
	if(typeof(console) != "undefined" && console.log != null) {
		console.log(str);
	}
};
var haxe_MainEvent = function(f,p) {
	this.isBlocking = true;
	this.f = f;
	this.priority = p;
	this.nextRun = -Infinity;
};
$hxClasses["haxe.MainEvent"] = haxe_MainEvent;
haxe_MainEvent.__name__ = "haxe.MainEvent";
haxe_MainEvent.prototype = {
	__class__: haxe_MainEvent
};
var haxe_MainLoop = function() { };
$hxClasses["haxe.MainLoop"] = haxe_MainLoop;
haxe_MainLoop.__name__ = "haxe.MainLoop";
haxe_MainLoop.hasEvents = function() {
	var p = haxe_MainLoop.pending;
	while(p != null) {
		if(p.isBlocking) {
			return true;
		}
		p = p.next;
	}
	return false;
};
haxe_MainLoop.add = function(f,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(f == null) {
		throw haxe_Exception.thrown("Event function is null");
	}
	var e = new haxe_MainEvent(f,priority);
	var head = haxe_MainLoop.pending;
	if(head != null) {
		head.prev = e;
	}
	e.next = head;
	haxe_MainLoop.pending = e;
	return e;
};
haxe_MainLoop.sortEvents = function() {
	var list = haxe_MainLoop.pending;
	if(list == null) {
		return;
	}
	var insize = 1;
	var nmerges;
	var psize = 0;
	var qsize = 0;
	var p;
	var q;
	var e;
	var tail;
	while(true) {
		p = list;
		list = null;
		tail = null;
		nmerges = 0;
		while(p != null) {
			++nmerges;
			q = p;
			psize = 0;
			var _g = 0;
			var _g1 = insize;
			while(_g < _g1) {
				var i = _g++;
				++psize;
				q = q.next;
				if(q == null) {
					break;
				}
			}
			qsize = insize;
			while(psize > 0 || qsize > 0 && q != null) {
				if(psize == 0) {
					e = q;
					q = q.next;
					--qsize;
				} else if(qsize == 0 || q == null || (p.priority > q.priority || p.priority == q.priority && p.nextRun <= q.nextRun)) {
					e = p;
					p = p.next;
					--psize;
				} else {
					e = q;
					q = q.next;
					--qsize;
				}
				if(tail != null) {
					tail.next = e;
				} else {
					list = e;
				}
				e.prev = tail;
				tail = e;
			}
			p = q;
		}
		tail.next = null;
		if(nmerges <= 1) {
			break;
		}
		insize *= 2;
	}
	list.prev = null;
	haxe_MainLoop.pending = list;
};
haxe_MainLoop.tick = function() {
	haxe_MainLoop.sortEvents();
	var e = haxe_MainLoop.pending;
	var now = HxOverrides.now() / 1000;
	var wait = 1e9;
	while(e != null) {
		var next = e.next;
		var wt = e.nextRun - now;
		if(wt <= 0) {
			wait = 0;
			if(e.f != null) {
				e.f();
			}
		} else if(wait > wt) {
			wait = wt;
		}
		e = next;
	}
	return wait;
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = "haxe.Resource";
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = "haxe._Unserializer.DefaultResolver";
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return $hxClasses[name];
	}
	,resolveEnum: function(name) {
		return $hxEnums[name];
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = "haxe.Unserializer";
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g = 0;
	var _g1 = haxe_Unserializer.BASE64.length;
	while(_g < _g1) {
		var i = _g++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.run = function(v) {
	return new haxe_Unserializer(v).unserialize();
};
haxe_Unserializer.prototype = {
	readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		return parseFloat(HxOverrides.substr(this.buf,p1,this.pos - p1));
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw haxe_Exception.thrown("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw haxe_Exception.thrown("Invalid object key");
			}
			var v = this.unserialize();
			o[k] = v;
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw haxe_Exception.thrown("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			return cl;
		case 66:
			var name = this.unserialize();
			var e = this.resolver.resolveEnum(name);
			if(e == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			return e;
		case 67:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw haxe_Exception.thrown("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				h.set(s,this.unserialize());
			}
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw haxe_Exception.thrown("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n = this.readDigits();
					a[a.length + n - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h = new haxe_ds_StringMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				h.h[s] = value;
			}
			this.pos++;
			return h;
		case 99:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw haxe_Exception.thrown("Class not found " + name);
			}
			var o = Object.create(cl.prototype);
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw haxe_Exception.thrown("Unknown enum index " + name + "@" + index);
			}
			var e = this.unserializeEnum(edecl,tag);
			this.cache.push(e);
			return e;
		case 107:
			return NaN;
		case 108:
			var l = new haxe_ds_List();
			this.cache.push(l);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o = { };
			this.cache.push(o);
			this.unserializeObject(o);
			return o;
		case 112:
			return Infinity;
		case 113:
			var h = new haxe_ds_IntMap();
			this.cache.push(h);
			var buf = this.buf;
			var c = this.buf.charCodeAt(this.pos++);
			while(c == 58) {
				var i = this.readDigits();
				var value = this.unserialize();
				h.h[i] = value;
				c = this.buf.charCodeAt(this.pos++);
			}
			if(c != 104) {
				throw haxe_Exception.thrown("Invalid IntMap format");
			}
			return h;
		case 114:
			var n = this.readDigits();
			if(n < 0 || n >= this.cache.length) {
				throw haxe_Exception.thrown("Invalid reference");
			}
			return this.cache[n];
		case 115:
			var len = this.readDigits();
			var buf = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2 ? rest - 1 : 0);
			var max = i + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i < max) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				var c3 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				var c4 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c3 << 6 | c4;
			}
			if(rest >= 2) {
				var c1 = codes[buf.charCodeAt(i++)];
				var c2 = codes[buf.charCodeAt(i++)];
				bytes.b[bpos++] = c1 << 2 | c2 >> 4;
				if(rest == 3) {
					var c3 = codes[buf.charCodeAt(i++)];
					bytes.b[bpos++] = c2 << 4 | c3 >> 2;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				d = new Date(this.readFloat());
			}
			this.cache.push(d);
			return d;
		case 119:
			var name = this.unserialize();
			var edecl = this.resolver.resolveEnum(name);
			if(edecl == null) {
				throw haxe_Exception.thrown("Enum not found " + name);
			}
			var e = this.unserializeEnum(edecl,this.unserialize());
			this.cache.push(e);
			return e;
		case 120:
			throw haxe_Exception.thrown(this.unserialize());
		case 121:
			var len = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw haxe_Exception.thrown("Invalid string length");
			}
			var s = HxOverrides.substr(this.buf,this.pos,len);
			this.pos += len;
			s = decodeURIComponent(s.split("+").join(" "));
			this.scache.push(s);
			return s;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw haxe_Exception.thrown("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
$hxClasses["haxe.ValueException"] = haxe_ValueException;
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
	unwrap: function() {
		return this.value;
	}
	,__class__: haxe_ValueException
});
var haxe_crypto_Adler32 = function() {
	this.a1 = 1;
	this.a2 = 0;
};
$hxClasses["haxe.crypto.Adler32"] = haxe_crypto_Adler32;
haxe_crypto_Adler32.__name__ = "haxe.crypto.Adler32";
haxe_crypto_Adler32.read = function(i) {
	var a = new haxe_crypto_Adler32();
	var a2a = i.readByte();
	var a2b = i.readByte();
	var a1a = i.readByte();
	var a1b = i.readByte();
	a.a1 = a1a << 8 | a1b;
	a.a2 = a2a << 8 | a2b;
	return a;
};
haxe_crypto_Adler32.prototype = {
	update: function(b,pos,len) {
		var a1 = this.a1;
		var a2 = this.a2;
		var _g = pos;
		var _g1 = pos + len;
		while(_g < _g1) {
			var p = _g++;
			var c = b.b[p];
			a1 = (a1 + c) % 65521;
			a2 = (a2 + a1) % 65521;
		}
		this.a1 = a1;
		this.a2 = a2;
	}
	,equals: function(a) {
		if(a.a1 == this.a1) {
			return a.a2 == this.a2;
		} else {
			return false;
		}
	}
	,__class__: haxe_crypto_Adler32
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.b.byteLength) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,fill: function(pos,len,value) {
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			this.b[pos++] = value;
		}
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,getUInt16: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getUint16(pos,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,getInt32: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getInt32(pos,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			var debug = pos > 0;
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var c2 = b[i++];
					var code1 = (c & 31) << 12 | (c2 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var c21 = b[i++];
					var c3 = b[i++];
					var u = (c & 15) << 18 | (c21 & 127) << 12 | (c3 & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
haxe_io_Encoding.__empty_constructs__ = [haxe_io_Encoding.UTF8,haxe_io_Encoding.RawNative];
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = "haxe.crypto.Base64";
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw haxe_Exception.thrown("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = "haxe.crypto.BaseCode";
haxe_crypto_BaseCode.prototype = {
	initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) {
			var i = _g++;
			tbl[i] = -1;
		}
		var _g = 0;
		var _g1 = this.base.length;
		while(_g < _g1) {
			var i = _g++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw haxe_Exception.thrown("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = "haxe.crypto.Md5";
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	var h = m.doEncode(haxe_crypto_Md5.str2blks(s));
	return m.hex(h);
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g = 0;
	var _g1 = blksSize;
	while(_g < _g1) {
		var i = _g++;
		blks[i] = 0;
	}
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		var lsb = a & 1 | b & 1;
		var msb31 = a >>> 1 | b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitXOR: function(a,b) {
		var lsb = a & 1 ^ b & 1;
		var msb31 = a >>> 1 ^ b >>> 1;
		return msb31 << 1 | lsb;
	}
	,bitAND: function(a,b) {
		var lsb = a & 1 & (b & 1);
		var msb31 = a >>> 1 & b >>> 1;
		return msb31 << 1 | lsb;
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return msw << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var hex_chr = "0123456789abcdef";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			str += hex_chr.charAt(num >> 4 & 15) + hex_chr.charAt(num & 15);
			str += hex_chr.charAt(num >> 12 & 15) + hex_chr.charAt(num >> 8 & 15);
			str += hex_chr.charAt(num >> 20 & 15) + hex_chr.charAt(num >> 16 & 15);
			str += hex_chr.charAt(num >> 28 & 15) + hex_chr.charAt(num >> 24 & 15);
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var step;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			step = 0;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_ArraySort = function() { };
$hxClasses["haxe.ds.ArraySort"] = haxe_ds_ArraySort;
haxe_ds_ArraySort.__name__ = "haxe.ds.ArraySort";
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g = from + 1;
		var _g1 = to;
		while(_g < _g1) {
			var i = _g++;
			var j = i;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	var new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	if(from == mid || mid == to) {
		return;
	}
	var n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_BalancedTree = function() {
};
$hxClasses["haxe.ds.BalancedTree"] = haxe_ds_BalancedTree;
haxe_ds_BalancedTree.__name__ = "haxe.ds.BalancedTree";
haxe_ds_BalancedTree.__interfaces__ = [haxe_IMap];
haxe_ds_BalancedTree.iteratorLoop = function(node,acc) {
	if(node != null) {
		haxe_ds_BalancedTree.iteratorLoop(node.left,acc);
		acc.push(node.value);
		haxe_ds_BalancedTree.iteratorLoop(node.right,acc);
	}
};
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,iterator: function() {
		var ret = [];
		haxe_ds_BalancedTree.iteratorLoop(this.root,ret);
		return new haxe_iterators_ArrayIterator(ret);
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this = r.right;
			var _this1 = r.left;
			if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this = this.left;
			tmp = _this == null ? 0 : _this._height;
		} else {
			var _this = this.right;
			tmp = _this == null ? 0 : _this._height;
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
$hxClasses["haxe.ds.TreeNode"] = haxe_ds_TreeNode;
haxe_ds_TreeNode.__name__ = "haxe.ds.TreeNode";
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
$hxClasses["haxe.ds.EnumValueMap"] = haxe_ds_EnumValueMap;
haxe_ds_EnumValueMap.__name__ = "haxe.ds.EnumValueMap";
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1._hx_index - k2._hx_index;
		if(d != 0) {
			return d;
		}
		var p1 = Type.enumParameters(k1);
		var p2 = Type.enumParameters(k2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g = 0;
		var _g1 = a1.length;
		while(_g < _g1) {
			var i = _g++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if(((v1) instanceof Array) && ((v2) instanceof Array)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(key | 0);
		return new haxe_iterators_ArrayIterator(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_List = function() {
	this.length = 0;
};
$hxClasses["haxe.ds.List"] = haxe_ds_List;
haxe_ds_List.__name__ = "haxe.ds.List";
haxe_ds_List.prototype = {
	add: function(item) {
		var x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: haxe_ds_List
};
var haxe_ds__$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["haxe.ds._List.ListNode"] = haxe_ds__$List_ListNode;
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
haxe_ds__$List_ListNode.prototype = {
	__class__: haxe_ds__$List_ListNode
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = Object.create(null);
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.keysIterator = function(h) {
	var keys = Object.keys(h);
	var len = keys.length;
	var idx = 0;
	return { hasNext : function() {
		return idx < len;
	}, next : function() {
		idx += 1;
		return keys[idx - 1];
	}};
};
haxe_ds_StringMap.prototype = {
	__class__: haxe_ds_StringMap
};
var haxe_io_BytesBuffer = function() {
	this.pos = 0;
	this.size = 0;
};
$hxClasses["haxe.io.BytesBuffer"] = haxe_io_BytesBuffer;
haxe_io_BytesBuffer.__name__ = "haxe.io.BytesBuffer";
haxe_io_BytesBuffer.prototype = {
	addByte: function(byte) {
		if(this.pos == this.size) {
			this.grow(1);
		}
		this.view.setUint8(this.pos++,byte);
	}
	,add: function(src) {
		if(this.pos + src.length > this.size) {
			this.grow(src.length);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset,src.length);
		this.u8.set(sub,this.pos);
		this.pos += src.length;
	}
	,addBytes: function(src,pos,len) {
		if(pos < 0 || len < 0 || pos + len > src.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.pos + len > this.size) {
			this.grow(len);
		}
		if(this.size == 0) {
			return;
		}
		var sub = new Uint8Array(src.b.buffer,src.b.byteOffset + pos,len);
		this.u8.set(sub,this.pos);
		this.pos += len;
	}
	,grow: function(delta) {
		var req = this.pos + delta;
		var nsize = this.size == 0 ? 16 : this.size;
		while(nsize < req) nsize = nsize * 3 >> 1;
		var nbuf = new ArrayBuffer(nsize);
		var nu8 = new Uint8Array(nbuf);
		if(this.size > 0) {
			nu8.set(this.u8);
		}
		this.size = nsize;
		this.buffer = nbuf;
		this.u8 = nu8;
		this.view = new DataView(this.buffer);
	}
	,getBytes: function() {
		if(this.size == 0) {
			return new haxe_io_Bytes(new ArrayBuffer(0));
		}
		var b = new haxe_io_Bytes(this.buffer);
		b.length = this.pos;
		return b;
	}
	,__class__: haxe_io_BytesBuffer
};
var haxe_io_Input = function() { };
$hxClasses["haxe.io.Input"] = haxe_io_Input;
haxe_io_Input.__name__ = "haxe.io.Input";
haxe_io_Input.prototype = {
	readByte: function() {
		throw haxe_Exception.thrown("Not implemented");
	}
	,readBytes: function(s,pos,len) {
		var k = len;
		var b = s.b;
		if(pos < 0 || len < 0 || pos + len > s.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		try {
			while(k > 0) {
				b[pos] = this.readByte();
				++pos;
				--k;
			}
		} catch( _g ) {
			if(!((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				throw _g;
			}
		}
		return len - k;
	}
	,set_bigEndian: function(b) {
		this.bigEndian = b;
		return b;
	}
	,readFullBytes: function(s,pos,len) {
		while(len > 0) {
			var k = this.readBytes(s,pos,len);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			pos += k;
			len -= k;
		}
	}
	,read: function(nbytes) {
		var s = new haxe_io_Bytes(new ArrayBuffer(nbytes));
		var p = 0;
		while(nbytes > 0) {
			var k = this.readBytes(s,p,nbytes);
			if(k == 0) {
				throw haxe_Exception.thrown(haxe_io_Error.Blocked);
			}
			p += k;
			nbytes -= k;
		}
		return s;
	}
	,readUntil: function(end) {
		var buf = new haxe_io_BytesBuffer();
		var last;
		while(true) {
			last = this.readByte();
			if(!(last != end)) {
				break;
			}
			buf.addByte(last);
		}
		return buf.getBytes().toString();
	}
	,readLine: function() {
		var buf = new haxe_io_BytesBuffer();
		var last;
		var s;
		try {
			while(true) {
				last = this.readByte();
				if(!(last != 10)) {
					break;
				}
				buf.addByte(last);
			}
			s = buf.getBytes().toString();
			if(HxOverrides.cca(s,s.length - 1) == 13) {
				s = HxOverrides.substr(s,0,-1);
			}
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof haxe_io_Eof)) {
				var e = _g1;
				s = buf.getBytes().toString();
				if(s.length == 0) {
					throw haxe_Exception.thrown(e);
				}
			} else {
				throw _g;
			}
		}
		return s;
	}
	,readDouble: function() {
		var i1 = this.readInt32();
		var i2 = this.readInt32();
		if(this.bigEndian) {
			return haxe_io_FPHelper.i64ToDouble(i2,i1);
		} else {
			return haxe_io_FPHelper.i64ToDouble(i1,i2);
		}
	}
	,readInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var n = this.bigEndian ? ch2 | ch1 << 8 : ch1 | ch2 << 8;
		if((n & 32768) != 0) {
			return n - 65536;
		}
		return n;
	}
	,readUInt16: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		if(this.bigEndian) {
			return ch2 | ch1 << 8;
		} else {
			return ch1 | ch2 << 8;
		}
	}
	,readUInt24: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		if(this.bigEndian) {
			return ch3 | ch2 << 8 | ch1 << 16;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16;
		}
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,readString: function(len,encoding) {
		var b = new haxe_io_Bytes(new ArrayBuffer(len));
		this.readFullBytes(b,0,len);
		return b.getString(0,len,encoding);
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
$hxClasses["haxe.io.BytesInput"] = haxe_io_BytesInput;
haxe_io_BytesInput.__name__ = "haxe.io.BytesInput";
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	set_position: function(p) {
		if(p < 0) {
			p = 0;
		} else if(p > this.totlen) {
			p = this.totlen;
		}
		this.len = this.totlen - p;
		return this.pos = p;
	}
	,readByte: function() {
		if(this.len == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,readBytes: function(buf,pos,len) {
		if(pos < 0 || len < 0 || pos + len > buf.length) {
			throw haxe_Exception.thrown(haxe_io_Error.OutsideBounds);
		}
		if(this.len == 0 && len > 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		if(this.len < len) {
			len = this.len;
		}
		var b1 = this.b;
		var b2 = buf.b;
		var _g = 0;
		var _g1 = len;
		while(_g < _g1) {
			var i = _g++;
			b2[pos + i] = b1[this.pos + i];
		}
		this.pos += len;
		this.len -= len;
		return len;
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Output = function() { };
$hxClasses["haxe.io.Output"] = haxe_io_Output;
haxe_io_Output.__name__ = "haxe.io.Output";
haxe_io_Output.prototype = {
	flush: function() {
	}
	,close: function() {
	}
	,__class__: haxe_io_Output
};
var haxe_io_BytesOutput = function() {
	this.b = new haxe_io_BytesBuffer();
};
$hxClasses["haxe.io.BytesOutput"] = haxe_io_BytesOutput;
haxe_io_BytesOutput.__name__ = "haxe.io.BytesOutput";
haxe_io_BytesOutput.__super__ = haxe_io_Output;
haxe_io_BytesOutput.prototype = $extend(haxe_io_Output.prototype,{
	writeBytes: function(buf,pos,len) {
		this.b.addBytes(buf,pos,len);
		return len;
	}
	,getBytes: function() {
		return this.b.getBytes();
	}
	,__class__: haxe_io_BytesOutput
});
var haxe_io_Eof = function() {
};
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = "haxe.io.Eof";
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
haxe_io_Error.__empty_constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds];
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = "haxe.io.FPHelper";
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	haxe_io_FPHelper.helper.setInt32(0,low,true);
	haxe_io_FPHelper.helper.setInt32(4,high,true);
	return haxe_io_FPHelper.helper.getFloat64(0,true);
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = "haxe.io.Path";
haxe_io_Path.directory = function(path) {
	var s = new haxe_io_Path(path);
	if(s.dir == null) {
		return "";
	}
	return s.dir;
};
haxe_io_Path.withExtension = function(path,ext) {
	var s = new haxe_io_Path(path);
	s.ext = ext;
	return s.toString();
};
haxe_io_Path.join = function(paths) {
	var _g = [];
	var _g1 = 0;
	var _g2 = paths;
	while(_g1 < _g2.length) {
		var v = _g2[_g1];
		++_g1;
		if(v != null && v != "") {
			_g.push(v);
		}
	}
	var paths = _g;
	if(paths.length == 0) {
		return "";
	}
	var path = paths[0];
	var _g = 1;
	var _g1 = paths.length;
	while(_g < _g1) {
		var i = _g++;
		path = haxe_io_Path.addTrailingSlash(path);
		path += paths[i];
	}
	return haxe_io_Path.normalize(path);
};
haxe_io_Path.normalize = function(path) {
	var slash = "/";
	path = path.split("\\").join(slash);
	if(path == slash) {
		return slash;
	}
	var target = [];
	var _g = 0;
	var _g1 = path.split(slash);
	while(_g < _g1.length) {
		var token = _g1[_g];
		++_g;
		if(token == ".." && target.length > 0 && target[target.length - 1] != "..") {
			target.pop();
		} else if(token == "") {
			if(target.length > 0 || HxOverrides.cca(path,0) == 47) {
				target.push(token);
			}
		} else if(token != ".") {
			target.push(token);
		}
	}
	var tmp = target.join(slash);
	var acc_b = "";
	var colon = false;
	var slashes = false;
	var _g2_offset = 0;
	var _g2_s = tmp;
	while(_g2_offset < _g2_s.length) {
		var s = _g2_s;
		var index = _g2_offset++;
		var c = s.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g2_offset;
		}
		var c2 = c1;
		switch(c2) {
		case 47:
			if(!colon) {
				slashes = true;
			} else {
				var i = c2;
				colon = false;
				if(slashes) {
					acc_b += "/";
					slashes = false;
				}
				acc_b += String.fromCodePoint(i);
			}
			break;
		case 58:
			acc_b += ":";
			colon = true;
			break;
		default:
			var i1 = c2;
			colon = false;
			if(slashes) {
				acc_b += "/";
				slashes = false;
			}
			acc_b += String.fromCodePoint(i1);
		}
	}
	return acc_b;
};
haxe_io_Path.addTrailingSlash = function(path) {
	if(path.length == 0) {
		return "/";
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		if(c2 != path.length - 1) {
			return path + "\\";
		} else {
			return path;
		}
	} else if(c1 != path.length - 1) {
		return path + "/";
	} else {
		return path;
	}
};
haxe_io_Path.prototype = {
	toString: function() {
		return (this.dir == null ? "" : this.dir + (this.backslash ? "\\" : "/")) + this.file + (this.ext == null ? "" : "." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
$hxClasses["haxe.iterators.ArrayIterator"] = haxe_iterators_ArrayIterator;
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
	,__class__: haxe_iterators_ArrayIterator
};
var haxe_macro_Binop = $hxEnums["haxe.macro.Binop"] = { __ename__ : true, __constructs__ : ["OpAdd","OpMult","OpDiv","OpSub","OpAssign","OpEq","OpNotEq","OpGt","OpGte","OpLt","OpLte","OpAnd","OpOr","OpXor","OpBoolAnd","OpBoolOr","OpShl","OpShr","OpUShr","OpMod","OpAssignOp","OpInterval","OpArrow","OpIn"]
	,OpAdd: {_hx_index:0,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMult: {_hx_index:1,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpDiv: {_hx_index:2,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpSub: {_hx_index:3,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssign: {_hx_index:4,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpEq: {_hx_index:5,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpNotEq: {_hx_index:6,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGt: {_hx_index:7,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpGte: {_hx_index:8,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLt: {_hx_index:9,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpLte: {_hx_index:10,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAnd: {_hx_index:11,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpOr: {_hx_index:12,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpXor: {_hx_index:13,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolAnd: {_hx_index:14,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpBoolOr: {_hx_index:15,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShl: {_hx_index:16,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpShr: {_hx_index:17,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpUShr: {_hx_index:18,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpMod: {_hx_index:19,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpAssignOp: ($_=function(op) { return {_hx_index:20,op:op,__enum__:"haxe.macro.Binop",toString:$estr}; },$_.__params__ = ["op"],$_)
	,OpInterval: {_hx_index:21,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpArrow: {_hx_index:22,__enum__:"haxe.macro.Binop",toString:$estr}
	,OpIn: {_hx_index:23,__enum__:"haxe.macro.Binop",toString:$estr}
};
haxe_macro_Binop.__empty_constructs__ = [haxe_macro_Binop.OpAdd,haxe_macro_Binop.OpMult,haxe_macro_Binop.OpDiv,haxe_macro_Binop.OpSub,haxe_macro_Binop.OpAssign,haxe_macro_Binop.OpEq,haxe_macro_Binop.OpNotEq,haxe_macro_Binop.OpGt,haxe_macro_Binop.OpGte,haxe_macro_Binop.OpLt,haxe_macro_Binop.OpLte,haxe_macro_Binop.OpAnd,haxe_macro_Binop.OpOr,haxe_macro_Binop.OpXor,haxe_macro_Binop.OpBoolAnd,haxe_macro_Binop.OpBoolOr,haxe_macro_Binop.OpShl,haxe_macro_Binop.OpShr,haxe_macro_Binop.OpUShr,haxe_macro_Binop.OpMod,haxe_macro_Binop.OpInterval,haxe_macro_Binop.OpArrow,haxe_macro_Binop.OpIn];
var haxe_macro_Unop = $hxEnums["haxe.macro.Unop"] = { __ename__ : true, __constructs__ : ["OpIncrement","OpDecrement","OpNot","OpNeg","OpNegBits"]
	,OpIncrement: {_hx_index:0,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpDecrement: {_hx_index:1,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNot: {_hx_index:2,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNeg: {_hx_index:3,__enum__:"haxe.macro.Unop",toString:$estr}
	,OpNegBits: {_hx_index:4,__enum__:"haxe.macro.Unop",toString:$estr}
};
haxe_macro_Unop.__empty_constructs__ = [haxe_macro_Unop.OpIncrement,haxe_macro_Unop.OpDecrement,haxe_macro_Unop.OpNot,haxe_macro_Unop.OpNeg,haxe_macro_Unop.OpNegBits];
var haxe_rtti_Meta = function() { };
$hxClasses["haxe.rtti.Meta"] = haxe_rtti_Meta;
haxe_rtti_Meta.__name__ = "haxe.rtti.Meta";
haxe_rtti_Meta.getType = function(t) {
	var meta = haxe_rtti_Meta.getMeta(t);
	if(meta == null || meta.obj == null) {
		return { };
	} else {
		return meta.obj;
	}
};
haxe_rtti_Meta.getMeta = function(t) {
	return t.__meta__;
};
var haxe_xml__$Access_NodeAccess = {};
haxe_xml__$Access_NodeAccess.resolve = function(this1,name) {
	var x = this1.elementsNamed(name).next();
	if(x == null) {
		var xname;
		if(this1.nodeType == Xml.Document) {
			xname = "Document";
		} else {
			if(this1.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
			}
			xname = this1.nodeName;
		}
		throw haxe_Exception.thrown(xname + " is missing element " + name);
	}
	if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
		throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
	}
	var this1 = x;
	return this1;
};
var haxe_xml__$Access_AttribAccess = {};
haxe_xml__$Access_AttribAccess.resolve = function(this1,name) {
	if(this1.nodeType == Xml.Document) {
		throw haxe_Exception.thrown("Cannot access document attribute " + name);
	}
	var v = this1.get(name);
	if(v == null) {
		if(this1.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this1.nodeType == null ? "null" : XmlType.toString(this1.nodeType)));
		}
		throw haxe_Exception.thrown(this1.nodeName + " is missing attribute " + name);
	}
	return v;
};
var haxe_xml__$Access_HasNodeAccess = {};
haxe_xml__$Access_HasNodeAccess.resolve = function(this1,name) {
	return this1.elementsNamed(name).hasNext();
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
					}
					buf.b += Std.string("&" + s + ";");
				} else {
					buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
			}
			throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len = p - start;
		buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				var _g_current = 0;
				var _g_array = value.children;
				while(_g_current < _g_array.length) {
					var child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			var _g_current = 0;
			var _g_array = value.children;
			while(_g_current < _g_array.length) {
				var child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		var _g_current = 0;
		var _g_array = value.children;
		while(_g_current < _g_array.length) {
			var child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var haxe_zip_Huffman = $hxEnums["haxe.zip.Huffman"] = { __ename__ : true, __constructs__ : ["Found","NeedBit","NeedBits"]
	,Found: ($_=function(i) { return {_hx_index:0,i:i,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["i"],$_)
	,NeedBit: ($_=function(left,right) { return {_hx_index:1,left:left,right:right,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["left","right"],$_)
	,NeedBits: ($_=function(n,table) { return {_hx_index:2,n:n,table:table,__enum__:"haxe.zip.Huffman",toString:$estr}; },$_.__params__ = ["n","table"],$_)
};
haxe_zip_Huffman.__empty_constructs__ = [];
var haxe_zip_HuffTools = function() {
};
$hxClasses["haxe.zip.HuffTools"] = haxe_zip_HuffTools;
haxe_zip_HuffTools.__name__ = "haxe.zip.HuffTools";
haxe_zip_HuffTools.prototype = {
	treeDepth: function(t) {
		switch(t._hx_index) {
		case 0:
			var _g = t.i;
			return 0;
		case 1:
			var b = t.right;
			var a = t.left;
			var da = this.treeDepth(a);
			var db = this.treeDepth(b);
			return 1 + (da < db ? da : db);
		case 2:
			var _g = t.table;
			var _g = t.n;
			throw haxe_Exception.thrown("assert");
		}
	}
	,treeCompress: function(t) {
		var d = this.treeDepth(t);
		if(d == 0) {
			return t;
		}
		if(d == 1) {
			if(t._hx_index == 1) {
				var b = t.right;
				var a = t.left;
				return haxe_zip_Huffman.NeedBit(this.treeCompress(a),this.treeCompress(b));
			} else {
				throw haxe_Exception.thrown("assert");
			}
		}
		var size = 1 << d;
		var table = [];
		var _g = 0;
		var _g1 = size;
		while(_g < _g1) {
			var i = _g++;
			table.push(haxe_zip_Huffman.Found(-1));
		}
		this.treeWalk(table,0,0,d,t);
		return haxe_zip_Huffman.NeedBits(d,table);
	}
	,treeWalk: function(table,p,cd,d,t) {
		if(t._hx_index == 1) {
			var b = t.right;
			var a = t.left;
			if(d > 0) {
				this.treeWalk(table,p,cd + 1,d - 1,a);
				this.treeWalk(table,p | 1 << cd,cd + 1,d - 1,b);
			} else {
				table[p] = this.treeCompress(t);
			}
		} else {
			table[p] = this.treeCompress(t);
		}
	}
	,treeMake: function(bits,maxbits,v,len) {
		if(len > maxbits) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var idx = v << 5 | len;
		if(bits.h.hasOwnProperty(idx)) {
			return haxe_zip_Huffman.Found(bits.h[idx]);
		}
		v <<= 1;
		++len;
		return haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,v,len),this.treeMake(bits,maxbits,v | 1,len));
	}
	,make: function(lengths,pos,nlengths,maxbits) {
		if(nlengths == 1) {
			return haxe_zip_Huffman.NeedBit(haxe_zip_Huffman.Found(0),haxe_zip_Huffman.Found(0));
		}
		var counts = [];
		var tmp = [];
		if(maxbits > 32) {
			throw haxe_Exception.thrown("Invalid huffman");
		}
		var _g = 0;
		var _g1 = maxbits;
		while(_g < _g1) {
			var i = _g++;
			counts.push(0);
			tmp.push(0);
		}
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var p = lengths[i + pos];
			if(p >= maxbits) {
				throw haxe_Exception.thrown("Invalid huffman");
			}
			counts[p]++;
		}
		var code = 0;
		var _g = 1;
		var _g1 = maxbits - 1;
		while(_g < _g1) {
			var i = _g++;
			code = code + counts[i] << 1;
			tmp[i] = code;
		}
		var bits = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = nlengths;
		while(_g < _g1) {
			var i = _g++;
			var l = lengths[i + pos];
			if(l != 0) {
				var n = tmp[l - 1];
				tmp[l - 1] = n + 1;
				bits.h[n << 5 | l] = i;
			}
		}
		return this.treeCompress(haxe_zip_Huffman.NeedBit(this.treeMake(bits,maxbits,0,1),this.treeMake(bits,maxbits,1,1)));
	}
	,__class__: haxe_zip_HuffTools
};
var haxe_zip__$InflateImpl_Window = function(hasCrc) {
	this.buffer = new haxe_io_Bytes(new ArrayBuffer(65536));
	this.pos = 0;
	if(hasCrc) {
		this.crc = new haxe_crypto_Adler32();
	}
};
$hxClasses["haxe.zip._InflateImpl.Window"] = haxe_zip__$InflateImpl_Window;
haxe_zip__$InflateImpl_Window.__name__ = "haxe.zip._InflateImpl.Window";
haxe_zip__$InflateImpl_Window.prototype = {
	slide: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,32768);
		}
		var b = new haxe_io_Bytes(new ArrayBuffer(65536));
		this.pos -= 32768;
		b.blit(0,this.buffer,32768,this.pos);
		this.buffer = b;
	}
	,addBytes: function(b,p,len) {
		if(this.pos + len > 65536) {
			this.slide();
		}
		this.buffer.blit(this.pos,b,p,len);
		this.pos += len;
	}
	,addByte: function(c) {
		if(this.pos == 65536) {
			this.slide();
		}
		this.buffer.b[this.pos] = c;
		this.pos++;
	}
	,getLastChar: function() {
		return this.buffer.b[this.pos - 1];
	}
	,available: function() {
		return this.pos;
	}
	,checksum: function() {
		if(this.crc != null) {
			this.crc.update(this.buffer,0,this.pos);
		}
		return this.crc;
	}
	,__class__: haxe_zip__$InflateImpl_Window
};
var haxe_zip__$InflateImpl_State = $hxEnums["haxe.zip._InflateImpl.State"] = { __ename__ : true, __constructs__ : ["Head","Block","CData","Flat","Crc","Dist","DistOne","Done"]
	,Head: {_hx_index:0,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Block: {_hx_index:1,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,CData: {_hx_index:2,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Flat: {_hx_index:3,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Crc: {_hx_index:4,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Dist: {_hx_index:5,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,DistOne: {_hx_index:6,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
	,Done: {_hx_index:7,__enum__:"haxe.zip._InflateImpl.State",toString:$estr}
};
haxe_zip__$InflateImpl_State.__empty_constructs__ = [haxe_zip__$InflateImpl_State.Head,haxe_zip__$InflateImpl_State.Block,haxe_zip__$InflateImpl_State.CData,haxe_zip__$InflateImpl_State.Flat,haxe_zip__$InflateImpl_State.Crc,haxe_zip__$InflateImpl_State.Dist,haxe_zip__$InflateImpl_State.DistOne,haxe_zip__$InflateImpl_State.Done];
var haxe_zip_InflateImpl = function(i,header,crc) {
	if(crc == null) {
		crc = true;
	}
	if(header == null) {
		header = true;
	}
	this.isFinal = false;
	this.htools = new haxe_zip_HuffTools();
	this.huffman = this.buildFixedHuffman();
	this.huffdist = null;
	this.len = 0;
	this.dist = 0;
	this.state = header ? haxe_zip__$InflateImpl_State.Head : haxe_zip__$InflateImpl_State.Block;
	this.input = i;
	this.bits = 0;
	this.nbits = 0;
	this.needed = 0;
	this.output = null;
	this.outpos = 0;
	this.lengths = [];
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.lengths.push(-1);
	this.window = new haxe_zip__$InflateImpl_Window(crc);
};
$hxClasses["haxe.zip.InflateImpl"] = haxe_zip_InflateImpl;
haxe_zip_InflateImpl.__name__ = "haxe.zip.InflateImpl";
haxe_zip_InflateImpl.run = function(i,bufsize) {
	if(bufsize == null) {
		bufsize = 65536;
	}
	var buf = new haxe_io_Bytes(new ArrayBuffer(bufsize));
	var output = new haxe_io_BytesBuffer();
	var inflate = new haxe_zip_InflateImpl(i);
	while(true) {
		var len = inflate.readBytes(buf,0,bufsize);
		output.addBytes(buf,0,len);
		if(len < bufsize) {
			break;
		}
	}
	return output.getBytes();
};
haxe_zip_InflateImpl.prototype = {
	buildFixedHuffman: function() {
		if(haxe_zip_InflateImpl.FIXED_HUFFMAN != null) {
			return haxe_zip_InflateImpl.FIXED_HUFFMAN;
		}
		var a = [];
		var _g = 0;
		while(_g < 288) {
			var n = _g++;
			a.push(n <= 143 ? 8 : n <= 255 ? 9 : n <= 279 ? 7 : 8);
		}
		haxe_zip_InflateImpl.FIXED_HUFFMAN = this.htools.make(a,0,288,10);
		return haxe_zip_InflateImpl.FIXED_HUFFMAN;
	}
	,readBytes: function(b,pos,len) {
		this.needed = len;
		this.outpos = pos;
		this.output = b;
		if(len > 0) {
			while(this.inflateLoop()) {
			}
		}
		return len - this.needed;
	}
	,getBits: function(n) {
		while(this.nbits < n) {
			this.bits |= this.input.readByte() << this.nbits;
			this.nbits += 8;
		}
		var b = this.bits & (1 << n) - 1;
		this.nbits -= n;
		this.bits >>= n;
		return b;
	}
	,getBit: function() {
		if(this.nbits == 0) {
			this.nbits = 8;
			this.bits = this.input.readByte();
		}
		var b = (this.bits & 1) == 1;
		this.nbits--;
		this.bits >>= 1;
		return b;
	}
	,getRevBits: function(n) {
		if(n == 0) {
			return 0;
		} else if(this.getBit()) {
			return 1 << n - 1 | this.getRevBits(n - 1);
		} else {
			return this.getRevBits(n - 1);
		}
	}
	,resetBits: function() {
		this.bits = 0;
		this.nbits = 0;
	}
	,addBytes: function(b,p,len) {
		this.window.addBytes(b,p,len);
		this.output.blit(this.outpos,b,p,len);
		this.needed -= len;
		this.outpos += len;
	}
	,addByte: function(b) {
		this.window.addByte(b);
		this.output.b[this.outpos] = b;
		this.needed--;
		this.outpos++;
	}
	,addDistOne: function(n) {
		var c = this.window.getLastChar();
		var _g = 0;
		var _g1 = n;
		while(_g < _g1) {
			var i = _g++;
			this.addByte(c);
		}
	}
	,addDist: function(d,len) {
		this.addBytes(this.window.buffer,this.window.pos - d,len);
	}
	,applyHuffman: function(h) {
		switch(h._hx_index) {
		case 0:
			var n = h.i;
			return n;
		case 1:
			var b = h.right;
			var a = h.left;
			return this.applyHuffman(this.getBit() ? b : a);
		case 2:
			var tbl = h.table;
			var n = h.n;
			return this.applyHuffman(tbl[this.getBits(n)]);
		}
	}
	,inflateLengths: function(a,max) {
		var i = 0;
		var prev = 0;
		while(i < max) {
			var n = this.applyHuffman(this.huffman);
			switch(n) {
			case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 10:case 11:case 12:case 13:case 14:case 15:
				prev = n;
				a[i] = n;
				++i;
				break;
			case 16:
				var end = i + 3 + this.getBits(2);
				if(end > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				while(i < end) {
					a[i] = prev;
					++i;
				}
				break;
			case 17:
				i += 3 + this.getBits(3);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			case 18:
				i += 11 + this.getBits(7);
				if(i > max) {
					throw haxe_Exception.thrown("Invalid data");
				}
				break;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
		}
	}
	,inflateLoop: function() {
		switch(this.state._hx_index) {
		case 0:
			var cmf = this.input.readByte();
			var cm = cmf & 15;
			var cinfo = cmf >> 4;
			if(cm != 8) {
				throw haxe_Exception.thrown("Invalid data");
			}
			var flg = this.input.readByte();
			var fdict = (flg & 32) != 0;
			if(((cmf << 8) + flg) % 31 != 0) {
				throw haxe_Exception.thrown("Invalid data");
			}
			if(fdict) {
				throw haxe_Exception.thrown("Unsupported dictionary");
			}
			this.state = haxe_zip__$InflateImpl_State.Block;
			return true;
		case 1:
			this.isFinal = this.getBit();
			switch(this.getBits(2)) {
			case 0:
				this.len = this.input.readUInt16();
				var nlen = this.input.readUInt16();
				if(nlen != 65535 - this.len) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = haxe_zip__$InflateImpl_State.Flat;
				var r = this.inflateLoop();
				this.resetBits();
				return r;
			case 1:
				this.huffman = this.buildFixedHuffman();
				this.huffdist = null;
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			case 2:
				var hlit = this.getBits(5) + 257;
				var hdist = this.getBits(5) + 1;
				var hclen = this.getBits(4) + 4;
				var _g = 0;
				var _g1 = hclen;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = this.getBits(3);
				}
				var _g = hclen;
				var _g1 = 19;
				while(_g < _g1) {
					var i = _g++;
					this.lengths[haxe_zip_InflateImpl.CODE_LENGTHS_POS[i]] = 0;
				}
				this.huffman = this.htools.make(this.lengths,0,19,8);
				var lengths = [];
				var _g = 0;
				var _g1 = hlit + hdist;
				while(_g < _g1) {
					var i = _g++;
					lengths.push(0);
				}
				this.inflateLengths(lengths,hlit + hdist);
				this.huffdist = this.htools.make(lengths,hlit,hdist,16);
				this.huffman = this.htools.make(lengths,0,hlit,16);
				this.state = haxe_zip__$InflateImpl_State.CData;
				return true;
			default:
				throw haxe_Exception.thrown("Invalid data");
			}
			break;
		case 2:
			var n = this.applyHuffman(this.huffman);
			if(n < 256) {
				this.addByte(n);
				return this.needed > 0;
			} else if(n == 256) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
				return true;
			} else {
				n -= 257;
				var extra_bits = haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL[n];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.len = haxe_zip_InflateImpl.LEN_BASE_VAL_TBL[n] + this.getBits(extra_bits);
				var dist_code = this.huffdist == null ? this.getRevBits(5) : this.applyHuffman(this.huffdist);
				extra_bits = haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL[dist_code];
				if(extra_bits == -1) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.dist = haxe_zip_InflateImpl.DIST_BASE_VAL_TBL[dist_code] + this.getBits(extra_bits);
				if(this.dist > this.window.available()) {
					throw haxe_Exception.thrown("Invalid data");
				}
				this.state = this.dist == 1 ? haxe_zip__$InflateImpl_State.DistOne : haxe_zip__$InflateImpl_State.Dist;
				return true;
			}
			break;
		case 3:
			var rlen = this.len < this.needed ? this.len : this.needed;
			var bytes = this.input.read(rlen);
			this.len -= rlen;
			this.addBytes(bytes,0,rlen);
			if(this.len == 0) {
				this.state = this.isFinal ? haxe_zip__$InflateImpl_State.Crc : haxe_zip__$InflateImpl_State.Block;
			}
			return this.needed > 0;
		case 4:
			var calc = this.window.checksum();
			if(calc == null) {
				this.state = haxe_zip__$InflateImpl_State.Done;
				return true;
			}
			var crc = haxe_crypto_Adler32.read(this.input);
			if(!calc.equals(crc)) {
				throw haxe_Exception.thrown("Invalid CRC");
			}
			this.state = haxe_zip__$InflateImpl_State.Done;
			return true;
		case 5:
			while(this.len > 0 && this.needed > 0) {
				var rdist = this.len < this.dist ? this.len : this.dist;
				var rlen = this.needed < rdist ? this.needed : rdist;
				this.addDist(this.dist,rlen);
				this.len -= rlen;
			}
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 6:
			var rlen = this.len < this.needed ? this.len : this.needed;
			this.addDistOne(rlen);
			this.len -= rlen;
			if(this.len == 0) {
				this.state = haxe_zip__$InflateImpl_State.CData;
			}
			return this.needed > 0;
		case 7:
			return false;
		}
	}
	,__class__: haxe_zip_InflateImpl
};
var haxe_zip_Uncompress = function() { };
$hxClasses["haxe.zip.Uncompress"] = haxe_zip_Uncompress;
haxe_zip_Uncompress.__name__ = "haxe.zip.Uncompress";
haxe_zip_Uncompress.run = function(src,bufsize) {
	return haxe_zip_InflateImpl.run(new haxe_io_BytesInput(src),bufsize);
};
var hxd_BitmapData = function(width,height) {
	if(!(width == -101 && height == -102)) {
		var canvas = window.document.createElement("canvas");
		canvas.width = width;
		canvas.height = height;
		this.ctx = canvas.getContext("2d",null);
	}
};
$hxClasses["hxd.BitmapData"] = hxd_BitmapData;
hxd_BitmapData.__name__ = "hxd.BitmapData";
hxd_BitmapData.prototype = {
	clear: function(color) {
		this.fill(0,0,this.ctx.canvas.width,this.ctx.canvas.height,color);
	}
	,fill: function(x,y,width,height,color) {
		this.ctx.fillStyle = "rgba(" + (color >> 16 & 255) + ", " + (color >> 8 & 255) + ", " + (color & 255) + ", " + (color >>> 24) / 255 + ")";
		this.ctx.fillRect(x,y,width,height);
	}
	,setPixel: function(x,y,c) {
		var i = this.lockImage;
		if(i != null) {
			var a = x + y * i.width << 2;
			i.data[a] = c >> 16 & 255;
			i.data[a | 1] = c >> 8 & 255;
			i.data[a | 2] = c & 255;
			i.data[a | 3] = c >>> 24 & 255;
			return;
		}
		var i = this.pixel;
		if(i == null) {
			i = this.ctx.createImageData(1,1);
			this.pixel = i;
		}
		i.data[0] = c >> 16 & 255;
		i.data[1] = c >> 8 & 255;
		i.data[2] = c & 255;
		i.data[3] = c >>> 24 & 255;
		this.ctx.putImageData(i,x,y);
	}
	,getPixels: function() {
		var w = this.ctx.canvas.width;
		var h = this.ctx.canvas.height;
		var data = this.ctx.getImageData(0,0,w,h).data;
		var pixels = data.buffer;
		return new hxd_Pixels(w,h,haxe_io_Bytes.ofData(pixels),hxd_PixelFormat.RGBA);
	}
	,__class__: hxd_BitmapData
};
var hxd_Charset = function() {
	var _gthis = this;
	this.map = new haxe_ds_IntMap();
	var _g = 0;
	while(_g < 94) {
		var i = _g++;
		_gthis.map.h[65281 + i] = 33 + i;
	}
	var _g = 192;
	var _g1 = 199;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 65;
	}
	var _g = 224;
	var _g1 = 231;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 97;
	}
	var _g = 200;
	var _g1 = 204;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 69;
	}
	var _g = 232;
	var _g1 = 236;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 101;
	}
	var _g = 204;
	var _g1 = 208;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 73;
	}
	var _g = 236;
	var _g1 = 240;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 105;
	}
	var _g = 210;
	var _g1 = 215;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 79;
	}
	var _g = 242;
	var _g1 = 247;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 111;
	}
	var _g = 217;
	var _g1 = 221;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 85;
	}
	var _g = 249;
	var _g1 = 253;
	while(_g < _g1) {
		var i = _g++;
		_gthis.map.h[i] = 117;
	}
	_gthis.map.h[199] = 67;
	_gthis.map.h[231] = 67;
	_gthis.map.h[208] = 68;
	_gthis.map.h[222] = 100;
	_gthis.map.h[209] = 78;
	_gthis.map.h[241] = 110;
	_gthis.map.h[221] = 89;
	_gthis.map.h[253] = 121;
	_gthis.map.h[255] = 121;
	_gthis.map.h[8364] = 69;
	_gthis.map.h[12288] = 32;
	_gthis.map.h[160] = 32;
	_gthis.map.h[171] = 34;
	_gthis.map.h[187] = 34;
	_gthis.map.h[8220] = 34;
	_gthis.map.h[8221] = 34;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8217] = 39;
	_gthis.map.h[180] = 39;
	_gthis.map.h[8216] = 39;
	_gthis.map.h[8249] = 60;
	_gthis.map.h[8250] = 62;
	_gthis.map.h[8211] = 45;
};
$hxClasses["hxd.Charset"] = hxd_Charset;
hxd_Charset.__name__ = "hxd.Charset";
hxd_Charset.getDefault = function() {
	if(hxd_Charset.inst == null) {
		hxd_Charset.inst = new hxd_Charset();
	}
	return hxd_Charset.inst;
};
hxd_Charset.prototype = {
	resolveChar: function(code,glyphs) {
		var c = code;
		while(c != null) {
			var g = glyphs.h[c];
			if(g != null) {
				return g;
			}
			c = this.map.h[c];
		}
		return null;
	}
	,isCJK: function(code) {
		if(!(code >= 11904 && code <= 42191 || code >= 63744 && code <= 64255)) {
			if(code >= 131072) {
				return code <= 262141;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,isSpace: function(code) {
		if(code != 32) {
			return code == 12288;
		} else {
			return true;
		}
	}
	,isBreakChar: function(code) {
		if(!this.isSpace(code)) {
			return this.isCJK(code);
		} else {
			return true;
		}
	}
	,isComplementChar: function(code) {
		return hxd_Charset.complementChars.h.hasOwnProperty(code);
	}
	,__class__: hxd_Charset
};
var hxd_Cursor = $hxEnums["hxd.Cursor"] = { __ename__ : true, __constructs__ : ["Default","Button","Move","TextInput","Hide","Custom","Callback"]
	,Default: {_hx_index:0,__enum__:"hxd.Cursor",toString:$estr}
	,Button: {_hx_index:1,__enum__:"hxd.Cursor",toString:$estr}
	,Move: {_hx_index:2,__enum__:"hxd.Cursor",toString:$estr}
	,TextInput: {_hx_index:3,__enum__:"hxd.Cursor",toString:$estr}
	,Hide: {_hx_index:4,__enum__:"hxd.Cursor",toString:$estr}
	,Custom: ($_=function(custom) { return {_hx_index:5,custom:custom,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["custom"],$_)
	,Callback: ($_=function(f) { return {_hx_index:6,f:f,__enum__:"hxd.Cursor",toString:$estr}; },$_.__params__ = ["f"],$_)
};
hxd_Cursor.__empty_constructs__ = [hxd_Cursor.Default,hxd_Cursor.Button,hxd_Cursor.Move,hxd_Cursor.TextInput,hxd_Cursor.Hide];
var hxd_CustomCursor = function(frames,speed,offsetX,offsetY) {
	this.frames = frames;
	this.speed = speed;
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.frameDelay = 1 / speed;
	this.frameTime = 0;
	this.frameIndex = 0;
};
$hxClasses["hxd.CustomCursor"] = hxd_CustomCursor;
hxd_CustomCursor.__name__ = "hxd.CustomCursor";
hxd_CustomCursor.prototype = {
	reset: function() {
		this.frameTime = 0;
		this.frameIndex = 0;
	}
	,update: function(dt) {
		var newTime = this.frameTime + dt;
		var delay = this.frameDelay;
		var index = this.frameIndex;
		while(newTime >= delay) {
			newTime -= delay;
			++index;
		}
		this.frameTime = newTime;
		if(index >= this.frames.length) {
			index %= this.frames.length;
		}
		if(index != this.frameIndex) {
			this.frameIndex = index;
			return index;
		}
		return -1;
	}
	,__class__: hxd_CustomCursor
};
var hxd_EventKind = $hxEnums["hxd.EventKind"] = { __ename__ : true, __constructs__ : ["EPush","ERelease","EMove","EOver","EOut","EWheel","EFocus","EFocusLost","EKeyDown","EKeyUp","EReleaseOutside","ETextInput","ECheck"]
	,EPush: {_hx_index:0,__enum__:"hxd.EventKind",toString:$estr}
	,ERelease: {_hx_index:1,__enum__:"hxd.EventKind",toString:$estr}
	,EMove: {_hx_index:2,__enum__:"hxd.EventKind",toString:$estr}
	,EOver: {_hx_index:3,__enum__:"hxd.EventKind",toString:$estr}
	,EOut: {_hx_index:4,__enum__:"hxd.EventKind",toString:$estr}
	,EWheel: {_hx_index:5,__enum__:"hxd.EventKind",toString:$estr}
	,EFocus: {_hx_index:6,__enum__:"hxd.EventKind",toString:$estr}
	,EFocusLost: {_hx_index:7,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyDown: {_hx_index:8,__enum__:"hxd.EventKind",toString:$estr}
	,EKeyUp: {_hx_index:9,__enum__:"hxd.EventKind",toString:$estr}
	,EReleaseOutside: {_hx_index:10,__enum__:"hxd.EventKind",toString:$estr}
	,ETextInput: {_hx_index:11,__enum__:"hxd.EventKind",toString:$estr}
	,ECheck: {_hx_index:12,__enum__:"hxd.EventKind",toString:$estr}
};
hxd_EventKind.__empty_constructs__ = [hxd_EventKind.EPush,hxd_EventKind.ERelease,hxd_EventKind.EMove,hxd_EventKind.EOver,hxd_EventKind.EOut,hxd_EventKind.EWheel,hxd_EventKind.EFocus,hxd_EventKind.EFocusLost,hxd_EventKind.EKeyDown,hxd_EventKind.EKeyUp,hxd_EventKind.EReleaseOutside,hxd_EventKind.ETextInput,hxd_EventKind.ECheck];
var hxd_Event = function(k,x,y) {
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.button = 0;
	this.kind = k;
	this.relX = x;
	this.relY = y;
};
$hxClasses["hxd.Event"] = hxd_Event;
hxd_Event.__name__ = "hxd.Event";
hxd_Event.prototype = {
	__class__: hxd_Event
};
var hxd__$FloatBuffer_Float32Expand = {};
hxd__$FloatBuffer_Float32Expand._new = function(length) {
	var this1 = { pos : length, array : new Float32Array(new ArrayBuffer(length << 2))};
	return this1;
};
var hxd_Key = function() { };
$hxClasses["hxd.Key"] = hxd_Key;
hxd_Key.__name__ = "hxd.Key";
hxd_Key.isDown = function(code) {
	return hxd_Key.keyPressed[code] > 0;
};
hxd_Key.isPressed = function(code) {
	return hxd_Key.keyPressed[code] == hxd_Timer.frameCount + 1 - 1;
};
hxd_Key.initialize = function() {
	if(hxd_Key.initDone) {
		hxd_Key.dispose();
	}
	hxd_Key.initDone = true;
	hxd_Key.keyPressed = [];
	hxd_Window.getInstance().addEventTarget(hxd_Key.onEvent);
};
hxd_Key.dispose = function() {
	if(hxd_Key.initDone) {
		hxd_Window.getInstance().removeEventTarget(hxd_Key.onEvent);
		hxd_Key.initDone = false;
		hxd_Key.keyPressed = [];
	}
};
hxd_Key.onEvent = function(e) {
	switch(e.kind._hx_index) {
	case 0:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = hxd_Timer.frameCount + 1;
		}
		break;
	case 1:
		if(e.button < 5) {
			hxd_Key.keyPressed[e.button] = -(hxd_Timer.frameCount + 1);
		}
		break;
	case 5:
		hxd_Key.keyPressed[e.wheelDelta > 0 ? 6 : 5] = hxd_Timer.frameCount + 1;
		break;
	case 8:
		if(!hxd_Key.ALLOW_KEY_REPEAT && hxd_Key.keyPressed[e.keyCode] > 0) {
			return;
		}
		hxd_Key.keyPressed[e.keyCode] = hxd_Timer.frameCount + 1;
		break;
	case 9:
		hxd_Key.keyPressed[e.keyCode] = -(hxd_Timer.frameCount + 1);
		break;
	default:
	}
};
var hxd_Flags = $hxEnums["hxd.Flags"] = { __ename__ : true, __constructs__ : ["ReadOnly","AlphaPremultiplied","FlipY"]
	,ReadOnly: {_hx_index:0,__enum__:"hxd.Flags",toString:$estr}
	,AlphaPremultiplied: {_hx_index:1,__enum__:"hxd.Flags",toString:$estr}
	,FlipY: {_hx_index:2,__enum__:"hxd.Flags",toString:$estr}
};
hxd_Flags.__empty_constructs__ = [hxd_Flags.ReadOnly,hxd_Flags.AlphaPremultiplied,hxd_Flags.FlipY];
var hxd_PixelsARGB = {};
hxd_PixelsARGB.fromPixels = function(p) {
	p.convert(hxd_PixelFormat.ARGB);
	p.setFlip(false);
	return p;
};
var hxd_Pixels = function(width,height,bytes,format,offset) {
	if(offset == null) {
		offset = 0;
	}
	this.width = width;
	this.height = height;
	this.bytes = bytes;
	this.set_innerFormat(format);
	this.offset = offset;
	var i = 0;
	if(i == null) {
		i = 0;
	}
	var this1 = i;
	this.flags = this1;
};
$hxClasses["hxd.Pixels"] = hxd_Pixels;
hxd_Pixels.__name__ = "hxd.Pixels";
hxd_Pixels.calcDataSize = function(width,height,format) {
	if(format._hx_index == 21) {
		var _g = format.v;
		return (height + 3 >> 2 << 2) * hxd_Pixels.calcStride(width,format);
	} else {
		return height * hxd_Pixels.calcStride(width,format);
	}
};
hxd_Pixels.calcStride = function(width,format) {
	var tmp;
	switch(format._hx_index) {
	case 3:case 20:
		tmp = 8;
		break;
	case 4:
		tmp = 16;
		break;
	case 5:
		tmp = 1;
		break;
	case 6:case 18:
		tmp = 2;
		break;
	case 7:
		tmp = 4;
		break;
	case 8:
		tmp = 2;
		break;
	case 9:
		tmp = 4;
		break;
	case 10:
		tmp = 8;
		break;
	case 11:
		tmp = 3;
		break;
	case 13:
		tmp = 12;
		break;
	case 0:case 1:case 2:case 14:case 15:
		tmp = 4;
		break;
	case 16:
		tmp = 4;
		break;
	case 17:
		tmp = 4;
		break;
	case 12:case 19:
		tmp = 6;
		break;
	case 21:
		var n = format.v;
		var blocks = width + 3 >> 2;
		if(n == 1 || n == 4) {
			return blocks << 1;
		}
		return blocks << 2;
	}
	return width * tmp;
};
hxd_Pixels.alloc = function(width,height,format) {
	return new hxd_Pixels(width,height,new haxe_io_Bytes(new ArrayBuffer(hxd_Pixels.calcDataSize(width,height,format))),format);
};
hxd_Pixels.prototype = {
	set_innerFormat: function(fmt) {
		this.innerFormat = fmt;
		this.stride = hxd_Pixels.calcStride(this.width,fmt);
		this.dataSize = hxd_Pixels.calcDataSize(this.width,this.height,fmt);
		this.bytesPerPixel = hxd_Pixels.calcStride(1,fmt);
		return fmt;
	}
	,invalidFormat: function() {
		throw haxe_Exception.thrown("Unsupported format for this operation : " + Std.string(this.innerFormat));
	}
	,copyInner: function() {
		var old = this.bytes;
		this.bytes = new haxe_io_Bytes(new ArrayBuffer(this.dataSize));
		this.bytes.blit(0,old,this.offset,this.dataSize);
		this.offset = 0;
		this.flags &= -1 - (1 << hxd_Flags.ReadOnly._hx_index);
	}
	,setFlip: function(b) {
		if(b == null) {
			b = false;
		}
		if((this.flags & 1 << hxd_Flags.FlipY._hx_index) != 0 == b) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		if(b) {
			this.flags |= 1 << hxd_Flags.FlipY._hx_index;
		} else {
			this.flags &= -1 - (1 << hxd_Flags.FlipY._hx_index);
		}
		if(this.stride % 4 != 0) {
			this.invalidFormat();
		}
		var _g = 0;
		var _g1 = this.height >> 1;
		while(_g < _g1) {
			var y = _g++;
			var p1 = y * this.stride + this.offset;
			var p2 = (this.height - 1 - y) * this.stride + this.offset;
			var _g2 = 0;
			var _g3 = this.stride >> 2;
			while(_g2 < _g3) {
				var x = _g2++;
				var a = this.bytes.getInt32(p1);
				var b = this.bytes.getInt32(p2);
				this.bytes.setInt32(p1,b);
				this.bytes.setInt32(p2,a);
				p1 += 4;
				p2 += 4;
			}
		}
	}
	,convert: function(target) {
		if(this.innerFormat == target) {
			return;
		}
		if((this.flags & 1 << hxd_Flags.ReadOnly._hx_index) != 0) {
			this.copyInner();
		}
		var this1 = this.bytes.b;
		var bytes = this1;
		var _g = this.innerFormat;
		switch(_g._hx_index) {
		case 0:
			switch(target._hx_index) {
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var v = bytes[p + 1];
					bytes[p] = v;
					var v1 = bytes[p + 2];
					bytes[p + 1] = v1;
					var v2 = bytes[p + 3];
					bytes[p + 2] = v2;
					bytes[p + 3] = a;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 1:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p];
					var r = bytes[p + 1];
					var g = bytes[p + 2];
					var b = bytes[p + 3];
					bytes[p++] = b;
					bytes[p++] = g;
					bytes[p++] = r;
					bytes[p] = a;
				}
				break;
			case 2:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 2:
			switch(target._hx_index) {
			case 0:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var a = bytes[p + 3];
					var v = bytes[p + 2];
					bytes[p + 3] = v;
					var v1 = bytes[p + 1];
					bytes[p + 2] = v1;
					var v2 = bytes[p];
					bytes[p + 1] = v2;
					bytes[p] = a;
				}
				break;
			case 1:
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var p = (i << 2) + this.offset;
					var b = bytes[p];
					var r = bytes[p + 2];
					bytes[p] = r;
					bytes[p + 2] = b;
				}
				break;
			case 5:
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height));
				var this1 = nbytes.b;
				var out = this1;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = bytes[i << 2];
					out[i] = v;
				}
				this.bytes = nbytes;
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 4:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.height * this.width * 4));
				var this1 = nbytes.b;
				var out = this1;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					nbytes.setFloat(i << 2,this.bytes.getFloat(i << 4));
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 7:
			switch(target._hx_index) {
			case 1:case 2:
				var fbytes = this.bytes;
				var p = 0;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var v = fbytes.getFloat(p) * 255 | 0;
					if(v < 0) {
						v = 0;
					} else if(v > 255) {
						v = 255;
					}
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = v;
					bytes[p++] = 255;
				}
				break;
			default:
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 18:
			if(target._hx_index == 7) {
				var nbytes = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
				var fbytes = this.bytes;
				var _g1 = 0;
				var _g2 = this.width * this.height;
				while(_g1 < _g2) {
					var i = _g1++;
					var nv = fbytes.getUInt16(i << 1);
					nbytes.setFloat(i << 2,nv / 65535.0);
				}
				this.bytes = nbytes;
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		case 21:
			if(target._hx_index == 21) {
				var a = _g.v;
				var b = target.v;
				if(a != b) {
					throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
				}
			} else {
				throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
			}
			break;
		default:
			throw haxe_Exception.thrown("Cannot convert from " + Std.string(this.innerFormat) + " to " + Std.string(target));
		}
		this.set_innerFormat(target);
	}
	,dispose: function() {
		this.bytes = null;
	}
	,toString: function() {
		return "Pixels(" + this.width + "x" + this.height + " " + Std.string(this.innerFormat) + ")";
	}
	,__class__: hxd_Pixels
};
var hxd_SceneEvents = function($window) {
	this.defaultCursor = hxd_Cursor.Default;
	this.mouseCheckMove = true;
	this.enablePhysicalMouse = true;
	this.isOut = false;
	this.onOver = new hxd_Event(hxd_EventKind.EOver);
	this.onOut = new hxd_Event(hxd_EventKind.EOut);
	this.checkPos = new hxd_Event(hxd_EventKind.ECheck);
	this.focusLost = new hxd_Event(hxd_EventKind.EFocusLost);
	this.lastTouch = 0;
	this.mouseY = -1.;
	this.mouseX = -1.;
	this.overIndex = -1;
	this.scenes = [];
	this.pendingEvents = [];
	this.pushList = [];
	this.overList = [];
	this.overCandidates = [];
	if($window == null) {
		$window = hxd_Window.getInstance();
	}
	this.window = $window;
	$window.addEventTarget($bind(this,this.onEvent));
};
$hxClasses["hxd.SceneEvents"] = hxd_SceneEvents;
hxd_SceneEvents.__name__ = "hxd.SceneEvents";
hxd_SceneEvents.prototype = {
	onRemove: function(i) {
		if(i == this.currentFocus) {
			this.currentFocus = null;
		}
		if(this.overIndex >= 0) {
			var index = this.overList.indexOf(i);
			if(index >= 0) {
				HxOverrides.remove(this.overList,i);
				if(index < this.overIndex) {
					this.overIndex--;
				}
			}
		} else {
			HxOverrides.remove(this.overList,i);
			this.selectCursor();
		}
		HxOverrides.remove(this.pushList,i);
	}
	,addScene: function(s,index) {
		s.setEvents(this);
		if(index == null) {
			this.scenes.push(s);
		} else {
			this.scenes.splice(index,0,s);
		}
	}
	,blur: function() {
		if(this.currentFocus == null) {
			return;
		}
		this.focusLost.cancel = false;
		this.currentFocus.handleEvent(this.focusLost);
		if(!this.focusLost.cancel) {
			this.currentFocus = null;
		}
	}
	,checkFocus: function() {
		if(this.currentFocus == null) {
			return;
		}
		var s = this.currentFocus.getInteractiveScene();
		if(s == null) {
			this.currentFocus = null;
			return;
		}
		if(!s.isInteractiveVisible(this.currentFocus)) {
			this.blur();
		}
	}
	,emitEvent: function(event) {
		var oldX = event.relX;
		var oldY = event.relY;
		var overCandidateCount = 0;
		var handled = false;
		var checkOver = false;
		var fillOver = false;
		var checkPush = false;
		var cancelFocus = false;
		var updateCursor = false;
		this.overIndex = 0;
		switch(event.kind._hx_index) {
		case 0:
			cancelFocus = true;
			checkPush = true;
			break;
		case 1:
			checkPush = true;
			break;
		case 5:case 8:case 9:case 11:
			if(this.currentFocus != null) {
				event.relX = event.relY = 0;
				this.currentFocus.handleEvent(event);
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					return;
				}
			}
			break;
		case 2:case 12:
			checkOver = true;
			fillOver = true;
			break;
		default:
		}
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var last = null;
			while(true) {
				var i = s.handleEvent(event,last);
				if(i == null) {
					event.relX = oldX;
					event.relY = oldY;
					break;
				}
				if(checkOver) {
					if(fillOver) {
						var idx = this.overList.indexOf(i);
						if(idx == -1) {
							if(this.overCandidates.length == overCandidateCount) {
								this.overCandidates[overCandidateCount] = { i : i, s : s, x : event.relX, y : event.relY, z : event.relZ};
							} else {
								var info = this.overCandidates[overCandidateCount];
								info.i = i;
								info.s = s;
								info.x = event.relX;
								info.y = event.relY;
								info.z = event.relZ;
							}
							++overCandidateCount;
							this.overList.splice(this.overIndex++,0,i);
							updateCursor = true;
						} else {
							if(idx < this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx + 1];
									++idx;
									if(!(idx < this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							} else if(idx > this.overIndex) {
								while(true) {
									this.overList[idx] = this.overList[idx - 1];
									--idx;
									if(!(idx > this.overIndex)) {
										break;
									}
								}
								this.overList[this.overIndex] = i;
								updateCursor = true;
							}
							this.overIndex++;
						}
						fillOver = event.propagate;
					}
				} else {
					if(checkPush) {
						if(event.kind == hxd_EventKind.EPush) {
							this.pushList.push(i);
						} else {
							HxOverrides.remove(this.pushList,i);
						}
					}
					if(cancelFocus && i == this.currentFocus) {
						cancelFocus = false;
					}
				}
				event.relX = oldX;
				event.relY = oldY;
				if(!event.propagate) {
					handled = true;
					break;
				}
				last = i;
				event.propagate = false;
			}
			if(handled) {
				break;
			}
		}
		if(cancelFocus && this.currentFocus != null) {
			this.blur();
		}
		if(checkOver) {
			if(this.overIndex < this.overList.length) {
				while(this.overIndex < this.overList.length) {
					var e = this.overList.pop();
					e.handleEvent(this.onOut);
				}
				updateCursor = true;
			}
			if(overCandidateCount != 0) {
				var i = 0;
				var ev = this.onOver;
				while(true) {
					var info = this.overCandidates[i++];
					ev.relX = info.x;
					ev.relY = info.y;
					ev.relZ = info.z;
					if(info.s.isInteractiveVisible(info.i)) {
						info.i.handleEvent(ev);
					} else {
						HxOverrides.remove(this.overList,info.i);
					}
					info.i = null;
					info.s = null;
					if(!(i < overCandidateCount)) {
						break;
					}
				}
			}
		}
		this.overIndex = -1;
		if(updateCursor) {
			this.selectCursor();
		}
		if(!handled && event != this.checkPos) {
			if(event.kind == hxd_EventKind.EPush) {
				this.pushList.push(null);
			} else if(event.kind == hxd_EventKind.ERelease) {
				HxOverrides.remove(this.pushList,null);
			}
			this.dispatchListeners(event);
		}
		if(event.kind == hxd_EventKind.ERelease && this.pushList.length > 0) {
			var _g = 0;
			var _g1 = this.pushList;
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(i == null) {
					event.kind = hxd_EventKind.EReleaseOutside;
					this.dispatchListeners(event);
					event.kind = hxd_EventKind.ERelease;
				} else {
					var s = i.getInteractiveScene();
					if(s == null) {
						continue;
					}
					event.kind = hxd_EventKind.EReleaseOutside;
					s.dispatchEvent(event,i);
					event.kind = hxd_EventKind.ERelease;
					event.relX = oldX;
					event.relY = oldY;
				}
			}
			this.pushList = [];
		}
	}
	,checkEvents: function() {
		var old = this.pendingEvents;
		var checkMoved = !this.mouseCheckMove;
		var checkFocused = this.currentFocus == null;
		if(old.length > 0) {
			this.pendingEvents = [];
			var _g = 0;
			while(_g < old.length) {
				var e = old[_g];
				++_g;
				var ox = e.relX;
				var oy = e.relY;
				switch(e.kind._hx_index) {
				case 0:case 1:
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 2:
					checkMoved = true;
					this.mouseX = e.relX;
					this.mouseY = e.relY;
					this.lastTouch = e.touchId;
					break;
				case 3:
					this.isOut = false;
					this.selectCursor();
					continue;
				case 4:
					this.isOut = true;
					if(this.overList.length > 0) {
						var i = this.overList.length - 1;
						while(i >= 0) {
							this.onOut.cancel = false;
							this.overList[i].handleEvent(this.onOut);
							HxOverrides.remove(this.overList,this.overList[i]);
							--i;
						}
						this.selectCursor();
					}
					continue;
				case 5:case 8:case 9:case 11:
					if(!checkFocused) {
						checkFocused = true;
						this.checkFocus();
					}
					break;
				default:
				}
				if(this.currentDrag != null && (this.currentDrag.ref == null || this.currentDrag.ref == e.touchId)) {
					e.propagate = true;
					e.cancel = false;
					this.currentDrag.f(e);
					e.relX = ox;
					e.relY = oy;
					if(!e.propagate) {
						continue;
					}
				}
				this.emitEvent(e);
			}
		}
		if(!checkFocused) {
			this.checkFocus();
		}
		if(!checkMoved && !this.isOut && this.currentDrag == null) {
			this.checkPos.relX = this.mouseX;
			this.checkPos.relY = this.mouseY;
			this.checkPos.touchId = this.lastTouch;
			this.checkPos.cancel = false;
			this.checkPos.propagate = false;
			this.emitEvent(this.checkPos);
		}
	}
	,updateCursor: function(i) {
		if(this.overList.indexOf(i) != -1) {
			this.selectCursor();
		}
	}
	,selectCursor: function() {
		var cur = this.defaultCursor;
		var _g = 0;
		var _g1 = this.overList;
		while(_g < _g1.length) {
			var o = _g1[_g];
			++_g;
			if(o.cursor != null) {
				cur = o.cursor;
				break;
			}
		}
		if(cur._hx_index == 6) {
			var f = cur.f;
			f();
		} else {
			hxd_System.setCursor(cur);
		}
	}
	,onEvent: function(e) {
		if(!this.enablePhysicalMouse && e.kind == hxd_EventKind.EMove) {
			return;
		}
		this.pendingEvents.push(e);
	}
	,dispatchListeners: function(event) {
		var ox = event.relX;
		var oy = event.relY;
		event.propagate = true;
		var _g = 0;
		var _g1 = this.scenes;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			event.cancel = false;
			s.dispatchListeners(event);
			event.relX = ox;
			event.relY = oy;
			if(!event.propagate) {
				break;
			}
		}
	}
	,__class__: hxd_SceneEvents
};
var hxd_Platform = $hxEnums["hxd.Platform"] = { __ename__ : true, __constructs__ : ["IOS","Android","WebGL","PC","Console","FlashPlayer"]
	,IOS: {_hx_index:0,__enum__:"hxd.Platform",toString:$estr}
	,Android: {_hx_index:1,__enum__:"hxd.Platform",toString:$estr}
	,WebGL: {_hx_index:2,__enum__:"hxd.Platform",toString:$estr}
	,PC: {_hx_index:3,__enum__:"hxd.Platform",toString:$estr}
	,Console: {_hx_index:4,__enum__:"hxd.Platform",toString:$estr}
	,FlashPlayer: {_hx_index:5,__enum__:"hxd.Platform",toString:$estr}
};
hxd_Platform.__empty_constructs__ = [hxd_Platform.IOS,hxd_Platform.Android,hxd_Platform.WebGL,hxd_Platform.PC,hxd_Platform.Console,hxd_Platform.FlashPlayer];
var hxd_SystemValue = $hxEnums["hxd.SystemValue"] = { __ename__ : true, __constructs__ : ["IsTouch","IsWindowed","IsMobile"]
	,IsTouch: {_hx_index:0,__enum__:"hxd.SystemValue",toString:$estr}
	,IsWindowed: {_hx_index:1,__enum__:"hxd.SystemValue",toString:$estr}
	,IsMobile: {_hx_index:2,__enum__:"hxd.SystemValue",toString:$estr}
};
hxd_SystemValue.__empty_constructs__ = [hxd_SystemValue.IsTouch,hxd_SystemValue.IsWindowed,hxd_SystemValue.IsMobile];
var hxd_Timer = function() { };
$hxClasses["hxd.Timer"] = hxd_Timer;
hxd_Timer.__name__ = "hxd.Timer";
hxd_Timer.update = function() {
	hxd_Timer.frameCount++;
	var newTime = HxOverrides.now() / 1000;
	hxd_Timer.elapsedTime = newTime - hxd_Timer.lastTimeStamp;
	hxd_Timer.lastTimeStamp = newTime;
	if(hxd_Timer.elapsedTime < hxd_Timer.maxDeltaTime) {
		var a = hxd_Timer.elapsedTime;
		hxd_Timer.currentDT = a + hxd_Timer.smoothFactor * (hxd_Timer.currentDT - a);
	} else {
		hxd_Timer.elapsedTime = 1 / hxd_Timer.wantedFPS;
	}
	hxd_Timer.dt = hxd_Timer.currentDT;
};
hxd_Timer.skip = function() {
	hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
};
var hxd_Window = function(canvas,globalEvents) {
	this.useScreenPixels = true;
	this.curMouseY = 0.;
	this.curMouseX = 0.;
	var _gthis = this;
	var customCanvas = canvas != null;
	this.eventTargets = new haxe_ds_List();
	this.resizeEvents = new haxe_ds_List();
	if(canvas == null) {
		canvas = window.document.getElementById("webgl");
		if(canvas == null) {
			throw haxe_Exception.thrown("Missing canvas #webgl");
		}
		if(canvas.getAttribute("globalEvents") == "1") {
			globalEvents = true;
		}
	}
	this.canvas = canvas;
	this.propagateKeyEvents = globalEvents;
	var propagate = canvas.getAttribute("propagateKeyEvents");
	if(propagate != null) {
		this.propagateKeyEvents = propagate != "0" && propagate != "false";
	}
	this.focused = globalEvents;
	this.element = globalEvents ? window : canvas;
	this.canvasPos = canvas.getBoundingClientRect();
	if(customCanvas) {
		canvas.addEventListener("mousemove",$bind(this,this.onMouseMove));
	} else {
		window.addEventListener("mousemove",$bind(this,this.onMouseMove));
	}
	this.element.addEventListener("mousedown",$bind(this,this.onMouseDown));
	this.element.addEventListener("mouseup",$bind(this,this.onMouseUp));
	this.element.addEventListener("wheel",$bind(this,this.onMouseWheel));
	this.element.addEventListener("touchstart",$bind(this,this.onTouchStart));
	this.element.addEventListener("touchmove",$bind(this,this.onTouchMove));
	this.element.addEventListener("touchend",$bind(this,this.onTouchEnd));
	this.element.addEventListener("keydown",$bind(this,this.onKeyDown));
	this.element.addEventListener("keyup",$bind(this,this.onKeyUp));
	this.element.addEventListener("keypress",$bind(this,this.onKeyPress));
	var _g = $bind(this,this.onFocus);
	var b = false;
	var tmp = function() {
		_g(b);
	};
	this.element.addEventListener("blur",tmp);
	var _g1 = $bind(this,this.onFocus);
	var b1 = true;
	var tmp = function() {
		_g1(b1);
	};
	this.element.addEventListener("focus",tmp);
	canvas.oncontextmenu = function(e) {
		e.stopPropagation();
		e.preventDefault();
		return false;
	};
	if(globalEvents) {
		canvas.addEventListener("mousedown",function(e) {
			_gthis.onMouseDown(e);
			e.stopPropagation();
			e.preventDefault();
		});
		this.element.addEventListener("contextmenu",function(e) {
			e.stopPropagation();
			e.preventDefault();
			return false;
		});
	} else {
		if(canvas.getAttribute("tabindex") == null) {
			canvas.setAttribute("tabindex","1");
		}
		canvas.style.outline = "none";
	}
	this.curW = this.get_width();
	this.curH = this.get_height();
	this.timer = new haxe_Timer(100);
	this.timer.run = $bind(this,this.checkResize);
};
$hxClasses["hxd.Window"] = hxd_Window;
hxd_Window.__name__ = "hxd.Window";
hxd_Window.getInstance = function() {
	if(hxd_Window.inst == null) {
		hxd_Window.inst = new hxd_Window();
	}
	return hxd_Window.inst;
};
hxd_Window.prototype = {
	checkResize: function() {
		this.canvasPos = this.canvas.getBoundingClientRect();
		var cw = this.get_width();
		var ch = this.get_height();
		if(this.curW != cw || this.curH != ch) {
			this.curW = cw;
			this.curH = ch;
			this.onResize(null);
		}
	}
	,event: function(e) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var et = val;
			et(e);
		}
	}
	,addEventTarget: function(et) {
		this.eventTargets.add(et);
	}
	,removeEventTarget: function(et) {
		var _g_head = this.eventTargets.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,et)) {
				this.eventTargets.remove(e);
				break;
			}
		}
	}
	,addResizeEvent: function(f) {
		this.resizeEvents.push(f);
	}
	,removeResizeEvent: function(f) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var e = val;
			if(Reflect.compareMethods(e,f)) {
				this.resizeEvents.remove(f);
				break;
			}
		}
	}
	,onResize: function(e) {
		var _g_head = this.resizeEvents.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var r = val;
			r();
		}
	}
	,getPixelRatio: function() {
		if(this.useScreenPixels) {
			return window.devicePixelRatio;
		} else {
			return 1;
		}
	}
	,get_width: function() {
		return Math.round(this.canvasPos.width * this.getPixelRatio());
	}
	,get_height: function() {
		return Math.round(this.canvasPos.height * this.getPixelRatio());
	}
	,get_mouseX: function() {
		return Math.round((this.curMouseX - this.canvasPos.left) * this.getPixelRatio());
	}
	,get_mouseY: function() {
		return Math.round((this.curMouseY - this.canvasPos.top) * this.getPixelRatio());
	}
	,onMouseDown: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.EPush,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseUp: function(e) {
		if(e.clientX != this.curMouseX || e.clientY != this.curMouseY) {
			this.onMouseMove(e);
		}
		var ev = new hxd_Event(hxd_EventKind.ERelease,this.get_mouseX(),this.get_mouseY());
		var _g = e.button;
		var tmp;
		switch(_g) {
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 1;
			break;
		default:
			var x = _g;
			tmp = x;
		}
		ev.button = tmp;
		this.event(ev);
	}
	,onMouseMove: function(e) {
		this.curMouseX = e.clientX;
		this.curMouseY = e.clientY;
		this.event(new hxd_Event(hxd_EventKind.EMove,this.get_mouseX(),this.get_mouseY()));
	}
	,onMouseWheel: function(e) {
		e.preventDefault();
		var ev = new hxd_Event(hxd_EventKind.EWheel,this.get_mouseX(),this.get_mouseY());
		ev.wheelDelta = e.deltaY / 120;
		this.event(ev);
	}
	,onTouchStart: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EPush,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchMove: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.EMove,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onTouchEnd: function(e) {
		e.preventDefault();
		var x;
		var y;
		var ev;
		var _g = 0;
		var _g1 = e.changedTouches;
		while(_g < _g1.length) {
			var touch = _g1[_g];
			++_g;
			x = Math.round((touch.clientX - this.canvasPos.left) * this.getPixelRatio());
			y = Math.round((touch.clientY - this.canvasPos.top) * this.getPixelRatio());
			ev = new hxd_Event(hxd_EventKind.ERelease,x,y);
			ev.touchId = touch.identifier;
			this.event(ev);
		}
	}
	,onKeyUp: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyUp,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onKeyDown: function(e) {
		var ev = new hxd_Event(hxd_EventKind.EKeyDown,this.get_mouseX(),this.get_mouseY());
		ev.keyCode = e.keyCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			switch(ev.keyCode) {
			case 8:case 9:case 16:case 17:case 33:case 34:case 35:case 36:case 37:case 38:case 39:case 40:
				e.preventDefault();
				break;
			default:
			}
			e.stopPropagation();
		}
	}
	,onKeyPress: function(e) {
		var ev = new hxd_Event(hxd_EventKind.ETextInput,this.get_mouseX(),this.get_mouseY());
		ev.charCode = e.charCode;
		this.event(ev);
		if(!this.propagateKeyEvents) {
			e.preventDefault();
			e.stopPropagation();
		}
	}
	,onFocus: function(b) {
		this.event(new hxd_Event(b ? hxd_EventKind.EFocus : hxd_EventKind.EFocusLost));
		this.focused = b;
	}
	,get_isFocused: function() {
		return this.focused;
	}
	,set_displayMode: function(m) {
		var doc = window.document;
		var elt = doc.documentElement;
		var fullscreen = m != hxd_DisplayMode.Windowed;
		if(doc.fullscreenElement == elt == fullscreen) {
			return hxd_DisplayMode.Windowed;
		}
		if(m != hxd_DisplayMode.Windowed) {
			elt.requestFullscreen();
		} else {
			doc.exitFullscreen();
		}
		return m;
	}
	,__class__: hxd_Window
};
var hxd_System = function() { };
$hxClasses["hxd.System"] = hxd_System;
hxd_System.__name__ = "hxd.System";
hxd_System.setLoop = function(f) {
	if(!hxd_System.loopInit) {
		hxd_System.loopInit = true;
		hxd_System.browserLoop();
	}
	hxd_System.loopFunc = f;
};
hxd_System.browserLoop = function() {
	var $window = window;
	var rqf = $window.requestAnimationFrame || $window.webkitRequestAnimationFrame || $window.mozRequestAnimationFrame;
	rqf(hxd_System.browserLoop);
	if(hxd_System.loopFunc != null) {
		hxd_System.loopFunc();
	}
};
hxd_System.start = function(callb) {
	callb();
};
hxd_System.setNativeCursor = function(c) {
	if(hxd_System.currentNativeCursor != null && Type.enumEq(c,hxd_System.currentNativeCursor)) {
		return;
	}
	hxd_System.currentNativeCursor = c;
	hxd_System.currentCustomCursor = null;
	var canvas = hxd_Window.getInstance().canvas;
	if(canvas != null) {
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "pointer";
			break;
		case 2:
			tmp = "move";
			break;
		case 3:
			tmp = "text";
			break;
		case 4:
			tmp = "none";
			break;
		case 5:
			var cur = c.custom;
			if(cur.alloc == null) {
				cur.alloc = [];
				var _g = 0;
				var _g1 = cur.frames;
				while(_g < _g1.length) {
					var frame = _g1[_g];
					++_g;
					cur.alloc.push("url(\"" + frame.ctx.canvas.toDataURL("image/png") + "\") " + cur.offsetX + " " + cur.offsetY + ", default");
				}
			}
			if(cur.frames.length > 1) {
				hxd_System.currentCustomCursor = cur;
				cur.reset();
			}
			tmp = cur.alloc[cur.frameIndex];
			break;
		case 6:
			var _g = c.f;
			throw haxe_Exception.thrown("assert");
		}
		canvas.style.cursor = tmp;
	}
};
hxd_System.getDefaultFrameRate = function() {
	return 60.;
};
hxd_System.getValue = function(s) {
	switch(s._hx_index) {
	case 0:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	case 1:
		return true;
	case 2:
		if(hxd_System.get_platform() != hxd_Platform.Android) {
			return hxd_System.get_platform() == hxd_Platform.IOS;
		} else {
			return true;
		}
		break;
	}
};
hxd_System.updateCursor = function() {
	if(hxd_System.currentCustomCursor != null) {
		var change = hxd_System.currentCustomCursor.update(hxd_Timer.elapsedTime);
		if(change != -1) {
			var canvas = hxd_Window.getInstance().canvas;
			if(canvas != null) {
				canvas.style.cursor = hxd_System.currentCustomCursor.alloc[change];
			}
		}
	}
};
hxd_System.get_platform = function() {
	var ua = $global.navigator.userAgent.toLowerCase();
	if(ua.indexOf("android") >= 0) {
		return hxd_Platform.Android;
	} else if(ua.indexOf("ipad") >= 0 || ua.indexOf("iphone") >= 0 || ua.indexOf("ipod") >= 0) {
		return hxd_Platform.IOS;
	} else {
		return hxd_Platform.PC;
	}
};
var hxd_DisplayMode = $hxEnums["hxd.DisplayMode"] = { __ename__ : true, __constructs__ : ["Windowed","Borderless","Fullscreen","FullscreenResize"]
	,Windowed: {_hx_index:0,__enum__:"hxd.DisplayMode",toString:$estr}
	,Borderless: {_hx_index:1,__enum__:"hxd.DisplayMode",toString:$estr}
	,Fullscreen: {_hx_index:2,__enum__:"hxd.DisplayMode",toString:$estr}
	,FullscreenResize: {_hx_index:3,__enum__:"hxd.DisplayMode",toString:$estr}
};
hxd_DisplayMode.__empty_constructs__ = [hxd_DisplayMode.Windowed,hxd_DisplayMode.Borderless,hxd_DisplayMode.Fullscreen,hxd_DisplayMode.FullscreenResize];
var hxd_res_Embed = function() { };
$hxClasses["hxd.res.Embed"] = hxd_res_Embed;
hxd_res_Embed.__name__ = "hxd.res.Embed";
var hxd__$res_R_$fonts_$04B_$03_$TTF = function() { };
$hxClasses["hxd._res.R_fonts_04B_03_TTF"] = hxd__$res_R_$fonts_$04B_$03_$TTF;
hxd__$res_R_$fonts_$04B_$03_$TTF.__name__ = "hxd._res.R_fonts_04B_03_TTF";
hxd__$res_R_$fonts_$04B_$03_$TTF.__super__ = hxd_res_Embed;
hxd__$res_R_$fonts_$04B_$03_$TTF.prototype = $extend(hxd_res_Embed.prototype,{
	__class__: hxd__$res_R_$fonts_$04B_$03_$TTF
});
var hxd_earcut_EarNode = function() {
};
$hxClasses["hxd.earcut.EarNode"] = hxd_earcut_EarNode;
hxd_earcut_EarNode.__name__ = "hxd.earcut.EarNode";
hxd_earcut_EarNode.prototype = {
	__class__: hxd_earcut_EarNode
};
var hxd_earcut_Earcut = function() {
};
$hxClasses["hxd.earcut.Earcut"] = hxd_earcut_Earcut;
hxd_earcut_Earcut.__name__ = "hxd.earcut.Earcut";
hxd_earcut_Earcut.prototype = {
	triangulate_h2d_GPoint: function(points,holes) {
		var hasHoles = holes != null && holes.length > 0;
		var outerLen = hasHoles ? holes[0] : points.length;
		if(outerLen < 3) {
			return [];
		}
		var root = this.setLinkedList_triangulate_T(points,0,outerLen,true);
		if(holes != null) {
			root = this.eliminateHoles_triangulate_T(points,holes,root);
		}
		return this.triangulateNode(root,points.length > 80);
	}
	,eliminateHoles_triangulate_T: function(points,holes,root) {
		var queue = [];
		var _g = 0;
		var _g1 = holes.length;
		while(_g < _g1) {
			var i = _g++;
			var s = holes[i];
			var e = i == holes.length - 1 ? points.length : holes[i + 1];
			var node = this.setLinkedList_eliminateHoles_T(points,s,e,false);
			if(node == node.next) {
				node.steiner = true;
			}
			queue.push(this.getLeftmost(node));
		}
		queue.sort($bind(this,this.compareX));
		var _g = 0;
		while(_g < queue.length) {
			var q = queue[_g];
			++_g;
			this.eliminateHole(q,root);
			root = this.filterPoints(root,root.next);
		}
		return root;
	}
	,setLinkedList_eliminateHoles_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,setLinkedList_triangulate_T: function(points,start,end,clockwise) {
		var sum = 0.;
		var j = end - 1;
		var _g = start;
		var _g1 = end;
		while(_g < _g1) {
			var i = _g++;
			sum += (points[j].x - points[i].x) * (points[i].y + points[j].y);
			j = i;
		}
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = -1;
		n.z = -1;
		n.x = 0;
		n.y = 0;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var node = n;
		var first = node;
		if(clockwise == sum > 0) {
			var _g = start;
			var _g1 = end;
			while(_g < _g1) {
				var i = _g++;
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
			}
		} else {
			var i = end - 1;
			while(i >= start) {
				var p = points[i];
				var x = p.x;
				var y = p.y;
				var n = this.cache;
				if(n == null) {
					n = new hxd_earcut_EarNode();
					n.allocNext = this.allocated;
					this.allocated = n;
				} else {
					this.cache = n.next;
				}
				n.i = i;
				n.z = -1;
				n.x = x;
				n.y = y;
				n.next = null;
				n.prev = node;
				n.steiner = false;
				n.prevZ = null;
				n.nextZ = null;
				if(node != null) {
					node.next = n;
				}
				node = n;
				--i;
			}
		}
		node.next = first.next;
		node.next.prev = node;
		return node;
	}
	,triangulateNode: function(root,useZOrder) {
		this.triangles = [];
		root = this.filterPoints(root);
		if(useZOrder && root != null) {
			var maxX = root.x;
			this.minX = maxX;
			var maxY = root.y;
			this.minY = maxY;
			var p = root.next;
			while(p != root) {
				var x = p.x;
				var y = p.y;
				if(x < this.minX) {
					this.minX = x;
				}
				if(y < this.minY) {
					this.minY = y;
				}
				if(x > maxX) {
					maxX = x;
				}
				if(y > maxY) {
					maxY = y;
				}
				p = p.next;
			}
			var a = maxX - this.minX;
			var b = maxY - this.minY;
			this.size = a < b ? b : a;
			this.hasSize = true;
		} else {
			this.hasSize = false;
		}
		this.earcutLinked(root);
		var result = this.triangles;
		this.triangles = null;
		var n = this.allocated;
		if(this.cache != null) {
			while(n != this.cache) n = n.allocNext;
			n = n.allocNext;
		}
		while(n != null) {
			n.next = this.cache;
			this.cache = n;
			n = n.allocNext;
		}
		return result;
	}
	,eliminateHole: function(hole,root) {
		root = this.findHoleBridge(hole,root);
		if(root != null) {
			var b = this.splitPolygon(root,hole);
			this.filterPoints(b,b.next);
		}
	}
	,findHoleBridge: function(hole,root) {
		var p = root;
		var hx = hole.x;
		var hy = hole.y;
		var qx = -Infinity;
		var m = null;
		while(true) {
			if(hy <= p.y && hy >= p.next.y) {
				var x = p.x + (hy - p.y) * (p.next.x - p.x) / (p.next.y - p.y);
				if(x <= hx && x > qx) {
					qx = x;
					m = p.x < p.next.x ? p : p.next;
				}
			}
			p = p.next;
			if(!(p != root)) {
				break;
			}
		}
		if(m == null) {
			return null;
		}
		var stop = m;
		var tanMin = Infinity;
		var tan;
		p = m.next;
		while(p != stop) {
			var tmp;
			if(hx >= p.x && p.x >= m.x) {
				var ax = hy < m.y ? hx : qx;
				var bx = m.x;
				var by = m.y;
				var cx = hy < m.y ? qx : hx;
				var px = p.x;
				var py = p.y;
				tmp = (cx - px) * (hy - py) - (ax - px) * (hy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (hy - py) >= 0 && (bx - px) * (hy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				var f = hy - p.y;
				tan = (f < 0 ? -f : f) / (hx - p.x);
				var tmp1;
				if(tan < tanMin || tan == tanMin && p.x > m.x) {
					var p1 = p.prev;
					var r = p.next;
					if((p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) < 0) {
						var r1 = p.next;
						if((hole.y - p.y) * (r1.x - hole.x) - (hole.x - p.x) * (r1.y - hole.y) >= 0) {
							var q = p.prev;
							tmp1 = (q.y - p.y) * (hole.x - q.x) - (q.x - p.x) * (hole.y - q.y) >= 0;
						} else {
							tmp1 = false;
						}
					} else {
						var r2 = p.prev;
						if(!((hole.y - p.y) * (r2.x - hole.x) - (hole.x - p.x) * (r2.y - hole.y) < 0)) {
							var q1 = p.next;
							tmp1 = (q1.y - p.y) * (hole.x - q1.x) - (q1.x - p.x) * (hole.y - q1.y) < 0;
						} else {
							tmp1 = true;
						}
					}
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					m = p;
					tanMin = tan;
				}
			}
			p = p.next;
		}
		return m;
	}
	,getLeftmost: function(node) {
		var p = node;
		var leftmost = node;
		while(true) {
			if(p.x < leftmost.x) {
				leftmost = p;
			}
			p = p.next;
			if(!(p != node)) {
				break;
			}
		}
		return leftmost;
	}
	,compareX: function(a,b) {
		if(a.x - b.x > 0) {
			return 1;
		} else {
			return -1;
		}
	}
	,filterPoints: function(start,end) {
		if(start == null) {
			return start;
		}
		if(end == null) {
			end = start;
		}
		var p = start;
		var again;
		while(true) {
			again = false;
			var tmp;
			if(!p.steiner) {
				var p2 = p.next;
				if(!(p.x == p2.x && p.y == p2.y)) {
					var p1 = p.prev;
					var r = p.next;
					tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) == 0;
				} else {
					tmp = true;
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				end = p.prev;
				p = end;
				if(p == p.next) {
					return null;
				}
				again = true;
			} else {
				p = p.next;
			}
			if(!(again || p != end)) {
				break;
			}
		}
		return end;
	}
	,earcutLinked: function(ear,pass) {
		if(pass == null) {
			pass = 0;
		}
		if(ear == null) {
			return;
		}
		if(pass == 0 && this.hasSize) {
			this.indexCurve(ear);
		}
		var stop = ear;
		var prev;
		var next;
		while(ear.prev != ear.next) {
			prev = ear.prev;
			next = ear.next;
			if(this.hasSize ? this.isEarHashed(ear) : this.isEar(ear)) {
				this.triangles.push(prev.i);
				this.triangles.push(ear.i);
				this.triangles.push(next.i);
				ear.next.prev = ear.prev;
				ear.prev.next = ear.next;
				if(ear.prevZ != null) {
					ear.prevZ.nextZ = ear.nextZ;
				}
				if(ear.nextZ != null) {
					ear.nextZ.prevZ = ear.prevZ;
				}
				ear = next.next;
				stop = next.next;
				continue;
			}
			ear = next;
			if(ear == stop) {
				switch(pass) {
				case 0:
					this.earcutLinked(this.filterPoints(ear),1);
					break;
				case 1:
					ear = this.cureLocalIntersections(ear);
					this.earcutLinked(ear,2);
					break;
				case 2:
					this.splitEarcut(ear);
					break;
				}
				break;
			}
		}
	}
	,isEar: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var p = ear.next.next;
		while(p != ear.prev) {
			var tmp;
			var ax = a.x;
			var ay = a.y;
			var bx = b.x;
			var by = b.y;
			var cx = c.x;
			var cy = c.y;
			var px = p.x;
			var py = p.y;
			if((cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.next;
		}
		return true;
	}
	,isEarHashed: function(ear) {
		var a = ear.prev;
		var b = ear;
		var c = ear.next;
		if((b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y) >= 0) {
			return false;
		}
		var minTX = a.x < b.x ? a.x < c.x ? a.x : c.x : b.x < c.x ? b.x : c.x;
		var minTY = a.y < b.y ? a.y < c.y ? a.y : c.y : b.y < c.y ? b.y : c.y;
		var maxTX = a.x > b.x ? a.x > c.x ? a.x : c.x : b.x > c.x ? b.x : c.x;
		var maxTY = a.y > b.y ? a.y > c.y ? a.y : c.y : b.y > c.y ? b.y : c.y;
		var x = 32767 * (minTX - this.minX) / this.size | 0;
		var y = 32767 * (minTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var minZ = x | y << 1;
		var x = 32767 * (maxTX - this.minX) / this.size | 0;
		var y = 32767 * (maxTY - this.minY) / this.size | 0;
		x = (x | x << 8) & 16711935;
		x = (x | x << 4) & 252645135;
		x = (x | x << 2) & 858993459;
		x = (x | x << 1) & 1431655765;
		y = (y | y << 8) & 16711935;
		y = (y | y << 4) & 252645135;
		y = (y | y << 2) & 858993459;
		y = (y | y << 1) & 1431655765;
		var maxZ = x | y << 1;
		var p = ear.nextZ;
		while(p != null && p.z <= maxZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.nextZ;
		}
		p = ear.prevZ;
		while(p != null && p.z >= minZ) {
			var tmp;
			var tmp1;
			if(p != ear.prev && p != ear.next) {
				var ax = a.x;
				var ay = a.y;
				var bx = b.x;
				var by = b.y;
				var cx = c.x;
				var cy = c.y;
				var px = p.x;
				var py = p.y;
				tmp1 = (cx - px) * (ay - py) - (ax - px) * (cy - py) >= 0 && (ax - px) * (by - py) - (bx - px) * (ay - py) >= 0 && (bx - px) * (cy - py) - (cx - px) * (by - py) >= 0;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p1 = p.prev;
				var r = p.next;
				tmp = (p.y - p1.y) * (r.x - p.x) - (p.x - p1.x) * (r.y - p.y) >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return false;
			}
			p = p.prevZ;
		}
		return true;
	}
	,cureLocalIntersections: function(start) {
		var p = start;
		while(true) {
			var a = p.prev;
			var b = p.next.next;
			var tmp;
			var tmp1;
			var p2 = p.next;
			if((p.y - a.y) * (p2.x - p.x) - (p.x - a.x) * (p2.y - p.y) > 0 != (p.y - a.y) * (b.x - p.x) - (p.x - a.x) * (b.y - p.y) > 0 && (b.y - p2.y) * (a.x - b.x) - (b.x - p2.x) * (a.y - b.y) > 0 != (b.y - p2.y) * (p.x - b.x) - (b.x - p2.x) * (p.y - b.y) > 0) {
				var p1 = a.prev;
				var r = a.next;
				if((a.y - p1.y) * (r.x - a.x) - (a.x - p1.x) * (r.y - a.y) < 0) {
					var r1 = a.next;
					if((b.y - a.y) * (r1.x - b.x) - (b.x - a.x) * (r1.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r2 = a.prev;
					if(!((b.y - a.y) * (r2.x - b.x) - (b.x - a.x) * (r2.y - b.y) < 0)) {
						var q1 = a.next;
						tmp1 = (q1.y - a.y) * (b.x - q1.x) - (q1.x - a.x) * (b.y - q1.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p3 = b.prev;
				var r3 = b.next;
				if((b.y - p3.y) * (r3.x - b.x) - (b.x - p3.x) * (r3.y - b.y) < 0) {
					var r4 = b.next;
					if((a.y - b.y) * (r4.x - a.x) - (a.x - b.x) * (r4.y - a.y) >= 0) {
						var q2 = b.prev;
						tmp = (q2.y - b.y) * (a.x - q2.x) - (q2.x - b.x) * (a.y - q2.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r5 = b.prev;
					if(!((a.y - b.y) * (r5.x - a.x) - (a.x - b.x) * (r5.y - a.y) < 0)) {
						var q3 = b.next;
						tmp = (q3.y - b.y) * (a.x - q3.x) - (q3.x - b.x) * (a.y - q3.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				this.triangles.push(a.i);
				this.triangles.push(p.i);
				this.triangles.push(b.i);
				p.next.prev = p.prev;
				p.prev.next = p.next;
				if(p.prevZ != null) {
					p.prevZ.nextZ = p.nextZ;
				}
				if(p.nextZ != null) {
					p.nextZ.prevZ = p.prevZ;
				}
				var p4 = p.next;
				p4.next.prev = p4.prev;
				p4.prev.next = p4.next;
				if(p4.prevZ != null) {
					p4.prevZ.nextZ = p4.nextZ;
				}
				if(p4.nextZ != null) {
					p4.nextZ.prevZ = p4.prevZ;
				}
				start = b;
				p = start;
			}
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		return p;
	}
	,splitEarcut: function(start) {
		var a = start;
		while(true) {
			var b = a.next.next;
			while(b != a.prev) {
				if(a.i != b.i && this.isValidDiagonal(a,b)) {
					var c = this.splitPolygon(a,b);
					a = this.filterPoints(a,a.next);
					c = this.filterPoints(c,c.next);
					this.earcutLinked(a);
					this.earcutLinked(c);
					return;
				}
				b = b.next;
			}
			a = a.next;
			if(!(a != start)) {
				break;
			}
		}
	}
	,splitPolygon: function(a,b) {
		var i = a.i;
		var x = a.x;
		var y = a.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var a2 = n;
		var i = b.i;
		var x = b.x;
		var y = b.y;
		var last = null;
		var n = this.cache;
		if(n == null) {
			n = new hxd_earcut_EarNode();
			n.allocNext = this.allocated;
			this.allocated = n;
		} else {
			this.cache = n.next;
		}
		n.i = i;
		n.z = -1;
		n.x = x;
		n.y = y;
		n.next = null;
		n.prev = last;
		n.steiner = false;
		n.prevZ = null;
		n.nextZ = null;
		if(last != null) {
			last.next = n;
		}
		var b2 = n;
		var an = a.next;
		var bp = b.prev;
		a.next = b;
		b.prev = a;
		a2.next = an;
		an.prev = a2;
		b2.next = a2;
		a2.prev = b2;
		bp.next = b2;
		b2.prev = bp;
		return b2;
	}
	,isValidDiagonal: function(a,b) {
		if(!(a.x == b.x && a.y == b.y)) {
			var tmp;
			var tmp1;
			if(a.next.i != b.i && a.prev.i != b.i && !this.intersectsPolygon(a,b)) {
				var p = a.prev;
				var r = a.next;
				if((a.y - p.y) * (r.x - a.x) - (a.x - p.x) * (r.y - a.y) < 0) {
					var r = a.next;
					if((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) >= 0) {
						var q = a.prev;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) >= 0;
					} else {
						tmp1 = false;
					}
				} else {
					var r = a.prev;
					if(!((b.y - a.y) * (r.x - b.x) - (b.x - a.x) * (r.y - b.y) < 0)) {
						var q = a.next;
						tmp1 = (q.y - a.y) * (b.x - q.x) - (q.x - a.x) * (b.y - q.y) < 0;
					} else {
						tmp1 = true;
					}
				}
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				var p = b.prev;
				var r = b.next;
				if((b.y - p.y) * (r.x - b.x) - (b.x - p.x) * (r.y - b.y) < 0) {
					var r = b.next;
					if((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) >= 0) {
						var q = b.prev;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) >= 0;
					} else {
						tmp = false;
					}
				} else {
					var r = b.prev;
					if(!((a.y - b.y) * (r.x - a.x) - (a.x - b.x) * (r.y - a.y) < 0)) {
						var q = b.next;
						tmp = (q.y - b.y) * (a.x - q.x) - (q.x - b.x) * (a.y - q.y) < 0;
					} else {
						tmp = true;
					}
				}
			} else {
				tmp = false;
			}
			if(tmp) {
				return this.middleInside(a,b);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,middleInside: function(a,b) {
		var p = a;
		var inside = false;
		var px = (a.x + b.x) / 2;
		var py = (a.y + b.y) / 2;
		while(true) {
			if(p.y > py != p.next.y > py && px < (p.next.x - p.x) * (py - p.y) / (p.next.y - p.y) + p.x) {
				inside = !inside;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return inside;
	}
	,intersectsPolygon: function(a,b) {
		var p = a;
		while(true) {
			var tmp;
			if(p.i != a.i && p.next.i != a.i && p.i != b.i && p.next.i != b.i) {
				var q1 = p.next;
				tmp = (q1.y - p.y) * (a.x - q1.x) - (q1.x - p.x) * (a.y - q1.y) > 0 != (q1.y - p.y) * (b.x - q1.x) - (q1.x - p.x) * (b.y - q1.y) > 0 && (b.y - a.y) * (p.x - b.x) - (b.x - a.x) * (p.y - b.y) > 0 != (b.y - a.y) * (q1.x - b.x) - (b.x - a.x) * (q1.y - b.y) > 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				return true;
			}
			p = p.next;
			if(!(p != a)) {
				break;
			}
		}
		return false;
	}
	,indexCurve: function(start) {
		var p = start;
		while(true) {
			if(p.z < 0) {
				var x = 32767 * (p.x - this.minX) / this.size | 0;
				var y = 32767 * (p.y - this.minY) / this.size | 0;
				x = (x | x << 8) & 16711935;
				x = (x | x << 4) & 252645135;
				x = (x | x << 2) & 858993459;
				x = (x | x << 1) & 1431655765;
				y = (y | y << 8) & 16711935;
				y = (y | y << 4) & 252645135;
				y = (y | y << 2) & 858993459;
				y = (y | y << 1) & 1431655765;
				p.z = x | y << 1;
			}
			p.prevZ = p.prev;
			p.nextZ = p.next;
			p = p.next;
			if(!(p != start)) {
				break;
			}
		}
		p.prevZ.nextZ = null;
		p.prevZ = null;
		this.sortLinked(p);
	}
	,sortLinked: function(list) {
		var p;
		var q;
		var e;
		var tail;
		var numMerges;
		var pSize;
		var qSize;
		var inSize = 1;
		while(true) {
			p = list;
			list = null;
			tail = null;
			numMerges = 0;
			while(p != null) {
				++numMerges;
				q = p;
				pSize = 0;
				var _g = 0;
				var _g1 = inSize;
				while(_g < _g1) {
					var i = _g++;
					++pSize;
					q = q.nextZ;
					if(q == null) {
						break;
					}
				}
				qSize = inSize;
				while(pSize > 0 || qSize > 0 && q != null) {
					if(pSize == 0) {
						e = q;
						q = q.nextZ;
						--qSize;
					} else if(qSize == 0 || q == null) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else if(p.z <= q.z) {
						e = p;
						p = p.nextZ;
						--pSize;
					} else {
						e = q;
						q = q.nextZ;
						--qSize;
					}
					if(tail != null) {
						tail.nextZ = e;
					} else {
						list = e;
					}
					e.prevZ = tail;
					tail = e;
				}
				p = q;
			}
			tail.nextZ = null;
			inSize *= 2;
			if(!(numMerges > 1)) {
				break;
			}
		}
		return list;
	}
	,__class__: hxd_earcut_Earcut
};
var hxd_fmt_bfnt_FontParser = function() { };
$hxClasses["hxd.fmt.bfnt.FontParser"] = hxd_fmt_bfnt_FontParser;
hxd_fmt_bfnt_FontParser.__name__ = "hxd.fmt.bfnt.FontParser";
hxd_fmt_bfnt_FontParser.parse = function(bytes,path,resolveTile) {
	var tile = null;
	var font = new h2d_Font(null,0);
	var glyphs = font.glyphs;
	font.baseLine = 0;
	var _g = bytes.getInt32(0);
	switch(_g) {
	case 54938946:
		var bytes1 = new haxe_io_BytesInput(bytes);
		var _g1 = bytes1;
		_g1.set_position(_g1.pos + 4);
		var pageCount = 0;
		while(bytes1.pos < bytes1.totlen) {
			var id = bytes1.readByte();
			var length = bytes1.readInt32();
			var pos = bytes1.pos;
			switch(id) {
			case 1:
				font.size = font.initSize = bytes1.readInt16();
				var _g1 = bytes1;
				_g1.set_position(_g1.pos + 12);
				font.name = bytes1.readUntil(0);
				break;
			case 2:
				font.lineHeight = bytes1.readUInt16();
				font.baseLine = bytes1.readUInt16();
				var _g2 = bytes1;
				_g2.set_position(_g2.pos + 4);
				pageCount = bytes1.readUInt16();
				if(pageCount != 1) {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 224, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
				break;
			case 3:
				var name = bytes1.readUntil(0);
				try {
					font.tilePath = name;
					tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),name]));
				} catch( _g3 ) {
					haxe_Log.trace("Warning: Could not find referenced font texture at \"" + name + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
					font.tilePath = new haxe_io_Path(path).file + ".png";
					tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
				}
				break;
			case 4:
				var count = length / 20 | 0;
				while(count > 0) {
					var cid = bytes1.readInt32();
					var t = tile.sub(bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readUInt16(),bytes1.readInt16(),bytes1.readInt16());
					var fc = new h2d_FontChar(t,bytes1.readInt16());
					glyphs.h[cid] = fc;
					var _g4 = bytes1;
					_g4.set_position(_g4.pos + 2);
					--count;
				}
				break;
			case 5:
				var count1 = length / 10 | 0;
				while(count1 > 0) {
					var first = bytes1.readInt32();
					var key = bytes1.readInt32();
					var fc1 = glyphs.h[key];
					if(fc1 != null) {
						fc1.addKerning(first,bytes1.readInt16());
					} else {
						var _g5 = bytes1;
						_g5.set_position(_g5.pos + 2);
					}
					--count1;
				}
				break;
			}
			bytes1.set_position(pos + length);
		}
		break;
	case 1414415938:
		return new hxd_fmt_bfnt_Reader(new haxe_io_BytesInput(bytes)).read(function(tp) {
			try {
				font.tilePath = tp;
				tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tp]));
			} catch( _g ) {
				haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tp + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				font.tilePath = new haxe_io_Path(path).file + ".png";
				tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			}
			return tile;
		});
	case 1836597052:case 1852794428:
		var xml = Xml.parse(bytes.toString());
		var x = xml.firstElement();
		if(x.nodeType != Xml.Document && x.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Invalid nodeType " + (x.nodeType == null ? "null" : XmlType.toString(x.nodeType)));
		}
		var this1 = x;
		var xml = this1;
		if(haxe_xml__$Access_HasNodeAccess.resolve(xml,"info")) {
			var tmp = haxe_xml__$Access_NodeAccess.resolve(xml,"info");
			font.name = haxe_xml__$Access_AttribAccess.resolve(tmp,"face");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"info"),"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"lineHeight");
			font.lineHeight = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(haxe_xml__$Access_NodeAccess.resolve(xml,"common"),"base");
			font.baseLine = Std.parseInt(tmp);
			var p = haxe_xml__$Access_NodeAccess.resolve(xml,"pages").elements();
			while(p.hasNext()) {
				var p1 = p.next();
				if(haxe_xml__$Access_AttribAccess.resolve(p1,"id") == "0") {
					var tilePath = haxe_xml__$Access_AttribAccess.resolve(p1,"file");
					try {
						font.tilePath = tilePath;
						tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
					} catch( _g1 ) {
						haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						font.tilePath = new haxe_io_Path(path).file + ".png";
						tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
					}
				} else {
					haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 66, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
				}
			}
			var chars = haxe_xml__$Access_NodeAccess.resolve(xml,"chars").elements();
			var c = chars;
			while(c.hasNext()) {
				var c1 = c.next();
				var t = tile.sub(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"x")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"y")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"height")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xoffset")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"yoffset")));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"xadvance")));
				var kerns = haxe_xml__$Access_NodeAccess.resolve(xml,"kernings").elements();
				var k = kerns;
				while(k.hasNext()) {
					var k1 = k.next();
					if(haxe_xml__$Access_AttribAccess.resolve(k1,"second") == haxe_xml__$Access_AttribAccess.resolve(c1,"id")) {
						fc.addKerning(Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"first")),Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"amount")));
					}
				}
				var key = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"id"));
				glyphs.h[key] = fc;
			}
		} else {
			font.tilePath = new haxe_io_Path(path).file + ".png";
			tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
			font.name = haxe_xml__$Access_AttribAccess.resolve(xml,"family");
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"size");
			font.size = font.initSize = Std.parseInt(tmp);
			var tmp = haxe_xml__$Access_AttribAccess.resolve(xml,"height");
			font.lineHeight = Std.parseInt(tmp);
			var kernings = [];
			var c = xml.elements();
			while(c.hasNext()) {
				var c1 = c.next();
				var r = haxe_xml__$Access_AttribAccess.resolve(c1,"rect").split(" ");
				var o = haxe_xml__$Access_AttribAccess.resolve(c1,"offset").split(" ");
				var t = tile.sub(Std.parseInt(r[0]),Std.parseInt(r[1]),Std.parseInt(r[2]),Std.parseInt(r[3]),Std.parseInt(o[0]),Std.parseInt(o[1]));
				var fc = new h2d_FontChar(t,Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(c1,"width")));
				var code = haxe_xml__$Access_AttribAccess.resolve(c1,"code");
				var code1 = StringTools.startsWith(code,"&#") ? Std.parseInt(HxOverrides.substr(code,2,code.length - 3)) : HxOverrides.cca(code,0);
				var k = c1.elements();
				while(k.hasNext()) {
					var k1 = k.next();
					var code2 = haxe_xml__$Access_AttribAccess.resolve(k1,"id");
					var next = StringTools.startsWith(code2,"&#") ? Std.parseInt(HxOverrides.substr(code2,2,code2.length - 3)) : HxOverrides.cca(code2,0);
					var adv = Std.parseInt(haxe_xml__$Access_AttribAccess.resolve(k1,"advance"));
					if(glyphs.h.hasOwnProperty(next)) {
						glyphs.h[next].addKerning(code1,adv);
					} else {
						kernings.push({ prev : code1, next : next, adv : adv});
					}
				}
				glyphs.h[code1] = fc;
			}
			var _g1 = 0;
			while(_g1 < kernings.length) {
				var k = kernings[_g1];
				++_g1;
				var g = glyphs.h[k.next];
				if(g == null) {
					continue;
				}
				g.addKerning(k.prev,k.adv);
			}
		}
		break;
	case 1868983913:
		var lines = bytes.toString().split("\n");
		var reg = new EReg(" *?([0-9a-zA-Z]+)=(\"[^\"]+\"|.+?)(?:[ \r]|$)","");
		var idx;
		var pageCount = 0;
		var _g1 = 0;
		while(_g1 < lines.length) {
			var line = lines[_g1];
			++_g1;
			idx = line.indexOf(" ");
			switch(HxOverrides.substr(line,0,idx)) {
			case "char":
				var id = 0;
				var x = 0;
				var y = 0;
				var width = 0;
				var height = 0;
				var xoffset = 0;
				var yoffset = 0;
				var xadvance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "height":
						var v = reg.matched(2);
						height = Std.parseInt(HxOverrides.cca(v,0) == 34 ? v.substring(1,v.length - 1) : v);
						break;
					case "id":
						var v1 = reg.matched(2);
						id = Std.parseInt(HxOverrides.cca(v1,0) == 34 ? v1.substring(1,v1.length - 1) : v1);
						break;
					case "width":
						var v2 = reg.matched(2);
						width = Std.parseInt(HxOverrides.cca(v2,0) == 34 ? v2.substring(1,v2.length - 1) : v2);
						break;
					case "x":
						var v3 = reg.matched(2);
						x = Std.parseInt(HxOverrides.cca(v3,0) == 34 ? v3.substring(1,v3.length - 1) : v3);
						break;
					case "xadvance":
						var v4 = reg.matched(2);
						xadvance = Std.parseInt(HxOverrides.cca(v4,0) == 34 ? v4.substring(1,v4.length - 1) : v4);
						break;
					case "xoffset":
						var v5 = reg.matched(2);
						xoffset = Std.parseInt(HxOverrides.cca(v5,0) == 34 ? v5.substring(1,v5.length - 1) : v5);
						break;
					case "y":
						var v6 = reg.matched(2);
						y = Std.parseInt(HxOverrides.cca(v6,0) == 34 ? v6.substring(1,v6.length - 1) : v6);
						break;
					case "yoffset":
						var v7 = reg.matched(2);
						yoffset = Std.parseInt(HxOverrides.cca(v7,0) == 34 ? v7.substring(1,v7.length - 1) : v7);
						break;
					}
					var pos = reg.matchedPos();
					idx = pos.pos + pos.len;
				}
				var t = tile.sub(x,y,width,height,xoffset,yoffset);
				var fc = new h2d_FontChar(t,xadvance);
				glyphs.h[id] = fc;
				break;
			case "common":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "base":
						var v8 = reg.matched(2);
						font.baseLine = Std.parseInt(HxOverrides.cca(v8,0) == 34 ? v8.substring(1,v8.length - 1) : v8);
						break;
					case "lineHeight":
						var v9 = reg.matched(2);
						font.lineHeight = Std.parseInt(HxOverrides.cca(v9,0) == 34 ? v9.substring(1,v9.length - 1) : v9);
						break;
					case "pages":
						var v10 = reg.matched(2);
						pageCount = Std.parseInt(HxOverrides.cca(v10,0) == 34 ? v10.substring(1,v10.length - 1) : v10);
						if(pageCount != 1) {
							haxe_Log.trace("Warning: BMF format only supports one page at the moment.",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 157, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
						}
						break;
					}
					var pos1 = reg.matchedPos();
					idx = pos1.pos + pos1.len;
				}
				break;
			case "info":
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "face":
						var v11 = reg.matched(2);
						font.name = HxOverrides.cca(v11,0) == 34 ? v11.substring(1,v11.length - 1) : v11;
						break;
					case "size":
						var v12 = reg.matched(2);
						font.size = font.initSize = Std.parseInt(HxOverrides.cca(v12,0) == 34 ? v12.substring(1,v12.length - 1) : v12);
						break;
					}
					var pos2 = reg.matchedPos();
					idx = pos2.pos + pos2.len;
				}
				break;
			case "kerning":
				var first = 0;
				var second = 0;
				var advance = 0;
				while(idx < line.length && reg.matchSub(line,idx)) {
					switch(reg.matched(1)) {
					case "amount":
						var v13 = reg.matched(2);
						advance = Std.parseInt(HxOverrides.cca(v13,0) == 34 ? v13.substring(1,v13.length - 1) : v13);
						break;
					case "first":
						var v14 = reg.matched(2);
						first = Std.parseInt(HxOverrides.cca(v14,0) == 34 ? v14.substring(1,v14.length - 1) : v14);
						break;
					case "second":
						var v15 = reg.matched(2);
						second = Std.parseInt(HxOverrides.cca(v15,0) == 34 ? v15.substring(1,v15.length - 1) : v15);
						break;
					}
					var pos3 = reg.matchedPos();
					idx = pos3.pos + pos3.len;
				}
				var fc1 = glyphs.h[second];
				if(fc1 != null) {
					fc1.addKerning(first,advance);
				}
				break;
			case "page":
				while(idx < line.length && reg.matchSub(line,idx)) {
					if(reg.matched(1) == "file") {
						var v16 = reg.matched(2);
						var tilePath = HxOverrides.cca(v16,0) == 34 ? v16.substring(1,v16.length - 1) : v16;
						try {
							font.tilePath = tilePath;
							tile = resolveTile(haxe_io_Path.join([haxe_io_Path.directory(path),tilePath]));
						} catch( _g2 ) {
							haxe_Log.trace("Warning: Could not find referenced font texture at \"" + tilePath + "\", trying to resolve same name as fnt!",{ fileName : "hxd/fmt/bfnt/FontParser.hx", lineNumber : 30, className : "hxd.fmt.bfnt.FontParser", methodName : "parse"});
							font.tilePath = new haxe_io_Path(path).file + ".png";
							tile = resolveTile(haxe_io_Path.withExtension(path,"png"));
						}
					}
					var pos4 = reg.matchedPos();
					idx = pos4.pos + pos4.len;
				}
				break;
			}
		}
		break;
	default:
		var sign = _g;
		throw haxe_Exception.thrown("Unknown font signature " + StringTools.hex(sign,8));
	}
	if(glyphs.h[32] == null) {
		var value = new h2d_FontChar(tile.sub(0,0,0,0),font.size >> 1);
		glyphs.h[32] = value;
	}
	font.tile = tile;
	if(font.baseLine == 0) {
		var padding = 0;
		var space = glyphs.h[32];
		if(space != null) {
			padding = space.t.height * .5;
		}
		var a = glyphs.h[65];
		if(a == null) {
			a = glyphs.h[97];
		}
		if(a == null) {
			a = glyphs.h[48];
		}
		if(a == null) {
			font.baseLine = font.lineHeight - 2 - padding;
		} else {
			font.baseLine = a.t.dy + a.t.height - padding;
		}
	}
	var fallback = glyphs.h[65533];
	if(fallback == null) {
		fallback = glyphs.h[9633];
	}
	if(fallback == null) {
		fallback = glyphs.h[63];
	}
	if(fallback != null) {
		font.defaultChar = fallback;
	}
	return font;
};
var hxd_fmt_bfnt_Reader = function(i) {
	this.i = i;
};
$hxClasses["hxd.fmt.bfnt.Reader"] = hxd_fmt_bfnt_Reader;
hxd_fmt_bfnt_Reader.__name__ = "hxd.fmt.bfnt.Reader";
hxd_fmt_bfnt_Reader.prototype = {
	read: function(resolveTile) {
		if(this.i.readString(4) != "BFNT" || this.i.readByte() != 0) {
			throw haxe_Exception.thrown("Not a BFNT file!");
		}
		var font = null;
		var _g = this.i.readByte();
		if(_g == 1) {
			font = new h2d_Font(this.i.readString(this.i.readUInt16()),this.i.readInt16());
			font.tilePath = this.i.readString(this.i.readUInt16());
			var tile = font.tile = resolveTile(font.tilePath);
			font.lineHeight = this.i.readInt16();
			font.baseLine = this.i.readInt16();
			var defaultChar = this.i.readInt32();
			var id;
			while(true) {
				id = this.i.readInt32();
				if(!(id != 0)) {
					break;
				}
				var t = tile.sub(this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readUInt16(),this.i.readInt16(),this.i.readInt16());
				var glyph = new h2d_FontChar(t,this.i.readInt16());
				font.glyphs.h[id] = glyph;
				if(id == defaultChar) {
					font.defaultChar = glyph;
				}
				var prevChar;
				while(true) {
					prevChar = this.i.readInt32();
					if(!(prevChar != 0)) {
						break;
					}
					glyph.addKerning(prevChar,this.i.readInt16());
				}
			}
		} else {
			var ver = _g;
			throw haxe_Exception.thrown("Unknown BFNT version: " + ver);
		}
		return font;
	}
	,__class__: hxd_fmt_bfnt_Reader
};
var hxd_fmt_hdr_Reader = function() { };
$hxClasses["hxd.fmt.hdr.Reader"] = hxd_fmt_hdr_Reader;
hxd_fmt_hdr_Reader.__name__ = "hxd.fmt.hdr.Reader";
hxd_fmt_hdr_Reader.decode = function(bytes,sRGB) {
	var f = new haxe_io_BytesInput(bytes);
	var width = 0;
	var height = 0;
	var keys_h = Object.create(null);
	while(true) {
		var line = f.readLine();
		if(line == "") {
			break;
		}
		if(HxOverrides.cca(line,0) == 35) {
			continue;
		}
		var nameValue = line.split("=");
		if(nameValue.length > 1) {
			keys_h[nameValue.shift()] = nameValue.join("=");
		}
	}
	var parts = f.readLine().split(" ");
	height = Std.parseInt(parts[1]);
	width = Std.parseInt(parts[3]);
	var gamma = keys_h["GAMMA"] == "1";
	var data = new haxe_io_Bytes(new ArrayBuffer(width * height * 4 * 4));
	var exposure = 1.0;
	var exp = keys_h["EXPOSURE"];
	if(exp != null) {
		var exp1 = parseFloat(exp);
		if(exp1 < 1e-12 || exp1 < 1e12) {
			exposure = exp1;
		}
	}
	var gammaCorrect = sRGB ? 1 : 0.45454545454545453;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(e,gammaCorrect));
	}
	var gammaVals = _g;
	var _g = [];
	var _g1 = 0;
	while(_g1 < 256) {
		var e = _g1++;
		_g.push(Math.pow(Math.pow(2,e - 128) / (256 * exposure),gammaCorrect));
	}
	var exps = _g;
	var _g = keys_h["FORMAT"];
	if(_g == null) {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	} else if(_g == "32-bit_rle_rgbe") {
		var dataPos = f.pos;
		var scanLen = width * 4;
		var scanLine = new haxe_io_Bytes(new ArrayBuffer(scanLen));
		var widthBE = width >> 8 | (width & 255) << 8;
		var _g1 = 0;
		var _g2 = height;
		while(_g1 < _g2) {
			var y = _g1++;
			var h = bytes.getInt32(dataPos);
			if((h & 65535) != 514 || h >>> 16 != widthBE) {
				scanLine.blit(0,bytes,dataPos,width * 4);
				dataPos += width * 4;
			} else {
				dataPos += 4;
				var p = 0;
				var end = width * 4;
				while(p < end) {
					var len = bytes.b[dataPos++];
					if(len > 128) {
						len -= 128;
						scanLine.fill(p,len,bytes.b[dataPos++]);
					} else {
						scanLine.blit(p,bytes,dataPos,len);
						dataPos += len;
					}
					p += len;
				}
			}
			var pos = y * width * 16;
			var _g3 = 0;
			var _g4 = width;
			while(_g3 < _g4) {
				var x = _g3++;
				var e = exps[scanLine.b[x + width * 3]];
				data.setFloat(pos,gammaVals[scanLine.b[x]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + width]] * e);
				pos += 4;
				data.setFloat(pos,gammaVals[scanLine.b[x + (width << 1)]] * e);
				pos += 4;
				data.setFloat(pos,1.0);
				pos += 4;
			}
		}
	} else {
		var fmt = _g;
		throw haxe_Exception.thrown("Unsupported HDR format " + fmt);
	}
	return { width : width, height : height, bytes : data, gamma : gamma};
};
var hxd_fs_FileEntry = function() { };
$hxClasses["hxd.fs.FileEntry"] = hxd_fs_FileEntry;
hxd_fs_FileEntry.__name__ = "hxd.fs.FileEntry";
hxd_fs_FileEntry.prototype = {
	getBytes: function() {
		return null;
	}
	,open: function() {
	}
	,skip: function(nbytes) {
	}
	,readByte: function() {
		return 0;
	}
	,read: function(out,pos,size) {
	}
	,close: function() {
	}
	,load: function(onReady) {
		if(!this.get_isAvailable()) {
			throw haxe_Exception.thrown("load() not implemented");
		} else if(onReady != null) {
			onReady();
		}
	}
	,loadBitmap: function(onLoaded) {
		throw haxe_Exception.thrown("loadBitmap() not implemented");
	}
	,watch: function(onChanged) {
	}
	,get_isAvailable: function() {
		return true;
	}
	,get_size: function() {
		return 0;
	}
	,get_path: function() {
		throw haxe_Exception.thrown("path() not implemented");
	}
	,get_extension: function() {
		var idx = this.name.lastIndexOf(".");
		if(idx < 0) {
			return "";
		}
		return HxOverrides.substr(this.name,idx + 1,null).toLowerCase();
	}
	,__class__: hxd_fs_FileEntry
};
var hxd_fs_FileSystem = function() { };
$hxClasses["hxd.fs.FileSystem"] = hxd_fs_FileSystem;
hxd_fs_FileSystem.__name__ = "hxd.fs.FileSystem";
hxd_fs_FileSystem.__isInterface__ = true;
hxd_fs_FileSystem.prototype = {
	__class__: hxd_fs_FileSystem
};
var hxd_fs__$EmbedFileSystem_EmbedEntry = function(fs,name,relPath,data) {
	this.fs = fs;
	this.name = name;
	this.relPath = relPath;
	this.data = data;
};
$hxClasses["hxd.fs._EmbedFileSystem.EmbedEntry"] = hxd_fs__$EmbedFileSystem_EmbedEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.__name__ = "hxd.fs._EmbedFileSystem.EmbedEntry";
hxd_fs__$EmbedFileSystem_EmbedEntry.__super__ = hxd_fs_FileEntry;
hxd_fs__$EmbedFileSystem_EmbedEntry.prototype = $extend(hxd_fs_FileEntry.prototype,{
	getBytes: function() {
		if(this.bytes == null) {
			this.open();
		}
		return this.bytes;
	}
	,open: function() {
		if(this.bytes == null) {
			this.bytes = haxe_Resource.getBytes(this.data);
			if(this.bytes == null) {
				throw haxe_Exception.thrown("Missing resource " + this.data);
			}
		}
		this.readPos = 0;
	}
	,skip: function(nbytes) {
		this.readPos += nbytes;
	}
	,readByte: function() {
		return this.bytes.b[this.readPos++];
	}
	,read: function(out,pos,size) {
		out.blit(pos,this.bytes,this.readPos,size);
		this.readPos += size;
	}
	,close: function() {
		this.bytes = null;
		this.readPos = 0;
	}
	,load: function(onReady) {
		if(onReady != null) {
			haxe_Timer.delay(onReady,1);
		}
	}
	,loadBitmap: function(onLoaded) {
		var rawData = null;
		var _g = 0;
		var _g1 = haxe_Resource.content;
		while(_g < _g1.length) {
			var res = _g1[_g];
			++_g;
			if(res.name == this.data) {
				rawData = res.data;
				break;
			}
		}
		if(rawData == null) {
			throw haxe_Exception.thrown("Missing resource " + this.data);
		}
		var image = new Image();
		image.onload = function(_) {
			var this1 = image;
			onLoaded(this1);
		};
		var extra = "";
		var bytes = rawData.length * 6 >> 3;
		var _g = 0;
		var _g1 = (3 - bytes * 4 % 3) % 3;
		while(_g < _g1) {
			var i = _g++;
			extra += "=";
		}
		var tmp = "data:image/" + this.get_extension() + ";base64," + rawData;
		image.src = tmp + extra;
	}
	,get_path: function() {
		if(this.relPath == ".") {
			return "<root>";
		} else {
			return this.relPath;
		}
	}
	,get_size: function() {
		this.open();
		return this.bytes.length;
	}
	,__class__: hxd_fs__$EmbedFileSystem_EmbedEntry
});
var hxd_fs_EmbedFileSystem = function(root) {
	this.root = root;
};
$hxClasses["hxd.fs.EmbedFileSystem"] = hxd_fs_EmbedFileSystem;
hxd_fs_EmbedFileSystem.__name__ = "hxd.fs.EmbedFileSystem";
hxd_fs_EmbedFileSystem.__interfaces__ = [hxd_fs_FileSystem];
hxd_fs_EmbedFileSystem.resolve = function(path) {
	return "R_" + path.replace(hxd_fs_EmbedFileSystem.invalidChars.r,"_");
};
hxd_fs_EmbedFileSystem.prototype = {
	splitPath: function(path) {
		if(path == ".") {
			return [];
		} else {
			return path.split("/");
		}
	}
	,exists: function(path) {
		var r = this.root;
		var _g = 0;
		var _g1 = this.splitPath(path);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			r = Reflect.field(r,p);
			if(r == null) {
				return false;
			}
		}
		return true;
	}
	,get: function(path) {
		if(!this.exists(path)) {
			throw haxe_Exception.thrown(new hxd_fs_NotFound(path));
		}
		var id = hxd_fs_EmbedFileSystem.resolve(path);
		return new hxd_fs__$EmbedFileSystem_EmbedEntry(this,path.split("/").pop(),path,id);
	}
	,__class__: hxd_fs_EmbedFileSystem
};
var hxd_fs_FileInput = function(f) {
	this.f = f;
	f.open();
};
$hxClasses["hxd.fs.FileInput"] = hxd_fs_FileInput;
hxd_fs_FileInput.__name__ = "hxd.fs.FileInput";
hxd_fs_FileInput.__super__ = haxe_io_Input;
hxd_fs_FileInput.prototype = $extend(haxe_io_Input.prototype,{
	skip: function(nbytes) {
		this.f.skip(nbytes);
	}
	,readByte: function() {
		return this.f.readByte();
	}
	,readBytes: function(b,pos,len) {
		this.f.read(b,pos,len);
		return len;
	}
	,close: function() {
		this.f.close();
	}
	,__class__: hxd_fs_FileInput
});
var hxd_fs_LoadedBitmap = {};
hxd_fs_LoadedBitmap.toBitmap = function(this1) {
	var bmp = new hxd_BitmapData(this1.width,this1.height);
	bmp.ctx.drawImage(this1,0,0);
	return bmp;
};
var hxd_fs_NotFound = function(path) {
	this.path = path;
};
$hxClasses["hxd.fs.NotFound"] = hxd_fs_NotFound;
hxd_fs_NotFound.__name__ = "hxd.fs.NotFound";
hxd_fs_NotFound.prototype = {
	toString: function() {
		return "Resource file not found '" + this.path + "'";
	}
	,__class__: hxd_fs_NotFound
};
var hxd_impl_Allocator = function() {
};
$hxClasses["hxd.impl.Allocator"] = hxd_impl_Allocator;
hxd_impl_Allocator.__name__ = "hxd.impl.Allocator";
hxd_impl_Allocator.get = function() {
	if(hxd_impl_Allocator.inst == null) {
		hxd_impl_Allocator.inst = new hxd_impl_Allocator();
	}
	return hxd_impl_Allocator.inst;
};
hxd_impl_Allocator.prototype = {
	allocBuffer: function(vertices,stride,flags) {
		var tmp;
		switch(flags) {
		case 0:
			tmp = [h3d_BufferFlag.Dynamic];
			break;
		case 1:
			tmp = [h3d_BufferFlag.UniformBuffer,h3d_BufferFlag.Dynamic];
			break;
		case 2:
			tmp = [h3d_BufferFlag.RawFormat];
			break;
		case 3:
			tmp = [h3d_BufferFlag.Quads,h3d_BufferFlag.RawFormat];
			break;
		}
		return new h3d_Buffer(vertices,stride,tmp);
	}
	,ofFloats: function(v,stride,flags) {
		var nvert = v.pos / stride | 0;
		var b = this.allocBuffer(nvert,stride,flags);
		b.uploadVector(v,0,nvert);
		return b;
	}
	,disposeBuffer: function(b) {
		b.dispose();
	}
	,allocIndexBuffer: function(count) {
		return new h3d_Indexes(count);
	}
	,ofIndexes: function(ib,length) {
		if(length == null) {
			length = -1;
		}
		if(length < 0 && ib != null) {
			length = ib.length;
		}
		var idx = this.allocIndexBuffer(length);
		idx.upload(ib,0,length);
		return idx;
	}
	,disposeIndexBuffer: function(i) {
		i.dispose();
	}
	,onContextLost: function() {
	}
	,__class__: hxd_impl_Allocator
};
var hxd_impl_ArrayIterator_$hxd_$snd_$Channel = function(a) {
	this.i = 0;
	this.a = a;
	this.l = this.a.length;
};
$hxClasses["hxd.impl.ArrayIterator_hxd_snd_Channel"] = hxd_impl_ArrayIterator_$hxd_$snd_$Channel;
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.__name__ = "hxd.impl.ArrayIterator_hxd_snd_Channel";
hxd_impl_ArrayIterator_$hxd_$snd_$Channel.prototype = {
	hasNext: function() {
		return this.i < this.l;
	}
	,next: function() {
		return this.a[this.i++];
	}
	,__class__: hxd_impl_ArrayIterator_$hxd_$snd_$Channel
};
var hxd_res_Resource = function(entry) {
	this.entry = entry;
};
$hxClasses["hxd.res.Resource"] = hxd_res_Resource;
hxd_res_Resource.__name__ = "hxd.res.Resource";
hxd_res_Resource.prototype = {
	toString: function() {
		return this.entry.get_path();
	}
	,watch: function(onChanged) {
		if(hxd_res_Resource.LIVE_UPDATE) {
			this.entry.watch(onChanged);
		}
	}
	,__class__: hxd_res_Resource
};
var hxd_res_Any = function(loader,entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = loader;
};
$hxClasses["hxd.res.Any"] = hxd_res_Any;
hxd_res_Any.__name__ = "hxd.res.Any";
hxd_res_Any.__super__ = hxd_res_Resource;
hxd_res_Any.prototype = $extend(hxd_res_Resource.prototype,{
	toTile: function() {
		return this.toImage().toTile();
	}
	,toImage: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Image);
	}
	,toSound: function() {
		return this.loader.loadCache(this.entry.get_path(),hxd_res_Sound);
	}
	,__class__: hxd_res_Any
});
var hxd_res_BitmapFont = function(entry) {
	hxd_res_Resource.call(this,entry);
	this.loader = hxd_res_Loader.currentInstance;
};
$hxClasses["hxd.res.BitmapFont"] = hxd_res_BitmapFont;
hxd_res_BitmapFont.__name__ = "hxd.res.BitmapFont";
hxd_res_BitmapFont.__super__ = hxd_res_Resource;
hxd_res_BitmapFont.prototype = $extend(hxd_res_Resource.prototype,{
	toFont: function() {
		if(this.font == null) {
			this.font = hxd_fmt_bfnt_FontParser.parse(this.entry.getBytes(),this.entry.get_path(),$bind(this,this.resolveTile));
		}
		return this.font;
	}
	,resolveTile: function(path) {
		return this.loader.load(path).toTile();
	}
	,__class__: hxd_res_BitmapFont
});
var hxd_res_ImageInfoFlag = $hxEnums["hxd.res.ImageInfoFlag"] = { __ename__ : true, __constructs__ : ["IsCube","Dxt10Header"]
	,IsCube: {_hx_index:0,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
	,Dxt10Header: {_hx_index:1,__enum__:"hxd.res.ImageInfoFlag",toString:$estr}
};
hxd_res_ImageInfoFlag.__empty_constructs__ = [hxd_res_ImageInfoFlag.IsCube,hxd_res_ImageInfoFlag.Dxt10Header];
var hxd_res_ImageInfo = function() {
	this.mipLevels = 1;
	this.height = 0;
	this.width = 0;
	var this1 = 0;
	this.flags = this1;
};
$hxClasses["hxd.res.ImageInfo"] = hxd_res_ImageInfo;
hxd_res_ImageInfo.__name__ = "hxd.res.ImageInfo";
hxd_res_ImageInfo.prototype = {
	__class__: hxd_res_ImageInfo
};
var hxd_res_Image = function(entry) {
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Image"] = hxd_res_Image;
hxd_res_Image.__name__ = "hxd.res.Image";
hxd_res_Image.setupTextureFlags = function(tex) {
};
hxd_res_Image.__super__ = hxd_res_Resource;
hxd_res_Image.prototype = $extend(hxd_res_Resource.prototype,{
	getInfo: function() {
		if(this.inf != null) {
			return this.inf;
		}
		this.inf = new hxd_res_ImageInfo();
		var f = new hxd_fs_FileInput(this.entry);
		var head;
		try {
			head = f.readUInt16();
		} catch( _g ) {
			if(((haxe_Exception.caught(_g).unwrap()) instanceof haxe_io_Eof)) {
				head = 0;
			} else {
				throw _g;
			}
		}
		switch(head) {
		case 16163:
			this.inf.dataFormat = 6;
			while(f.readLine() != "") {
			}
			var parts = f.readLine().split(" ");
			this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
			this.inf.height = Std.parseInt(parts[1]);
			this.inf.width = Std.parseInt(parts[3]);
			break;
		case 17476:
			this.inf.dataFormat = 4;
			f.skip(10);
			this.inf.height = f.readInt32();
			this.inf.width = f.readInt32();
			f.skip(8);
			this.inf.mipLevels = f.readInt32();
			f.skip(48);
			var caps = f.readInt32();
			var fourCC = f.readInt32();
			var bpp = f.readInt32();
			var rMask = f.readInt32();
			var gMask = f.readInt32();
			var bMask = f.readInt32();
			var aMask = f.readInt32();
			var caps2 = f.readInt32();
			var cubes = f.readInt32();
			if((cubes & 65024) == 65024) {
				this.inf.flags |= 1 << hxd_res_ImageInfoFlag.IsCube._hx_index;
			}
			switch(fourCC & 16777215) {
			case 0:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				} else if((caps & 64) != 0) {
					if(bpp == 32) {
						switch(rMask) {
						case 255:
							if(gMask == 65280) {
								if(bMask == 16711680) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.RGBA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						case 16711680:
							if(gMask == 65280) {
								if(bMask == 255) {
									if(aMask == -16777216) {
										this.inf.pixelFormat = hxd_PixelFormat.BGRA;
									} else {
										throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
									}
								} else {
									throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
								}
							} else {
								throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
							}
							break;
						default:
							throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
						}
					} else {
						throw haxe_Exception.thrown("Unsupported RGB DDS " + bpp + "bits " + StringTools.hex(rMask) + "/" + StringTools.hex(gMask) + "/" + StringTools.hex(bMask) + "/" + StringTools.hex(aMask));
					}
				}
				break;
			case 111:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R16F;
				}
				break;
			case 112:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG16F;
				}
				break;
			case 113:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA16F;
				}
				break;
			case 114:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.R32F;
				}
				break;
			case 115:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RG32F;
				}
				break;
			case 116:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				} else {
					this.inf.pixelFormat = hxd_PixelFormat.RGBA32F;
				}
				break;
			case 4805697:
				var v = (fourCC >>> 24) - 48;
				var tmp;
				switch(v) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(4);
					break;
				case 2:
					tmp = hxd_PixelFormat.S3TC(5);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			case 5527620:
				var dxt = (fourCC >>> 24) - 48;
				var tmp;
				switch(dxt) {
				case 1:
					tmp = hxd_PixelFormat.S3TC(1);
					break;
				case 2:case 3:
					tmp = hxd_PixelFormat.S3TC(2);
					break;
				case 4:case 5:
					tmp = hxd_PixelFormat.S3TC(3);
					break;
				default:
					tmp = null;
				}
				this.inf.pixelFormat = tmp;
				break;
			default:
				if(fourCC == 808540228) {
					f.skip(12);
					this.inf.flags |= 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index;
					var dxgi = f.readInt32();
					var tmp;
					switch(dxgi) {
					case 95:
						tmp = hxd_PixelFormat.S3TC(6);
						break;
					case 98:
						tmp = hxd_PixelFormat.S3TC(7);
						break;
					default:
						throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported DXGI format " + dxgi);
					}
					this.inf.pixelFormat = tmp;
				}
			}
			if(this.inf.pixelFormat == null) {
				var fid = String.fromCodePoint((fourCC & 255)) + String.fromCodePoint((fourCC >> 8 & 255)) + String.fromCodePoint((fourCC >> 16 & 255)) + String.fromCodePoint((fourCC >>> 24));
				if((fourCC & 255) == fourCC) {
					fid = "0x" + fourCC;
				}
				throw haxe_Exception.thrown(this.entry.get_path() + " has unsupported 4CC " + fid);
			}
			break;
		case 18759:
			this.inf.dataFormat = 2;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.readInt32();
			this.inf.width = f.readUInt16();
			this.inf.height = f.readUInt16();
			break;
		case 20617:
			this.inf.dataFormat = 1;
			f.set_bigEndian(true);
			f.skip(6);
			while(true) {
				var dataLen = f.readInt32();
				if(f.readInt32() == 1229472850) {
					this.inf.width = f.readInt32();
					this.inf.height = f.readInt32();
					var colbits = f.readByte();
					var tmp;
					switch(colbits) {
					case 8:
						tmp = hxd_PixelFormat.BGRA;
						break;
					case 16:
						tmp = hxd_PixelFormat.R16U;
						break;
					case 48:
						tmp = hxd_PixelFormat.RGB16U;
						break;
					case 64:
						tmp = hxd_PixelFormat.RGBA16U;
						break;
					default:
						throw haxe_Exception.thrown("Unsupported png format " + colbits + "(" + this.entry.get_path() + ")");
					}
					this.inf.pixelFormat = tmp;
					break;
				}
				f.skip(dataLen + 4);
			}
			break;
		case 55551:
			this.inf.dataFormat = 0;
			this.inf.pixelFormat = hxd_PixelFormat.BGRA;
			f.set_bigEndian(true);
			_hx_loop3: while(true) switch(f.readUInt16()) {
			case 65472:case 65473:case 65474:
				var len = f.readUInt16();
				var prec = f.readByte();
				this.inf.height = f.readUInt16();
				this.inf.width = f.readUInt16();
				break _hx_loop3;
			default:
				f.skip(f.readUInt16() - 2);
			}
			break;
		default:
			if(this.entry.get_extension() == "tga") {
				this.inf.dataFormat = 3;
				this.inf.pixelFormat = hxd_PixelFormat.ARGB;
				f.skip(10);
				this.inf.width = f.readUInt16();
				this.inf.height = f.readUInt16();
			} else if(this.entry.get_extension() == "raw") {
				this.inf.dataFormat = 5;
				this.inf.pixelFormat = hxd_PixelFormat.R32F;
				var size = Math.sqrt(this.entry.get_size() >> 2) | 0;
				if(this.entry.get_size() != size * size * 4) {
					var size2 = Math.sqrt(this.entry.get_size() >> 1) | 0;
					if(this.entry.get_size() == size2 * size2 * 2) {
						this.inf.pixelFormat = hxd_PixelFormat.R16F;
						size = size2;
					} else {
						throw haxe_Exception.thrown("RAW format does not match 32 bit per components on " + size + "x" + size);
					}
				}
				this.inf.width = this.inf.height = size;
			} else {
				throw haxe_Exception.thrown("Unsupported texture format " + this.entry.get_path());
			}
		}
		f.close();
		if(this.inf.pixelFormat == null) {
			throw haxe_Exception.thrown("Unsupported internal format (" + this.entry.get_path() + ")");
		}
		return this.inf;
	}
	,getPixels: function(fmt,flipY,index) {
		var pixels;
		if(index == null) {
			index = 0;
		}
		switch(this.getInfo().dataFormat) {
		case 0:
			var bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd_PixelFormat.BGRA) {
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			var p;
			try {
				p = hxd_res_NanoJpeg.decode(bytes);
			} catch( _g ) {
				var e = haxe_Exception.caught(_g).unwrap();
				throw haxe_Exception.thrown("Failed to decode JPG " + this.entry.get_path() + " (" + Std.string(e) + ")");
			}
			pixels = new hxd_Pixels(p.width,p.height,p.pixels,hxd_PixelFormat.BGRA);
			break;
		case 1:
			var bytes = this.entry.getBytes();
			if(this.inf.pixelFormat != hxd_PixelFormat.BGRA) {
				throw haxe_Exception.thrown("No support to decode " + Std.string(this.inf.pixelFormat) + " on this platform (" + this.entry.get_path() + ")");
			}
			var png = new format_png_Reader(new haxe_io_BytesInput(bytes));
			png.checkCRC = false;
			pixels = hxd_Pixels.alloc(this.inf.width,this.inf.height,hxd_PixelFormat.BGRA);
			var pdata = png.read();
			format_png_Tools.extract32(pdata,pixels.bytes,flipY);
			if(flipY) {
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
			}
			break;
		case 2:
			var bytes = this.entry.getBytes();
			var gif = new format_gif_Reader(new haxe_io_BytesInput(bytes)).read();
			if(fmt == hxd_PixelFormat.RGBA) {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullRGBA(gif,0),hxd_PixelFormat.RGBA);
			} else {
				pixels = new hxd_Pixels(this.inf.width,this.inf.height,format_gif_Tools.extractFullBGRA(gif,0),hxd_PixelFormat.BGRA);
			}
			break;
		case 3:
			var bytes = this.entry.getBytes();
			var r = new format_tga_Reader(new haxe_io_BytesInput(bytes)).read();
			if(r.header.imageType != format_tga_ImageType.UncompressedTrueColor || r.header.bitsPerPixel != 32) {
				throw haxe_Exception.thrown("Not supported TGA " + Std.string(r.header.imageType) + "/" + r.header.bitsPerPixel);
			}
			var w = r.header.width;
			var h = r.header.height;
			pixels = hxd_Pixels.alloc(w,h,hxd_PixelFormat.ARGB);
			var access = hxd_PixelsARGB.fromPixels(pixels);
			var p = 0;
			var _g = 0;
			var _g1 = h;
			while(_g < _g1) {
				var y = _g++;
				var _g2 = 0;
				var _g3 = w;
				while(_g2 < _g3) {
					var x = _g2++;
					var c = r.imageData[x + y * w];
					access.bytes.setInt32((x + y * access.width << 2) + access.offset,c >>> 24 | c >> 8 & 65280 | c << 8 & 16711680 | c << 24);
				}
			}
			switch(r.header.imageOrigin._hx_index) {
			case 0:
				pixels.flags |= 1 << hxd_Flags.FlipY._hx_index;
				break;
			case 2:
				break;
			default:
				throw haxe_Exception.thrown("Not supported " + Std.string(r.header.imageOrigin));
			}
			break;
		case 4:
			var pos = 128;
			var mipLevel = 0;
			if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.Dxt10Header._hx_index) != 0) {
				pos += 20;
			}
			if(index > 0) {
				var bpp = hxd_Pixels.calcStride(1,this.inf.pixelFormat);
				var layer = index / this.inf.mipLevels | 0;
				mipLevel = index % this.inf.mipLevels;
				var totSize = 0;
				var _g = 0;
				var _g1 = this.inf.mipLevels;
				while(_g < _g1) {
					var i = _g++;
					var w = this.inf.width >> i;
					var h = this.inf.height >> i;
					if(w == 0) {
						w = 1;
					}
					if(h == 0) {
						h = 1;
					}
					var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
					totSize += size;
					if(i < mipLevel) {
						pos += size;
					} else if(layer == 0) {
						break;
					}
				}
				pos += totSize * layer;
			}
			var bytes;
			var w = this.inf.width >> mipLevel;
			var h = this.inf.height >> mipLevel;
			if(w == 0) {
				w = 1;
			}
			if(h == 0) {
				h = 1;
			}
			if(this.inf.mipLevels == 1 && (this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) == 0) {
				bytes = this.entry.getBytes();
			} else {
				var size = hxd_Pixels.calcDataSize(w,h,this.inf.pixelFormat);
				this.entry.open();
				this.entry.skip(pos);
				bytes = new haxe_io_Bytes(new ArrayBuffer(size));
				this.entry.read(bytes,0,size);
				this.entry.close();
				pos = 0;
			}
			pixels = new hxd_Pixels(w,h,bytes,this.inf.pixelFormat,pos);
			break;
		case 5:
			var bytes = this.entry.getBytes();
			pixels = new hxd_Pixels(this.inf.width,this.inf.height,bytes,this.inf.pixelFormat);
			break;
		case 6:
			var data = hxd_fmt_hdr_Reader.decode(this.entry.getBytes(),false);
			pixels = new hxd_Pixels(data.width,data.height,data.bytes,this.inf.pixelFormat);
			break;
		}
		if(fmt != null) {
			pixels.convert(fmt);
		}
		if(flipY != null) {
			pixels.setFlip(flipY);
		}
		return pixels;
	}
	,watchCallb: function() {
		var w = this.inf.width;
		var h = this.inf.height;
		this.inf = null;
		var s = this.getInfo();
		if(w != s.width || h != s.height) {
			this.tex.resize(s.width,s.height);
		}
		this.tex.realloc = null;
		this.loadTexture();
	}
	,loadTexture: function() {
		var _gthis = this;
		if(this.getInfo().dataFormat != 0 && !hxd_res_Image.DEFAULT_ASYNC) {
			var load = function() {
				_gthis.tex.alloc();
				var _g = 0;
				var _g1 = _gthis.tex.get_layerCount();
				while(_g < _g1) {
					var layer = _g++;
					var _g2 = 0;
					var _g3 = _gthis.inf.mipLevels;
					while(_g2 < _g3) {
						var mip = _g2++;
						var pixels = _gthis.getPixels(_gthis.tex.format,null,layer * _gthis.inf.mipLevels + mip);
						_gthis.tex.uploadPixels(pixels,mip,layer);
						pixels.dispose();
					}
				}
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			};
			if(this.entry.get_isAvailable()) {
				load();
			} else {
				this.entry.load(load);
			}
		} else {
			this.tex.flags |= 1 << h3d_mat_TextureFlags.Loading._hx_index;
			this.entry.loadBitmap(function(bmp) {
				var bmp1 = hxd_fs_LoadedBitmap.toBitmap(bmp);
				_gthis.tex.alloc();
				_gthis.tex.uploadBitmap(bmp1);
				bmp1.ctx = null;
				bmp1.pixel = null;
				_gthis.tex.realloc = $bind(_gthis,_gthis.loadTexture);
				_gthis.tex.flags &= -1 - (1 << h3d_mat_TextureFlags.Loading._hx_index);
				if(_gthis.tex.waitLoads != null) {
					var arr = _gthis.tex.waitLoads;
					_gthis.tex.waitLoads = null;
					var _g = 0;
					while(_g < arr.length) {
						var f = arr[_g];
						++_g;
						f();
					}
				}
				if(hxd_res_Image.ENABLE_AUTO_WATCH) {
					_gthis.watch($bind(_gthis,_gthis.watchCallb));
				}
			});
		}
	}
	,toTexture: function() {
		if(this.tex != null) {
			return this.tex;
		}
		this.getInfo();
		var flags = [h3d_mat_TextureFlags.NoAlloc];
		var fmt = this.inf.pixelFormat;
		if(fmt == hxd_PixelFormat.BGRA || fmt == hxd_PixelFormat.ARGB || fmt == hxd_PixelFormat.RGBA) {
			fmt = h3d_mat_Texture.nativeFormat;
		}
		if((this.inf.flags & 1 << hxd_res_ImageInfoFlag.IsCube._hx_index) != 0) {
			flags.push(h3d_mat_TextureFlags.Cube);
		}
		if(this.inf.mipLevels > 1) {
			flags.push(h3d_mat_TextureFlags.MipMapped);
			flags.push(h3d_mat_TextureFlags.ManualMipMapGen);
		}
		this.tex = new h3d_mat_Texture(this.inf.width,this.inf.height,flags,fmt);
		if(hxd_res_Image.DEFAULT_FILTER != h3d_mat_Filter.Linear) {
			this.tex.set_filter(hxd_res_Image.DEFAULT_FILTER);
		}
		this.tex.setName(this.entry.get_path());
		hxd_res_Image.setupTextureFlags(this.tex);
		this.loadTexture();
		return this.tex;
	}
	,toTile: function() {
		this.getInfo();
		return h2d_Tile.fromTexture(this.toTexture()).sub(0,0,this.inf.width,this.inf.height);
	}
	,__class__: hxd_res_Image
});
var hxd_res_Filter = $hxEnums["hxd.res.Filter"] = { __ename__ : true, __constructs__ : ["Fast","Chromatic"]
	,Fast: {_hx_index:0,__enum__:"hxd.res.Filter",toString:$estr}
	,Chromatic: {_hx_index:1,__enum__:"hxd.res.Filter",toString:$estr}
};
hxd_res_Filter.__empty_constructs__ = [hxd_res_Filter.Fast,hxd_res_Filter.Chromatic];
var hxd_res__$NanoJpeg_Component = function() {
};
$hxClasses["hxd.res._NanoJpeg.Component"] = hxd_res__$NanoJpeg_Component;
hxd_res__$NanoJpeg_Component.__name__ = "hxd.res._NanoJpeg.Component";
hxd_res__$NanoJpeg_Component.prototype = {
	__class__: hxd_res__$NanoJpeg_Component
};
var hxd_res_NanoJpeg = function() {
	this.comps = [new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component(),new hxd_res__$NanoJpeg_Component()].slice(0);
	var this1 = new Array(64);
	var this2 = new Array(64);
	var this3 = new Array(64);
	var this4 = new Array(64);
	this.qtab = [this1,this2,this3,this4].slice(0);
	var this1 = new Array(16);
	this.counts = this1;
	var this1 = new Array(64);
	this.block = this1;
	this.njZZ = [0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63].slice(0);
	this.vlctab = [null,null,null,null,null,null,null,null].slice(0);
};
$hxClasses["hxd.res.NanoJpeg"] = hxd_res_NanoJpeg;
hxd_res_NanoJpeg.__name__ = "hxd.res.NanoJpeg";
hxd_res_NanoJpeg.decode = function(bytes,filter,position,size) {
	if(size == null) {
		size = -1;
	}
	if(position == null) {
		position = 0;
	}
	if(hxd_res_NanoJpeg.inst == null) {
		hxd_res_NanoJpeg.inst = new hxd_res_NanoJpeg();
	}
	hxd_res_NanoJpeg.inst.njInit(bytes,position,size,filter);
	return hxd_res_NanoJpeg.inst.njDecode();
};
hxd_res_NanoJpeg.prototype = {
	njInit: function(bytes,pos,size,filter) {
		this.bytes = bytes;
		this.pos = pos;
		this.filter = filter == null ? hxd_res_Filter.Chromatic : filter;
		if(size < 0) {
			size = bytes.length - pos;
		}
		if(this.vlctab[0] == null) {
			this.vlctab[0] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[1] == null) {
			this.vlctab[1] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[2] == null) {
			this.vlctab[2] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		if(this.vlctab[3] == null) {
			this.vlctab[3] = new haxe_io_Bytes(new ArrayBuffer(131072));
		}
		this.size = size;
		this.qtused = 0;
		this.qtavail = 0;
		this.rstinterval = 0;
		this.length = 0;
		this.buf = 0;
		this.bufbits = 0;
		this.progressive = false;
		this.comps[0].dcpred = 0;
		this.comps[1].dcpred = 0;
		this.comps[2].dcpred = 0;
	}
	,cleanup: function() {
		this.bytes = null;
		var _g = 0;
		var _g1 = this.comps;
		while(_g < _g1.length) {
			var c = _g1[_g];
			++_g;
			if(c.pixels != null) {
				c.pixels = null;
			}
		}
		if(this.vlctab[0] != null) {
			this.vlctab[0] = null;
		}
		if(this.vlctab[1] != null) {
			this.vlctab[1] = null;
		}
		if(this.vlctab[2] != null) {
			this.vlctab[2] = null;
		}
		if(this.vlctab[3] != null) {
			this.vlctab[3] = null;
		}
		if(this.vlctab[4] != null) {
			this.vlctab[4] = null;
		}
		if(this.vlctab[5] != null) {
			this.vlctab[5] = null;
		}
		if(this.vlctab[6] != null) {
			this.vlctab[6] = null;
		}
		if(this.vlctab[7] != null) {
			this.vlctab[7] = null;
		}
	}
	,njShowBits: function(bits) {
		if(bits == 0) {
			return 0;
		}
		while(this.bufbits < bits) {
			if(this.size <= 0) {
				this.buf = this.buf << 8 | 255;
				this.bufbits += 8;
				continue;
			}
			var newbyte = this.bytes.b[this.pos];
			this.pos++;
			this.size--;
			this.bufbits += 8;
			this.buf = this.buf << 8 | newbyte;
			if(newbyte == 255) {
				var marker = this.bytes.b[this.pos];
				this.pos++;
				this.size--;
				switch(marker) {
				case 217:
					this.size = 0;
					break;
				case 0:case 255:
					break;
				default:
					this.buf = this.buf << 8 | marker;
					this.bufbits += 8;
				}
			}
		}
		return this.buf >> this.bufbits - bits & (1 << bits) - 1;
	}
	,njDecodeSOF: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != 8) {
			this.notSupported();
		}
		this.height = this.bytes.b[this.pos + 1] << 8 | this.bytes.b[this.pos + 2];
		this.width = this.bytes.b[this.pos + 3] << 8 | this.bytes.b[this.pos + 4];
		this.ncomp = this.bytes.b[this.pos + 5];
		this.pos += 6;
		this.size -= 6;
		this.length -= 6;
		switch(this.ncomp) {
		case 1:case 3:
			break;
		default:
			this.notSupported();
		}
		var ssxmax = 0;
		var ssymax = 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.cid = this.bytes.b[this.pos];
			c.ssx = this.bytes.b[this.pos + 1] >> 4;
			if((c.ssx & c.ssx - 1) != 0) {
				this.notSupported();
			}
			c.ssy = this.bytes.b[this.pos + 1] & 15;
			if((c.ssy & c.ssy - 1) != 0) {
				this.notSupported();
			}
			c.qtsel = this.bytes.b[this.pos + 2];
			this.pos += 3;
			this.size -= 3;
			this.length -= 3;
			this.qtused |= 1 << c.qtsel;
			if(c.ssx > ssxmax) {
				ssxmax = c.ssx;
			}
			if(c.ssy > ssymax) {
				ssymax = c.ssy;
			}
		}
		if(this.ncomp == 1) {
			var c = this.comps[0];
			ssymax = 1;
			ssxmax = ssymax;
			c.ssx = c.ssy = ssxmax;
		}
		this.mbsizex = ssxmax << 3;
		this.mbsizey = ssymax << 3;
		this.mbwidth = (this.width + this.mbsizex - 1) / this.mbsizex | 0;
		this.mbheight = (this.height + this.mbsizey - 1) / this.mbsizey | 0;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.width = (this.width * c.ssx + ssxmax - 1) / ssxmax | 0;
			c.stride = c.width + 7 & 2147483640;
			c.height = (this.height * c.ssy + ssymax - 1) / ssymax | 0;
			c.stride = this.mbwidth * this.mbsizex * c.ssx / ssxmax | 0;
			if(c.width < 3 && c.ssx != ssxmax || c.height < 3 && c.ssy != ssymax) {
				this.notSupported();
			}
			c.pixels = new haxe_io_Bytes(new ArrayBuffer(c.stride * (this.mbheight * this.mbsizey * c.ssy / ssymax | 0)));
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeDQT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 65) {
			var i = this.bytes.b[this.pos];
			this.qtavail |= 1 << i;
			var t = this.qtab[i];
			var _g = 0;
			while(_g < 64) {
				var k = _g++;
				t[k] = this.bytes.b[this.pos + (k + 1)];
			}
			this.pos += 65;
			this.size -= 65;
			this.length -= 65;
		}
	}
	,njDecodeDHT: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		while(this.length >= 17) {
			var i = this.bytes.b[this.pos];
			i = i >> 4 & 1 | (i & 3) << 1;
			this.counts[0] = this.bytes.b[this.pos + 1];
			this.counts[1] = this.bytes.b[this.pos + 2];
			this.counts[2] = this.bytes.b[this.pos + 3];
			this.counts[3] = this.bytes.b[this.pos + 4];
			this.counts[4] = this.bytes.b[this.pos + 5];
			this.counts[5] = this.bytes.b[this.pos + 6];
			this.counts[6] = this.bytes.b[this.pos + 7];
			this.counts[7] = this.bytes.b[this.pos + 8];
			this.counts[8] = this.bytes.b[this.pos + 9];
			this.counts[9] = this.bytes.b[this.pos + 10];
			this.counts[10] = this.bytes.b[this.pos + 11];
			this.counts[11] = this.bytes.b[this.pos + 12];
			this.counts[12] = this.bytes.b[this.pos + 13];
			this.counts[13] = this.bytes.b[this.pos + 14];
			this.counts[14] = this.bytes.b[this.pos + 15];
			this.counts[15] = this.bytes.b[this.pos + 16];
			this.pos += 17;
			this.size -= 17;
			this.length -= 17;
			var vlc = this.vlctab[i];
			var vpos = 0;
			var remain = 65536;
			var spread = 65536;
			var _g = 1;
			while(_g < 17) {
				var codelen = _g++;
				spread >>= 1;
				var currcnt = this.counts[codelen - 1];
				if(currcnt == 0) {
					continue;
				}
				remain -= currcnt << 16 - codelen;
				var _g1 = 0;
				var _g2 = currcnt;
				while(_g1 < _g2) {
					var i1 = _g1++;
					var code = this.bytes.b[this.pos + i1];
					var _g3 = 0;
					var _g4 = spread;
					while(_g3 < _g4) {
						var j = _g3++;
						vlc.b[vpos++] = codelen;
						vlc.b[vpos++] = code;
					}
				}
				this.pos += currcnt;
				this.size -= currcnt;
				this.length -= currcnt;
			}
			while(remain-- != 0) {
				vlc.b[vpos] = 0;
				vpos += 2;
			}
		}
	}
	,njDecodeDRI: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		this.rstinterval = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
	}
	,njDecodeBlock: function(c,po) {
		var this1 = c.pixels;
		var out = this1;
		var value;
		var coef = 0;
		var _g = 0;
		while(_g < 64) {
			var i = _g++;
			this.block[i] = 0;
		}
		var c1 = c;
		var c2 = c1.dcpred;
		var vlc = this.vlctab[c.dctabsel];
		var value1 = this.njShowBits(16);
		var bits = vlc.b[value1 << 1];
		if(this.bufbits < bits) {
			this.njShowBits(bits);
		}
		this.bufbits -= bits;
		value1 = vlc.b[value1 << 1 | 1];
		this.vlcCode = value1;
		bits = value1 & 15;
		var tmp;
		if(bits == 0) {
			tmp = 0;
		} else {
			var r = this.njShowBits(bits);
			this.bufbits -= bits;
			value1 = r;
			if(value1 < 1 << bits - 1) {
				value1 += (-1 << bits) + 1;
			}
			tmp = value1;
		}
		c1.dcpred = c2 + tmp;
		var qt = this.qtab[c.qtsel];
		var at = this.vlctab[c.actabsel];
		this.block[0] = c.dcpred * qt[0];
		while(true) {
			var value1 = this.njShowBits(16);
			var bits = at.b[value1 << 1];
			if(this.bufbits < bits) {
				this.njShowBits(bits);
			}
			this.bufbits -= bits;
			value1 = at.b[value1 << 1 | 1];
			this.vlcCode = value1;
			bits = value1 & 15;
			if(bits == 0) {
				value = 0;
			} else {
				var r = this.njShowBits(bits);
				this.bufbits -= bits;
				value1 = r;
				if(value1 < 1 << bits - 1) {
					value1 += (-1 << bits) + 1;
				}
				value = value1;
			}
			if(this.vlcCode == 0) {
				break;
			}
			coef += (this.vlcCode >> 4) + 1;
			this.block[this.njZZ[coef]] = value * qt[coef];
			if(!(coef < 63)) {
				break;
			}
		}
		var bp = 0;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 8;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 16;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 24;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 32;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 40;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 48;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var bp = 56;
		var x0;
		var x8;
		var x1 = this.block[bp + 4] << 11;
		var x2 = this.block[bp + 6];
		var x3 = this.block[bp + 2];
		var x4 = this.block[bp + 1];
		var x5 = this.block[bp + 7];
		var x6 = this.block[bp + 5];
		var x7 = this.block[bp + 3];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var val = this.block[bp + 7] = this.block[bp] << 3;
			var val1 = this.block[bp + 6] = val;
			var val = this.block[bp + 5] = val1;
			var val1 = this.block[bp + 4] = val;
			var val = this.block[bp + 3] = val1;
			var val1 = this.block[bp + 2] = val;
			var val = this.block[bp + 1] = val1;
			this.block[bp] = val;
		} else {
			x0 = (this.block[bp] << 11) + 128;
			x8 = 565 * (x4 + x5);
			x4 = x8 + 2276 * x4;
			x5 = x8 - 3406 * x5;
			x8 = 2408 * (x6 + x7);
			x6 = x8 - 799 * x6;
			x7 = x8 - 4017 * x7;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2);
			x2 = x1 - 3784 * x2;
			x3 = x1 + 1568 * x3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			this.block[bp] = x7 + x1 >> 8;
			this.block[bp + 1] = x3 + x2 >> 8;
			this.block[bp + 2] = x0 + x4 >> 8;
			this.block[bp + 3] = x8 + x6 >> 8;
			this.block[bp + 4] = x8 - x6 >> 8;
			this.block[bp + 5] = x0 - x4 >> 8;
			this.block[bp + 6] = x3 - x2 >> 8;
			this.block[bp + 7] = x7 - x1 >> 8;
		}
		var po1 = po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[32] << 8;
		var x2 = this.block[48];
		var x3 = this.block[16];
		var x4 = this.block[8];
		var x5 = this.block[56];
		var x6 = this.block[40];
		var x7 = this.block[24];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[0] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[0] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 1 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[33] << 8;
		var x2 = this.block[49];
		var x3 = this.block[17];
		var x4 = this.block[9];
		var x5 = this.block[57];
		var x6 = this.block[41];
		var x7 = this.block[25];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[1] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[1] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 2 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[34] << 8;
		var x2 = this.block[50];
		var x3 = this.block[18];
		var x4 = this.block[10];
		var x5 = this.block[58];
		var x6 = this.block[42];
		var x7 = this.block[26];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[2] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[2] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 3 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[35] << 8;
		var x2 = this.block[51];
		var x3 = this.block[19];
		var x4 = this.block[11];
		var x5 = this.block[59];
		var x6 = this.block[43];
		var x7 = this.block[27];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[3] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[3] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 4 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[36] << 8;
		var x2 = this.block[52];
		var x3 = this.block[20];
		var x4 = this.block[12];
		var x5 = this.block[60];
		var x6 = this.block[44];
		var x7 = this.block[28];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[4] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[4] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 5 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[37] << 8;
		var x2 = this.block[53];
		var x3 = this.block[21];
		var x4 = this.block[13];
		var x5 = this.block[61];
		var x6 = this.block[45];
		var x7 = this.block[29];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[5] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[5] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 6 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[38] << 8;
		var x2 = this.block[54];
		var x3 = this.block[22];
		var x4 = this.block[14];
		var x5 = this.block[62];
		var x6 = this.block[46];
		var x7 = this.block[30];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[6] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[6] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
		var po1 = 7 + po;
		var stride = c.stride;
		var x0;
		var x8;
		var x1 = this.block[39] << 8;
		var x2 = this.block[55];
		var x3 = this.block[23];
		var x4 = this.block[15];
		var x5 = this.block[63];
		var x6 = this.block[47];
		var x7 = this.block[31];
		if((x1 | x2 | x3 | x4 | x5 | x6 | x7) == 0) {
			var x = (this.block[7] + 32 >> 6) + 128;
			x1 = x < 0 ? 0 : x > 255 ? 255 : x;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
			out.b[po1] = x1;
			po1 += stride;
		} else {
			x0 = (this.block[7] << 8) + 8192;
			x8 = 565 * (x4 + x5) + 4;
			x4 = x8 + 2276 * x4 >> 3;
			x5 = x8 - 3406 * x5 >> 3;
			x8 = 2408 * (x6 + x7) + 4;
			x6 = x8 - 799 * x6 >> 3;
			x7 = x8 - 4017 * x7 >> 3;
			x8 = x0 + x1;
			x0 -= x1;
			x1 = 1108 * (x3 + x2) + 4;
			x2 = x1 - 3784 * x2 >> 3;
			x3 = x1 + 1568 * x3 >> 3;
			x1 = x4 + x6;
			x4 -= x6;
			x6 = x5 + x7;
			x5 -= x7;
			x7 = x8 + x3;
			x8 -= x3;
			x3 = x0 + x2;
			x0 -= x2;
			x2 = 181 * (x4 + x5) + 128 >> 8;
			x4 = 181 * (x4 - x5) + 128 >> 8;
			var x = (x7 + x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 + x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 + x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 + x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x8 - x6 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x0 - x4 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x3 - x2 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
			po1 += stride;
			var x = (x7 - x1 >> 14) + 128;
			out.b[po1] = x < 0 ? 0 : x > 255 ? 255 : x;
		}
	}
	,notSupported: function() {
		throw haxe_Exception.thrown("This JPG file is not supported");
	}
	,njDecodeScan: function() {
		this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		if(this.bytes.b[this.pos] != this.ncomp) {
			this.notSupported();
		}
		this.pos += 1;
		this.size -= 1;
		this.length -= 1;
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			c.dctabsel = this.bytes.b[this.pos + 1] >> 4 << 1;
			c.actabsel = (this.bytes.b[this.pos + 1] & 3) << 1 | 1;
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
		}
		var start = this.bytes.b[this.pos];
		var count = this.bytes.b[this.pos + 1];
		var other = this.bytes.b[this.pos + 2];
		if(!this.progressive && start != 0 || count != 63 - start || other != 0) {
			this.notSupported();
		}
		var count = this.length;
		this.pos += count;
		this.size -= count;
		this.length -= count;
		var mbx = 0;
		var mby = 0;
		var rstcount = this.rstinterval;
		var nextrst = 0;
		while(true) {
			var _g = 0;
			var _g1 = this.ncomp;
			while(_g < _g1) {
				var i = _g++;
				var c = this.comps[i];
				var _g2 = 0;
				var _g3 = c.ssy;
				while(_g2 < _g3) {
					var sby = _g2++;
					var _g4 = 0;
					var _g5 = c.ssx;
					while(_g4 < _g5) {
						var sbx = _g4++;
						this.njDecodeBlock(c,(mby * c.ssy + sby) * c.stride + mbx * c.ssx + sbx << 3);
					}
				}
			}
			if(++mbx >= this.mbwidth) {
				mbx = 0;
				if(++mby >= this.mbheight) {
					break;
				}
			}
			if(this.rstinterval != 0 && --rstcount == 0) {
				this.bufbits &= 248;
				var r = this.njShowBits(16);
				this.bufbits -= 16;
				var i1 = r;
				nextrst = nextrst + 1 & 7;
				rstcount = this.rstinterval;
				this.comps[0].dcpred = 0;
				this.comps[1].dcpred = 0;
				this.comps[2].dcpred = 0;
			}
		}
	}
	,njUpsampleH: function(c) {
		var xmax = c.width - 3;
		var cout = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var this1 = cout;
		var lout = this1;
		var this1 = c.pixels;
		var lin = this1;
		var pi = 0;
		var po = 0;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var x = 139 * lin.b[pi] + -11 * lin.b[pi + 1] + 64 >> 7;
			lout.b[po] = x < 0 ? 0 : x > 255 ? 255 : x;
			var x1 = 104 * lin.b[pi] + 27 * lin.b[pi + 1] + -3 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 1] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			var x2 = 28 * lin.b[pi] + 109 * lin.b[pi + 1] + -9 * lin.b[pi + 2] + 64 >> 7;
			lout.b[po + 2] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			var _g2 = 0;
			var _g3 = xmax;
			while(_g2 < _g3) {
				var x3 = _g2++;
				var x4 = -9 * lin.b[pi + x3] + 111 * lin.b[pi + x3 + 1] + 29 * lin.b[pi + x3 + 2] + -3 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 3] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				var x5 = -3 * lin.b[pi + x3] + 29 * lin.b[pi + x3 + 1] + 111 * lin.b[pi + x3 + 2] + -9 * lin.b[pi + x3 + 3] + 64 >> 7;
				lout.b[po + (x3 << 1) + 4] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
			}
			pi += c.stride;
			po += c.width << 1;
			var x6 = 28 * lin.b[pi - 1] + 109 * lin.b[pi - 2] + -9 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 3] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			var x7 = 104 * lin.b[pi - 1] + 27 * lin.b[pi - 2] + -3 * lin.b[pi - 3] + 64 >> 7;
			lout.b[po - 2] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			var x8 = 139 * lin.b[pi - 1] + -11 * lin.b[pi - 2] + 64 >> 7;
			lout.b[po - 1] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.width <<= 1;
		c.stride = c.width;
		c.pixels = cout;
	}
	,njUpsampleV: function(c) {
		var w = c.width;
		var s1 = c.stride;
		var s2 = s1 + s1;
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height << 1));
		var pi = 0;
		var po = 0;
		var this1 = out;
		var cout = this1;
		var this1 = c.pixels;
		var cin = this1;
		var _g = 0;
		var _g1 = w;
		while(_g < _g1) {
			var x = _g++;
			po = x;
			pi = po;
			var x1 = 139 * cin.b[pi] + -11 * cin.b[pi + s1] + 64 >> 7;
			cout.b[po] = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
			po += w;
			var x2 = 104 * cin.b[pi] + 27 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
			po += w;
			var x3 = 28 * cin.b[pi] + 109 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
			cout.b[po] = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
			po += w;
			pi += s1;
			var _g2 = 0;
			var _g3 = c.height - 2;
			while(_g2 < _g3) {
				var y = _g2++;
				var x4 = -9 * cin.b[pi - s1] + 111 * cin.b[pi] + 29 * cin.b[pi + s1] + -3 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x4 < 0 ? 0 : x4 > 255 ? 255 : x4;
				po += w;
				var x5 = -3 * cin.b[pi - s1] + 29 * cin.b[pi] + 111 * cin.b[pi + s1] + -9 * cin.b[pi + s2] + 64 >> 7;
				cout.b[po] = x5 < 0 ? 0 : x5 > 255 ? 255 : x5;
				po += w;
				pi += s1;
			}
			pi += s1;
			var x6 = 28 * cin.b[pi] + 109 * cin.b[pi - s1] + -9 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x6 < 0 ? 0 : x6 > 255 ? 255 : x6;
			po += w;
			var x7 = 104 * cin.b[pi] + 27 * cin.b[pi - s1] + -3 * cin.b[pi - s2] + 64 >> 7;
			cout.b[po] = x7 < 0 ? 0 : x7 > 255 ? 255 : x7;
			po += w;
			var x8 = 139 * cin.b[pi] + -11 * cin.b[pi - s1] + 64 >> 7;
			cout.b[po] = x8 < 0 ? 0 : x8 > 255 ? 255 : x8;
		}
		c.height <<= 1;
		c.stride = c.width;
		c.pixels = out;
	}
	,njUpsample: function(c) {
		var xshift = 0;
		var yshift = 0;
		while(c.width < this.width) {
			c.width <<= 1;
			++xshift;
		}
		while(c.height < this.height) {
			c.height <<= 1;
			++yshift;
		}
		var out = new haxe_io_Bytes(new ArrayBuffer(c.width * c.height));
		var this1 = c.pixels;
		var lin = this1;
		var pout = 0;
		var this1 = out;
		var lout = this1;
		var _g = 0;
		var _g1 = c.height;
		while(_g < _g1) {
			var y = _g++;
			var pin = (y >> yshift) * c.stride;
			var _g2 = 0;
			var _g3 = c.width;
			while(_g2 < _g3) {
				var x = _g2++;
				lout.b[pout++] = lin.b[(x >> xshift) + pin];
			}
		}
		c.stride = c.width;
		c.pixels = out;
	}
	,njConvert: function() {
		var _g = 0;
		var _g1 = this.ncomp;
		while(_g < _g1) {
			var i = _g++;
			var c = this.comps[i];
			switch(this.filter._hx_index) {
			case 0:
				if(c.width < this.width || c.height < this.height) {
					this.njUpsample(c);
				}
				break;
			case 1:
				while(c.width < this.width || c.height < this.height) {
					if(c.width < this.width) {
						this.njUpsampleH(c);
					}
					if(c.height < this.height) {
						this.njUpsampleV(c);
					}
				}
				break;
			}
			if(c.width < this.width || c.height < this.height) {
				throw haxe_Exception.thrown("assert");
			}
		}
		var pixels = new haxe_io_Bytes(new ArrayBuffer(this.width * this.height * 4));
		if(this.ncomp == 3) {
			var this1 = this.comps[0].pixels;
			var py = this1;
			var this1 = this.comps[1].pixels;
			var pcb = this1;
			var this1 = this.comps[2].pixels;
			var pcr = this1;
			var this1 = pixels;
			var pix = this1;
			var k1 = 0;
			var k2 = 0;
			var k3 = 0;
			var out = 0;
			var _g = 0;
			var _g1 = this.height;
			while(_g < _g1) {
				var yy = _g++;
				var _g2 = 0;
				var _g3 = this.width;
				while(_g2 < _g3) {
					var x = _g2++;
					var y = py.b[k1++] << 8;
					var cb = pcb.b[k2++] - 128;
					var cr = pcr.b[k3++] - 128;
					var x1 = y + 359 * cr + 128 >> 8;
					var r = x1 < 0 ? 0 : x1 > 255 ? 255 : x1;
					var x2 = y - 88 * cb - 183 * cr + 128 >> 8;
					var g = x2 < 0 ? 0 : x2 > 255 ? 255 : x2;
					var x3 = y + 454 * cb + 128 >> 8;
					var b = x3 < 0 ? 0 : x3 > 255 ? 255 : x3;
					pix.b[out++] = b;
					pix.b[out++] = g;
					pix.b[out++] = r;
					pix.b[out++] = 255;
				}
				k1 += this.comps[0].stride - this.width;
				k2 += this.comps[1].stride - this.width;
				k3 += this.comps[2].stride - this.width;
			}
		} else {
			throw haxe_Exception.thrown("TODO");
		}
		return pixels;
	}
	,njDecode: function() {
		if(this.size < 2 || this.bytes.b[this.pos] != 255 || this.bytes.b[this.pos + 1] != 216) {
			throw haxe_Exception.thrown("This file is not a JPEG");
		}
		this.pos += 2;
		this.size -= 2;
		this.length -= 2;
		_hx_loop1: while(true) {
			this.pos += 2;
			this.size -= 2;
			this.length -= 2;
			switch(this.bytes.b[this.pos + (-1)]) {
			case 192:
				this.njDecodeSOF();
				break;
			case 194:
				this.progressive = true;
				if(this.progressive) {
					throw haxe_Exception.thrown("Unsupported progressive JPG");
				}
				if(this.vlctab[4] == null) {
					this.vlctab[4] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[5] == null) {
					this.vlctab[5] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[6] == null) {
					this.vlctab[6] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				if(this.vlctab[7] == null) {
					this.vlctab[7] = new haxe_io_Bytes(new ArrayBuffer(131072));
				}
				this.njDecodeSOF();
				break;
			case 195:
				throw haxe_Exception.thrown("Unsupported lossless JPG");
			case 196:
				this.njDecodeDHT();
				break;
			case 218:
				this.njDecodeScan();
				break _hx_loop1;
			case 219:
				this.njDecodeDQT();
				break;
			case 221:
				this.njDecodeDRI();
				break;
			case 254:
				this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
				this.pos += 2;
				this.size -= 2;
				this.length -= 2;
				var count = this.length;
				this.pos += count;
				this.size -= count;
				this.length -= count;
				break;
			default:
				switch(this.bytes.b[this.pos + (-1)] & 240) {
				case 192:
					throw haxe_Exception.thrown("Unsupported jpeg type " + (this.bytes.b[this.pos + (-1)] & 15));
				case 224:
					this.length = this.bytes.b[this.pos] << 8 | this.bytes.b[this.pos + 1];
					this.pos += 2;
					this.size -= 2;
					this.length -= 2;
					var count1 = this.length;
					this.pos += count1;
					this.size -= count1;
					this.length -= count1;
					break;
				default:
					throw haxe_Exception.thrown("Unsupported jpeg tag 0x" + StringTools.hex(this.bytes.b[this.pos + (-1)],2));
				}
			}
		}
		var pixels = this.njConvert();
		this.cleanup();
		return { pixels : pixels, width : this.width, height : this.height};
	}
	,__class__: hxd_res_NanoJpeg
};
var hxd_res_Sound = function(entry) {
	this.lastPlay = 0.;
	hxd_res_Resource.call(this,entry);
};
$hxClasses["hxd.res.Sound"] = hxd_res_Sound;
hxd_res_Sound.__name__ = "hxd.res.Sound";
hxd_res_Sound.__super__ = hxd_res_Resource;
hxd_res_Sound.prototype = $extend(hxd_res_Resource.prototype,{
	getData: function() {
		if(this.data != null) {
			return this.data;
		}
		var bytes = this.entry.getBytes();
		switch(bytes.b[0]) {
		case 73:case 255:
			this.data = new hxd_snd_Mp3Data(bytes);
			break;
		case 79:
			throw haxe_Exception.thrown("OGG format requires -lib stb_ogg_sound (for " + this.entry.get_path() + ")");
		case 82:
			this.data = new hxd_snd_WavData(bytes);
			break;
		default:
		}
		if(this.data == null) {
			throw haxe_Exception.thrown("Unsupported sound format " + this.entry.get_path());
		}
		if(hxd_res_Sound.ENABLE_AUTO_WATCH) {
			this.watch($bind(this,this.watchCallb));
		}
		return this.data;
	}
	,play: function(loop,volume,channelGroup,soundGroup) {
		if(volume == null) {
			volume = 1.;
		}
		if(loop == null) {
			loop = false;
		}
		this.lastPlay = HxOverrides.now() / 1000;
		this.channel = hxd_snd_Manager.get().play(this,channelGroup,soundGroup);
		this.channel.loop = loop;
		this.channel.set_volume(volume);
		return this.channel;
	}
	,watchCallb: function() {
		var old = this.data;
		this.data = null;
		var data = this.getData();
		if(old != null) {
			if(old.channels != data.channels || old.samples != data.samples || old.sampleFormat != data.sampleFormat || old.samplingRate != data.samplingRate) {
				var manager = hxd_snd_Manager.get();
				var ch = manager.getAll(this);
				while(ch.hasNext()) {
					var ch1 = ch.next();
					ch1.duration = data.get_duration();
					ch1.set_position(ch1.position);
				}
			}
		}
	}
	,__class__: hxd_res_Sound
});
var hxd_snd_ChannelBase = function() {
	this.volume = 1.;
	this.bindedEffects = [];
	this.effects = [];
	this.mute = false;
	this.priority = 0.;
};
$hxClasses["hxd.snd.ChannelBase"] = hxd_snd_ChannelBase;
hxd_snd_ChannelBase.__name__ = "hxd.snd.ChannelBase";
hxd_snd_ChannelBase.prototype = {
	set_volume: function(v) {
		this.currentFade = null;
		return this.volume = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.currentFade != null) {
			var f = this.currentFade;
			var dt = now - f.start;
			if(dt >= f.duration) {
				this.set_volume(f.targetVolume);
				if(f.onEnd != null) {
					f.onEnd();
				}
			} else {
				this.set_volume(f.startVolume + dt / f.duration * (f.targetVolume - f.startVolume));
				this.currentFade = f;
			}
		}
		this.currentVolume = this.volume;
	}
	,removeEffect: function(e) {
		HxOverrides.remove(this.effects,e);
	}
	,__class__: hxd_snd_ChannelBase
};
var hxd_snd_Channel = function() {
	this.queue = [];
	this.positionChanged = false;
	this.isLoading = false;
	this.isVirtual = false;
	this.lastStamp = 0.0;
	this.audibleVolume = 1.0;
	this.allowVirtual = true;
	this.loop = false;
	this.pause = false;
	this.position = 0.0;
	hxd_snd_ChannelBase.call(this);
	this.id = hxd_snd_Channel.ID++;
};
$hxClasses["hxd.snd.Channel"] = hxd_snd_Channel;
hxd_snd_Channel.__name__ = "hxd.snd.Channel";
hxd_snd_Channel.__super__ = hxd_snd_ChannelBase;
hxd_snd_Channel.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	onEnd: function() {
	}
	,set_position: function(v) {
		this.lastStamp = HxOverrides.now() / 1000;
		this.positionChanged = true;
		if(v > this.duration) {
			v = this.duration;
		} else if(v < 0) {
			v = 0;
		}
		return this.position = v;
	}
	,updateCurrentVolume: function(now) {
		if(this.pause && this.currentFade != null) {
			var f = this.currentFade;
			this.currentFade = null;
			this.updateCurrentVolume(now);
			this.currentFade = f;
		}
		hxd_snd_ChannelBase.prototype.updateCurrentVolume.call(this,now);
		this.channelGroup.updateCurrentVolume(now);
		this.currentVolume *= this.channelGroup.currentVolume * this.soundGroup.volume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.currentVolume *= e.getVolumeModifier();
			}
		}
	}
	,calcAudibleVolume: function(now) {
		this.updateCurrentVolume(now);
		this.audibleVolume = this.currentVolume;
		if(this.manager != null) {
			var _g = 0;
			var _g1 = this.channelGroup.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
			var _g = 0;
			var _g1 = this.effects;
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.audibleVolume = e.applyAudibleVolumeModifier(this.audibleVolume);
			}
		}
	}
	,__class__: hxd_snd_Channel
});
var hxd_snd_ChannelGroup = function(name) {
	hxd_snd_ChannelBase.call(this);
	this.name = name;
};
$hxClasses["hxd.snd.ChannelGroup"] = hxd_snd_ChannelGroup;
hxd_snd_ChannelGroup.__name__ = "hxd.snd.ChannelGroup";
hxd_snd_ChannelGroup.__super__ = hxd_snd_ChannelBase;
hxd_snd_ChannelGroup.prototype = $extend(hxd_snd_ChannelBase.prototype,{
	__class__: hxd_snd_ChannelGroup
});
var hxd_snd_SampleFormat = $hxEnums["hxd.snd.SampleFormat"] = { __ename__ : true, __constructs__ : ["UI8","I16","F32"]
	,UI8: {_hx_index:0,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,I16: {_hx_index:1,__enum__:"hxd.snd.SampleFormat",toString:$estr}
	,F32: {_hx_index:2,__enum__:"hxd.snd.SampleFormat",toString:$estr}
};
hxd_snd_SampleFormat.__empty_constructs__ = [hxd_snd_SampleFormat.UI8,hxd_snd_SampleFormat.I16,hxd_snd_SampleFormat.F32];
var hxd_snd_Data = function() { };
$hxClasses["hxd.snd.Data"] = hxd_snd_Data;
hxd_snd_Data.__name__ = "hxd.snd.Data";
hxd_snd_Data.prototype = {
	isLoading: function() {
		return false;
	}
	,decode: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		if(sampleStart < 0 || sampleCount < 0 || outPos < 0 || outPos + sampleCount * bpp > out.length) {
			var s = "sampleStart = " + sampleStart;
			s += " sampleCount = " + sampleCount;
			s += " outPos = " + outPos;
			s += " bpp = " + bpp;
			s += " out.length = " + out.length;
			throw haxe_Exception.thrown(s);
		}
		if(sampleStart + sampleCount >= this.samples) {
			var count = 0;
			if(sampleStart < this.samples) {
				count = this.samples - sampleStart;
				this.decodeBuffer(out,outPos,sampleStart,count);
			}
			out.fill(outPos + count * bpp,(sampleCount - count) * bpp,0);
			return;
		}
		this.decodeBuffer(out,outPos,sampleStart,sampleCount);
	}
	,resample: function(rate,format,channels) {
		if(this.sampleFormat == format && this.samplingRate == rate && this.channels == channels) {
			return this;
		}
		var newSamples = Math.ceil(this.samples * (rate / this.samplingRate));
		var bpp = this.getBytesPerSample();
		var data = new haxe_io_Bytes(new ArrayBuffer(bpp * this.samples));
		this.decodeBuffer(data,0,0,this.samples);
		var out = channels * newSamples;
		var out1;
		switch(format._hx_index) {
		case 0:
			out1 = 1;
			break;
		case 1:
			out1 = 2;
			break;
		case 2:
			out1 = 4;
			break;
		}
		var out2 = new haxe_io_Bytes(new ArrayBuffer(out * out1));
		this.resampleBuffer(out2,0,data,0,rate,format,channels,this.samples);
		var data = new hxd_snd_WavData(null);
		data.channels = channels;
		data.samples = newSamples;
		data.sampleFormat = format;
		data.samplingRate = rate;
		data.rawData = out2;
		return data;
	}
	,resampleBuffer: function(out,outPos,input,inPos,rate,format,channels,samples) {
		var bpp = this.getBytesPerSample();
		var newSamples = Math.ceil(samples * (rate / this.samplingRate));
		var resample = samples != newSamples;
		if(!resample && this.sampleFormat == hxd_snd_SampleFormat.I16 && format == hxd_snd_SampleFormat.I16 && channels == 1 && this.channels == 2) {
			var r = inPos;
			var w = outPos;
			var _g = 0;
			var _g1 = samples;
			while(_g < _g1) {
				var i = _g++;
				var sl = input.getUInt16(r);
				r += 2;
				var sr = input.getUInt16(r);
				r += 2;
				var s;
				if((sl ^ sr) >= 32768) {
					if((sl & 32768) != 0) {
						sl |= -65536;
					}
					if((sr & 32768) != 0) {
						sr |= -65536;
					}
					s = sl + sr >> 1 & 65535;
				} else {
					s = sl + sr >> 1;
				}
				out.setUInt16(w,s);
				w += 2;
			}
			return;
		}
		var srcChannels = this.channels;
		var commonChannels = channels < srcChannels ? channels : srcChannels;
		var extraChannels = channels - commonChannels;
		var sval = 0.;
		var ival = 0;
		var _g = 0;
		var _g1 = newSamples;
		while(_g < _g1) {
			var i = _g++;
			var targetSample = i / (newSamples - 1) * (samples - 1);
			var isample = targetSample | 0;
			var offset = targetSample - isample;
			var srcPos = inPos + isample * bpp;
			if(isample == samples - 1) {
				resample = false;
			}
			var _g2 = 0;
			var _g3 = commonChannels;
			while(_g2 < _g3) {
				var k = _g2++;
				var sval1;
				var sval2 = 0.;
				switch(this.sampleFormat._hx_index) {
				case 0:
					sval1 = input.b[srcPos] / 255;
					if(resample) {
						sval2 = input.b[srcPos + bpp] / 255;
					}
					++srcPos;
					break;
				case 1:
					var v = input.getUInt16(srcPos);
					sval1 = ((v & 32768) == 0 ? v : v | -65536) / 32768;
					if(resample) {
						var v1 = input.getUInt16(srcPos + bpp);
						sval2 = ((v1 & 32768) == 0 ? v1 : v1 | -65536) / 32768;
					}
					srcPos += 2;
					break;
				case 2:
					sval1 = input.getFloat(srcPos);
					if(resample) {
						sval2 = input.getFloat(srcPos + bpp);
					}
					srcPos += 4;
					break;
				}
				sval = resample ? sval1 + offset * (sval2 - sval1) : sval1;
				switch(format._hx_index) {
				case 0:
					ival = (sval + 1) * 128 | 0;
					if(ival > 255) {
						ival = 255;
					}
					out.b[outPos++] = ival;
					break;
				case 1:
					ival = sval * 32768 | 0;
					if(ival > 32767) {
						ival = 32767;
					}
					ival &= 65535;
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
			var _g4 = 0;
			var _g5 = extraChannels;
			while(_g4 < _g5) {
				var i1 = _g4++;
				switch(format._hx_index) {
				case 0:
					out.b[outPos++] = ival;
					break;
				case 1:
					out.setUInt16(outPos,ival);
					outPos += 2;
					break;
				case 2:
					out.setFloat(outPos,sval);
					outPos += 4;
					break;
				}
			}
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		throw haxe_Exception.thrown("Not implemented");
	}
	,getBytesPerSample: function() {
		var tmp;
		switch(this.sampleFormat._hx_index) {
		case 0:
			tmp = 1;
			break;
		case 1:
			tmp = 2;
			break;
		case 2:
			tmp = 4;
			break;
		}
		return this.channels * tmp;
	}
	,load: function(onEnd) {
		onEnd();
	}
	,get_duration: function() {
		return this.samples / this.samplingRate;
	}
	,__class__: hxd_snd_Data
};
var hxd_snd_EffectDriver = function() {
};
$hxClasses["hxd.snd.EffectDriver"] = hxd_snd_EffectDriver;
hxd_snd_EffectDriver.__name__ = "hxd.snd.EffectDriver";
hxd_snd_EffectDriver.prototype = {
	acquire: function() {
	}
	,release: function() {
	}
	,update: function(e) {
	}
	,bind: function(e,source) {
	}
	,apply: function(e,source) {
	}
	,unbind: function(e,source) {
	}
	,__class__: hxd_snd_EffectDriver
};
var hxd_snd_DriverFeature = $hxEnums["hxd.snd.DriverFeature"] = { __ename__ : true, __constructs__ : ["MasterVolume"]
	,MasterVolume: {_hx_index:0,__enum__:"hxd.snd.DriverFeature",toString:$estr}
};
hxd_snd_DriverFeature.__empty_constructs__ = [hxd_snd_DriverFeature.MasterVolume];
var hxd_snd_Driver = function() { };
$hxClasses["hxd.snd.Driver"] = hxd_snd_Driver;
hxd_snd_Driver.__name__ = "hxd.snd.Driver";
hxd_snd_Driver.__isInterface__ = true;
hxd_snd_Driver.prototype = {
	__class__: hxd_snd_Driver
};
var hxd_snd_Effect = function(type) {
	this.refs = 0;
	this.priority = 0;
	this.retainTime = 0.0;
	this.lastStamp = 0.0;
	var managerDriver = hxd_snd_Manager.get().driver;
	if(managerDriver != null) {
		this.driver = managerDriver.getEffectDriver(type);
	}
};
$hxClasses["hxd.snd.Effect"] = hxd_snd_Effect;
hxd_snd_Effect.__name__ = "hxd.snd.Effect";
hxd_snd_Effect.prototype = {
	applyAudibleVolumeModifier: function(v) {
		return v;
	}
	,getVolumeModifier: function() {
		return 1;
	}
	,__class__: hxd_snd_Effect
};
var hxd_snd_Listener = function() {
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector(1,0,0);
	this.up = new h3d_Vector(0,0,1);
};
$hxClasses["hxd.snd.Listener"] = hxd_snd_Listener;
hxd_snd_Listener.__name__ = "hxd.snd.Listener";
hxd_snd_Listener.prototype = {
	__class__: hxd_snd_Listener
};
var hxd_snd_Source = function(driver) {
	this.start = 0;
	this.playing = false;
	this.volume = -1.0;
	this.id = hxd_snd_Source.ID++;
	this.handle = driver.createSource();
	this.buffers = [];
};
$hxClasses["hxd.snd.Source"] = hxd_snd_Source;
hxd_snd_Source.__name__ = "hxd.snd.Source";
hxd_snd_Source.prototype = {
	__class__: hxd_snd_Source
};
var hxd_snd_Buffer = function(driver) {
	this.handle = driver.createBuffer();
	this.refs = 0;
	this.lastStop = HxOverrides.now() / 1000;
};
$hxClasses["hxd.snd.Buffer"] = hxd_snd_Buffer;
hxd_snd_Buffer.__name__ = "hxd.snd.Buffer";
hxd_snd_Buffer.prototype = {
	dispose: function() {
		hxd_snd_Manager.get().driver.destroyBuffer(this.handle);
	}
	,__class__: hxd_snd_Buffer
};
var hxd_snd_Manager = function() {
	this.suspended = false;
	this.timeOffset = 0.;
	try {
		this.driver = new hxd_snd_webaudio_Driver();
	} catch( _g ) {
		if(typeof(haxe_Exception.caught(_g).unwrap()) == "string") {
			this.driver = null;
		} else {
			throw _g;
		}
	}
	this.masterVolume = 1.0;
	this.hasMasterVolume = this.driver == null ? true : this.driver.hasFeature(hxd_snd_DriverFeature.MasterVolume);
	this.masterSoundGroup = new hxd_snd_SoundGroup("master");
	this.masterChannelGroup = new hxd_snd_ChannelGroup("master");
	this.listener = new hxd_snd_Listener();
	this.soundBufferMap = new haxe_ds_StringMap();
	this.soundBufferKeys = [];
	this.freeStreamBuffers = [];
	this.effectGC = [];
	this.soundBufferCount = 0;
	if(this.driver != null) {
		this.sources = [];
		var _g = 0;
		var _g1 = hxd_snd_Manager.MAX_SOURCES;
		while(_g < _g1) {
			var i = _g++;
			this.sources.push(new hxd_snd_Source(this.driver));
		}
	}
	this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(24));
	this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * 2));
};
$hxClasses["hxd.snd.Manager"] = hxd_snd_Manager;
hxd_snd_Manager.__name__ = "hxd.snd.Manager";
hxd_snd_Manager.get = function() {
	if(hxd_snd_Manager.instance == null) {
		hxd_snd_Manager.instance = new hxd_snd_Manager();
		hxd_snd_Manager.instance.updateEvent = haxe_MainLoop.add(($_=hxd_snd_Manager.instance,$bind($_,$_.update)));
		hxd_snd_Manager.instance.updateEvent.isBlocking = false;
	}
	return hxd_snd_Manager.instance;
};
hxd_snd_Manager.regEffect = function(list,e) {
	var l = list;
	while(l != null) {
		if(l == e) {
			return list;
		}
		l = l.next;
	}
	e.next = list;
	return e;
};
hxd_snd_Manager.prototype = {
	getTmpBytes: function(size) {
		if(this.cachedBytes.length < size) {
			this.cachedBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.cachedBytes;
	}
	,getResampleBytes: function(size) {
		if(this.resampleBytes.length < size) {
			this.resampleBytes = new haxe_io_Bytes(new ArrayBuffer(size));
		}
		return this.resampleBytes;
	}
	,getAll: function(sound) {
		var ch = this.channels;
		var result = [];
		while(ch != null) {
			if(ch.sound == sound) {
				result.push(ch);
			}
			ch = ch.next;
		}
		return new hxd_impl_ArrayIterator_$hxd_$snd_$Channel(result);
	}
	,play: function(sound,channelGroup,soundGroup) {
		if(soundGroup == null) {
			soundGroup = this.masterSoundGroup;
		}
		if(channelGroup == null) {
			channelGroup = this.masterChannelGroup;
		}
		var sdat = sound.getData();
		if(sdat.samples == 0) {
			throw haxe_Exception.thrown(Std.string(sound) + " has no samples");
		}
		var c = new hxd_snd_Channel();
		c.sound = sound;
		c.duration = sdat.get_duration();
		c.manager = this;
		c.soundGroup = soundGroup;
		c.channelGroup = channelGroup;
		c.next = this.channels;
		c.isLoading = sdat.isLoading();
		c.isVirtual = this.driver == null;
		this.channels = c;
		return c;
	}
	,updateVirtualChannels: function(now) {
		var c = this.channels;
		while(c != null) {
			if(c.pause || !c.isVirtual || c.isLoading) {
				c = c.next;
				continue;
			}
			var _g = c;
			var a = now - c.lastStamp;
			_g.set_position(_g.position + (a < 0.0 ? 0.0 : a));
			c.lastStamp = now;
			var next = c.next;
			while(c.position >= c.duration) {
				var _g1 = c;
				_g1.set_position(_g1.position - c.duration);
				c.onEnd();
				if(next != null && next.manager == null) {
					next = null;
				}
				if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
				} else if(!c.loop) {
					this.releaseChannel(c);
					break;
				}
			}
			c = next;
		}
	}
	,update: function() {
		if(this.timeOffset != 0) {
			var c = this.channels;
			while(c != null) {
				c.lastStamp += this.timeOffset;
				if(c.currentFade != null) {
					c.currentFade.start += this.timeOffset;
				}
				c = c.next;
			}
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s = _g1[_g];
				++_g;
				var _g2 = 0;
				var _g3 = s.buffers;
				while(_g2 < _g3.length) {
					var b = _g3[_g2];
					++_g2;
					b.lastStop += this.timeOffset;
				}
			}
			this.timeOffset = 0;
		}
		this.now = HxOverrides.now() / 1000;
		if(this.driver == null) {
			this.updateVirtualChannels(this.now);
			return;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			if(c.positionChanged) {
				this.releaseSource(s);
				continue;
			}
			var lastBuffer = null;
			var count = this.driver.getProcessedBuffers(s.handle);
			var _g2 = 0;
			var _g3 = count;
			while(_g2 < _g3) {
				var i = _g2++;
				var b = this.unqueueBuffer(s);
				if(b == null) {
					continue;
				}
				lastBuffer = b;
				if(b.isEnd) {
					c.sound = b.sound;
					c.duration = b.sound.getData().get_duration();
					c.set_position(c.duration);
					c.positionChanged = false;
					c.onEnd();
					s.start = 0;
				}
			}
			if(s.buffers.length == 0) {
				if(!lastBuffer.isEnd) {
					c.set_position((lastBuffer.start + lastBuffer.samples) / lastBuffer.sampleRate);
					this.releaseSource(s);
				} else if(c.queue.length > 0) {
					c.sound = c.queue.shift();
					c.duration = c.sound.getData().get_duration();
					c.set_position(0);
					this.releaseSource(s);
				} else if(c.loop) {
					c.set_position(0);
					this.releaseSource(s);
				} else {
					this.releaseChannel(c);
				}
				continue;
			}
			c.sound = s.buffers[0].sound;
			c.duration = c.sound.getData().get_duration();
			var playedSamples = this.driver.getPlayedSampleCount(s.handle);
			if(playedSamples < 0) {
				playedSamples = 0;
			}
			c.set_position(playedSamples / s.buffers[0].sampleRate);
			c.positionChanged = false;
			if(s.buffers.length < hxd_snd_Manager.BUFFER_QUEUE_LENGTH) {
				var b1 = s.buffers[s.buffers.length - 1];
				if(!b1.isEnd) {
					this.queueBuffer(s,b1.sound,b1.start + b1.samples);
				} else if(c.queue.length > 0) {
					var snd = c.queue[0];
					if(this.queueBuffer(s,snd,0)) {
						c.queue.shift();
					}
				} else if(c.loop) {
					this.queueBuffer(s,b1.sound,0);
				}
			}
		}
		var c = this.channels;
		while(c != null) {
			c.calcAudibleVolume(this.now);
			if(c.isLoading && !c.sound.getData().isLoading()) {
				c.isLoading = false;
			}
			c.isVirtual = this.suspended || c.pause || c.mute || c.channelGroup.mute || c.allowVirtual && c.audibleVolume < hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD || c.isLoading;
			c = c.next;
		}
		var list = this.channels;
		var cmp = $bind(this,this.sortChannel);
		var tmp;
		if(list == null) {
			tmp = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			tmp = list;
		}
		this.channels = tmp;
		var audibleCount = 0;
		var c = this.channels;
		while(c != null && !c.isVirtual) {
			if(++audibleCount > this.sources.length) {
				c.isVirtual = true;
			} else if(c.soundGroup.maxAudible >= 0) {
				if(c.soundGroup.lastUpdate != this.now) {
					c.soundGroup.lastUpdate = this.now;
					c.soundGroup.numAudible = 0;
				}
				if(++c.soundGroup.numAudible > c.soundGroup.maxAudible) {
					c.isVirtual = true;
					--audibleCount;
				}
			}
			c = c.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.channel == null || !s.channel.isVirtual) {
				continue;
			}
			this.releaseSource(s);
		}
		var c = this.channels;
		while(c != null) {
			if(c.source != null || c.isVirtual) {
				c = c.next;
				continue;
			}
			var s = null;
			var _g = 0;
			var _g1 = this.sources;
			while(_g < _g1.length) {
				var s2 = _g1[_g];
				++_g;
				if(s2.channel == null) {
					s = s2;
					break;
				}
			}
			if(s == null) {
				throw haxe_Exception.thrown("could not get a source");
			}
			s.channel = c;
			c.source = s;
			this.checkTargetFormat(c.sound.getData(),c.soundGroup.mono);
			s.start = Math.floor(c.position * this.targetRate);
			if(s.start < 0) {
				s.start = 0;
			}
			this.queueBuffer(s,c.sound,s.start);
			c.positionChanged = false;
			c = c.next;
		}
		var usedEffects = null;
		var volume = this.hasMasterVolume ? 1. : this.masterVolume;
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var v = c.currentVolume * volume;
			if(s.volume != v) {
				if(v < 0) {
					v = 0;
				}
				s.volume = v;
				this.driver.setSourceVolume(s.handle,v);
			}
			if(!s.playing) {
				this.driver.playSource(s.handle);
				s.playing = true;
			}
			var i = c.bindedEffects.length;
			while(--i >= 0) {
				var e = c.bindedEffects[i];
				if(c.effects.indexOf(e) < 0 && c.channelGroup.effects.indexOf(e) < 0) {
					this.unbindEffect(c,s,e);
				}
			}
			var _g2 = 0;
			var _g3 = c.channelGroup.effects;
			while(_g2 < _g3.length) {
				var e1 = _g3[_g2];
				++_g2;
				if(c.bindedEffects.indexOf(e1) < 0) {
					this.bindEffect(c,s,e1);
				}
			}
			var _g4 = 0;
			var _g5 = c.effects;
			while(_g4 < _g5.length) {
				var e2 = _g5[_g4];
				++_g4;
				if(c.bindedEffects.indexOf(e2) < 0) {
					this.bindEffect(c,s,e2);
				}
			}
			var _g6 = 0;
			var _g7 = c.bindedEffects;
			while(_g6 < _g7.length) {
				var e3 = _g7[_g6];
				++_g6;
				usedEffects = hxd_snd_Manager.regEffect(usedEffects,e3);
			}
		}
		var list = usedEffects;
		var cmp = $bind(this,this.sortEffect);
		if(list == null) {
			usedEffects = null;
		} else {
			var insize = 1;
			var nmerges;
			var psize = 0;
			var qsize = 0;
			var p;
			var q;
			var e;
			var tail;
			while(true) {
				p = list;
				list = null;
				tail = null;
				nmerges = 0;
				while(p != null) {
					++nmerges;
					q = p;
					psize = 0;
					var _g = 0;
					var _g1 = insize;
					while(_g < _g1) {
						var i = _g++;
						++psize;
						q = q.next;
						if(q == null) {
							break;
						}
					}
					qsize = insize;
					while(psize > 0 || qsize > 0 && q != null) {
						if(psize == 0) {
							e = q;
							q = q.next;
							--qsize;
						} else if(qsize == 0 || q == null || cmp(p,q) <= 0) {
							e = p;
							p = p.next;
							--psize;
						} else {
							e = q;
							q = q.next;
							--qsize;
						}
						if(tail != null) {
							tail.next = e;
						} else {
							list = e;
						}
						tail = e;
					}
					p = q;
				}
				tail.next = null;
				if(nmerges <= 1) {
					break;
				}
				insize *= 2;
			}
			usedEffects = list;
		}
		var e = usedEffects;
		while(e != null) {
			e.driver.update(e);
			e = e.next;
		}
		var _g = 0;
		var _g1 = this.sources;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var c = s.channel;
			if(c == null) {
				continue;
			}
			var _g2 = 0;
			var _g3 = c.bindedEffects;
			while(_g2 < _g3.length) {
				var e = _g3[_g2];
				++_g2;
				e.driver.apply(e,s.handle);
			}
		}
		var _g = 0;
		var _g1 = this.effectGC;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			if(this.now - e.lastStamp > e.retainTime) {
				e.driver.release();
				HxOverrides.remove(this.effectGC,e);
				break;
			}
		}
		this.updateVirtualChannels(this.now);
		var _this = this.listener.direction;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		var _this = this.listener.up;
		var k = _this.x * _this.x + _this.y * _this.y + _this.z * _this.z;
		if(k < 1e-10) {
			k = 0;
		} else {
			k = 1. / Math.sqrt(k);
		}
		_this.x *= k;
		_this.y *= k;
		_this.z *= k;
		if(this.hasMasterVolume) {
			this.driver.setMasterVolume(this.masterVolume);
		}
		this.driver.setListenerParams(this.listener.position,this.listener.direction,this.listener.up,this.listener.velocity);
		this.driver.update();
		if(this.soundBufferCount >= hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE) {
			var now = HxOverrides.now() / 1000;
			var i = 0;
			while(i < this.soundBufferKeys.length) {
				var k = this.soundBufferKeys[i];
				var b = this.soundBufferMap.h[k];
				++i;
				if(b.refs > 0 || b.lastStop + 60.0 > now) {
					continue;
				}
				var _this = this.soundBufferMap;
				if(Object.prototype.hasOwnProperty.call(_this.h,k)) {
					delete(_this.h[k]);
				}
				HxOverrides.remove(this.soundBufferKeys,k);
				--i;
				b.dispose();
				--this.soundBufferCount;
			}
		}
	}
	,progressiveDecodeBuffer: function(s,snd,start) {
		var data = snd.getData();
		var samples = Math.ceil(hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT / hxd_snd_Manager.BUFFER_STREAM_SPLIT);
		if(s.streamStart != start || s.streamSound != snd) {
			s.streamSound = snd;
			s.streamStart = start;
			s.streamPos = start;
		}
		var end = start + hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(s.streamPos == end) {
			return true;
		}
		var bpp = data.getBytesPerSample();
		var reqSize = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT * bpp;
		if(s.streamBuffer == null || s.streamBuffer.length < reqSize) {
			s.streamBuffer = new haxe_io_Bytes(new ArrayBuffer(reqSize));
			s.streamPos = start;
		}
		var remain = end - s.streamPos;
		if(remain > samples) {
			remain = samples;
		}
		data.decode(s.streamBuffer,(s.streamPos - start) * bpp,s.streamPos,remain);
		s.streamPos += remain;
		return s.streamPos == end;
	}
	,queueBuffer: function(s,snd,start) {
		var data = snd.getData();
		var sgroup = s.channel.soundGroup;
		var b = null;
		if(data.get_duration() <= hxd_snd_Manager.STREAM_DURATION) {
			b = this.getSoundBuffer(snd,sgroup);
			this.driver.queueBuffer(s.handle,b.handle,start,true);
		} else {
			if(s.buffers.length > 0 && hxd_snd_Manager.BUFFER_STREAM_SPLIT > 1 && !this.progressiveDecodeBuffer(s,snd,start)) {
				return false;
			}
			b = this.getStreamBuffer(s,snd,sgroup,start);
			this.driver.queueBuffer(s.handle,b.handle,0,b.isEnd);
		}
		s.buffers.push(b);
		return true;
	}
	,unqueueBuffer: function(s) {
		var b = s.buffers.shift();
		if(b == null) {
			return null;
		}
		this.driver.unqueueBuffer(s.handle,b.handle);
		if(b.isStream) {
			this.freeStreamBuffers.unshift(b);
		} else if(--b.refs == 0) {
			b.lastStop = HxOverrides.now() / 1000;
		}
		return b;
	}
	,bindEffect: function(c,s,e) {
		if(e.refs == 0 && !HxOverrides.remove(this.effectGC,e)) {
			e.driver.acquire();
		}
		++e.refs;
		e.driver.bind(e,s.handle);
		c.bindedEffects.push(e);
	}
	,unbindEffect: function(c,s,e) {
		e.driver.unbind(e,s.handle);
		HxOverrides.remove(c.bindedEffects,e);
		if(--e.refs == 0) {
			e.lastStamp = this.now;
			this.effectGC.push(e);
		}
	}
	,releaseSource: function(s) {
		if(s.channel != null) {
			var _g = 0;
			var _g1 = s.channel.bindedEffects.slice();
			while(_g < _g1.length) {
				var e = _g1[_g];
				++_g;
				this.unbindEffect(s.channel,s,e);
			}
			s.channel.bindedEffects = [];
			s.channel.source = null;
			s.channel = null;
		}
		if(s.playing) {
			s.playing = false;
			this.driver.stopSource(s.handle);
			s.volume = -1.0;
		}
		while(s.buffers.length > 0) this.unqueueBuffer(s);
	}
	,checkTargetFormat: function(dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		this.targetRate = dat.samplingRate;
		this.targetChannels = forceMono || dat.channels == 1 ? 1 : 2;
		var tmp;
		switch(dat.sampleFormat._hx_index) {
		case 0:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 1:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		case 2:
			tmp = hxd_snd_SampleFormat.F32;
			break;
		}
		this.targetFormat = tmp;
		if(this.targetChannels == dat.channels && this.targetFormat == dat.sampleFormat) {
			return this.targetRate == dat.samplingRate;
		} else {
			return false;
		}
	}
	,getSoundBuffer: function(snd,grp) {
		var _gthis = this;
		var data = snd.getData();
		var mono = grp.mono;
		var key = snd.entry.get_path();
		if(mono && data.channels != 1) {
			key += "mono";
		}
		var b = this.soundBufferMap.h[key];
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = false;
			b.isEnd = true;
			b.sound = snd;
			data.load(function() {
				_gthis.fillSoundBuffer(b,data,mono);
			});
			this.soundBufferMap.h[key] = b;
			this.soundBufferKeys.push(key);
			++this.soundBufferCount;
		}
		++b.refs;
		return b;
	}
	,fillSoundBuffer: function(buf,dat,forceMono) {
		if(forceMono == null) {
			forceMono = false;
		}
		if(!this.checkTargetFormat(dat,forceMono)) {
			dat = dat.resample(this.targetRate,this.targetFormat,this.targetChannels);
		}
		var length = dat.samples * dat.getBytesPerSample();
		var bytes = this.getTmpBytes(length);
		dat.decode(bytes,0,0,dat.samples);
		this.driver.setBufferData(buf.handle,bytes,length,this.targetFormat,this.targetChannels,this.targetRate);
		buf.sampleRate = this.targetRate;
		buf.samples = dat.samples;
	}
	,getStreamBuffer: function(src,snd,grp,start) {
		var data = snd.getData();
		var b = this.freeStreamBuffers.shift();
		if(b == null) {
			b = new hxd_snd_Buffer(this.driver);
			b.isStream = true;
		}
		var samples = hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT;
		if(start + samples >= data.samples) {
			samples = data.samples - start;
			b.isEnd = true;
		} else {
			b.isEnd = false;
		}
		b.sound = snd;
		b.samples = samples;
		b.start = start;
		var size = samples * data.getBytesPerSample();
		var bytes;
		if(src.streamSound == snd && src.streamStart == start) {
			while(!this.progressiveDecodeBuffer(src,snd,start)) {
			}
			bytes = src.streamBuffer;
		} else {
			bytes = this.getTmpBytes(size);
			data.decode(bytes,0,start,samples);
		}
		if(!this.checkTargetFormat(data,grp.mono)) {
			var size1 = Math.ceil(samples * (this.targetRate / data.samplingRate)) * this.targetChannels;
			var size2;
			switch(this.targetFormat._hx_index) {
			case 0:
				size2 = 1;
				break;
			case 1:
				size2 = 2;
				break;
			case 2:
				size2 = 4;
				break;
			}
			size = size1 * size2;
			var resampleBytes = this.getResampleBytes(size);
			data.resampleBuffer(resampleBytes,0,bytes,0,this.targetRate,this.targetFormat,this.targetChannels,samples);
			bytes = resampleBytes;
		}
		this.driver.setBufferData(b.handle,bytes,size,this.targetFormat,this.targetChannels,this.targetRate);
		b.sampleRate = this.targetRate;
		return b;
	}
	,sortChannel: function(a,b) {
		if(a.isVirtual != b.isVirtual) {
			if(a.isVirtual) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.channelGroup.priority != b.channelGroup.priority) {
			if(a.channelGroup.priority < b.channelGroup.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.priority != b.priority) {
			if(a.priority < b.priority) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.audibleVolume != b.audibleVolume) {
			if(a.audibleVolume < b.audibleVolume) {
				return 1;
			} else {
				return -1;
			}
		}
		if(a.id < b.id) {
			return 1;
		} else {
			return -1;
		}
	}
	,sortEffect: function(a,b) {
		return b.priority - a.priority;
	}
	,releaseChannel: function(c) {
		if(c.manager == null) {
			return;
		}
		if(this.channels == c) {
			this.channels = c.next;
		} else {
			var prev = this.channels;
			while(prev.next != c) prev = prev.next;
			prev.next = c.next;
		}
		var _g = 0;
		var _g1 = c.effects;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			c.removeEffect(e);
		}
		if(c.source != null) {
			this.releaseSource(c.source);
		}
		c.next = null;
		c.manager = null;
		c.effects = null;
		c.bindedEffects = null;
		c.currentFade = null;
		var snd = c.sound;
		if(snd != null && snd.channel == c) {
			snd.channel = null;
		}
	}
	,__class__: hxd_snd_Manager
};
var hxd_snd_Mp3Data = function(bytes) {
	var mp = new format_mp3_Reader(new haxe_io_BytesInput(bytes)).read();
	this.samples = mp.sampleCount;
	var frame = mp.frames[0].data;
	var lame = -1;
	var _g = 0;
	var _g1 = frame.length - 24;
	while(_g < _g1) {
		var i = _g++;
		if(frame.b[i] == 76 && frame.b[i + 1] == 65 && frame.b[i + 2] == 77 && frame.b[i + 3] == 69) {
			lame = i;
			break;
		}
	}
	if(lame >= 0) {
		var startEnd = frame.b[lame + 21] << 16 | frame.b[lame + 22] << 8 | frame.b[lame + 23];
		var start = startEnd >> 12;
		var end = startEnd & 4095;
		this.samples -= start + end + 1152;
	}
	var header = mp.frames[0].header;
	this.sampleFormat = hxd_snd_SampleFormat.F32;
	this.samplingRate = format_mp3_MPEG.srEnum2Num(header.samplingRate);
	this.channels = header.channelMode == format_mp3_ChannelMode.Mono ? 1 : 2;
	var ctx = hxd_snd_webaudio_Context.get();
	if(ctx == null) {
		return;
	}
	ctx.decodeAudioData(bytes.b.bufferValue,$bind(this,this.processBuffer));
	var decodedRate = ctx.sampleRate | 0;
	this.samples = Math.ceil(this.samples * decodedRate / this.samplingRate);
	this.samplingRate = decodedRate;
};
$hxClasses["hxd.snd.Mp3Data"] = hxd_snd_Mp3Data;
hxd_snd_Mp3Data.__name__ = "hxd.snd.Mp3Data";
hxd_snd_Mp3Data.__super__ = hxd_snd_Data;
hxd_snd_Mp3Data.prototype = $extend(hxd_snd_Data.prototype,{
	isLoading: function() {
		return this.buffer == null;
	}
	,load: function(onEnd) {
		if(this.buffer != null) {
			onEnd();
		} else {
			this.onEnd = onEnd;
		}
	}
	,processBuffer: function(buf) {
		var left = buf.getChannelData(0);
		this.samples = buf.length;
		if(this.channels == 1) {
			this.buffer = haxe_io_Bytes.ofData(left.buffer);
			return;
		}
		var right = buf.numberOfChannels < 2 ? left : buf.getChannelData(1);
		var join = new Float32Array(left.length * 2);
		var w = 0;
		var _g = 0;
		var _g1 = buf.length;
		while(_g < _g1) {
			var i = _g++;
			join[w++] = left[i];
			join[w++] = right[i];
		}
		this.buffer = haxe_io_Bytes.ofData(join.buffer);
		if(this.onEnd != null) {
			this.onEnd();
			this.onEnd = null;
		}
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		if(this.buffer == null) {
			out.fill(outPos,sampleCount * 4 * this.channels,0);
		} else {
			out.blit(outPos,this.buffer,sampleStart * 4 * this.channels,sampleCount * 4 * this.channels);
		}
	}
	,__class__: hxd_snd_Mp3Data
});
var hxd_snd_WavData = function(bytes) {
	if(bytes != null) {
		this.init(new format_wav_Reader(new haxe_io_BytesInput(bytes)).read());
	}
};
$hxClasses["hxd.snd.WavData"] = hxd_snd_WavData;
hxd_snd_WavData.__name__ = "hxd.snd.WavData";
hxd_snd_WavData.__super__ = hxd_snd_Data;
hxd_snd_WavData.prototype = $extend(hxd_snd_Data.prototype,{
	init: function(d) {
		var h = d.header;
		this.samplingRate = h.samplingRate;
		this.channels = h.channels;
		var tmp;
		switch(h.bitsPerSample) {
		case 8:
			tmp = hxd_snd_SampleFormat.UI8;
			break;
		case 16:
			tmp = hxd_snd_SampleFormat.I16;
			break;
		default:
			throw haxe_Exception.thrown("Unsupported WAV " + h.bitsPerSample + " bits");
		}
		this.sampleFormat = tmp;
		this.rawData = d.data;
		this.samples = this.rawData.length / this.getBytesPerSample() | 0;
	}
	,decodeBuffer: function(out,outPos,sampleStart,sampleCount) {
		var bpp = this.getBytesPerSample();
		out.blit(outPos,this.rawData,sampleStart * bpp,sampleCount * bpp);
	}
	,__class__: hxd_snd_WavData
});
var hxd_snd_effect_LowPass = function() {
	hxd_snd_Effect.call(this,"lowpass");
	this.priority = 100;
	this.gainHF = 1.0;
};
$hxClasses["hxd.snd.effect.LowPass"] = hxd_snd_effect_LowPass;
hxd_snd_effect_LowPass.__name__ = "hxd.snd.effect.LowPass";
hxd_snd_effect_LowPass.__super__ = hxd_snd_Effect;
hxd_snd_effect_LowPass.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_LowPass
});
var hxd_snd_effect_Pitch = function(value) {
	if(value == null) {
		value = 1.0;
	}
	hxd_snd_Effect.call(this,"pitch");
	this.value = value;
};
$hxClasses["hxd.snd.effect.Pitch"] = hxd_snd_effect_Pitch;
hxd_snd_effect_Pitch.__name__ = "hxd.snd.effect.Pitch";
hxd_snd_effect_Pitch.__super__ = hxd_snd_Effect;
hxd_snd_effect_Pitch.prototype = $extend(hxd_snd_Effect.prototype,{
	__class__: hxd_snd_effect_Pitch
});
var hxd_snd_effect_Spatialization = function() {
	hxd_snd_Effect.call(this,"spatialization");
	this.position = new h3d_Vector();
	this.velocity = new h3d_Vector();
	this.direction = new h3d_Vector();
	this.referenceDistance = 1.0;
	this.rollOffFactor = 1.0;
};
$hxClasses["hxd.snd.effect.Spatialization"] = hxd_snd_effect_Spatialization;
hxd_snd_effect_Spatialization.__name__ = "hxd.snd.effect.Spatialization";
hxd_snd_effect_Spatialization.__super__ = hxd_snd_Effect;
hxd_snd_effect_Spatialization.prototype = $extend(hxd_snd_Effect.prototype,{
	getVolumeModifier: function() {
		if(this.fadeDistance == null) {
			return 1.;
		}
		var _this = hxd_snd_Manager.get().listener.position;
		var v = this.position;
		var dx = v.x - _this.x;
		var dy = v.y - _this.y;
		var dz = v.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		if(this.maxDistance != null) {
			dist -= this.maxDistance;
		} else {
			dist -= this.referenceDistance;
		}
		var volume = 1 - dist / this.fadeDistance;
		if(volume > 1) {
			volume = 1;
		}
		if(volume < 0) {
			volume = 0;
		}
		return volume;
	}
	,applyAudibleVolumeModifier: function(v) {
		var _this = hxd_snd_Manager.get().listener.position;
		var v1 = this.position;
		var dx = v1.x - _this.x;
		var dy = v1.y - _this.y;
		var dz = v1.z - _this.z;
		var dist = Math.sqrt(dx * dx + dy * dy + dz * dz);
		var b = this.referenceDistance;
		if(dist < b) {
			dist = b;
		}
		if(this.maxDistance != null) {
			var b = this.maxDistance;
			if(dist > b) {
				dist = b;
			}
		}
		var volume = this.referenceDistance / (this.referenceDistance + this.rollOffFactor * (dist - this.referenceDistance));
		return v * volume;
	}
	,__class__: hxd_snd_effect_Spatialization
});
var hxd_snd_webaudio_BufferHandle = function() {
};
$hxClasses["hxd.snd.webaudio.BufferHandle"] = hxd_snd_webaudio_BufferHandle;
hxd_snd_webaudio_BufferHandle.__name__ = "hxd.snd.webaudio.BufferHandle";
hxd_snd_webaudio_BufferHandle.prototype = {
	__class__: hxd_snd_webaudio_BufferHandle
};
var hxd_snd_webaudio_SourceHandle = function() {
	this.buffers = [];
	this.sampleOffset = 0;
	this.pitch = 1;
	this.firstPlay = true;
};
$hxClasses["hxd.snd.webaudio.SourceHandle"] = hxd_snd_webaudio_SourceHandle;
hxd_snd_webaudio_SourceHandle.__name__ = "hxd.snd.webaudio.SourceHandle";
hxd_snd_webaudio_SourceHandle.prototype = {
	updateDestination: function() {
		this.destination = this.gain;
		if(this.lowPass != null) {
			this.lowPass.connect(this.destination);
			this.destination = this.lowPass;
		}
		if(this.panner != null) {
			this.panner.connect(this.destination);
			this.destination = this.panner;
		}
		this.gain.connect(hxd_snd_webaudio_Context.destination);
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.node != null) {
				b.restart(this);
			}
		}
	}
	,applyPitch: function() {
		var t = 0.;
		var _g = 0;
		var _g1 = this.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			t = b.readjust(t,this);
		}
	}
	,__class__: hxd_snd_webaudio_SourceHandle
};
var hxd_snd_webaudio_BufferPlayback = function() {
};
$hxClasses["hxd.snd.webaudio.BufferPlayback"] = hxd_snd_webaudio_BufferPlayback;
hxd_snd_webaudio_BufferPlayback.__name__ = "hxd.snd.webaudio.BufferPlayback";
hxd_snd_webaudio_BufferPlayback.prototype = {
	get_currentSample: function() {
		if(this.consumed) {
			return this.buffer.samples;
		}
		if(this.node == null || !this.dirty || this.node.context.currentTime < this.lastTime) {
			return 0;
		}
		this.lastSamples += Math.floor((this.node.context.currentTime - this.lastTime) * this.buffer.inst.sampleRate * this.node.playbackRate.value);
		this.lastTime = this.node.context.currentTime;
		return this.lastSamples;
	}
	,set: function(buf,grainOffset) {
		this.buffer = buf;
		this.offset = isNaN(grainOffset) ? 0 : grainOffset;
		this.dirty = false;
		this.consumed = false;
		this.starts = 0;
		this.ends = 0;
	}
	,start: function(ctx,source,time) {
		this.dirty = true;
		this.consumed = false;
		if(this.node != null) {
			this.stop();
		}
		if(source.firstPlay && this.buffer.samples > 10) {
			source.firstPlay = false;
			var _g = [];
			var _g1 = 0;
			var _g2 = this.buffer.inst.numberOfChannels;
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(this.buffer.inst.getChannelData(i));
			}
			var channels = _g;
			var j = 0;
			var fade = 0.;
			while(j < 10) {
				var i = 0;
				while(i < channels.length) {
					channels[i][j] *= fade;
					++i;
				}
				++j;
				fade += 0.1;
				if(fade > 1) {
					fade = 1;
				}
			}
		}
		this.node = ctx.createBufferSource();
		this.node.buffer = this.buffer.inst;
		this.node.addEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.connect(source.destination);
		this.node.playbackRate.value = source.pitch;
		this.node.start(time,this.offset);
		this.lastSamples = 0;
		this.lastTime = time;
		this.starts = time;
		return this.ends = time + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,readjust: function(time,source) {
		if(this.consumed || this.node == null) {
			return this.ends;
		}
		var ctx = source.driver.ctx;
		var shiftTime = ctx.currentTime;
		this.node.playbackRate.setValueAtTime(source.pitch,shiftTime);
		var elapsed = shiftTime - this.starts;
		if(elapsed < 0) {
			return this.start(ctx,source,time == 0 ? shiftTime : time);
		}
		this.starts = shiftTime - elapsed / source.pitch;
		return this.ends = this.starts + (this.buffer.inst.duration - this.offset) / source.pitch;
	}
	,restart: function(source) {
		if(this.consumed || this.node == null) {
			return;
		}
		var ctx = hxd_snd_webaudio_Context.get();
		if(ctx.currentTime > this.starts) {
			this.offset += (ctx.currentTime - this.starts) * source.pitch;
			this.start(ctx,source,ctx.currentTime);
		} else {
			this.start(ctx,source,this.starts);
		}
	}
	,stop: function(immediate) {
		if(immediate == null) {
			immediate = true;
		}
		if(this.node != null) {
			this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
			if(immediate) {
				this.node.disconnect();
			} else {
				this.node.stop();
			}
			this.node = null;
		}
	}
	,onBufferConsumed: function(e) {
		this.node.removeEventListener("ended",$bind(this,this.onBufferConsumed));
		this.node.disconnect();
		this.node = null;
		this.consumed = true;
	}
	,clear: function() {
		this.buffer = null;
		this.node = null;
	}
	,__class__: hxd_snd_webaudio_BufferPlayback
};
var hxd_snd_webaudio_Context = function() { };
$hxClasses["hxd.snd.webaudio.Context"] = hxd_snd_webaudio_Context;
hxd_snd_webaudio_Context.__name__ = "hxd.snd.webaudio.Context";
hxd_snd_webaudio_Context.get = function() {
	if(hxd_snd_webaudio_Context.ctx == null) {
		try {
			hxd_snd_webaudio_Context.ctx = new AudioContext();
		} catch( _g ) {
			try {
				hxd_snd_webaudio_Context.ctx = new window.webkitAudioContext();
			} catch( _g1 ) {
				hxd_snd_webaudio_Context.ctx = null;
			}
		}
		if(hxd_snd_webaudio_Context.ctx == null) {
			throw haxe_Exception.thrown("WebAudio API not available in this browser!");
		}
		if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
			hxd_snd_webaudio_Context.waitForPageInput();
		}
		hxd_snd_webaudio_Context.ctx.addEventListener("statechange",function(_) {
			if(hxd_snd_webaudio_Context.ctx.state == "suspended") {
				hxd_snd_webaudio_Context.waitForPageInput();
			}
		});
		hxd_snd_webaudio_Context.bufferPool = [];
		hxd_snd_webaudio_Context.gainPool = [];
		hxd_snd_webaudio_Context.masterGain = hxd_snd_webaudio_Context.ctx.createGain();
		hxd_snd_webaudio_Context.masterGain.connect(hxd_snd_webaudio_Context.ctx.destination);
		hxd_snd_webaudio_Context.destination = hxd_snd_webaudio_Context.masterGain;
	}
	return hxd_snd_webaudio_Context.ctx;
};
hxd_snd_webaudio_Context.waitForPageInput = function() {
	if(!hxd_snd_webaudio_Context.suspended) {
		window.document.addEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.addEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = true;
	}
};
hxd_snd_webaudio_Context.resumeContext = function(_) {
	if(hxd_snd_webaudio_Context.suspended) {
		if(hxd_snd_webaudio_Context.ctx != null) {
			hxd_snd_webaudio_Context.ctx.resume();
		}
		window.document.removeEventListener("click",hxd_snd_webaudio_Context.resumeContext);
		window.document.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("keydown",hxd_snd_webaudio_Context.resumeContext);
		window.document.body.removeEventListener("touchend",hxd_snd_webaudio_Context.resumeContext);
		hxd_snd_webaudio_Context.suspended = false;
	}
};
hxd_snd_webaudio_Context.getBuffer = function(channels,sampleCount,rate) {
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == channels && pool.samples == sampleCount && pool.rate == rate) {
			if(pool.pool.length != 0) {
				return pool.pool.pop();
			} else {
				return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
			}
		}
	}
	var pool = new hxd_snd_webaudio__$Context_BufferPool(channels,sampleCount,rate);
	hxd_snd_webaudio_Context.bufferPool.push(pool);
	return hxd_snd_webaudio_Context.ctx.createBuffer(channels,sampleCount,rate);
};
hxd_snd_webaudio_Context.putBuffer = function(buf) {
	var rate = buf.sampleRate | 0;
	var _g = 0;
	var _g1 = hxd_snd_webaudio_Context.bufferPool;
	while(_g < _g1.length) {
		var pool = _g1[_g];
		++_g;
		if(pool.channels == buf.numberOfChannels && pool.samples == buf.length && pool.rate == rate) {
			pool.pool.push(buf);
			break;
		}
	}
};
var hxd_snd_webaudio__$Context_BufferPool = function(channels,samples,rate) {
	this.pool = [];
	this.channels = channels;
	this.samples = samples;
	this.rate = rate;
};
$hxClasses["hxd.snd.webaudio._Context.BufferPool"] = hxd_snd_webaudio__$Context_BufferPool;
hxd_snd_webaudio__$Context_BufferPool.__name__ = "hxd.snd.webaudio._Context.BufferPool";
hxd_snd_webaudio__$Context_BufferPool.prototype = {
	__class__: hxd_snd_webaudio__$Context_BufferPool
};
var hxd_snd_webaudio_Driver = function() {
	this.playbackPool = [];
	this.ctx = hxd_snd_webaudio_Context.get();
};
$hxClasses["hxd.snd.webaudio.Driver"] = hxd_snd_webaudio_Driver;
hxd_snd_webaudio_Driver.__name__ = "hxd.snd.webaudio.Driver";
hxd_snd_webaudio_Driver.__interfaces__ = [hxd_snd_Driver];
hxd_snd_webaudio_Driver.prototype = {
	hasFeature: function(d) {
		return true;
	}
	,setMasterVolume: function(value) {
		hxd_snd_webaudio_Context.masterGain.gain.value = value;
	}
	,setListenerParams: function(position,direction,up,velocity) {
		this.ctx.listener.setPosition(-position.x,position.y,position.z);
		this.ctx.listener.setOrientation(-direction.x,direction.y,direction.z,-up.x,up.y,up.z);
	}
	,createSource: function() {
		var s = new hxd_snd_webaudio_SourceHandle();
		s.driver = this;
		s.gain = hxd_snd_webaudio_Context.gainPool.length != 0 ? hxd_snd_webaudio_Context.gainPool.pop() : hxd_snd_webaudio_Context.ctx.createGain();
		s.updateDestination();
		return s;
	}
	,playSource: function(source) {
		if(!source.playing) {
			source.playing = true;
			if(source.buffers.length != 0) {
				var time = this.ctx.currentTime;
				var _g = 0;
				var _g1 = source.buffers;
				while(_g < _g1.length) {
					var b = _g1[_g];
					++_g;
					if(b.consumed) {
						continue;
					}
					time = b.start(this.ctx,source,time);
				}
			}
		}
	}
	,stopSource: function(source) {
		source.playing = false;
		source.sampleOffset = 0;
	}
	,setSourceVolume: function(source,value) {
		source.gain.gain.value = value;
	}
	,createBuffer: function() {
		var b = new hxd_snd_webaudio_BufferHandle();
		b.samples = 0;
		return b;
	}
	,setBufferData: function(buffer,data,size,format,channelCount,samplingRate) {
		var sampleCount;
		switch(format._hx_index) {
		case 0:
			sampleCount = 1;
			break;
		case 1:
			sampleCount = 2;
			break;
		case 2:
			sampleCount = 4;
			break;
		}
		var sampleCount1 = size / sampleCount / channelCount | 0;
		buffer.samples = sampleCount1;
		if(sampleCount1 == 0) {
			return;
		}
		if(buffer.inst == null) {
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		} else if(buffer.inst.sampleRate != samplingRate || buffer.inst.numberOfChannels != channelCount || buffer.inst.length != sampleCount1) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
			buffer.inst = hxd_snd_webaudio_Context.getBuffer(channelCount,sampleCount1,samplingRate);
		}
		switch(format._hx_index) {
		case 0:
			var ui8 = new Uint8Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = ui8[i] / 255;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = ui8[r] / 255;
					right[i] = ui8[r + 1] / 255;
					r += channelCount;
				}
			}
			break;
		case 1:
			var i16 = new Int16Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = i16[i] / 32768;
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = i16[r] / 32768;
					right[i] = i16[r + 1] / 32768;
					r += channelCount;
				}
			}
			break;
		case 2:
			var f32 = new Float32Array(data.b.bufferValue);
			if(channelCount == 1) {
				var chn = buffer.inst.getChannelData(0);
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					chn[i] = f32[i];
				}
			} else {
				var left = buffer.inst.getChannelData(0);
				var right = buffer.inst.getChannelData(1);
				var r = 0;
				var _g = 0;
				var _g1 = sampleCount1;
				while(_g < _g1) {
					var i = _g++;
					left[i] = f32[r];
					right[i] = f32[r + 1];
					r += channelCount;
				}
			}
			break;
		}
	}
	,destroyBuffer: function(buffer) {
		if(buffer.inst != null) {
			hxd_snd_webaudio_Context.putBuffer(buffer.inst);
		}
		buffer.inst = null;
	}
	,queueBuffer: function(source,buffer,sampleStart,endOfStream) {
		var buf = this.playbackPool.length != 0 ? this.playbackPool.pop() : new hxd_snd_webaudio_BufferPlayback();
		if(buffer.inst == null) {
			return;
		}
		buf.set(buffer,sampleStart / buffer.inst.length * buffer.inst.duration);
		buffer.isEnd = endOfStream;
		source.buffers.push(buf);
		if(source.playing) {
			if(source.buffers.length != 1) {
				var t = source.buffers[source.buffers.length - 2].ends;
				var tmp = this.ctx;
				var tmp1;
				if(isFinite(t)) {
					var b = this.ctx.currentTime;
					tmp1 = t < b ? b : t;
				} else {
					tmp1 = this.ctx.currentTime;
				}
				buf.start(tmp,source,tmp1);
			} else {
				buf.start(this.ctx,source,this.ctx.currentTime);
			}
		}
	}
	,unqueueBuffer: function(source,buffer) {
		var i = 0;
		while(i < source.buffers.length) {
			var b = source.buffers[i];
			if(b.buffer == buffer) {
				source.buffers.splice(i,1);
				b.stop(!buffer.isEnd);
				b.clear();
				this.playbackPool.push(b);
				break;
			}
		}
		if(buffer.isEnd || !source.playing) {
			source.sampleOffset = 0;
		} else {
			source.sampleOffset += buffer.samples;
		}
	}
	,getProcessedBuffers: function(source) {
		var cnt = 0;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				++cnt;
			}
		}
		return cnt;
	}
	,getPlayedSampleCount: function(source) {
		var consumed = 0;
		var buf = null;
		var _g = 0;
		var _g1 = source.buffers;
		while(_g < _g1.length) {
			var b = _g1[_g];
			++_g;
			if(b.consumed) {
				consumed += b.buffer.samples;
			} else if(b.dirty) {
				buf = b;
				break;
			}
		}
		if(buf != null) {
			return source.sampleOffset + consumed + buf.get_currentSample();
		}
		return source.sampleOffset + consumed;
	}
	,update: function() {
	}
	,getEffectDriver: function(type) {
		switch(type) {
		case "lowpass":
			return new hxd_snd_webaudio_LowPassDriver();
		case "pitch":
			return new hxd_snd_webaudio_PitchDriver();
		case "spatialization":
			return new hxd_snd_webaudio_SpatializationDriver();
		default:
			return new hxd_snd_EffectDriver();
		}
	}
	,__class__: hxd_snd_webaudio_Driver
};
var hxd_snd_webaudio_LowPassDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.LowPassDriver"] = hxd_snd_webaudio_LowPassDriver;
hxd_snd_webaudio_LowPassDriver.__name__ = "hxd.snd.webaudio.LowPassDriver";
hxd_snd_webaudio_LowPassDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_LowPassDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createBiquadFilter();
		node.type = "lowpass";
		return node;
	}
	,bind: function(e,source) {
		source.lowPass = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		var min = 40;
		var max = source.driver.ctx.sampleRate / 2;
		var octaves = Math.log(max / min) / Math.LN2;
		source.lowPass.frequency.value = max * Math.pow(2,octaves * (e.gainHF - 1));
	}
	,unbind: function(e,source) {
		this.pool.push(source.lowPass);
		source.lowPass.disconnect();
		source.lowPass = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_LowPassDriver
});
var hxd_snd_webaudio_PitchDriver = function() {
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.PitchDriver"] = hxd_snd_webaudio_PitchDriver;
hxd_snd_webaudio_PitchDriver.__name__ = "hxd.snd.webaudio.PitchDriver";
hxd_snd_webaudio_PitchDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_PitchDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	apply: function(e,source) {
		if(source.pitch != e.value) {
			source.pitch = e.value;
			source.applyPitch();
		}
	}
	,unbind: function(e,source) {
		source.pitch = 1;
		source.applyPitch();
	}
	,__class__: hxd_snd_webaudio_PitchDriver
});
var hxd_snd_webaudio_SpatializationDriver = function() {
	this.pool = [];
	hxd_snd_EffectDriver.call(this);
};
$hxClasses["hxd.snd.webaudio.SpatializationDriver"] = hxd_snd_webaudio_SpatializationDriver;
hxd_snd_webaudio_SpatializationDriver.__name__ = "hxd.snd.webaudio.SpatializationDriver";
hxd_snd_webaudio_SpatializationDriver.__super__ = hxd_snd_EffectDriver;
hxd_snd_webaudio_SpatializationDriver.prototype = $extend(hxd_snd_EffectDriver.prototype,{
	get: function(ctx) {
		if(this.pool.length != 0) {
			return this.pool.pop();
		}
		var node = ctx.createPanner();
		return node;
	}
	,bind: function(e,source) {
		source.panner = this.get(source.driver.ctx);
		source.updateDestination();
		this.apply(e,source);
	}
	,apply: function(e,source) {
		source.panner.setPosition(-e.position.x,e.position.y,e.position.z);
		source.panner.setOrientation(-e.direction.x,e.direction.y,e.direction.z);
		source.panner.rolloffFactor = e.rollOffFactor;
		source.panner.refDistance = e.referenceDistance;
		var maxDist = e.maxDistance == null ? 3.40282347e38 : e.maxDistance;
		source.panner.maxDistance = maxDist;
	}
	,unbind: function(e,source) {
		this.pool.push(source.panner);
		source.panner.disconnect();
		source.panner = null;
		if(source.driver != null) {
			source.updateDestination();
		}
	}
	,__class__: hxd_snd_webaudio_SpatializationDriver
});
var hxsl_Type = $hxEnums["hxsl.Type"] = { __ename__ : true, __constructs__ : ["TVoid","TInt","TBool","TFloat","TString","TVec","TMat3","TMat4","TMat3x4","TBytes","TSampler2D","TSampler2DArray","TSamplerCube","TStruct","TFun","TArray","TBuffer","TChannel","TMat2"]
	,TVoid: {_hx_index:0,__enum__:"hxsl.Type",toString:$estr}
	,TInt: {_hx_index:1,__enum__:"hxsl.Type",toString:$estr}
	,TBool: {_hx_index:2,__enum__:"hxsl.Type",toString:$estr}
	,TFloat: {_hx_index:3,__enum__:"hxsl.Type",toString:$estr}
	,TString: {_hx_index:4,__enum__:"hxsl.Type",toString:$estr}
	,TVec: ($_=function(size,t) { return {_hx_index:5,size:size,t:t,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size","t"],$_)
	,TMat3: {_hx_index:6,__enum__:"hxsl.Type",toString:$estr}
	,TMat4: {_hx_index:7,__enum__:"hxsl.Type",toString:$estr}
	,TMat3x4: {_hx_index:8,__enum__:"hxsl.Type",toString:$estr}
	,TBytes: ($_=function(size) { return {_hx_index:9,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TSampler2D: {_hx_index:10,__enum__:"hxsl.Type",toString:$estr}
	,TSampler2DArray: {_hx_index:11,__enum__:"hxsl.Type",toString:$estr}
	,TSamplerCube: {_hx_index:12,__enum__:"hxsl.Type",toString:$estr}
	,TStruct: ($_=function(vl) { return {_hx_index:13,vl:vl,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["vl"],$_)
	,TFun: ($_=function(variants) { return {_hx_index:14,variants:variants,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["variants"],$_)
	,TArray: ($_=function(t,size) { return {_hx_index:15,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TBuffer: ($_=function(t,size) { return {_hx_index:16,t:t,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["t","size"],$_)
	,TChannel: ($_=function(size) { return {_hx_index:17,size:size,__enum__:"hxsl.Type",toString:$estr}; },$_.__params__ = ["size"],$_)
	,TMat2: {_hx_index:18,__enum__:"hxsl.Type",toString:$estr}
};
hxsl_Type.__empty_constructs__ = [hxsl_Type.TVoid,hxsl_Type.TInt,hxsl_Type.TBool,hxsl_Type.TFloat,hxsl_Type.TString,hxsl_Type.TMat3,hxsl_Type.TMat4,hxsl_Type.TMat3x4,hxsl_Type.TSampler2D,hxsl_Type.TSampler2DArray,hxsl_Type.TSamplerCube,hxsl_Type.TMat2];
var hxsl_VecType = $hxEnums["hxsl.VecType"] = { __ename__ : true, __constructs__ : ["VInt","VFloat","VBool"]
	,VInt: {_hx_index:0,__enum__:"hxsl.VecType",toString:$estr}
	,VFloat: {_hx_index:1,__enum__:"hxsl.VecType",toString:$estr}
	,VBool: {_hx_index:2,__enum__:"hxsl.VecType",toString:$estr}
};
hxsl_VecType.__empty_constructs__ = [hxsl_VecType.VInt,hxsl_VecType.VFloat,hxsl_VecType.VBool];
var hxsl_SizeDecl = $hxEnums["hxsl.SizeDecl"] = { __ename__ : true, __constructs__ : ["SConst","SVar"]
	,SConst: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
	,SVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.SizeDecl",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_SizeDecl.__empty_constructs__ = [];
var hxsl_Error = function(msg,pos) {
	this.msg = msg;
	this.pos = pos;
};
$hxClasses["hxsl.Error"] = hxsl_Error;
hxsl_Error.__name__ = "hxsl.Error";
hxsl_Error.t = function(msg,pos) {
	throw haxe_Exception.thrown(new hxsl_Error(msg,pos));
};
hxsl_Error.prototype = {
	toString: function() {
		return "Error(" + this.msg + ")@" + Std.string(this.pos);
	}
	,__class__: hxsl_Error
};
var hxsl_VarKind = $hxEnums["hxsl.VarKind"] = { __ename__ : true, __constructs__ : ["Global","Input","Param","Var","Local","Output","Function"]
	,Global: {_hx_index:0,__enum__:"hxsl.VarKind",toString:$estr}
	,Input: {_hx_index:1,__enum__:"hxsl.VarKind",toString:$estr}
	,Param: {_hx_index:2,__enum__:"hxsl.VarKind",toString:$estr}
	,Var: {_hx_index:3,__enum__:"hxsl.VarKind",toString:$estr}
	,Local: {_hx_index:4,__enum__:"hxsl.VarKind",toString:$estr}
	,Output: {_hx_index:5,__enum__:"hxsl.VarKind",toString:$estr}
	,Function: {_hx_index:6,__enum__:"hxsl.VarKind",toString:$estr}
};
hxsl_VarKind.__empty_constructs__ = [hxsl_VarKind.Global,hxsl_VarKind.Input,hxsl_VarKind.Param,hxsl_VarKind.Var,hxsl_VarKind.Local,hxsl_VarKind.Output,hxsl_VarKind.Function];
var hxsl_VarQualifier = $hxEnums["hxsl.VarQualifier"] = { __ename__ : true, __constructs__ : ["Const","Private","Nullable","PerObject","Name","Shared","Precision","Range","Ignore","PerInstance","Doc"]
	,Const: ($_=function(max) { return {_hx_index:0,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["max"],$_)
	,Private: {_hx_index:1,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Nullable: {_hx_index:2,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerObject: {_hx_index:3,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Name: ($_=function(n) { return {_hx_index:4,n:n,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["n"],$_)
	,Shared: {_hx_index:5,__enum__:"hxsl.VarQualifier",toString:$estr}
	,Precision: ($_=function(p) { return {_hx_index:6,p:p,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["p"],$_)
	,Range: ($_=function(min,max) { return {_hx_index:7,min:min,max:max,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["min","max"],$_)
	,Ignore: {_hx_index:8,__enum__:"hxsl.VarQualifier",toString:$estr}
	,PerInstance: ($_=function(v) { return {_hx_index:9,v:v,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Doc: ($_=function(s) { return {_hx_index:10,s:s,__enum__:"hxsl.VarQualifier",toString:$estr}; },$_.__params__ = ["s"],$_)
};
hxsl_VarQualifier.__empty_constructs__ = [hxsl_VarQualifier.Private,hxsl_VarQualifier.Nullable,hxsl_VarQualifier.PerObject,hxsl_VarQualifier.Shared,hxsl_VarQualifier.Ignore];
var hxsl_Prec = $hxEnums["hxsl.Prec"] = { __ename__ : true, __constructs__ : ["Low","Medium","High"]
	,Low: {_hx_index:0,__enum__:"hxsl.Prec",toString:$estr}
	,Medium: {_hx_index:1,__enum__:"hxsl.Prec",toString:$estr}
	,High: {_hx_index:2,__enum__:"hxsl.Prec",toString:$estr}
};
hxsl_Prec.__empty_constructs__ = [hxsl_Prec.Low,hxsl_Prec.Medium,hxsl_Prec.High];
var hxsl_Const = $hxEnums["hxsl.Const"] = { __ename__ : true, __constructs__ : ["CNull","CBool","CInt","CFloat","CString"]
	,CNull: {_hx_index:0,__enum__:"hxsl.Const",toString:$estr}
	,CBool: ($_=function(b) { return {_hx_index:1,b:b,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["b"],$_)
	,CInt: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
	,CString: ($_=function(v) { return {_hx_index:4,v:v,__enum__:"hxsl.Const",toString:$estr}; },$_.__params__ = ["v"],$_)
};
hxsl_Const.__empty_constructs__ = [hxsl_Const.CNull];
var hxsl_FunctionKind = $hxEnums["hxsl.FunctionKind"] = { __ename__ : true, __constructs__ : ["Vertex","Fragment","Init","Helper"]
	,Vertex: {_hx_index:0,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Fragment: {_hx_index:1,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Init: {_hx_index:2,__enum__:"hxsl.FunctionKind",toString:$estr}
	,Helper: {_hx_index:3,__enum__:"hxsl.FunctionKind",toString:$estr}
};
hxsl_FunctionKind.__empty_constructs__ = [hxsl_FunctionKind.Vertex,hxsl_FunctionKind.Fragment,hxsl_FunctionKind.Init,hxsl_FunctionKind.Helper];
var hxsl_TGlobal = $hxEnums["hxsl.TGlobal"] = { __ename__ : true, __constructs__ : ["Radians","Degrees","Sin","Cos","Tan","Asin","Acos","Atan","Pow","Exp","Log","Exp2","Log2","Sqrt","Inversesqrt","Abs","Sign","Floor","Ceil","Fract","Mod","Min","Max","Clamp","Mix","Step","Smoothstep","Length","Distance","Dot","Cross","Normalize","LReflect","Texture","TextureLod","Texel","TextureSize","ToInt","ToFloat","ToBool","Vec2","Vec3","Vec4","IVec2","IVec3","IVec4","BVec2","BVec3","BVec4","Mat2","Mat3","Mat4","Mat3x4","Saturate","Pack","Unpack","PackNormal","UnpackNormal","ScreenToUv","UvToScreen","DFdx","DFdy","Fwidth","ChannelRead","ChannelReadLod","ChannelFetch","ChannelTextureSize","Trace","VertexID","InstanceID","FragCoord","FrontFacing"]
	,Radians: {_hx_index:0,__enum__:"hxsl.TGlobal",toString:$estr}
	,Degrees: {_hx_index:1,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sin: {_hx_index:2,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cos: {_hx_index:3,__enum__:"hxsl.TGlobal",toString:$estr}
	,Tan: {_hx_index:4,__enum__:"hxsl.TGlobal",toString:$estr}
	,Asin: {_hx_index:5,__enum__:"hxsl.TGlobal",toString:$estr}
	,Acos: {_hx_index:6,__enum__:"hxsl.TGlobal",toString:$estr}
	,Atan: {_hx_index:7,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pow: {_hx_index:8,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp: {_hx_index:9,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log: {_hx_index:10,__enum__:"hxsl.TGlobal",toString:$estr}
	,Exp2: {_hx_index:11,__enum__:"hxsl.TGlobal",toString:$estr}
	,Log2: {_hx_index:12,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sqrt: {_hx_index:13,__enum__:"hxsl.TGlobal",toString:$estr}
	,Inversesqrt: {_hx_index:14,__enum__:"hxsl.TGlobal",toString:$estr}
	,Abs: {_hx_index:15,__enum__:"hxsl.TGlobal",toString:$estr}
	,Sign: {_hx_index:16,__enum__:"hxsl.TGlobal",toString:$estr}
	,Floor: {_hx_index:17,__enum__:"hxsl.TGlobal",toString:$estr}
	,Ceil: {_hx_index:18,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fract: {_hx_index:19,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mod: {_hx_index:20,__enum__:"hxsl.TGlobal",toString:$estr}
	,Min: {_hx_index:21,__enum__:"hxsl.TGlobal",toString:$estr}
	,Max: {_hx_index:22,__enum__:"hxsl.TGlobal",toString:$estr}
	,Clamp: {_hx_index:23,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mix: {_hx_index:24,__enum__:"hxsl.TGlobal",toString:$estr}
	,Step: {_hx_index:25,__enum__:"hxsl.TGlobal",toString:$estr}
	,Smoothstep: {_hx_index:26,__enum__:"hxsl.TGlobal",toString:$estr}
	,Length: {_hx_index:27,__enum__:"hxsl.TGlobal",toString:$estr}
	,Distance: {_hx_index:28,__enum__:"hxsl.TGlobal",toString:$estr}
	,Dot: {_hx_index:29,__enum__:"hxsl.TGlobal",toString:$estr}
	,Cross: {_hx_index:30,__enum__:"hxsl.TGlobal",toString:$estr}
	,Normalize: {_hx_index:31,__enum__:"hxsl.TGlobal",toString:$estr}
	,LReflect: {_hx_index:32,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texture: {_hx_index:33,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureLod: {_hx_index:34,__enum__:"hxsl.TGlobal",toString:$estr}
	,Texel: {_hx_index:35,__enum__:"hxsl.TGlobal",toString:$estr}
	,TextureSize: {_hx_index:36,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToInt: {_hx_index:37,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToFloat: {_hx_index:38,__enum__:"hxsl.TGlobal",toString:$estr}
	,ToBool: {_hx_index:39,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec2: {_hx_index:40,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec3: {_hx_index:41,__enum__:"hxsl.TGlobal",toString:$estr}
	,Vec4: {_hx_index:42,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec2: {_hx_index:43,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec3: {_hx_index:44,__enum__:"hxsl.TGlobal",toString:$estr}
	,IVec4: {_hx_index:45,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec2: {_hx_index:46,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec3: {_hx_index:47,__enum__:"hxsl.TGlobal",toString:$estr}
	,BVec4: {_hx_index:48,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat2: {_hx_index:49,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3: {_hx_index:50,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat4: {_hx_index:51,__enum__:"hxsl.TGlobal",toString:$estr}
	,Mat3x4: {_hx_index:52,__enum__:"hxsl.TGlobal",toString:$estr}
	,Saturate: {_hx_index:53,__enum__:"hxsl.TGlobal",toString:$estr}
	,Pack: {_hx_index:54,__enum__:"hxsl.TGlobal",toString:$estr}
	,Unpack: {_hx_index:55,__enum__:"hxsl.TGlobal",toString:$estr}
	,PackNormal: {_hx_index:56,__enum__:"hxsl.TGlobal",toString:$estr}
	,UnpackNormal: {_hx_index:57,__enum__:"hxsl.TGlobal",toString:$estr}
	,ScreenToUv: {_hx_index:58,__enum__:"hxsl.TGlobal",toString:$estr}
	,UvToScreen: {_hx_index:59,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdx: {_hx_index:60,__enum__:"hxsl.TGlobal",toString:$estr}
	,DFdy: {_hx_index:61,__enum__:"hxsl.TGlobal",toString:$estr}
	,Fwidth: {_hx_index:62,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelRead: {_hx_index:63,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelReadLod: {_hx_index:64,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelFetch: {_hx_index:65,__enum__:"hxsl.TGlobal",toString:$estr}
	,ChannelTextureSize: {_hx_index:66,__enum__:"hxsl.TGlobal",toString:$estr}
	,Trace: {_hx_index:67,__enum__:"hxsl.TGlobal",toString:$estr}
	,VertexID: {_hx_index:68,__enum__:"hxsl.TGlobal",toString:$estr}
	,InstanceID: {_hx_index:69,__enum__:"hxsl.TGlobal",toString:$estr}
	,FragCoord: {_hx_index:70,__enum__:"hxsl.TGlobal",toString:$estr}
	,FrontFacing: {_hx_index:71,__enum__:"hxsl.TGlobal",toString:$estr}
};
hxsl_TGlobal.__empty_constructs__ = [hxsl_TGlobal.Radians,hxsl_TGlobal.Degrees,hxsl_TGlobal.Sin,hxsl_TGlobal.Cos,hxsl_TGlobal.Tan,hxsl_TGlobal.Asin,hxsl_TGlobal.Acos,hxsl_TGlobal.Atan,hxsl_TGlobal.Pow,hxsl_TGlobal.Exp,hxsl_TGlobal.Log,hxsl_TGlobal.Exp2,hxsl_TGlobal.Log2,hxsl_TGlobal.Sqrt,hxsl_TGlobal.Inversesqrt,hxsl_TGlobal.Abs,hxsl_TGlobal.Sign,hxsl_TGlobal.Floor,hxsl_TGlobal.Ceil,hxsl_TGlobal.Fract,hxsl_TGlobal.Mod,hxsl_TGlobal.Min,hxsl_TGlobal.Max,hxsl_TGlobal.Clamp,hxsl_TGlobal.Mix,hxsl_TGlobal.Step,hxsl_TGlobal.Smoothstep,hxsl_TGlobal.Length,hxsl_TGlobal.Distance,hxsl_TGlobal.Dot,hxsl_TGlobal.Cross,hxsl_TGlobal.Normalize,hxsl_TGlobal.LReflect,hxsl_TGlobal.Texture,hxsl_TGlobal.TextureLod,hxsl_TGlobal.Texel,hxsl_TGlobal.TextureSize,hxsl_TGlobal.ToInt,hxsl_TGlobal.ToFloat,hxsl_TGlobal.ToBool,hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4,hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4,hxsl_TGlobal.BVec2,hxsl_TGlobal.BVec3,hxsl_TGlobal.BVec4,hxsl_TGlobal.Mat2,hxsl_TGlobal.Mat3,hxsl_TGlobal.Mat4,hxsl_TGlobal.Mat3x4,hxsl_TGlobal.Saturate,hxsl_TGlobal.Pack,hxsl_TGlobal.Unpack,hxsl_TGlobal.PackNormal,hxsl_TGlobal.UnpackNormal,hxsl_TGlobal.ScreenToUv,hxsl_TGlobal.UvToScreen,hxsl_TGlobal.DFdx,hxsl_TGlobal.DFdy,hxsl_TGlobal.Fwidth,hxsl_TGlobal.ChannelRead,hxsl_TGlobal.ChannelReadLod,hxsl_TGlobal.ChannelFetch,hxsl_TGlobal.ChannelTextureSize,hxsl_TGlobal.Trace,hxsl_TGlobal.VertexID,hxsl_TGlobal.InstanceID,hxsl_TGlobal.FragCoord,hxsl_TGlobal.FrontFacing];
var hxsl_Component = $hxEnums["hxsl.Component"] = { __ename__ : true, __constructs__ : ["X","Y","Z","W"]
	,X: {_hx_index:0,__enum__:"hxsl.Component",toString:$estr}
	,Y: {_hx_index:1,__enum__:"hxsl.Component",toString:$estr}
	,Z: {_hx_index:2,__enum__:"hxsl.Component",toString:$estr}
	,W: {_hx_index:3,__enum__:"hxsl.Component",toString:$estr}
};
hxsl_Component.__empty_constructs__ = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
var hxsl_TExprDef = $hxEnums["hxsl.TExprDef"] = { __ename__ : true, __constructs__ : ["TConst","TVar","TGlobal","TParenthesis","TBlock","TBinop","TUnop","TVarDecl","TCall","TSwiz","TIf","TDiscard","TReturn","TFor","TContinue","TBreak","TArray","TArrayDecl","TSwitch","TWhile","TMeta"]
	,TConst: ($_=function(c) { return {_hx_index:0,c:c,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["c"],$_)
	,TVar: ($_=function(v) { return {_hx_index:1,v:v,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v"],$_)
	,TGlobal: ($_=function(g) { return {_hx_index:2,g:g,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["g"],$_)
	,TParenthesis: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TBlock: ($_=function(el) { return {_hx_index:4,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TBinop: ($_=function(op,e1,e2) { return {_hx_index:5,op:op,e1:e1,e2:e2,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1","e2"],$_)
	,TUnop: ($_=function(op,e1) { return {_hx_index:6,op:op,e1:e1,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["op","e1"],$_)
	,TVarDecl: ($_=function(v,init) { return {_hx_index:7,v:v,init:init,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","init"],$_)
	,TCall: ($_=function(e,args) { return {_hx_index:8,e:e,args:args,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","args"],$_)
	,TSwiz: ($_=function(e,regs) { return {_hx_index:9,e:e,regs:regs,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","regs"],$_)
	,TIf: ($_=function(econd,eif,eelse) { return {_hx_index:10,econd:econd,eif:eif,eelse:eelse,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["econd","eif","eelse"],$_)
	,TDiscard: {_hx_index:11,__enum__:"hxsl.TExprDef",toString:$estr}
	,TReturn: ($_=function(e) { return {_hx_index:12,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e"],$_)
	,TFor: ($_=function(v,it,loop) { return {_hx_index:13,v:v,it:it,loop:loop,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["v","it","loop"],$_)
	,TContinue: {_hx_index:14,__enum__:"hxsl.TExprDef",toString:$estr}
	,TBreak: {_hx_index:15,__enum__:"hxsl.TExprDef",toString:$estr}
	,TArray: ($_=function(e,index) { return {_hx_index:16,e:e,index:index,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","index"],$_)
	,TArrayDecl: ($_=function(el) { return {_hx_index:17,el:el,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["el"],$_)
	,TSwitch: ($_=function(e,cases,def) { return {_hx_index:18,e:e,cases:cases,def:def,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","cases","def"],$_)
	,TWhile: ($_=function(e,loop,normalWhile) { return {_hx_index:19,e:e,loop:loop,normalWhile:normalWhile,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["e","loop","normalWhile"],$_)
	,TMeta: ($_=function(m,args,e) { return {_hx_index:20,m:m,args:args,e:e,__enum__:"hxsl.TExprDef",toString:$estr}; },$_.__params__ = ["m","args","e"],$_)
};
hxsl_TExprDef.__empty_constructs__ = [hxsl_TExprDef.TDiscard,hxsl_TExprDef.TContinue,hxsl_TExprDef.TBreak];
var hxsl_Tools = function() { };
$hxClasses["hxsl.Tools"] = hxsl_Tools;
hxsl_Tools.__name__ = "hxsl.Tools";
hxsl_Tools.allocVarId = function() {
	return ++hxsl_Tools.UID;
};
hxsl_Tools.getName = function(v) {
	if(v.qualifiers == null) {
		return v.name;
	}
	var _g = 0;
	var _g1 = v.qualifiers;
	while(_g < _g1.length) {
		var q = _g1[_g];
		++_g;
		if(q._hx_index == 4) {
			var n = q.n;
			return n;
		}
	}
	return v.name;
};
hxsl_Tools.getConstBits = function(v) {
	var _g = v.type;
	switch(_g._hx_index) {
	case 1:
		var _g1 = 0;
		var _g2 = v.qualifiers;
		while(_g1 < _g2.length) {
			var q = _g2[_g1];
			++_g1;
			if(q._hx_index == 0) {
				var n = q.max;
				if(n != null) {
					var bits = 0;
					while(n >= 1 << bits) ++bits;
					return bits;
				}
				return 8;
			}
		}
		break;
	case 2:
		return 1;
	case 17:
		var _g1 = _g.size;
		return 3 + hxsl_Tools.MAX_CHANNELS_BITS;
	default:
	}
	return 0;
};
hxsl_Tools.isConst = function(v) {
	var _g = v.type;
	var tmp;
	if(_g._hx_index == 17) {
		var _g1 = _g.size;
		tmp = true;
	} else {
		tmp = false;
	}
	if(tmp) {
		return true;
	}
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q = _g1[_g];
			++_g;
			if(q._hx_index == 0) {
				var _g2 = q.max;
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.hasQualifier = function(v,q) {
	if(v.qualifiers != null) {
		var _g = 0;
		var _g1 = v.qualifiers;
		while(_g < _g1.length) {
			var q2 = _g1[_g];
			++_g;
			if(q2 == q) {
				return true;
			}
		}
	}
	return false;
};
hxsl_Tools.isSampler = function(t) {
	switch(t._hx_index) {
	case 10:case 11:case 12:
		return true;
	case 17:
		var _g = t.size;
		return true;
	default:
		return false;
	}
};
hxsl_Tools.toString = function(t) {
	switch(t._hx_index) {
	case 5:
		var t1 = t.t;
		var size = t.size;
		var prefix;
		switch(t1._hx_index) {
		case 0:
			prefix = "I";
			break;
		case 1:
			prefix = "";
			break;
		case 2:
			prefix = "B";
			break;
		}
		return prefix + "Vec" + size;
	case 9:
		var n = t.size;
		return "Bytes" + n;
	case 13:
		var vl = t.vl;
		var _g = [];
		var _g1 = 0;
		while(_g1 < vl.length) {
			var v = vl[_g1];
			++_g1;
			_g.push(v.name + " : " + hxsl_Tools.toString(v.type));
		}
		return "{" + _g.join(",") + "}";
	case 15:
		var s = t.size;
		var t1 = t.t;
		var tmp = hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	case 16:
		var s = t.size;
		var t1 = t.t;
		var tmp = "buffer " + hxsl_Tools.toString(t1) + "[";
		var tmp1;
		switch(s._hx_index) {
		case 0:
			var i = s.v;
			tmp1 = "" + i;
			break;
		case 1:
			var v = s.v;
			tmp1 = v.name;
			break;
		}
		return tmp + tmp1 + "]";
	default:
		return HxOverrides.substr($hxEnums[t.__enum__].__constructs__[t._hx_index],1,null);
	}
};
hxsl_Tools.hasSideEffect = function(e) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		return false;
	case 1:
		var _g1 = _g.v;
		return false;
	case 2:
		var _g1 = _g.g;
		return false;
	case 3:
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 5:
		var _g1 = _g.e2;
		var _g2 = _g.e1;
		var _g3 = _g.op;
		switch(_g3._hx_index) {
		case 4:
			return true;
		case 20:
			var _g4 = _g3.op;
			return true;
		default:
			var e2 = _g1;
			var e1 = _g2;
			if(!hxsl_Tools.hasSideEffect(e1)) {
				return hxsl_Tools.hasSideEffect(e2);
			} else {
				return true;
			}
		}
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		return hxsl_Tools.hasSideEffect(e1);
	case 7:
		var _g1 = _g.init;
		var _g1 = _g.v;
		return true;
	case 8:
		var pl = _g.args;
		var e = _g.e;
		var _g1 = e.e;
		var tmp;
		if(_g1._hx_index == 2) {
			var _g2 = _g1.g;
			tmp = true;
		} else {
			tmp = false;
		}
		if(!tmp) {
			return true;
		}
		var _g1 = 0;
		while(_g1 < pl.length) {
			var p = pl[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(p)) {
				return true;
			}
		}
		return false;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		if(!(hxsl_Tools.hasSideEffect(econd) || hxsl_Tools.hasSideEffect(eif))) {
			if(eelse != null) {
				return hxsl_Tools.hasSideEffect(eelse);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 12:
		var _g1 = _g.e;
		return true;
	case 13:
		var _g1 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		if(!hxsl_Tools.hasSideEffect(it)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 11:case 14:case 15:
		return true;
	case 16:
		var index = _g.index;
		var e = _g.e;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(index);
		} else {
			return true;
		}
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			if(hxsl_Tools.hasSideEffect(e)) {
				return true;
			}
		}
		return false;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e = _g.e;
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				if(hxsl_Tools.hasSideEffect(v)) {
					return true;
				}
			}
			if(hxsl_Tools.hasSideEffect(c.expr)) {
				return true;
			}
		}
		if(!hxsl_Tools.hasSideEffect(e)) {
			if(def != null) {
				return hxsl_Tools.hasSideEffect(def);
			} else {
				return false;
			}
		} else {
			return true;
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var loop = _g.loop;
		var e = _g.e;
		if(!hxsl_Tools.hasSideEffect(e)) {
			return hxsl_Tools.hasSideEffect(loop);
		} else {
			return true;
		}
		break;
	case 20:
		var _g1 = _g.args;
		var _g1 = _g.m;
		var e = _g.e;
		return hxsl_Tools.hasSideEffect(e);
	}
};
hxsl_Tools.iter = function(e,f) {
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		break;
	case 1:
		var _g1 = _g.v;
		break;
	case 2:
		var _g1 = _g.g;
		break;
	case 3:
		var e = _g.e;
		f(e);
		break;
	case 4:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 5:
		var _g1 = _g.op;
		var e2 = _g.e2;
		var e1 = _g.e1;
		f(e1);
		f(e2);
		break;
	case 6:
		var _g1 = _g.op;
		var e1 = _g.e1;
		f(e1);
		break;
	case 7:
		var _g1 = _g.v;
		var init = _g.init;
		if(init != null) {
			f(init);
		}
		break;
	case 8:
		var args = _g.args;
		var e = _g.e;
		f(e);
		var _g1 = 0;
		while(_g1 < args.length) {
			var a = args[_g1];
			++_g1;
			f(a);
		}
		break;
	case 9:
		var _g1 = _g.regs;
		var e = _g.e;
		f(e);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		f(econd);
		f(eif);
		if(eelse != null) {
			f(eelse);
		}
		break;
	case 12:
		var e = _g.e;
		if(e != null) {
			f(e);
		}
		break;
	case 13:
		var _g1 = _g.v;
		var loop = _g.loop;
		var it = _g.it;
		f(it);
		f(loop);
		break;
	case 11:case 14:case 15:
		break;
	case 16:
		var index = _g.index;
		var e = _g.e;
		f(e);
		f(index);
		break;
	case 17:
		var el = _g.el;
		var _g1 = 0;
		while(_g1 < el.length) {
			var e = el[_g1];
			++_g1;
			f(e);
		}
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e = _g.e;
		f(e);
		var _g1 = 0;
		while(_g1 < cases.length) {
			var c = cases[_g1];
			++_g1;
			var _g2 = 0;
			var _g3 = c.values;
			while(_g2 < _g3.length) {
				var v = _g3[_g2];
				++_g2;
				f(v);
			}
			f(c.expr);
		}
		if(def != null) {
			f(def);
		}
		break;
	case 19:
		var _g1 = _g.normalWhile;
		var loop = _g.loop;
		var e = _g.e;
		f(e);
		f(loop);
		break;
	case 20:
		var _g1 = _g.args;
		var _g1 = _g.m;
		var e = _g.e;
		f(e);
		break;
	}
};
hxsl_Tools.map = function(e,f) {
	var ed;
	var _g = e.e;
	switch(_g._hx_index) {
	case 0:
		var _g1 = _g.c;
		ed = e.e;
		break;
	case 1:
		var _g1 = _g.v;
		ed = e.e;
		break;
	case 2:
		var _g1 = _g.g;
		ed = e.e;
		break;
	case 3:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TParenthesis(f(e1));
		break;
	case 4:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TBlock(_g1);
		break;
	case 5:
		var e2 = _g.e2;
		var e1 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TBinop(op,f(e1),f(e2));
		break;
	case 6:
		var e1 = _g.e1;
		var op = _g.op;
		ed = hxsl_TExprDef.TUnop(op,f(e1));
		break;
	case 7:
		var init = _g.init;
		var v = _g.v;
		ed = hxsl_TExprDef.TVarDecl(v,init != null ? f(init) : null);
		break;
	case 8:
		var args = _g.args;
		var e1 = _g.e;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < args.length) {
			var a = args[_g2];
			++_g2;
			_g1.push(f(a));
		}
		ed = hxsl_TExprDef.TCall(ed1,_g1);
		break;
	case 9:
		var c = _g.regs;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TSwiz(f(e1),c);
		break;
	case 10:
		var eelse = _g.eelse;
		var eif = _g.eif;
		var econd = _g.econd;
		ed = hxsl_TExprDef.TIf(f(econd),f(eif),eelse != null ? f(eelse) : null);
		break;
	case 12:
		var e1 = _g.e;
		ed = hxsl_TExprDef.TReturn(e1 != null ? f(e1) : null);
		break;
	case 13:
		var loop = _g.loop;
		var it = _g.it;
		var v = _g.v;
		ed = hxsl_TExprDef.TFor(v,f(it),f(loop));
		break;
	case 11:case 14:case 15:
		ed = e.e;
		break;
	case 16:
		var index = _g.index;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TArray(f(e1),f(index));
		break;
	case 17:
		var el = _g.el;
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < el.length) {
			var e1 = el[_g2];
			++_g2;
			_g1.push(f(e1));
		}
		ed = hxsl_TExprDef.TArrayDecl(_g1);
		break;
	case 18:
		var def = _g.def;
		var cases = _g.cases;
		var e1 = _g.e;
		var ed1 = f(e1);
		var _g1 = [];
		var _g2 = 0;
		while(_g2 < cases.length) {
			var c = cases[_g2];
			++_g2;
			var _g3 = [];
			var _g4 = 0;
			var _g5 = c.values;
			while(_g4 < _g5.length) {
				var v = _g5[_g4];
				++_g4;
				_g3.push(f(v));
			}
			_g1.push({ values : _g3, expr : f(c.expr)});
		}
		ed = hxsl_TExprDef.TSwitch(ed1,_g1,def == null ? null : f(def));
		break;
	case 19:
		var normalWhile = _g.normalWhile;
		var loop = _g.loop;
		var e1 = _g.e;
		ed = hxsl_TExprDef.TWhile(f(e1),f(loop),normalWhile);
		break;
	case 20:
		var e1 = _g.e;
		var args = _g.args;
		var m = _g.m;
		ed = hxsl_TExprDef.TMeta(m,args,f(e1));
		break;
	}
	return { e : ed, t : e.t, p : e.p};
};
hxsl_Tools.size = function(t) {
	switch(t._hx_index) {
	case 0:
		return 0;
	case 1:case 3:
		return 1;
	case 2:case 4:case 10:case 11:case 12:
		return 0;
	case 5:
		var _g = t.t;
		var n = t.size;
		return n;
	case 6:
		return 9;
	case 7:
		return 16;
	case 8:
		return 12;
	case 9:
		var s = t.size;
		return s;
	case 13:
		var vl = t.vl;
		var s = 0;
		var _g = 0;
		while(_g < vl.length) {
			var v = vl[_g];
			++_g;
			s += hxsl_Tools.size(v.type);
		}
		return s;
	case 14:
		var _g = t.variants;
		return 0;
	case 15:
		var _g = t.size;
		var _g1 = t.t;
		switch(_g._hx_index) {
		case 0:
			var t1 = _g1;
			var v = _g.v;
			return hxsl_Tools.size(t1) * v;
		case 1:
			var _g1 = _g.v;
			return 0;
		}
		break;
	case 16:
		var _g = t.size;
		if(_g._hx_index == 0) {
			var t1 = t.t;
			var v = _g.v;
			return hxsl_Tools.size(t1) * v;
		} else {
			return 0;
		}
		break;
	case 17:
		var n = t.size;
		return n;
	case 18:
		return 4;
	}
};
var hxsl_Tools2 = function() { };
$hxClasses["hxsl.Tools2"] = hxsl_Tools2;
hxsl_Tools2.__name__ = "hxsl.Tools2";
hxsl_Tools2.toString = function(g) {
	var n = $hxEnums[g.__enum__].__constructs__[g._hx_index];
	return n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
};
var hxsl_BatchShader = function() {
	this.Batch_Count__ = 0;
	hxsl_Shader.call(this);
};
$hxClasses["hxsl.BatchShader"] = hxsl_BatchShader;
hxsl_BatchShader.__name__ = "hxsl.BatchShader";
hxsl_BatchShader.__super__ = hxsl_Shader;
hxsl_BatchShader.prototype = $extend(hxsl_Shader.prototype,{
	updateConstants: function(globals) {
		this.constBits = 0;
		var v = this.Batch_Count__;
		if(v >>> 17 != 0) {
			throw haxe_Exception.thrown("Batch_Count" + " is out of range " + v + ">" + 131071);
		}
		this.constBits |= v;
		this.updateConstantsFinal(globals);
	}
	,getParamValue: function(index) {
		switch(index) {
		case 0:
			return this.Batch_Count__;
		case 1:
			return this.Batch_Buffer__;
		default:
		}
		return null;
	}
	,getParamFloatValue: function(index) {
		return 0.;
	}
	,__class__: hxsl_BatchShader
});
var hxsl_SearchMap = function() {
};
$hxClasses["hxsl.SearchMap"] = hxsl_SearchMap;
hxsl_SearchMap.__name__ = "hxsl.SearchMap";
hxsl_SearchMap.prototype = {
	__class__: hxsl_SearchMap
};
var hxsl_Cache = function() {
	this.constsToGlobal = false;
	this.linkCache = new hxsl_SearchMap();
	this.linkShaders = new haxe_ds_StringMap();
	this.batchShaders = new haxe_ds_IntMap();
	this.byID = new haxe_ds_StringMap();
};
$hxClasses["hxsl.Cache"] = hxsl_Cache;
hxsl_Cache.__name__ = "hxsl.Cache";
hxsl_Cache.get = function() {
	var c = hxsl_Cache.INST;
	if(c == null) {
		c = new hxsl_Cache();
		hxsl_Cache.INST = c;
	}
	return c;
};
hxsl_Cache.prototype = {
	getLinkShader: function(vars) {
		var _g = [];
		var _g1 = 0;
		while(_g1 < vars.length) {
			var v = vars[_g1];
			++_g1;
			_g.push(Std.string(v));
		}
		var key = _g.join(",");
		var shader = this.linkShaders.h[key];
		if(shader != null) {
			return shader;
		}
		var s = new hxsl_SharedShader("");
		var id = HxOverrides.substr(haxe_crypto_Md5.encode(key),0,8);
		s.data = { name : "shaderLinker_" + id, vars : [], funs : []};
		var pos = null;
		var outVars_h = Object.create(null);
		var outputCount = 0;
		var tvec4 = hxsl_Type.TVec(4,hxsl_VecType.VFloat);
		var makeVec = function(g,size,args,makeOutExpr) {
			var out = [];
			var rem = size;
			var _g = 0;
			var _g1 = args.length;
			while(_g < _g1) {
				var i = _g++;
				var e = makeOutExpr(args[args.length - 1 - i],rem - (args.length - 1 - i));
				rem -= hxsl_Tools.size(e.t);
				out.unshift(e);
			}
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},out), t : hxsl_Type.TVec(size,hxsl_VecType.VFloat), p : pos};
		};
		var makeVar = function(name,t,parent) {
			var path = parent == null ? name : hxsl_Tools.getName(parent) + "." + name;
			var v = outVars_h[path];
			if(v != null) {
				return v;
			}
			v = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Var, parent : parent};
			if(parent == null) {
				s.data.vars.push(v);
			} else {
				var _g = parent.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					vl.push(v);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			}
			outVars_h[path] = v;
			return v;
		};
		var makeOutExpr = null;
		makeOutExpr = function(v,rem) {
			switch(v._hx_index) {
			case 0:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(v1)), t : hxsl_Type.TFloat, p : pos};
			case 1:
				var size = v.size;
				var vname = v.v;
				var v1 = outVars_h[vname];
				if(v1 != null) {
					return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
				}
				var path = vname.split(".");
				var parent = null;
				while(path.length > 1) parent = makeVar(path.shift(),hxsl_Type.TStruct([]),parent);
				if(size != null) {
					rem = size;
				}
				v1 = makeVar(path.shift(),rem == 1 ? hxsl_Type.TFloat : hxsl_Type.TVec(rem,hxsl_VecType.VFloat),parent);
				return { e : hxsl_TExprDef.TVar(v1), t : v1.type, p : pos};
			case 2:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.PackNormal), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,3)]), t : tvec4, p : pos};
			case 3:
				var v1 = v.v;
				return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Pack), t : hxsl_Type.TVoid, p : pos},[makeOutExpr(v1,1)]), t : tvec4, p : pos};
			case 4:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec2,2,args,makeOutExpr);
			case 5:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec3,3,args,makeOutExpr);
			case 6:
				var args = v.a;
				return makeVec(hxsl_TGlobal.Vec4,4,args,makeOutExpr);
			case 7:
				var comps = v.swiz;
				var v1 = v.a;
				return { e : hxsl_TExprDef.TSwiz(makeOutExpr(v1,4),comps), t : hxsl_Type.TVec(comps.length,hxsl_VecType.VFloat), p : pos};
			}
		};
		var makeOutput = function(v) {
			outputCount += 1;
			var ov = { id : hxsl_Tools.allocVarId(), type : tvec4, name : "OUTPUT" + (outputCount - 1), kind : hxsl_VarKind.Output};
			s.data.vars.push(ov);
			return { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(ov), t : tvec4, p : pos},makeOutExpr(v,4)), t : hxsl_Type.TVoid, p : pos};
		};
		var defineFun = function(kind,vars) {
			var fv = { id : hxsl_Tools.allocVarId(), type : hxsl_Type.TFun([]), name : ("" + Std.string(kind)).toLowerCase(), kind : hxsl_VarKind.Function};
			var _g = [];
			var _g1 = 0;
			while(_g1 < vars.length) {
				var v = vars[_g1];
				++_g1;
				_g.push(makeOutput(v));
			}
			var f = { kind : kind, ref : fv, args : [], ret : hxsl_Type.TVoid, expr : { e : hxsl_TExprDef.TBlock(_g), p : pos, t : hxsl_Type.TVoid}};
			s.data.funs.push(f);
		};
		defineFun(hxsl_FunctionKind.Vertex,[hxsl_Output.Value("output.position")]);
		defineFun(hxsl_FunctionKind.Fragment,vars);
		shader = Object.create(hxsl_Shader.prototype);
		shader.shader = s;
		this.linkShaders.h[key] = shader;
		shader.updateConstantsFinal(null);
		return shader;
	}
	,link: function(shaders,batchMode) {
		var c = this.linkCache;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			if(c.next == null) {
				c.next = new haxe_ds_IntMap();
			}
			var cs = c.next.h[i.id];
			if(cs == null) {
				cs = new hxsl_SearchMap();
				c.next.h[i.id] = cs;
			}
			c = cs;
		}
		if(c.linked == null) {
			c.linked = this.compileRuntimeShader(shaders,batchMode);
		}
		return c.linked;
	}
	,compileRuntimeShader: function(shaders,batchMode) {
		var shaderDatas = [];
		var index = 0;
		var _g_l = shaders;
		var _g_last = null;
		while(_g_l != _g_last) {
			var s = _g_l.s;
			_g_l = _g_l.next;
			var s1 = s;
			var i = s1.instance;
			shaderDatas.push({ inst : i, p : s1.priority, index : index++});
		}
		shaderDatas.reverse();
		haxe_ds_ArraySort.sort(shaderDatas,function(s1,s2) {
			return s2.p - s1.p;
		});
		var linker = new hxsl_Linker(batchMode);
		var s;
		try {
			var _g = [];
			var _g1 = 0;
			while(_g1 < shaderDatas.length) {
				var s1 = shaderDatas[_g1];
				++_g1;
				_g.push(s1.inst.shader);
			}
			s = linker.link(_g);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				var _g1 = [];
				var _g2 = 0;
				while(_g2 < shaderDatas.length) {
					var s1 = shaderDatas[_g2];
					++_g2;
					_g1.push(hxsl_Printer.shaderToString(s1.inst.shader));
				}
				var shaders1 = _g1;
				e.msg += "\n\nin\n\n" + shaders1.join("\n-----\n");
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		if(batchMode) {
			var checkRec = null;
			checkRec = function(v) {
				if(v.qualifiers != null && v.qualifiers.indexOf(hxsl_VarQualifier.PerObject) >= 0) {
					if(v.qualifiers.length == 1) {
						v.qualifiers = null;
					} else {
						v.qualifiers = v.qualifiers.slice();
						HxOverrides.remove(v.qualifiers,hxsl_VarQualifier.PerObject);
					}
					if(v.kind != hxsl_VarKind.Var) {
						v.kind = hxsl_VarKind.Local;
					}
				}
				var _g = v.type;
				if(_g._hx_index == 13) {
					var vl = _g.vl;
					var _g = 0;
					while(_g < vl.length) {
						var v = vl[_g];
						++_g;
						checkRec(v);
					}
				}
			};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				checkRec(v);
			}
		}
		var paramVars = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = linker.allVars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			if(v.v.kind == hxsl_VarKind.Param) {
				var _g2 = v.v.type;
				if(_g2._hx_index == 13) {
					var _g3 = _g2.vl;
					continue;
				}
				var inf = shaderDatas[v.instanceIndex];
				paramVars.h[v.id] = { instance : inf.index, index : inf.inst.params.h[v.merged[0].id]};
			}
		}
		var prev = s;
		var s1;
		try {
			s1 = new hxsl_Splitter().split(s);
		} catch( _g ) {
			var _g1 = haxe_Exception.caught(_g).unwrap();
			if(((_g1) instanceof hxsl_Error)) {
				var e = _g1;
				e.msg += "\n\nin\n\n" + hxsl_Printer.shaderToString(s);
				throw haxe_Exception.thrown(e);
			} else {
				throw _g;
			}
		}
		var prev = s1;
		var s = new hxsl_Dce().dce(s1.vertex,s1.fragment);
		var r = this.buildRuntimeShader(s.vertex,s.fragment,paramVars);
		var _g = [];
		var _g4_l = shaders;
		var _g4_last = null;
		while(_g4_l != _g4_last) {
			var s = _g4_l.s;
			_g4_l = _g4_l.next;
			var s1 = s;
			_g.push(new hxsl_ShaderInstanceDesc(s1.shader,s1.constBits));
		}
		r.spec = { instances : _g, signature : null};
		var _g = 0;
		var _g1 = shaderDatas.length;
		while(_g < _g1) {
			var i = _g++;
			var s = shaderDatas[shaderDatas.length - 1 - i];
			r.spec.instances[s.index].index = i;
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = r.spec.instances;
		while(_g1 < _g2.length) {
			var i = _g2[_g1];
			++_g1;
			_g.push(i.shader.data.name + "_" + i.bits + "_" + i.index);
		}
		var signParts = _g;
		var tmp = signParts.join(":");
		r.spec.signature = haxe_crypto_Md5.encode(tmp);
		r.signature = haxe_crypto_Md5.encode(hxsl_Printer.shaderToString(r.vertex.data) + hxsl_Printer.shaderToString(r.fragment.data));
		r.batchMode = batchMode;
		var r2 = this.byID.h[r.signature];
		if(r2 != null) {
			r.id = r2.id;
		} else {
			this.byID.h[r.signature] = r;
		}
		return r;
	}
	,buildRuntimeShader: function(vertex,fragment,paramVars) {
		var r = new hxsl_RuntimeShader();
		r.vertex = this.flattenShader(vertex,hxsl_FunctionKind.Vertex,paramVars);
		r.vertex.vertex = true;
		r.fragment = this.flattenShader(fragment,hxsl_FunctionKind.Fragment,paramVars);
		r.globals = new haxe_ds_IntMap();
		this.initGlobals(r,r.vertex);
		this.initGlobals(r,r.fragment);
		return r;
	}
	,initGlobals: function(r,s) {
		var p = s.globals;
		while(p != null) {
			r.globals.h[p.gid] = true;
			p = p.next;
		}
		var p = s.params;
		while(p != null) {
			if(p.perObjectGlobal != null) {
				r.globals.h[p.perObjectGlobal.gid] = true;
			}
			p = p.next;
		}
	}
	,getPath: function(v) {
		if(v.parent == null) {
			return v.name;
		}
		return this.getPath(v.parent) + "." + v.name;
	}
	,flattenShader: function(s,kind,params) {
		var flat = new hxsl_Flatten();
		var c = new hxsl_RuntimeShaderData();
		var data = flat.flatten(s,kind,this.constsToGlobal);
		var textures = [];
		c.consts = flat.consts;
		c.texturesCount = 0;
		var g = flat.allocData.keys();
		while(g.hasNext()) {
			var g1 = g.next();
			var alloc = flat.allocData.h[g1.__id__];
			switch(g1.kind._hx_index) {
			case 0:
				var _g = [];
				var _g1 = 0;
				while(_g1 < alloc.length) {
					var a = alloc[_g1];
					++_g1;
					if(a.v != null) {
						_g.push(new hxsl_AllocGlobal(a.pos,this.getPath(a.v),a.v.type));
					}
				}
				var out = _g;
				var _g2 = 0;
				var _g3 = out.length - 1;
				while(_g2 < _g3) {
					var i = _g2++;
					out[i].next = out[i + 1];
				}
				var _g4 = g1.type;
				if(_g4._hx_index == 15) {
					var _g5 = _g4.size;
					var _g6 = _g4.t;
					if(_g6._hx_index == 5) {
						if(_g6.size == 4) {
							if(_g6.t._hx_index == 1) {
								if(_g5._hx_index == 0) {
									var size = _g5.v;
									c.globals = out[0];
									c.globalsSize = size;
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					} else {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			case 2:
				var out1 = [];
				var count = 0;
				var _g7 = 0;
				while(_g7 < alloc.length) {
					var a1 = alloc[_g7];
					++_g7;
					if(a1.v == null) {
						continue;
					}
					var p = params.h[a1.v.id];
					if(p == null) {
						var ap = new hxsl_AllocParam(a1.v.name,a1.pos,-1,-1,a1.v.type);
						ap.perObjectGlobal = new hxsl_AllocGlobal(-1,this.getPath(a1.v),a1.v.type);
						out1.push(ap);
						++count;
						continue;
					}
					var ap1 = new hxsl_AllocParam(a1.v.name,a1.pos,p.instance,p.index,a1.v.type);
					var _g8 = a1.v.type;
					if(_g8._hx_index == 15) {
						var _g9 = _g8.size;
						var t = _g8.t;
						if(hxsl_Tools.isSampler(t)) {
							ap1.pos = -a1.size;
							count += a1.size;
						} else {
							++count;
						}
					} else {
						++count;
					}
					out1.push(ap1);
				}
				var _g10 = 0;
				var _g11 = out1.length - 1;
				while(_g10 < _g11) {
					var i1 = _g10++;
					out1[i1].next = out1[i1 + 1];
				}
				var _g12 = g1.type;
				if(_g12._hx_index == 15) {
					var _g13 = _g12.size;
					var _g14 = _g12.t;
					var t1 = _g14;
					if(hxsl_Tools.isSampler(t1)) {
						textures.push({ t : t1, all : out1});
						c.texturesCount += count;
					} else {
						switch(_g14._hx_index) {
						case 5:
							if(_g14.size == 4) {
								if(_g14.t._hx_index == 1) {
									if(_g13._hx_index == 0) {
										var size1 = _g13.v;
										c.params = out1[0];
										c.paramsSize = size1;
									} else {
										throw haxe_Exception.thrown("assert");
									}
								} else {
									throw haxe_Exception.thrown("assert");
								}
							} else {
								throw haxe_Exception.thrown("assert");
							}
							break;
						case 16:
							var _g15 = _g14.size;
							var _g16 = _g14.t;
							c.buffers = out1[0];
							c.bufferCount = out1.length;
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					throw haxe_Exception.thrown("assert");
				}
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		if(textures.length > 0) {
			textures.sort(function(t1,t2) {
				return t1.t._hx_index - t2.t._hx_index;
			});
			c.textures = textures[0].all[0];
			var _g = 1;
			var _g1 = textures.length;
			while(_g < _g1) {
				var i = _g++;
				var prevAll = textures[i - 1].all;
				var prev = prevAll[prevAll.length - 1];
				prev.next = textures[i].all[0];
			}
		}
		if(c.globals == null) {
			c.globalsSize = 0;
		}
		if(c.params == null) {
			c.paramsSize = 0;
		}
		if(c.buffers == null) {
			c.bufferCount = 0;
		}
		c.data = data;
		return c;
	}
	,__class__: hxsl_Cache
};
var hxsl_Channel = $hxEnums["hxsl.Channel"] = { __ename__ : true, __constructs__ : ["Unknown","R","G","B","A","PackedFloat","PackedNormal"]
	,Unknown: {_hx_index:0,__enum__:"hxsl.Channel",toString:$estr}
	,R: {_hx_index:1,__enum__:"hxsl.Channel",toString:$estr}
	,G: {_hx_index:2,__enum__:"hxsl.Channel",toString:$estr}
	,B: {_hx_index:3,__enum__:"hxsl.Channel",toString:$estr}
	,A: {_hx_index:4,__enum__:"hxsl.Channel",toString:$estr}
	,PackedFloat: {_hx_index:5,__enum__:"hxsl.Channel",toString:$estr}
	,PackedNormal: {_hx_index:6,__enum__:"hxsl.Channel",toString:$estr}
};
hxsl_Channel.__empty_constructs__ = [hxsl_Channel.Unknown,hxsl_Channel.R,hxsl_Channel.G,hxsl_Channel.B,hxsl_Channel.A,hxsl_Channel.PackedFloat,hxsl_Channel.PackedNormal];
var hxsl_Clone = function() {
	this.varMap = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Clone"] = hxsl_Clone;
hxsl_Clone.__name__ = "hxsl.Clone";
hxsl_Clone.shaderData = function(s) {
	return new hxsl_Clone().shader(s);
};
hxsl_Clone.prototype = {
	tvar: function(v) {
		var v2 = this.varMap.h[v.id];
		if(v2 != null) {
			return v2;
		}
		v2 = { id : hxsl_Tools.allocVarId(), type : v.type, name : v.name, kind : v.kind};
		this.varMap.h[v.id] = v2;
		if(v.parent != null) {
			v2.parent = this.tvar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		v2.type = this.ttype(v.type);
		return v2;
	}
	,tfun: function(f) {
		var tmp = this.ttype(f.ret);
		var f1 = f.kind;
		var tmp1 = this.tvar(f.ref);
		var _g = [];
		var _g1 = 0;
		var _g2 = f.args;
		while(_g1 < _g2.length) {
			var a = _g2[_g1];
			++_g1;
			_g.push(this.tvar(a));
		}
		return { ret : tmp, kind : f1, ref : tmp1, args : _g, expr : this.texpr(f.expr)};
	}
	,ttype: function(t) {
		switch(t._hx_index) {
		case 13:
			var vl = t.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.tvar(v));
			}
			return hxsl_Type.TStruct(_g);
		case 14:
			var vars = t.variants;
			return hxsl_Type.TFun(vars);
		case 15:
			var size = t.size;
			var t1 = t.t;
			var tmp = this.ttype(t1);
			var tmp1;
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				tmp1 = size;
				break;
			case 1:
				var v = size.v;
				tmp1 = hxsl_SizeDecl.SVar(this.tvar(v));
				break;
			}
			return hxsl_Type.TArray(tmp,tmp1);
		default:
			return t;
		}
	}
	,texpr: function(e) {
		var e2 = hxsl_Tools.map(e,$bind(this,this.texpr));
		e2.t = this.ttype(e.t);
		var _g = e2.e;
		var tmp;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			tmp = hxsl_TExprDef.TVar(this.tvar(v));
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			tmp = hxsl_TExprDef.TVarDecl(this.tvar(v),init);
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			tmp = hxsl_TExprDef.TFor(this.tvar(v),it,loop);
			break;
		default:
			tmp = e2.e;
		}
		e2.e = tmp;
		return e2;
	}
	,shader: function(s) {
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.tvar(v));
		}
		var tmp = _g;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.tfun(f));
		}
		return { name : s1, vars : tmp, funs : _g};
	}
	,__class__: hxsl_Clone
};
var hxsl__$Dce_VarDeps = function(v) {
	this.v = v;
	this.used = false;
	this.deps = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Dce.VarDeps"] = hxsl__$Dce_VarDeps;
hxsl__$Dce_VarDeps.__name__ = "hxsl._Dce.VarDeps";
hxsl__$Dce_VarDeps.prototype = {
	__class__: hxsl__$Dce_VarDeps
};
var hxsl_Dce = function() {
};
$hxClasses["hxsl.Dce"] = hxsl_Dce;
hxsl_Dce.__name__ = "hxsl.Dce";
hxsl_Dce.prototype = {
	dce: function(vertex,fragment) {
		this.used = new haxe_ds_IntMap();
		this.channelVars = [];
		var inputs = [];
		var _g = 0;
		var _g1 = vertex.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Input) {
				inputs.push(i);
			}
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g = 0;
		var _g1 = fragment.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			var i = this.get(v);
			if(v.kind == hxsl_VarKind.Output) {
				i.keep = true;
			}
		}
		var _g = 0;
		var _g1 = vertex.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.check(f.expr,[],[]);
		}
		var _g = 0;
		var _g1 = fragment.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.check(f.expr,[],[]);
		}
		var outExprs = [];
		while(true) {
			var v = this.used.iterator();
			while(v.hasNext()) {
				var v1 = v.next();
				if(v1.keep) {
					this.markRec(v1);
				}
			}
			while(inputs.length > 1 && !inputs[inputs.length - 1].used) inputs.pop();
			var _g = 0;
			while(_g < inputs.length) {
				var v2 = inputs[_g];
				++_g;
				this.markRec(v2);
			}
			outExprs = [];
			var _g1 = 0;
			var _g2 = vertex.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				outExprs.push(this.mapExpr(f.expr,false));
			}
			var _g3 = 0;
			var _g4 = fragment.funs;
			while(_g3 < _g4.length) {
				var f1 = _g4[_g3];
				++_g3;
				outExprs.push(this.mapExpr(f1.expr,false));
			}
			this.markAsKeep = false;
			var _g5 = 0;
			while(_g5 < outExprs.length) {
				var e = outExprs[_g5];
				++_g5;
				this.checkBranches(e);
			}
			if(!this.markAsKeep) {
				break;
			}
		}
		var _g = 0;
		var _g1 = vertex.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.expr = outExprs.shift();
		}
		var _g = 0;
		var _g1 = fragment.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			f.expr = outExprs.shift();
		}
		var v = this.used.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(v1.used) {
				continue;
			}
			if(v1.v.kind == hxsl_VarKind.Input) {
				continue;
			}
			HxOverrides.remove(vertex.vars,v1.v);
			HxOverrides.remove(fragment.vars,v1.v);
		}
		return { fragment : fragment, vertex : vertex};
	}
	,get: function(v) {
		var vd = this.used.h[v.id];
		if(vd == null) {
			vd = new hxsl__$Dce_VarDeps(v);
			this.used.h[v.id] = vd;
		}
		return vd;
	}
	,markRec: function(v) {
		if(v.used) {
			return;
		}
		v.used = true;
		var d = v.deps.iterator();
		while(d.hasNext()) {
			var d1 = d.next();
			this.markRec(d1);
		}
	}
	,link: function(v,writeTo) {
		var vd = this.get(v);
		var _g = 0;
		while(_g < writeTo.length) {
			var w = writeTo[_g];
			++_g;
			if(w == null) {
				if(!vd.keep) {
					vd.keep = true;
					this.markAsKeep = true;
				}
				continue;
			}
			w.deps.h[v.id] = vd;
		}
	}
	,check: function(e,writeTo,isAffected) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			this.link(v,writeTo);
			break;
		case 4:
			var el = _g.el;
			var noWrite = [];
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				this.check(el[i],i < el.length - 1 ? noWrite : writeTo,isAffected);
			}
			break;
		case 5:
			var _g1 = _g.e2;
			var _g2 = _g.e1;
			var _g3 = _g.op;
			switch(_g3._hx_index) {
			case 4:
				var _g4 = _g2.t;
				var _g4 = _g2.p;
				var _g4 = _g2.e;
				switch(_g4._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g4.v;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _g5 = _g4.regs;
					var _g5 = _g4.e;
					var _g4 = _g5.t;
					var _g4 = _g5.p;
					var _g4 = _g5.e;
					if(_g4._hx_index == 1) {
						var e1 = _g1;
						var v = _g4.v;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g4 = $bind(this,this.check);
						var writeTo1 = writeTo;
						var isAffected1 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g4(e,writeTo1,isAffected1);
						});
					}
					break;
				default:
					var _g5 = $bind(this,this.check);
					var writeTo2 = writeTo;
					var isAffected2 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g5(e,writeTo2,isAffected2);
					});
				}
				break;
			case 20:
				var _g6 = _g3.op;
				var _g3 = _g2.t;
				var _g3 = _g2.p;
				var _g3 = _g2.e;
				switch(_g3._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g3.v;
					var v1 = this.get(v);
					writeTo.push(v1);
					this.check(e1,writeTo,isAffected);
					writeTo.pop();
					if(isAffected.indexOf(v1) < 0) {
						isAffected.push(v1);
					}
					break;
				case 9:
					var _g2 = _g3.regs;
					var _g2 = _g3.e;
					var _g3 = _g2.t;
					var _g3 = _g2.p;
					var _g3 = _g2.e;
					if(_g3._hx_index == 1) {
						var e1 = _g1;
						var v = _g3.v;
						var v1 = this.get(v);
						writeTo.push(v1);
						this.check(e1,writeTo,isAffected);
						writeTo.pop();
						if(isAffected.indexOf(v1) < 0) {
							isAffected.push(v1);
						}
					} else {
						var _g1 = $bind(this,this.check);
						var writeTo3 = writeTo;
						var isAffected3 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g1(e,writeTo3,isAffected3);
						});
					}
					break;
				default:
					var _g2 = $bind(this,this.check);
					var writeTo4 = writeTo;
					var isAffected4 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g2(e,writeTo4,isAffected4);
					});
				}
				break;
			default:
				var _g3 = $bind(this,this.check);
				var writeTo5 = writeTo;
				var isAffected5 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g3(e,writeTo5,isAffected5);
				});
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			if(init != null) {
				writeTo.push(this.get(v));
				this.check(init,writeTo,isAffected);
				writeTo.pop();
			} else {
				var _g6 = $bind(this,this.check);
				var writeTo6 = writeTo;
				var isAffected6 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g6(e,writeTo6,isAffected6);
				});
			}
			break;
		case 8:
			var _g7 = _g.args;
			var _g8 = _g.e;
			var _g9 = _g8.t;
			var _g9 = _g8.p;
			var _g9 = _g8.e;
			if(_g9._hx_index == 2) {
				switch(_g9.g._hx_index) {
				case 63:
					if(_g7.length == 3) {
						var _g8 = _g7[2];
						var _g9 = _g7[0];
						var _g10 = _g9.t;
						var _g10 = _g9.p;
						var _g10 = _g9.e;
						if(_g10._hx_index == 1) {
							var _g9 = _g8.t;
							var _g9 = _g8.p;
							var _g9 = _g8.e;
							if(_g9._hx_index == 0) {
								var _g8 = _g9.c;
								if(_g8._hx_index == 2) {
									var c = _g10.v;
									var uv = _g7[1];
									var cid = _g8.v;
									this.check(uv,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g8 = $bind(this,this.check);
									var writeTo7 = writeTo;
									var isAffected7 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g8(e,writeTo7,isAffected7);
									});
								}
							} else {
								var _g9 = $bind(this,this.check);
								var writeTo8 = writeTo;
								var isAffected8 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g9(e,writeTo8,isAffected8);
								});
							}
						} else {
							var _g10 = $bind(this,this.check);
							var writeTo9 = writeTo;
							var isAffected9 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g10(e,writeTo9,isAffected9);
							});
						}
					} else {
						var _g11 = $bind(this,this.check);
						var writeTo10 = writeTo;
						var isAffected10 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g11(e,writeTo10,isAffected10);
						});
					}
					break;
				case 64:
					if(_g7.length == 4) {
						var _g12 = _g7[3];
						var _g13 = _g7[0];
						var _g14 = _g13.t;
						var _g14 = _g13.p;
						var _g14 = _g13.e;
						if(_g14._hx_index == 1) {
							var _g13 = _g12.t;
							var _g13 = _g12.p;
							var _g13 = _g12.e;
							if(_g13._hx_index == 0) {
								var _g12 = _g13.c;
								if(_g12._hx_index == 2) {
									var c = _g14.v;
									var uv = _g7[1];
									var lod = _g7[2];
									var cid = _g12.v;
									this.check(uv,writeTo,isAffected);
									this.check(lod,writeTo,isAffected);
									if(this.channelVars[cid] == null) {
										this.channelVars[cid] = c;
										this.link(c,writeTo);
									} else {
										this.link(this.channelVars[cid],writeTo);
									}
								} else {
									var _g7 = $bind(this,this.check);
									var writeTo11 = writeTo;
									var isAffected11 = isAffected;
									hxsl_Tools.iter(e,function(e) {
										_g7(e,writeTo11,isAffected11);
									});
								}
							} else {
								var _g12 = $bind(this,this.check);
								var writeTo12 = writeTo;
								var isAffected12 = isAffected;
								hxsl_Tools.iter(e,function(e) {
									_g12(e,writeTo12,isAffected12);
								});
							}
						} else {
							var _g13 = $bind(this,this.check);
							var writeTo13 = writeTo;
							var isAffected13 = isAffected;
							hxsl_Tools.iter(e,function(e) {
								_g13(e,writeTo13,isAffected13);
							});
						}
					} else {
						var _g14 = $bind(this,this.check);
						var writeTo14 = writeTo;
						var isAffected14 = isAffected;
						hxsl_Tools.iter(e,function(e) {
							_g14(e,writeTo14,isAffected14);
						});
					}
					break;
				default:
					var _g15 = $bind(this,this.check);
					var writeTo15 = writeTo;
					var isAffected15 = isAffected;
					hxsl_Tools.iter(e,function(e) {
						_g15(e,writeTo15,isAffected15);
					});
				}
			} else {
				var _g16 = $bind(this,this.check);
				var writeTo16 = writeTo;
				var isAffected16 = isAffected;
				hxsl_Tools.iter(e,function(e) {
					_g16(e,writeTo16,isAffected16);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var e1 = _g.econd;
			var affect = [];
			this.check(eif,writeTo,affect);
			if(eelse != null) {
				this.check(eelse,writeTo,affect);
			}
			var len = affect.length;
			var _g17 = 0;
			while(_g17 < writeTo.length) {
				var v = writeTo[_g17];
				++_g17;
				if(affect.indexOf(v) < 0) {
					affect.push(v);
				}
			}
			this.check(e1,affect,isAffected);
			var _g17 = 0;
			var _g18 = len;
			while(_g17 < _g18) {
				var i = _g17++;
				var v = affect[i];
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			var affect = [];
			this.check(loop,writeTo,affect);
			this.check(it,affect,isAffected);
			var _g = 0;
			while(_g < affect.length) {
				var v = affect[_g];
				++_g;
				if(isAffected.indexOf(v) < 0) {
					isAffected.push(v);
				}
			}
			break;
		default:
			var _g = $bind(this,this.check);
			var writeTo17 = writeTo;
			var isAffected17 = isAffected;
			hxsl_Tools.iter(e,function(e) {
				_g(e,writeTo17,isAffected17);
			});
		}
	}
	,checkBranches: function(e) {
		var _g = e.e;
		if(_g._hx_index == 10) {
			var _g1 = _g.eelse;
			var _g1 = _g.eif;
			var cond = _g.econd;
			var writeTo = [null];
			this.check(cond,writeTo,[]);
		}
		hxsl_Tools.iter(e,$bind(this,this.checkBranches));
	}
	,mapExpr: function(e,isVar) {
		var _gthis = this;
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var out = [];
			var count = 0;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				var isVar1 = isVar && count == el.length - 1;
				var e2 = this.mapExpr(e1,isVar1);
				if(hxsl_Tools.hasSideEffect(e2) || isVar1) {
					out.push(e2);
				}
				++count;
			}
			return { e : hxsl_TExprDef.TBlock(out), p : e.p, t : e.t};
		case 5:
			var _g1 = _g.e2;
			var _g1 = _g.e1;
			var _g2 = _g.op;
			switch(_g2._hx_index) {
			case 4:
				var _g3 = _g1.t;
				var _g3 = _g1.p;
				var _g3 = _g1.e;
				switch(_g3._hx_index) {
				case 1:
					var v = _g3.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g4 = _g3.regs;
					var _g4 = _g3.e;
					var _g3 = _g4.t;
					var _g3 = _g4.p;
					var _g3 = _g4.e;
					if(_g3._hx_index == 1) {
						var v = _g3.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			case 20:
				var _g3 = _g2.op;
				var _g2 = _g1.t;
				var _g2 = _g1.p;
				var _g2 = _g1.e;
				switch(_g2._hx_index) {
				case 1:
					var v = _g2.v;
					if(!this.get(v).used) {
						return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 9:
					var _g1 = _g2.regs;
					var _g1 = _g2.e;
					var _g2 = _g1.t;
					var _g2 = _g1.p;
					var _g2 = _g1.e;
					if(_g2._hx_index == 1) {
						var v = _g2.v;
						if(!this.get(v).used) {
							return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
				break;
			default:
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			if(!this.get(v).used) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				switch(_g3.g._hx_index) {
				case 63:
					if(_g1.length == 3) {
						var _g2 = _g1[2];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var uv = _g1[1];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texture), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 64:
					if(_g1.length == 4) {
						var _g2 = _g1[3];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var uv = _g1[1];
								var lod = _g1[2];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureLod), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(uv,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
					} else {
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 65:
					switch(_g1.length) {
					case 3:
						var _g2 = _g1[2];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var pos = _g1[1];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 4:
						var _g2 = _g1[3];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var pos = _g1[1];
								var lod = _g1[2];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Texel), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(pos,true),this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				case 66:
					switch(_g1.length) {
					case 2:
						var _g2 = _g1[1];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p}]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					case 3:
						var _g2 = _g1[2];
						var _g3 = _g1[0];
						var _g3 = _g2.t;
						var _g3 = _g2.p;
						var _g3 = _g2.e;
						if(_g3._hx_index == 0) {
							var _g2 = _g3.c;
							if(_g2._hx_index == 2) {
								var lod = _g1[1];
								var cid = _g2.v;
								var c = this.channelVars[cid];
								return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.TextureSize), p : e.p, t : hxsl_Type.TVoid},[{ e : hxsl_TExprDef.TVar(c), t : c.type, p : e.p},this.mapExpr(lod,true)]), t : hxsl_Type.TVoid, p : e.p};
							} else {
								return hxsl_Tools.map(e,function(e) {
									return _gthis.mapExpr(e,true);
								});
							}
						} else {
							return hxsl_Tools.map(e,function(e) {
								return _gthis.mapExpr(e,true);
							});
						}
						break;
					default:
						return hxsl_Tools.map(e,function(e) {
							return _gthis.mapExpr(e,true);
						});
					}
					break;
				default:
					return hxsl_Tools.map(e,function(e) {
						return _gthis.mapExpr(e,true);
					});
				}
			} else {
				return hxsl_Tools.map(e,function(e) {
					return _gthis.mapExpr(e,true);
				});
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var econd = _g.eif;
			var e1 = _g.econd;
			var e2 = this.mapExpr(e1,true);
			var econd1 = this.mapExpr(econd,isVar);
			var eelse1 = eelse == null ? null : this.mapExpr(eelse,isVar);
			if(!isVar && !hxsl_Tools.hasSideEffect(econd1) && (eelse1 == null || !hxsl_Tools.hasSideEffect(eelse1))) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e2.t, p : e2.p};
			}
			return { e : hxsl_TExprDef.TIf(e2,econd1,eelse1), p : e2.p, t : e2.t};
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			var it1 = this.mapExpr(it,true);
			var loop1 = this.mapExpr(loop,false);
			if(!hxsl_Tools.hasSideEffect(loop1)) {
				return { e : hxsl_TExprDef.TConst(hxsl_Const.CNull), t : e.t, p : e.p};
			}
			return { e : hxsl_TExprDef.TFor(v,it1,loop1), p : e.p, t : e.t};
		default:
			return hxsl_Tools.map(e,function(e) {
				return _gthis.mapExpr(e,true);
			});
		}
	}
	,__class__: hxsl_Dce
};
var hxsl_Eval = function() {
	this.varMap = new haxe_ds_ObjectMap();
	this.funMap = new haxe_ds_ObjectMap();
	this.constants = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Eval"] = hxsl_Eval;
hxsl_Eval.__name__ = "hxsl.Eval";
hxsl_Eval.prototype = {
	setConstant: function(v,c) {
		this.constants.h[v.id] = hxsl_TExprDef.TConst(c);
	}
	,mapVar: function(v) {
		var v2 = this.varMap.h[v.__id__];
		if(v2 != null) {
			if(v == v2) {
				return v2;
			} else {
				return this.mapVar(v2);
			}
		}
		if(v.parent != null) {
			this.mapVar(v.parent);
			v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				if(v == v2) {
					return v2;
				} else {
					return this.mapVar(v2);
				}
			}
		}
		var _g = v.type;
		var v21;
		if(_g._hx_index == 17) {
			var _g1 = _g.size;
			v21 = true;
		} else {
			v21 = false;
		}
		v2 = { id : v21 ? v.id : hxsl_Tools.allocVarId(), name : v.name, type : v.type, kind : v.kind};
		if(v.parent != null) {
			v2.parent = this.mapVar(v.parent);
		}
		if(v.qualifiers != null) {
			v2.qualifiers = v.qualifiers.slice();
		}
		this.varMap.set(v,v2);
		this.varMap.set(v2,v2);
		var _g = v2.type;
		switch(_g._hx_index) {
		case 13:
			var vl = _g.vl;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < vl.length) {
				var v = vl[_g2];
				++_g2;
				_g1.push(this.mapVar(v));
			}
			v2.type = hxsl_Type.TStruct(_g1);
			break;
		case 15:
			var _g1 = _g.size;
			if(_g1._hx_index == 1) {
				var t = _g.t;
				var vs = _g1.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g1 = c.c;
						if(_g1._hx_index == 2) {
							var v = _g1.v;
							var _g1 = v2.type;
							var tmp;
							if(_g1._hx_index == 15) {
								var _g2 = _g1.size;
								var _g2 = _g1.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g1 = v2.type;
					var tmp;
					if(_g1._hx_index == 15) {
						var _g2 = _g1.size;
						var _g2 = _g1.t;
						tmp = true;
					} else {
						tmp = false;
					}
					v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		case 16:
			var _g1 = _g.size;
			if(_g1._hx_index == 1) {
				var t = _g.t;
				var vs = _g1.v;
				var c = this.constants.h[vs.id];
				if(c != null) {
					if(c == null) {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					} else if(c._hx_index == 0) {
						var _g = c.c;
						if(_g._hx_index == 2) {
							var v = _g.v;
							var _g = v2.type;
							var tmp;
							if(_g._hx_index == 15) {
								var _g1 = _g.size;
								var _g1 = _g.t;
								tmp = true;
							} else {
								tmp = false;
							}
							v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(v)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SConst(v));
						} else {
							hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
						}
					} else {
						hxsl_Error.t("Integer value expected for array size constant " + vs.name,null);
					}
				} else {
					var vs2 = this.mapVar(vs);
					var _g = v2.type;
					var tmp;
					if(_g._hx_index == 15) {
						var _g1 = _g.size;
						var _g1 = _g.t;
						tmp = true;
					} else {
						tmp = false;
					}
					v2.type = tmp ? hxsl_Type.TArray(t,hxsl_SizeDecl.SVar(vs2)) : hxsl_Type.TBuffer(t,hxsl_SizeDecl.SVar(vs2));
				}
			}
			break;
		default:
		}
		return v2;
	}
	,'eval': function(s) {
		var funs = [];
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var f1 = f.kind;
			var f2 = this.mapVar(f.ref);
			var _g2 = [];
			var _g3 = 0;
			var _g4 = f.args;
			while(_g3 < _g4.length) {
				var a = _g4[_g3];
				++_g3;
				_g2.push(this.mapVar(a));
			}
			var f21 = { kind : f1, ref : f2, args : _g2, ret : f.ret, expr : f.expr};
			if(!this.inlineCalls || f.kind != hxsl_FunctionKind.Helper) {
				funs.push(f21);
			}
			this.funMap.set(f21.ref,f);
		}
		var _g = 0;
		var _g1 = funs.length;
		while(_g < _g1) {
			var i = _g++;
			this.curFun = funs[i];
			this.curFun.expr = this.evalExpr(this.curFun.expr,false);
		}
		var s1 = s.name;
		var _g = [];
		var _g1 = 0;
		var _g2 = s.vars;
		while(_g1 < _g2.length) {
			var v = _g2[_g1];
			++_g1;
			_g.push(this.mapVar(v));
		}
		return { name : s1, vars : _g, funs : funs};
	}
	,hasReturn: function(e) {
		this.markReturn = false;
		this.hasReturnLoop(e);
		return this.markReturn;
	}
	,hasReturnLoop: function(e) {
		var _g = e.e;
		if(_g._hx_index == 12) {
			var _g1 = _g.e;
			this.markReturn = true;
		} else if(!this.markReturn) {
			hxsl_Tools.iter(e,$bind(this,this.hasReturnLoop));
		}
	}
	,handleReturn: function(e,isFinal) {
		if(isFinal == null) {
			isFinal = false;
		}
		var _g = e.e;
		switch(_g._hx_index) {
		case 3:
			var v = _g.e;
			var v1 = this.handleReturn(v,isFinal);
			return { e : hxsl_TExprDef.TParenthesis(v1), t : v1.t, p : e.p};
		case 4:
			var el = _g.el;
			var i = 0;
			var last = el.length;
			var out = [];
			_hx_loop1: while(i < last) {
				var e1 = el[i++];
				if(i == last) {
					out.push(this.handleReturn(e1,isFinal));
				} else {
					var _g1 = e1.e;
					switch(_g1._hx_index) {
					case 10:
						if(_g1.eelse == null) {
							var econd = _g1.econd;
							var eif = _g1.eif;
							if(isFinal && this.hasReturn(eif)) {
								out.push(this.handleReturn({ e : hxsl_TExprDef.TIf(econd,eif,{ e : hxsl_TExprDef.TBlock(el.slice(i)), t : e1.t, p : e1.p}), t : e1.t, p : e1.p}));
								break _hx_loop1;
							} else {
								out.push(this.handleReturn(e1));
							}
						} else {
							out.push(this.handleReturn(e1));
						}
						break;
					case 12:
						var e2 = _g1.e;
						out.push(this.handleReturn(e2,isFinal));
						break _hx_loop1;
					default:
						out.push(this.handleReturn(e1));
					}
				}
			}
			var t = isFinal ? out[out.length - 1].t : e.t;
			return { e : hxsl_TExprDef.TBlock(out), t : t, p : e.p};
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			if(eelse != null && isFinal) {
				var cond1 = this.handleReturn(cond);
				var eif1 = this.handleReturn(eif,isFinal);
				return { e : hxsl_TExprDef.TIf(cond1,eif1,this.handleReturn(eelse,isFinal)), t : eif1.t, p : e.p};
			} else {
				return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
			}
			break;
		case 12:
			var v = _g.e;
			if(!isFinal) {
				hxsl_Error.t("Cannot inline not final return",e.p);
			}
			if(v == null) {
				return { e : hxsl_TExprDef.TBlock([]), t : hxsl_Type.TVoid, p : e.p};
			}
			return this.handleReturn(v,true);
		default:
			return hxsl_Tools.map(e,$bind(this,this.handleReturnDef));
		}
	}
	,handleReturnDef: function(e) {
		return this.handleReturn(e);
	}
	,evalCall: function(g,args,oldArgs,pos) {
		switch(g._hx_index) {
		case 38:
			if(args.length == 1) {
				var _g = args[0];
				var _g1 = _g.t;
				var _g1 = _g.p;
				var _g1 = _g.e;
				if(_g1._hx_index == 0) {
					var _g = _g1.c;
					if(_g._hx_index == 2) {
						var i = _g.v;
						return hxsl_TExprDef.TConst(hxsl_Const.CFloat(i));
					} else {
						return null;
					}
				} else {
					return null;
				}
			} else {
				return null;
			}
			break;
		case 63:case 64:
			var i;
			var _g = args[0].e;
			if(_g._hx_index == 0) {
				var _g1 = _g.c;
				if(_g1._hx_index == 2) {
					var i1 = _g1.v;
					i = i1;
				} else {
					hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
					throw haxe_Exception.thrown("assert");
				}
			} else {
				hxsl_Error.t("Cannot eval complex channel " + hxsl_Printer.toString(args[0],true) + " " + this.constantsToString(),pos);
				throw haxe_Exception.thrown("assert");
			}
			var channel = oldArgs[0];
			var _g = channel.e;
			var channel1;
			if(_g._hx_index == 1) {
				var v = _g.v;
				channel1 = hxsl_TExprDef.TVar(this.mapVar(v));
			} else {
				throw haxe_Exception.thrown("assert");
			}
			channel = { e : channel1, t : channel.t, p : channel.p};
			var count;
			var _g = channel.t;
			if(_g._hx_index == 17) {
				var i1 = _g.size;
				count = i1;
			} else {
				throw haxe_Exception.thrown("assert");
			}
			var channelMode = Type.createEnumIndex(hxsl_Channel,i & 7,null);
			var targs = [channel];
			var _g = 1;
			var _g1 = args.length;
			while(_g < _g1) {
				var i1 = _g++;
				targs.push(args[i1]);
			}
			targs.push({ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(i >> 3)), t : hxsl_Type.TInt, p : pos});
			var tget = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(g), t : hxsl_Type.TVoid, p : pos},targs), t : hxsl_Type.TVoid, p : pos};
			switch(channelMode._hx_index) {
			case 0:
				var zero = { e : hxsl_TExprDef.TConst(hxsl_Const.CFloat(0.)), t : hxsl_Type.TFloat, p : pos};
				if(count == 1) {
					return zero.e;
				}
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.Vec2,hxsl_TGlobal.Vec3,hxsl_TGlobal.Vec4][count - 2]), t : hxsl_Type.TVoid, p : pos},[zero]);
			case 1:case 2:case 3:case 4:
				var tmp;
				switch(count) {
				case 1:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X];
						break;
					case 2:
						tmp = [hxsl_Component.Y];
						break;
					case 3:
						tmp = [hxsl_Component.Z];
						break;
					case 4:
						tmp = [hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 2:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 3:
						tmp = [hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				case 3:
					switch(channelMode._hx_index) {
					case 1:
						tmp = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z];
						break;
					case 2:
						tmp = [hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
						break;
					default:
						throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
					}
					break;
				default:
					throw haxe_Exception.thrown("Invalid channel value " + Std.string(channelMode) + " for " + count + " channels");
				}
				return hxsl_TExprDef.TSwiz(tget,tmp);
			case 5:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Unpack), t : hxsl_Type.TVoid, p : pos},[tget]);
			case 6:
				return hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.UnpackNormal), t : hxsl_Type.TVoid, p : pos},[tget]);
			}
			break;
		case 67:
			var args1 = args;
			var _g = 0;
			while(_g < args1.length) {
				var a = args1[_g];
				++_g;
				haxe_Log.trace(hxsl_Printer.toString(a),{ fileName : a.p.file, lineNumber : 0, className : null, methodName : null});
			}
			return hxsl_TExprDef.TBlock([]);
		default:
			return null;
		}
	}
	,constantsToString: function() {
		var _g = [];
		var c = this.constants.keys();
		while(c.hasNext()) {
			var c1 = c.next();
			_g.push(c1 + " => " + hxsl_Printer.toString({ e : this.constants.h[c1], t : hxsl_Type.TVoid, p : null},true));
		}
		return _g.toString();
	}
	,ifBlock: function(e) {
		var tmp;
		if(e != null) {
			var _g = e.e;
			var tmp1;
			if(_g._hx_index == 10) {
				var _g1 = _g.eelse;
				var _g1 = _g.eif;
				var _g1 = _g.econd;
				tmp1 = true;
			} else {
				tmp1 = false;
			}
			tmp = !tmp1;
		} else {
			tmp = true;
		}
		if(tmp) {
			return e;
		}
		return { e : hxsl_TExprDef.TBlock([e]), t : e.t, p : e.p};
	}
	,evalExpr: function(e,isVal) {
		if(isVal == null) {
			isVal = true;
		}
		var _gthis = this;
		var d;
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var _g1 = _g.c;
			d = e.e;
			break;
		case 1:
			var v = _g.v;
			var c = this.constants.h[v.id];
			if(c != null) {
				d = c;
			} else {
				var v2 = this.mapVar(v);
				d = hxsl_TExprDef.TVar(v2);
			}
			break;
		case 2:
			var _g1 = _g.g;
			d = e.e;
			break;
		case 3:
			var e1 = _g.e;
			var e2 = this.evalExpr(e1,isVal);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				d = e2.e;
			} else {
				d = hxsl_TExprDef.TParenthesis(e2);
			}
			break;
		case 4:
			var el = _g.el;
			var out = [];
			var last = el.length - 1;
			var _g1 = 0;
			var _g2 = el.length;
			while(_g1 < _g2) {
				var i = _g1++;
				var isVal1 = isVal && i == last;
				var e1 = this.evalExpr(el[i],isVal1);
				var _g3 = e1.e;
				switch(_g3._hx_index) {
				case 0:
					var _g4 = _g3.c;
					if(isVal1) {
						out.push(e1);
					}
					break;
				case 1:
					var _g5 = _g3.v;
					if(isVal1) {
						out.push(e1);
					}
					break;
				default:
					out.push(e1);
				}
			}
			d = out.length == 1 && this.curFun.kind != hxsl_FunctionKind.Init ? out[0].e : hxsl_TExprDef.TBlock(out);
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			switch(op._hx_index) {
			case 0:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a + b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a + b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 1:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a * b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a * b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 2:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a / b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a / b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 3:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a - b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a - b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 4:case 21:
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 5:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) == 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 6:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) != 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 7:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) > 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 8:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(true));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) >= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 9:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(false)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) < 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 10:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 0:
						d = _g1._hx_index == 0 ? _g1.c._hx_index == 0 ? hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TConst(hxsl_Const.CBool(true)) : hxsl_TExprDef.TBinop(op,e11,e21);
						break;
					case 1:
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 1:
								var a = _g2;
								var b = _g4.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a == b ? 0 : 1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 2:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 2:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a - b <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g4 = _g1.c;
							switch(_g4._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 3:
								var a = _g2;
								var b = _g4.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 4:
						var _g2 = _g3.v;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							switch(_g3._hx_index) {
							case 0:
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(false));
								break;
							case 4:
								var a = _g2;
								var b = _g3.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool((a > b ? 1 : a == b ? 0 : -1) <= 0));
								break;
							default:
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 11:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a & b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 12:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a | b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 13:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a ^ b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 14:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 1) {
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							if(_g3._hx_index == 1) {
								var a = _g2;
								var b = _g3.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a && b));
							} else {
								var a = _g2;
								d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g2;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g1._hx_index == 0) {
						var _g2 = _g1.c;
						if(_g2._hx_index == 1) {
							var a = _g2.b;
							d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g1._hx_index == 0) {
					var _g2 = _g1.c;
					if(_g2._hx_index == 1) {
						var a = _g2.b;
						d = a == false ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 15:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 1) {
						var _g2 = _g3.b;
						if(_g1._hx_index == 0) {
							var _g3 = _g1.c;
							if(_g3._hx_index == 1) {
								var a = _g2;
								var b = _g3.b;
								d = hxsl_TExprDef.TConst(hxsl_Const.CBool(a || b));
							} else {
								var a = _g2;
								d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
							}
						} else {
							var a = _g2;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e21.e;
						}
					} else if(_g1._hx_index == 0) {
						var _g2 = _g1.c;
						if(_g2._hx_index == 1) {
							var a = _g2.b;
							d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else if(_g1._hx_index == 0) {
					var _g2 = _g1.c;
					if(_g2._hx_index == 1) {
						var a = _g2.b;
						d = a == true ? hxsl_TExprDef.TConst(hxsl_Const.CBool(a)) : e11.e;
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 16:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a << b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 17:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 18:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					if(_g3._hx_index == 2) {
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a >>> b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
					} else {
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 19:
				var _g1 = e21.e;
				var _g2 = e11.e;
				if(_g2._hx_index == 0) {
					var _g3 = _g2.c;
					switch(_g3._hx_index) {
					case 2:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 2) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CInt(a % b | 0));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					case 3:
						if(_g1._hx_index == 0) {
							var _g2 = _g1.c;
							if(_g2._hx_index == 3) {
								var a = _g3.v;
								var b = _g2.v;
								d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(a % b));
							} else {
								d = hxsl_TExprDef.TBinop(op,e11,e21);
							}
						} else {
							d = hxsl_TExprDef.TBinop(op,e11,e21);
						}
						break;
					default:
						d = hxsl_TExprDef.TBinop(op,e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TBinop(op,e11,e21);
				}
				break;
			case 20:
				var _g1 = op.op;
				d = hxsl_TExprDef.TBinop(op,e11,e21);
				break;
			case 22:
				throw haxe_Exception.thrown("assert");
			case 23:
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 6:
			var e1 = _g.e1;
			var op = _g.op;
			var e2 = this.evalExpr(e1);
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				switch(op._hx_index) {
				case 2:
					if(c._hx_index == 1) {
						var b = c.b;
						d = hxsl_TExprDef.TConst(hxsl_Const.CBool(!b));
					} else {
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				case 3:
					switch(c._hx_index) {
					case 2:
						var i = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CInt(-i));
						break;
					case 3:
						var f = c.v;
						d = hxsl_TExprDef.TConst(hxsl_Const.CFloat(-f));
						break;
					default:
						d = hxsl_TExprDef.TUnop(op,e2);
					}
					break;
				default:
					d = hxsl_TExprDef.TUnop(op,e2);
				}
			} else {
				d = hxsl_TExprDef.TUnop(op,e2);
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			d = hxsl_TExprDef.TVarDecl(this.mapVar(v),init == null ? null : this.evalExpr(init));
			break;
		case 8:
			var eargs = _g.args;
			var c = _g.e;
			var c1 = this.evalExpr(c);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < eargs.length) {
				var a = eargs[_g2];
				++_g2;
				_g1.push(this.evalExpr(a));
			}
			var args = _g1;
			var _g1 = c1.e;
			switch(_g1._hx_index) {
			case 1:
				if(!this.inlineCalls) {
					d = hxsl_TExprDef.TCall(c1,args);
				} else {
					var v = _g1.v;
					if(this.funMap.h.__keys__[v.__id__] != null) {
						var f = this.funMap.h[v.__id__];
						var outExprs = [];
						var undo = [];
						var _g2 = 0;
						var _g3 = f.args.length;
						while(_g2 < _g3) {
							var i = _g2++;
							var v = [f.args[i]];
							var e1 = args[i];
							var _g4 = e1.e;
							switch(_g4._hx_index) {
							case 0:
								var _g5 = _g4.c;
								var old = [this.constants.h[v[0].id]];
								undo.push((function(old,v) {
									return function() {
										if(old[0] == null) {
											_gthis.constants.remove(v[0].id);
										} else {
											_gthis.constants.h[v[0].id] = old[0];
										}
									};
								})(old,v));
								this.constants.h[v[0].id] = e1.e;
								break;
							case 1:
								var _g6 = _g4.v;
								var _g7 = _g6.type;
								var _g8 = _g6.qualifiers;
								var _g9 = _g6.parent;
								var _g10 = _g6.name;
								var _g11 = _g6.id;
								switch(_g6.kind._hx_index) {
								case 0:case 1:case 2:
									var old1 = [this.constants.h[v[0].id]];
									undo.push((function(old,v) {
										return function() {
											if(old[0] == null) {
												_gthis.constants.remove(v[0].id);
											} else {
												_gthis.constants.h[v[0].id] = old[0];
											}
										};
									})(old1,v));
									this.constants.h[v[0].id] = e1.e;
									break;
								default:
									var old2 = [this.varMap.h[v[0].__id__]];
									if(old2[0] == null) {
										undo.push((function(v) {
											return function() {
												_gthis.varMap.remove(v[0]);
											};
										})(v));
									} else {
										this.varMap.remove(v[0]);
										undo.push((function(old,v) {
											return function() {
												_gthis.varMap.set(v[0],old[0]);
											};
										})(old2,v));
									}
									var v2 = this.mapVar(v[0]);
									outExprs.push({ e : hxsl_TExprDef.TVarDecl(v2,e1), t : hxsl_Type.TVoid, p : e1.p});
								}
								break;
							default:
								var old3 = [this.varMap.h[v[0].__id__]];
								if(old3[0] == null) {
									undo.push((function(v) {
										return function() {
											_gthis.varMap.remove(v[0]);
										};
									})(v));
								} else {
									this.varMap.remove(v[0]);
									undo.push((function(old,v) {
										return function() {
											_gthis.varMap.set(v[0],old[0]);
										};
									})(old3,v));
								}
								var v21 = this.mapVar(v[0]);
								outExprs.push({ e : hxsl_TExprDef.TVarDecl(v21,e1), t : hxsl_Type.TVoid, p : e1.p});
							}
						}
						var e1 = this.handleReturn(this.evalExpr(f.expr,false),true);
						var _g2 = 0;
						while(_g2 < undo.length) {
							var u = undo[_g2];
							++_g2;
							u();
						}
						var _g2 = e1.e;
						if(_g2._hx_index == 4) {
							var el = _g2.el;
							var _g2 = 0;
							while(_g2 < el.length) {
								var e2 = el[_g2];
								++_g2;
								outExprs.push(e2);
							}
						} else {
							outExprs.push(e1);
						}
						d = hxsl_TExprDef.TBlock(outExprs);
					} else {
						d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
					}
				}
				break;
			case 2:
				var g = _g1.g;
				var v1 = this.evalCall(g,args,eargs,e.p);
				d = v1 != null ? v1 : hxsl_TExprDef.TCall(c1,args);
				break;
			default:
				d = hxsl_Error.t("Cannot eval non-static call expresssion '" + new hxsl_Printer().exprString(c1) + "'",c1.p);
			}
			break;
		case 9:
			var r = _g.regs;
			var e1 = _g.e;
			d = hxsl_TExprDef.TSwiz(this.evalExpr(e1),r.slice());
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			var econd1 = this.evalExpr(econd);
			var _g1 = econd1.e;
			if(_g1._hx_index == 0) {
				var _g2 = _g1.c;
				if(_g2._hx_index == 1) {
					var b = _g2.b;
					d = b ? this.evalExpr(eif,isVal).e : eelse == null ? hxsl_TExprDef.TConst(hxsl_Const.CNull) : this.evalExpr(eelse,isVal).e;
				} else if(isVal && eelse != null && this.eliminateConditionals) {
					d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
				} else {
					eif = this.evalExpr(eif,isVal);
					if(eelse != null) {
						eelse = this.evalExpr(eelse,isVal);
						var _g1 = eelse.e;
						if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
							eelse = null;
						}
					}
					eif = this.ifBlock(eif);
					eelse = this.ifBlock(eelse);
					d = hxsl_TExprDef.TIf(econd1,eif,eelse);
				}
			} else if(isVal && eelse != null && this.eliminateConditionals) {
				d = hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mix), t : e.t, p : e.p},[this.evalExpr(eelse,true),this.evalExpr(eif,true),{ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToFloat), t : hxsl_Type.TFun([]), p : econd1.p},[econd1]), t : hxsl_Type.TFloat, p : e.p}]);
			} else {
				eif = this.evalExpr(eif,isVal);
				if(eelse != null) {
					eelse = this.evalExpr(eelse,isVal);
					var _g1 = eelse.e;
					if(_g1._hx_index == 0 && _g1.c._hx_index == 0) {
						eelse = null;
					}
				}
				eif = this.ifBlock(eif);
				eelse = this.ifBlock(eelse);
				d = hxsl_TExprDef.TIf(econd1,eif,eelse);
			}
			break;
		case 11:
			d = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			var e1 = _g.e;
			d = hxsl_TExprDef.TReturn(e1 == null ? null : this.evalExpr(e1));
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v1 = _g.v;
			var v2 = this.mapVar(v1);
			var it1 = this.evalExpr(it);
			var e1;
			var _g1 = it1.e;
			if(_g1._hx_index == 5) {
				var _g2 = _g1.e2;
				var _g3 = _g1.e1;
				if(_g1.op._hx_index == 21) {
					var _g1 = _g3.t;
					var _g1 = _g3.p;
					var _g1 = _g3.e;
					if(_g1._hx_index == 0) {
						var _g3 = _g1.c;
						if(_g3._hx_index == 2) {
							var _g1 = _g2.t;
							var _g1 = _g2.p;
							var _g1 = _g2.e;
							if(_g1._hx_index == 0) {
								var _g2 = _g1.c;
								if(_g2._hx_index == 2) {
									var start = _g3.v;
									var len = _g2.v;
									if(this.unrollLoops) {
										var out = [];
										var _g1 = start;
										var _g2 = len;
										while(_g1 < _g2) {
											var i = _g1++;
											this.constants.h[v1.id] = hxsl_TExprDef.TConst(hxsl_Const.CInt(i));
											out.push(this.evalExpr(loop,false));
										}
										this.constants.remove(v1.id);
										e1 = hxsl_TExprDef.TBlock(out);
									} else {
										e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
									}
								} else {
									e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
								}
							} else {
								e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
							}
						} else {
							e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
						}
					} else {
						e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
					}
				} else {
					e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
				}
			} else {
				e1 = hxsl_TExprDef.TFor(v2,it1,this.ifBlock(this.evalExpr(loop,false)));
			}
			this.varMap.remove(v1);
			d = e1;
			break;
		case 14:
			d = hxsl_TExprDef.TContinue;
			break;
		case 15:
			d = hxsl_TExprDef.TBreak;
			break;
		case 16:
			var e2 = _g.index;
			var e1 = _g.e;
			var e11 = this.evalExpr(e1);
			var e21 = this.evalExpr(e2);
			var _g1 = e21.e;
			var _g2 = e11.e;
			if(_g2._hx_index == 17) {
				if(_g1._hx_index == 0) {
					var _g3 = _g1.c;
					if(_g3._hx_index == 2) {
						var el = _g2.el;
						var i = _g3.v;
						d = i >= 0 && i < el.length ? el[i].e : hxsl_TExprDef.TArray(e11,e21);
					} else {
						d = hxsl_TExprDef.TArray(e11,e21);
					}
				} else {
					d = hxsl_TExprDef.TArray(e11,e21);
				}
			} else {
				d = hxsl_TExprDef.TArray(e11,e21);
			}
			break;
		case 17:
			var el = _g.el;
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < el.length) {
				var e1 = el[_g2];
				++_g2;
				_g1.push(this.evalExpr(e1));
			}
			d = hxsl_TExprDef.TArrayDecl(_g1);
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e1 = _g.e;
			var e2 = this.evalExpr(e1);
			var _g1 = [];
			var _g2 = 0;
			while(_g2 < cases.length) {
				var c = cases[_g2];
				++_g2;
				var _g3 = [];
				var _g4 = 0;
				var _g5 = c.values;
				while(_g4 < _g5.length) {
					var v1 = _g5[_g4];
					++_g4;
					_g3.push(this.evalExpr(v1));
				}
				_g1.push({ values : _g3, expr : this.evalExpr(c.expr,isVal)});
			}
			var cases = _g1;
			var def1 = def == null ? null : this.evalExpr(def,isVal);
			var hasCase = false;
			var _g1 = e2.e;
			if(_g1._hx_index == 0) {
				var c = _g1.c;
				if(c._hx_index == 2) {
					var val = c.v;
					var _g1 = 0;
					while(_g1 < cases.length) {
						var c1 = cases[_g1];
						++_g1;
						var _g2 = 0;
						var _g3 = c1.values;
						while(_g2 < _g3.length) {
							var v1 = _g3[_g2];
							++_g2;
							var _g4 = v1.e;
							if(_g4._hx_index == 0) {
								var cst = _g4.c;
								switch(cst._hx_index) {
								case 2:
									var k = cst.v;
									if(k == val) {
										return c1.expr;
									}
									break;
								case 3:
									var k1 = cst.v;
									if(k1 == val) {
										return c1.expr;
									}
									break;
								default:
								}
							} else {
								hasCase = true;
							}
						}
					}
				} else {
					throw haxe_Exception.thrown("Unsupported switch constant " + Std.string(c));
				}
			} else {
				hasCase = true;
			}
			d = hasCase ? hxsl_TExprDef.TSwitch(e2,cases,def1) : def1 == null ? hxsl_TExprDef.TBlock([]) : def1.e;
			break;
		case 19:
			var normalWhile = _g.normalWhile;
			var loop = _g.loop;
			var cond = _g.e;
			var cond1 = this.evalExpr(cond);
			var loop1 = this.evalExpr(loop,false);
			d = hxsl_TExprDef.TWhile(cond1,this.ifBlock(loop1),normalWhile);
			break;
		case 20:
			var e1 = _g.e;
			var args = _g.args;
			var name = _g.m;
			var e2;
			if(name == "unroll") {
				var old4 = this.unrollLoops;
				this.unrollLoops = true;
				e2 = this.evalExpr(e1,isVal);
				this.unrollLoops = false;
			} else {
				e2 = this.evalExpr(e1,isVal);
			}
			d = hxsl_TExprDef.TMeta(name,args,e2);
			break;
		}
		return { e : d, t : e.t, p : e.p};
	}
	,__class__: hxsl_Eval
};
var hxsl__$Flatten_Alloc = function(g,t,pos,size) {
	this.g = g;
	this.t = t;
	this.pos = pos;
	this.size = size;
};
$hxClasses["hxsl._Flatten.Alloc"] = hxsl__$Flatten_Alloc;
hxsl__$Flatten_Alloc.__name__ = "hxsl._Flatten.Alloc";
hxsl__$Flatten_Alloc.prototype = {
	__class__: hxsl__$Flatten_Alloc
};
var hxsl_ARead = $hxEnums["hxsl.ARead"] = { __ename__ : true, __constructs__ : ["AIndex","AOffset"]
	,AIndex: ($_=function(a) { return {_hx_index:0,a:a,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a"],$_)
	,AOffset: ($_=function(a,stride,delta) { return {_hx_index:1,a:a,stride:stride,delta:delta,__enum__:"hxsl.ARead",toString:$estr}; },$_.__params__ = ["a","stride","delta"],$_)
};
hxsl_ARead.__empty_constructs__ = [];
var hxsl_Flatten = function() {
};
$hxClasses["hxsl.Flatten"] = hxsl_Flatten;
hxsl_Flatten.__name__ = "hxsl.Flatten";
hxsl_Flatten.prototype = {
	flatten: function(s,kind,constsToGlobal) {
		this.globals = [];
		this.params = [];
		this.outVars = [];
		if(constsToGlobal) {
			this.consts = [];
			var p = s.funs[0].expr.p;
			var gc = { id : hxsl_Tools.allocVarId(), name : "__consts__", kind : hxsl_VarKind.Global, type : null};
			this.econsts = { e : hxsl_TExprDef.TVar(gc), t : null, p : p};
			var s1 = s.name;
			var s2 = s.vars.slice();
			var _g = [];
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				_g.push(this.mapFun(f,$bind(this,this.mapConsts)));
			}
			s = { name : s1, vars : s2, funs : _g};
			var _g = 0;
			var _g1 = s.vars;
			while(_g < _g1.length) {
				var v = _g1[_g];
				++_g;
				var _g2 = v.type;
				if(_g2._hx_index == 9) {
					var _g3 = _g2.size;
					this.allocConst(255,p);
				}
			}
			if(this.consts.length > 0) {
				gc.type = this.econsts.t = hxsl_Type.TArray(hxsl_Type.TFloat,hxsl_SizeDecl.SConst(this.consts.length));
				s.vars.push(gc);
			}
		}
		this.varMap = new haxe_ds_ObjectMap();
		this.allocData = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.gatherVar(v);
		}
		var prefix;
		switch(kind._hx_index) {
		case 0:
			prefix = "vertex";
			break;
		case 1:
			prefix = "fragment";
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		this.pack(prefix + "Globals",hxsl_VarKind.Global,this.globals,hxsl_VecType.VFloat);
		this.pack(prefix + "Params",hxsl_VarKind.Param,this.params,hxsl_VecType.VFloat);
		var allVars = this.globals.concat(this.params);
		var textures = this.packTextures(prefix + "Textures",allVars,hxsl_Type.TSampler2D).concat(this.packTextures(prefix + "TexturesCube",allVars,hxsl_Type.TSamplerCube)).concat(this.packTextures(prefix + "TexturesArray",allVars,hxsl_Type.TSampler2DArray));
		this.packBuffers(allVars);
		var _g = [];
		var _g1 = 0;
		var _g2 = s.funs;
		while(_g1 < _g2.length) {
			var f = _g2[_g1];
			++_g1;
			_g.push(this.mapFun(f,$bind(this,this.mapExpr)));
		}
		var funs = _g;
		return { name : s.name, vars : this.outVars, funs : funs};
	}
	,mapFun: function(f,mapExpr) {
		return { kind : f.kind, ret : f.ret, args : f.args, ref : f.ref, expr : mapExpr(f.expr)};
	}
	,mapExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var a = this.varMap.h[v.__id__];
			if(a != null) {
				e = this.access(a,v.type,e.p,hxsl_ARead.AIndex(a));
			}
			break;
		case 16:
			var _g1 = _g.e;
			var _g2 = _g1.t;
			var _g2 = _g1.e;
			if(_g2._hx_index == 1) {
				var eindex = _g.index;
				var vp = _g1.p;
				var v = _g2.v;
				var _g = eindex.e;
				var e1;
				if(_g._hx_index == 0) {
					var _g1 = _g.c;
					if(_g1._hx_index == 2) {
						var _g = _g1.v;
						e1 = true;
					} else {
						e1 = false;
					}
				} else {
					e1 = false;
				}
				if(!e1) {
					var a = this.varMap.h[v.__id__];
					if(a != null) {
						var _g = v.type;
						if(_g._hx_index == 15) {
							var _g1 = _g.size;
							var _g1 = _g.t;
							var t = _g1;
							if(hxsl_Tools.isSampler(t)) {
								eindex = this.mapExpr(eindex);
								var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,1,toInt));
							} else {
								var t = _g1;
								var stride = this.varSize(t,a.t);
								if(stride == 0 || (stride & 3) != 0) {
									throw haxe_Exception.thrown(new hxsl_Error("Dynamic access to an Array which size is not 4 components-aligned is not allowed",e.p));
								}
								stride >>= 2;
								eindex = this.mapExpr(eindex);
								var toInt = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : vp},[eindex]), t : hxsl_Type.TInt, p : vp};
								e = this.access(a,t,vp,hxsl_ARead.AOffset(a,stride,stride == 1 ? toInt : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpMult,toInt,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(stride)), t : hxsl_Type.TInt, p : vp}), t : hxsl_Type.TInt, p : vp}));
							}
						} else {
							throw haxe_Exception.thrown("assert");
						}
					}
				} else {
					e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
				}
			} else {
				e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
			}
			break;
		default:
			e = hxsl_Tools.map(e,$bind(this,this.mapExpr));
		}
		return this.optimize(e);
	}
	,mapConsts: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 2:
				var v = c.v;
				return this.allocConst(v,e.p);
			case 3:
				var v = c.v;
				return this.allocConst(v,e.p);
			default:
				return e;
			}
			break;
		case 2:
			var g = _g.g;
			switch(g._hx_index) {
			case 0:
				this.allocConst(Math.PI / 180,e.p);
				break;
			case 1:
				this.allocConst(180 / Math.PI,e.p);
				break;
			case 9:
				this.allocConst(1.4426950408889634,e.p);
				break;
			case 10:
				this.allocConst(0.6931471805599453,e.p);
				break;
			case 24:
				this.allocConst(1,e.p);
				break;
			case 26:
				this.allocConst(2.0,e.p);
				this.allocConst(3.0,e.p);
				break;
			case 54:
				this.allocConsts([1,255,65025,16581375],e.p);
				this.allocConsts([0.00392156862745098,0.00392156862745098,0.00392156862745098,0],e.p);
				break;
			case 55:
				this.allocConsts([1,0.00392156862745098,1.5378700499807768e-005,6.0308629411010845e-008],e.p);
				break;
			case 56:
				this.allocConst(1,e.p);
				this.allocConst(0.5,e.p);
				break;
			case 57:
				this.allocConst(0.5,e.p);
				break;
			case 58:
				this.allocConsts([0.5,0.5],e.p);
				this.allocConsts([0.5,-0.5],e.p);
				break;
			case 59:
				this.allocConsts([2,-2],e.p);
				this.allocConsts([-1,1],e.p);
				break;
			default:
			}
			break;
		case 5:
			var _g1 = _g.e2;
			var _g2 = _g.e1;
			if(_g.op._hx_index == 1) {
				var _g2 = _g1.p;
				var _g2 = _g1.e;
				if(_g1.t._hx_index == 8) {
					this.allocConst(1,e.p);
				}
			}
			break;
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 42) {
					if(_g1.length == 2) {
						var _g2 = _g1[1];
						var _g3 = _g1[0];
						var _g1 = _g3.t;
						var _g4 = _g3.p;
						var _g4 = _g3.e;
						if(_g4._hx_index == 1) {
							var _g3 = _g4.v;
							var _g4 = _g3.type;
							var _g4 = _g3.qualifiers;
							var _g4 = _g3.parent;
							var _g4 = _g3.name;
							var _g4 = _g3.id;
							switch(_g3.kind._hx_index) {
							case 0:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g3 = _g2.t;
											var _g3 = _g2.p;
											var _g3 = _g2.e;
											if(_g3._hx_index == 0) {
												var _g4 = _g3.c;
												if(_g4._hx_index == 2) {
													if(_g4.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 1:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g3 = _g2.t;
											var _g3 = _g2.p;
											var _g3 = _g2.e;
											if(_g3._hx_index == 0) {
												var _g4 = _g3.c;
												if(_g4._hx_index == 2) {
													if(_g4.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 2:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g3 = _g2.t;
											var _g3 = _g2.p;
											var _g3 = _g2.e;
											if(_g3._hx_index == 0) {
												var _g4 = _g3.c;
												if(_g4._hx_index == 2) {
													if(_g4.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							case 3:
								if(_g1._hx_index == 5) {
									if(_g1.size == 3) {
										if(_g1.t._hx_index == 1) {
											var _g1 = _g2.t;
											var _g1 = _g2.p;
											var _g1 = _g2.e;
											if(_g1._hx_index == 0) {
												var _g2 = _g1.c;
												if(_g2._hx_index == 2) {
													if(_g2.v == 1) {
														return e;
													}
												}
											}
										}
									}
								}
								break;
							default:
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g1 = _g.index;
			var _g2 = _g.e;
			var _g = _g1.t;
			var _g = _g1.p;
			var _g = _g1.e;
			if(_g._hx_index == 0) {
				var _g3 = _g.c;
				if(_g3._hx_index == 2) {
					var _g = _g3.v;
					var ea = _g2;
					var eindex = _g1;
					return { e : hxsl_TExprDef.TArray(this.mapConsts(ea),eindex), t : e.t, p : e.p};
				} else {
					var ea = _g2;
					var eindex = _g1;
					var _g = ea.t;
					if(_g._hx_index == 15) {
						var _g3 = _g.size;
						var t = _g.t;
						var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
						this.allocConst(stride,e.p);
					}
				}
			} else {
				var ea = _g2;
				var eindex = _g1;
				var _g = ea.t;
				if(_g._hx_index == 15) {
					var _g1 = _g.size;
					var t = _g.t;
					var stride = this.varSize(t,hxsl_VecType.VFloat) >> 2;
					this.allocConst(stride,e.p);
				}
			}
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapConsts));
	}
	,allocConst: function(v,p) {
		var index = this.consts.indexOf(v);
		if(index < 0) {
			index = this.consts.length;
			this.consts.push(v);
		}
		return { e : hxsl_TExprDef.TArray(this.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
	}
	,allocConsts: function(va,p) {
		var _gthis = this;
		var pad = va.length - 1 & 3;
		var index = -1;
		var _g = 0;
		var _g1 = this.consts.length - (va.length - 1);
		while(_g < _g1) {
			var i = _g++;
			if(i >> 2 != i + pad >> 2) {
				continue;
			}
			var found = true;
			var _g2 = 0;
			var _g3 = va.length;
			while(_g2 < _g3) {
				var j = _g2++;
				if(this.consts[i + j] != va[j]) {
					found = false;
					break;
				}
			}
			if(found) {
				index = i;
				break;
			}
		}
		if(index < 0) {
			while(this.consts.length >> 2 != this.consts.length + pad >> 2) this.consts.push(0);
			index = this.consts.length;
			var _g = 0;
			while(_g < va.length) {
				var v = va[_g];
				++_g;
				this.consts.push(v);
			}
		}
		switch(va.length) {
		case 1:
			return { e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p};
		case 2:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec2), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(2,hxsl_VecType.VFloat), p : p};
		case 3:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec3), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 2)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(3,hxsl_VecType.VFloat), p : p};
		case 4:
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Vec4), t : hxsl_Type.TVoid, p : p},[{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 1)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 3)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p},{ e : hxsl_TExprDef.TArray(_gthis.econsts,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index + 4)), t : hxsl_Type.TInt, p : p}), t : hxsl_Type.TFloat, p : p}]), t : hxsl_Type.TVec(4,hxsl_VecType.VFloat), p : p};
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,access: function(a,t,pos,acc) {
		var _gthis = this;
		switch(t._hx_index) {
		case 6:
			var tmp = this.access(a,hxsl_Type.TMat3x4,pos,acc);
			return { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3), t : hxsl_Type.TFun([]), p : pos},[tmp]), t : hxsl_Type.TMat3, p : pos};
		case 7:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp5;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 3)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 3;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp5 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4,tmp5]), t : hxsl_Type.TMat4, p : pos};
		case 8:
			var tmp = hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mat3x4);
			var tmp1 = hxsl_Type.TFun([]);
			var tmp2;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp2 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp3;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 1)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 1;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp3 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			var tmp4;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs + 2)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = (a1.t == null ? a1.pos : a1.pos >> 2) + 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				tmp4 = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			return { e : hxsl_TExprDef.TCall({ e : tmp, t : tmp1, p : pos},[tmp2,tmp3,tmp4]), t : hxsl_Type.TMat3x4, p : pos};
		case 15:
			var _g = t.size;
			if(_g._hx_index == 0) {
				var t1 = t.t;
				var len = _g.v;
				var stride = a.size / len | 0;
				var _g = [];
				var _g1 = 0;
				var _g2 = len;
				while(_g1 < _g2) {
					var i = _g1++;
					var a1 = new hxsl__$Flatten_Alloc(a.g,a.t,a.pos + stride * i,stride);
					_g.push(this.access(a1,t1,pos,hxsl_ARead.AIndex(a1)));
				}
				var earr = _g;
				return { e : hxsl_TExprDef.TArrayDecl(earr), t : t1, p : pos};
			} else {
				if(hxsl_Tools.isSampler(t)) {
					var e;
					switch(acc._hx_index) {
					case 0:
						var a1 = acc.a;
						var offs = a1.t == null ? a1.pos : a1.pos >> 2;
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					case 1:
						var delta = acc.delta;
						var stride = acc.stride;
						var a1 = acc.a;
						var index = a1.t == null ? a1.pos : a1.pos >> 2;
						var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
						e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
						break;
					}
					e.t = t;
					return e;
				}
				var size = this.varSize(t,a.t);
				if(size > 4) {
					return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
				}
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var delta = acc.delta;
					var stride = acc.stride;
					var a1 = acc.a;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				if(size == 4) {
					if((a.pos & 3) != 0) {
						throw haxe_Exception.thrown("assert");
					}
				} else {
					var sw = [];
					var _g = 0;
					var _g1 = size;
					while(_g < _g1) {
						var i = _g++;
						sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
					}
					e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
				}
				switch(t._hx_index) {
				case 1:
					e.t = hxsl_Type.TFloat;
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					break;
				case 5:
					if(t.t._hx_index == 0) {
						var size = t.size;
						e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
						e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
					}
					break;
				default:
				}
				return e;
			}
			break;
		default:
			if(hxsl_Tools.isSampler(t)) {
				var e;
				switch(acc._hx_index) {
				case 0:
					var a1 = acc.a;
					var offs = a1.t == null ? a1.pos : a1.pos >> 2;
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				case 1:
					var delta = acc.delta;
					var stride = acc.stride;
					var a1 = acc.a;
					var index = a1.t == null ? a1.pos : a1.pos >> 2;
					var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
					e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
					break;
				}
				e.t = t;
				return e;
			}
			var size = this.varSize(t,a.t);
			if(size > 4) {
				return hxsl_Error.t("Access not supported for " + hxsl_Tools.toString(t),null);
			}
			var e;
			switch(acc._hx_index) {
			case 0:
				var a1 = acc.a;
				var offs = a1.t == null ? a1.pos : a1.pos >> 2;
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(offs)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			case 1:
				var delta = acc.delta;
				var stride = acc.stride;
				var a1 = acc.a;
				var index = a1.t == null ? a1.pos : a1.pos >> 2;
				var offset = index == 0 ? delta : { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAdd,delta,{ e : hxsl_TExprDef.TConst(hxsl_Const.CInt(index)), t : hxsl_Type.TInt, p : pos}), t : hxsl_Type.TInt, p : pos};
				e = { e : hxsl_TExprDef.TArray({ e : hxsl_TExprDef.TVar(a1.g), t : a1.g.type, p : pos},offset), t : hxsl_Type.TVec(4,a1.t), p : pos};
				break;
			}
			if(size == 4) {
				if((a.pos & 3) != 0) {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				var sw = [];
				var _g = 0;
				var _g1 = size;
				while(_g < _g1) {
					var i = _g++;
					sw.push(hxsl_Tools.SWIZ[i + (a.pos & 3)]);
				}
				e = { e : hxsl_TExprDef.TSwiz(e,sw), t : t, p : pos};
			}
			switch(t._hx_index) {
			case 1:
				e.t = hxsl_Type.TFloat;
				e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.ToInt), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				break;
			case 5:
				if(t.t._hx_index == 0) {
					var size = t.size;
					e.t = hxsl_Type.TVec(size,hxsl_VecType.VFloat);
					e = { e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal([hxsl_TGlobal.IVec2,hxsl_TGlobal.IVec3,hxsl_TGlobal.IVec4][size - 2]), t : hxsl_Type.TFun([]), p : pos},[e]), t : t, p : pos};
				}
				break;
			default:
			}
			return e;
		}
	}
	,optimize: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				if(_g3.g._hx_index == 52) {
					if(_g1.length == 1) {
						var _g2 = _g1[0];
						var _g1 = _g2.t;
						var _g1 = _g2.p;
						var _g1 = _g2.e;
						if(_g1._hx_index == 8) {
							var _g2 = _g1.e;
							var _g3 = _g2.t;
							var _g3 = _g2.p;
							var _g3 = _g2.e;
							if(_g3._hx_index == 2) {
								if(_g3.g._hx_index == 51) {
									var args = _g1.args;
									var rem = 0;
									var size = 0;
									while(size < 4) {
										var t = args[args.length - 1 - rem].t;
										size += this.varSize(t,hxsl_VecType.VFloat);
										++rem;
									}
									if(size == 4) {
										var _g1 = 0;
										var _g2 = rem;
										while(_g1 < _g2) {
											var i = _g1++;
											args.pop();
										}
										var emat;
										var _g1 = e.e;
										if(_g1._hx_index == 8) {
											var _g2 = _g1.args;
											var e1 = _g1.e;
											emat = e1;
										} else {
											throw haxe_Exception.thrown("assert");
										}
										return { e : hxsl_TExprDef.TCall(emat,args), t : e.t, p : e.p};
									}
								}
							}
						}
					}
				}
			}
			break;
		case 16:
			var _g1 = _g.index;
			var _g2 = _g.e;
			var _g = _g2.t;
			var _g = _g2.p;
			var _g = _g2.e;
			if(_g._hx_index == 17) {
				var _g2 = _g1.t;
				var _g2 = _g1.p;
				var _g2 = _g1.e;
				if(_g2._hx_index == 0) {
					var _g1 = _g2.c;
					if(_g1._hx_index == 2) {
						var el = _g.el;
						var i = _g1.v;
						if(i >= 0 && i < el.length) {
							return el[i];
						}
						hxsl_Error.t("Reading outside array bounds",e.p);
					}
				}
			}
			break;
		default:
		}
		return e;
	}
	,packTextures: function(name,vars,t) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : t, kind : hxsl_VarKind.Param};
		var pos = 0;
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var count = 1;
			if(v.type != t) {
				var _g1 = v.type;
				switch(_g1._hx_index) {
				case 15:
					var _g2 = _g1.size;
					if(_g2._hx_index == 0) {
						var t2 = _g1.t;
						var n = _g2.v;
						if(t2 == t) {
							count = n;
						} else {
							continue;
						}
					} else {
						continue;
					}
					break;
				case 17:
					var _g3 = _g1.size;
					if(t != hxsl_Type.TSampler2D) {
						continue;
					}
					break;
				default:
					continue;
				}
			}
			var a = new hxsl__$Flatten_Alloc(g,null,pos,count);
			a.v = v;
			this.varMap.set(v,a);
			alloc.push(a);
			pos += count;
		}
		g.type = hxsl_Type.TArray(t,hxsl_SizeDecl.SConst(pos));
		if(alloc.length > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return alloc;
	}
	,packBuffers: function(vars) {
		var alloc = [];
		var g = { id : hxsl_Tools.allocVarId(), name : "buffers", type : hxsl_Type.TVoid, kind : hxsl_VarKind.Param};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var _g1 = v.type;
			var tmp;
			if(_g1._hx_index == 16) {
				var _g2 = _g1.size;
				var _g3 = _g1.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				var a = new hxsl__$Flatten_Alloc(g,null,alloc.length,1);
				a.v = v;
				alloc.push(a);
				this.outVars.push(v);
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TBuffer(hxsl_Type.TVoid,hxsl_SizeDecl.SConst(0)),hxsl_SizeDecl.SConst(alloc.length));
		this.allocData.set(g,alloc);
	}
	,pack: function(name,kind,vars,t) {
		var alloc = [];
		var apos = 0;
		var g = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TVec(0,t), kind : kind};
		var _g = 0;
		while(_g < vars.length) {
			var v = vars[_g];
			++_g;
			var tmp;
			if(!hxsl_Tools.isSampler(v.type)) {
				var _g1 = v.type;
				if(_g1._hx_index == 16) {
					var _g2 = _g1.size;
					var _g3 = _g1.t;
					tmp = true;
				} else {
					tmp = false;
				}
			} else {
				tmp = true;
			}
			if(tmp) {
				continue;
			}
			var _g4 = v.type;
			if(_g4._hx_index == 15) {
				var _g5 = _g4.size;
				var t1 = _g4.t;
				if(hxsl_Tools.isSampler(t1)) {
					continue;
				}
			}
			var size = this.varSize(v.type,t);
			var best = null;
			var _g6 = 0;
			while(_g6 < alloc.length) {
				var a = alloc[_g6];
				++_g6;
				if(a.v == null && a.size >= size && (best == null || best.size > a.size)) {
					best = a;
				}
			}
			if(best != null) {
				var free = best.size - size;
				if(free > 0) {
					var i = alloc.indexOf(best);
					var a1 = new hxsl__$Flatten_Alloc(g,t,best.pos + size,free);
					alloc.splice(i + 1,0,a1);
					best.size = size;
				}
				best.v = v;
				this.varMap.set(v,best);
			} else {
				var a2 = new hxsl__$Flatten_Alloc(g,t,apos,size);
				apos += size;
				a2.v = v;
				this.varMap.set(v,a2);
				alloc.push(a2);
				var pad = (4 - size % 4) % 4;
				if(pad > 0) {
					var a3 = new hxsl__$Flatten_Alloc(g,t,apos,pad);
					apos += pad;
					alloc.push(a3);
				}
			}
		}
		g.type = hxsl_Type.TArray(hxsl_Type.TVec(4,t),hxsl_SizeDecl.SConst(apos >> 2));
		if(apos > 0) {
			this.outVars.push(g);
			this.allocData.set(g,alloc);
		}
		return g;
	}
	,varSize: function(v,t) {
		switch(v._hx_index) {
		case 1:case 3:
			if(t == hxsl_VecType.VFloat) {
				return 1;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 5:
			var t2 = v.t;
			var n = v.size;
			if(t == t2) {
				return n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 7:
			if(t == hxsl_VecType.VFloat) {
				return 16;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 6:case 8:
			if(t == hxsl_VecType.VFloat) {
				return 12;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		case 15:
			var _g = v.size;
			if(_g._hx_index == 0) {
				var at = v.t;
				var n = _g.v;
				return this.varSize(at,t) * n;
			} else {
				throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
			}
			break;
		default:
			throw haxe_Exception.thrown(hxsl_Tools.toString(v) + " size unknown for type " + Std.string(t));
		}
	}
	,gatherVar: function(v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.gatherVar(v1);
			}
		} else {
			switch(v.kind._hx_index) {
			case 0:
				if(hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.PerObject)) {
					this.params.push(v);
				} else {
					this.globals.push(v);
				}
				break;
			case 2:
				this.params.push(v);
				break;
			default:
				this.outVars.push(v);
			}
		}
	}
	,__class__: hxsl_Flatten
};
var hxsl_Globals = function() {
	this.channels = [];
	this.map = new haxe_ds_IntMap();
};
$hxClasses["hxsl.Globals"] = hxsl_Globals;
hxsl_Globals.__name__ = "hxsl.Globals";
hxsl_Globals.allocID = function(path) {
	if(hxsl_Globals.MAP == null) {
		hxsl_Globals.MAP = new haxe_ds_StringMap();
		hxsl_Globals.ALL = [];
	}
	var id = hxsl_Globals.MAP.h[path];
	if(id == null) {
		id = hxsl_Globals.ALL.length;
		hxsl_Globals.ALL.push(path);
		hxsl_Globals.MAP.h[path] = id;
	}
	return id;
};
hxsl_Globals.prototype = {
	set: function(path,v) {
		var this1 = this.map;
		var key = hxsl_Globals.allocID(path);
		this1.h[key] = v;
	}
	,allocChannelID: function(t) {
		var _g = 0;
		var _g1 = this.maxChannels;
		while(_g < _g1) {
			var i = _g++;
			if(this.channels[i] == t) {
				return i;
			}
		}
		if(this.maxChannels == 1 << hxsl_Tools.MAX_CHANNELS_BITS) {
			throw haxe_Exception.thrown("Too many unique channels");
		}
		var i = this.maxChannels++;
		this.channels[i] = t;
		return i;
	}
	,__class__: hxsl_Globals
};
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var hxsl_GlslOut = function() {
	this.outIndex = 0;
	this.uniformBuffer = 0;
	this.exprIds = 0;
	this.varNames = new haxe_ds_IntMap();
	this.allNames = new haxe_ds_StringMap();
};
$hxClasses["hxsl.GlslOut"] = hxsl_GlslOut;
hxsl_GlslOut.__name__ = "hxsl.GlslOut";
hxsl_GlslOut.prototype = {
	decl: function(s) {
		var _g = 0;
		var _g1 = this.decls;
		while(_g < _g1.length) {
			var d = _g1[_g];
			++_g;
			if(d == s) {
				return;
			}
		}
		if(HxOverrides.cca(s,0) == 35) {
			this.decls.unshift(s);
		} else {
			this.decls.push(s);
		}
	}
	,addType: function(t) {
		switch(t._hx_index) {
		case 0:
			this.buf.b += Std.string("void");
			break;
		case 1:
			this.buf.b += Std.string("int");
			break;
		case 2:
			this.buf.b += Std.string("bool");
			break;
		case 3:
			this.buf.b += Std.string("float");
			break;
		case 4:
			this.buf.b += Std.string("string");
			break;
		case 5:
			var k = t.t;
			var size = t.size;
			switch(k._hx_index) {
			case 0:
				this.buf.b += Std.string("i");
				break;
			case 1:
				break;
			case 2:
				this.buf.b += Std.string("b");
				break;
			}
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(size);
			break;
		case 6:
			this.buf.b += Std.string("mat3");
			break;
		case 7:
			this.buf.b += Std.string("mat4");
			break;
		case 8:
			this.decl(hxsl_GlslOut.MAT34);
			this.buf.b += Std.string("_mat3x4");
			break;
		case 9:
			var n = t.size;
			this.buf.b += Std.string("vec");
			this.buf.b += Std.string(n);
			break;
		case 10:
			this.buf.b += Std.string("sampler2D");
			break;
		case 11:
			this.buf.b += Std.string("sampler2DArray");
			if(this.glES != null) {
				this.decl("precision lowp sampler2DArray;");
			}
			break;
		case 12:
			this.buf.b += Std.string("samplerCube");
			break;
		case 13:
			var vl = t.vl;
			this.buf.b += Std.string("struct { ");
			var _g = 0;
			while(_g < vl.length) {
				var v = vl[_g];
				++_g;
				this.addVar(v);
				this.buf.b += Std.string(";");
			}
			this.buf.b += Std.string(" }");
			break;
		case 14:
			var _g = t.variants;
			this.buf.b += Std.string("function");
			break;
		case 15:
			var size = t.size;
			var t1 = t.t;
			this.addType(t1);
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g = size.v;
				if(_g == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var v = _g;
						this.buf.b += Std.string(v);
					}
				} else {
					var v = _g;
					this.buf.b += Std.string(v);
				}
				break;
			case 1:
				var v = size.v;
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var _g = t.size;
			var _g = t.t;
			throw haxe_Exception.thrown("assert");
		case 17:
			var n = t.size;
			this.buf.b += Std.string("channel" + n);
			break;
		case 18:
			this.buf.b += Std.string("mat2");
			break;
		}
	}
	,addVar: function(v) {
		var _g = v.type;
		switch(_g._hx_index) {
		case 15:
			var size = _g.size;
			var t = _g.t;
			var old = v.type;
			v.type = t;
			this.addVar(v);
			v.type = old;
			this.buf.b += Std.string("[");
			switch(size._hx_index) {
			case 0:
				var _g1 = size.v;
				if(_g1 == 1) {
					if(this.intelDriverFix) {
						this.buf.b += Std.string(2);
					} else {
						var n = _g1;
						this.buf.b += Std.string(n);
					}
				} else {
					var n = _g1;
					this.buf.b += Std.string(n);
				}
				break;
			case 1:
				var v1 = size.v;
				var v2 = this.varName(v1);
				this.buf.b += Std.string(v2);
				break;
			}
			this.buf.b += Std.string("]");
			break;
		case 16:
			var size = _g.size;
			var t = _g.t;
			this.buf.b += Std.string("uniform_buffer" + this.uniformBuffer++);
			this.buf.b += Std.string(" { ");
			v.type = hxsl_Type.TArray(t,size);
			this.addVar(v);
			v.type = hxsl_Type.TBuffer(t,size);
			this.buf.b += Std.string("; }");
			break;
		default:
			this.addType(v.type);
			this.buf.b += Std.string(" ");
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
		}
	}
	,addValue: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var name = "val" + this.exprIds++;
			var tmp = this.buf;
			this.buf = new StringBuf();
			this.addType(e.t);
			this.buf.b += Std.string(" ");
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("(void)");
			var el2 = el.slice();
			var last = el2[el2.length - 1];
			el2[el2.length - 1] = { e : hxsl_TExprDef.TReturn(last), t : e.t, p : last.p};
			var e2 = { t : hxsl_Type.TVoid, e : hxsl_TExprDef.TBlock(el2), p : e.p};
			this.addExpr(e2,"");
			this.exprValues.push(this.buf.b);
			this.buf = tmp;
			this.buf.b += Std.string(name);
			this.buf.b += Std.string("()");
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(" ) ? ");
			this.addValue(eif,tabs);
			this.buf.b += Std.string(" : ");
			this.addValue(eelse,tabs);
			break;
		case 20:
			var _g1 = _g.args;
			var _g1 = _g.m;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			break;
		default:
			this.addExpr(e,tabs);
		}
	}
	,addBlock: function(e,tabs) {
		this.addExpr(e,tabs);
	}
	,getFunName: function(g,args,rt) {
		switch(g._hx_index) {
		case 20:
			if(rt == hxsl_Type.TInt && this.glES != null) {
				this.decl("int _imod( int x, int y ) { return int(mod(float(x),float(y))); }");
				return "_imod";
			}
			break;
		case 33:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					return "textureCube";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					return "texture2D";
				}
				break;
			default:
			}
			break;
		case 34:
			var _g = args[0].t;
			switch(_g._hx_index) {
			case 10:case 11:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			case 12:
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "textureCubeLodEXT";
				}
				break;
			case 17:
				var _g1 = _g.size;
				if(this.glES != null && this.glES <= 2) {
					this.decl("#extension GL_EXT_shader_texture_lod : enable");
					return "texture2DLodEXT";
				}
				break;
			default:
			}
			break;
		case 35:
			return "texelFetch";
		case 36:
			this.decl("vec2 _textureSize(sampler2D sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
			this.decl("vec3 _textureSize(sampler2DArray sampler, int lod) { return vec3(textureSize(sampler, lod)); }");
			this.decl("vec2 _textureSize(samplerCube sampler, int lod) { return vec2(textureSize(sampler, lod)); }");
			return "_textureSize";
		case 50:
			if(args[0].t == hxsl_Type.TMat3x4) {
				this.decl(hxsl_GlslOut.MAT34);
				this.decl("mat3 _mat3( _mat3x4 v ) { return mat3(v.a.xyz,v.b.xyz,v.c.xyz); }");
				return "_mat3";
			}
			break;
		case 52:
			this.decl(hxsl_GlslOut.MAT34);
			if(args.length == 1) {
				this.decl("_mat3x4 mat_to_34( mat4 m ) { return _mat3x4(m[0],m[1],m[2]); }");
				return "mat_to_34";
			}
			break;
		case 54:
			this.decl("vec4 pack( float v ) { vec4 color = fract(v * vec4(1, 255, 255.*255., 255.*255.*255.)); return color - color.yzww * vec4(1. / 255., 1. / 255., 1. / 255., 0.); }");
			break;
		case 55:
			this.decl("float unpack( vec4 color ) { return dot(color,vec4(1., 1. / 255., 1. / (255. * 255.), 1. / (255. * 255. * 255.))); }");
			break;
		case 56:
			this.decl("vec4 packNormal( vec3 v ) { return vec4((v + vec3(1.)) * vec3(0.5),1.); }");
			break;
		case 57:
			this.decl("vec3 unpackNormal( vec4 v ) { return normalize((v.xyz - vec3(0.5)) * vec3(2.)); }");
			break;
		case 58:
			this.decl("vec2 screenToUv( vec2 v ) { return v * vec2(0.5,-0.5) + vec2(0.5,0.5); }");
			break;
		case 59:
			this.decl("vec2 uvToScreen( vec2 v ) { return v * vec2(2.,-2.) + vec2(-1., 1.); }");
			break;
		case 60:case 61:case 62:
			this.decl("#extension GL_OES_standard_derivatives:enable");
			break;
		default:
		}
		return hxsl_GlslOut.GLOBALS.get(g);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			switch(c._hx_index) {
			case 0:
				this.buf.b += Std.string("null");
				break;
			case 1:
				var b = c.b;
				this.buf.b += Std.string(b);
				break;
			case 2:
				var v = c.v;
				this.buf.b += Std.string(v);
				break;
			case 3:
				var f = c.v;
				var str = "" + f;
				this.buf.b += Std.string(str);
				if(str.indexOf(".") == -1 && str.indexOf("e") == -1) {
					this.buf.b += Std.string(".");
				}
				break;
			case 4:
				var v = c.v;
				this.buf.b += Std.string("\"" + v + "\"");
				break;
			}
			break;
		case 1:
			var v = _g.v;
			var v1 = this.varName(v);
			this.buf.b += Std.string(v1);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_GlslOut.GLOBALS.get(g);
			this.buf.b += Std.string(v);
			break;
		case 3:
			var e1 = _g.e;
			this.buf.b += Std.string("(");
			this.addValue(e1,tabs);
			this.buf.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buf.b += Std.string("{\n");
			var t2 = tabs + "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e1 = el[_g1];
				++_g1;
				this.buf.b += Std.string(t2);
				this.addExpr(e1,t2);
				this.newLine(e1);
			}
			this.buf.b += Std.string(tabs);
			this.buf.b += Std.string("}");
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e2.t;
			var _g2 = e1.t;
			switch(op._hx_index) {
			case 1:
				if(_g2._hx_index == 5) {
					if(_g2.size == 3) {
						if(_g2.t._hx_index == 1) {
							if(_g1._hx_index == 8) {
								this.decl(hxsl_GlslOut.MAT34);
								this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
								var tmp;
								if(op._hx_index == 20) {
									var _g3 = op.op;
									tmp = true;
								} else {
									tmp = false;
								}
								if(tmp) {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" = ");
								}
								this.buf.b += Std.string("m3x4mult(");
								this.addValue(e1,tabs);
								this.buf.b += Std.string(",");
								this.addValue(e2,tabs);
								this.buf.b += Std.string(")");
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 5:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 6:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 7:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 8:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 9:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 10:
				if(_g2._hx_index == 5) {
					var _g3 = _g2.t;
					if(_g1._hx_index == 5) {
						var _g3 = _g1.t;
						var _g3 = _g1.size;
						var n = _g2.size;
						this.buf.b += Std.string("vec" + n + "(");
						var v;
						switch(op._hx_index) {
						case 5:
							v = "equal";
							break;
						case 6:
							v = "notEqual";
							break;
						case 7:
							v = "greaterThan";
							break;
						case 8:
							v = "greaterThanEqual";
							break;
						case 9:
							v = "lessThan";
							break;
						case 10:
							v = "lessThanEqual";
							break;
						default:
							throw haxe_Exception.thrown("assert");
						}
						this.buf.b += Std.string(v);
						this.buf.b += Std.string("(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(",");
						this.addValue(e2,tabs);
						this.buf.b += Std.string("))");
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 18:
				this.decl("int _ushr( int i, int j ) { return int(uint(i) >> uint(j)); }");
				this.buf.b += Std.string("_ushr(");
				this.addValue(e1,tabs);
				this.buf.b += Std.string(",");
				this.addValue(e2,tabs);
				this.buf.b += Std.string(")");
				break;
			case 19:
				if(e.t != hxsl_Type.TInt) {
					var tmp;
					if(op._hx_index == 20) {
						var _g3 = op.op;
						tmp = true;
					} else {
						tmp = false;
					}
					if(tmp) {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" = ");
					}
					this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
				} else {
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			case 20:
				switch(op.op._hx_index) {
				case 1:
					if(_g2._hx_index == 5) {
						if(_g2.size == 3) {
							if(_g2.t._hx_index == 1) {
								if(_g1._hx_index == 8) {
									this.decl(hxsl_GlslOut.MAT34);
									this.decl("vec3 m3x4mult( vec3 v, _mat3x4 m) { vec4 ve = vec4(v,1.0); return vec3(dot(m.a,ve),dot(m.b,ve),dot(m.c,ve)); }");
									var tmp;
									if(op._hx_index == 20) {
										var _g1 = op.op;
										tmp = true;
									} else {
										tmp = false;
									}
									if(tmp) {
										this.addValue(e1,tabs);
										this.buf.b += Std.string(" = ");
									}
									this.buf.b += Std.string("m3x4mult(");
									this.addValue(e1,tabs);
									this.buf.b += Std.string(",");
									this.addValue(e2,tabs);
									this.buf.b += Std.string(")");
								} else {
									this.addValue(e1,tabs);
									this.buf.b += Std.string(" ");
									var v = hxsl_Printer.opStr(op);
									this.buf.b += Std.string(v);
									this.buf.b += Std.string(" ");
									this.addValue(e2,tabs);
								}
							} else {
								this.addValue(e1,tabs);
								this.buf.b += Std.string(" ");
								var v = hxsl_Printer.opStr(op);
								this.buf.b += Std.string(v);
								this.buf.b += Std.string(" ");
								this.addValue(e2,tabs);
							}
						} else {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" ");
							var v = hxsl_Printer.opStr(op);
							this.buf.b += Std.string(v);
							this.buf.b += Std.string(" ");
							this.addValue(e2,tabs);
						}
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				case 19:
					if(e.t != hxsl_Type.TInt) {
						var tmp;
						if(op._hx_index == 20) {
							var _g1 = op.op;
							tmp = true;
						} else {
							tmp = false;
						}
						if(tmp) {
							this.addValue(e1,tabs);
							this.buf.b += Std.string(" = ");
						}
						this.addExpr({ e : hxsl_TExprDef.TCall({ e : hxsl_TExprDef.TGlobal(hxsl_TGlobal.Mod), t : hxsl_Type.TFun([]), p : e.p},[e1,e2]), t : e.t, p : e.p},tabs);
					} else {
						this.addValue(e1,tabs);
						this.buf.b += Std.string(" ");
						var v = hxsl_Printer.opStr(op);
						this.buf.b += Std.string(v);
						this.buf.b += Std.string(" ");
						this.addValue(e2,tabs);
					}
					break;
				default:
					this.addValue(e1,tabs);
					this.buf.b += Std.string(" ");
					var v = hxsl_Printer.opStr(op);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string(" ");
					this.addValue(e2,tabs);
				}
				break;
			default:
				this.addValue(e1,tabs);
				this.buf.b += Std.string(" ");
				var v = hxsl_Printer.opStr(op);
				this.buf.b += Std.string(v);
				this.buf.b += Std.string(" ");
				this.addValue(e2,tabs);
			}
			break;
		case 6:
			var e1 = _g.e1;
			var op = _g.op;
			var _this = this.buf;
			var _this1 = _this.b;
			var tmp;
			switch(op._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addValue(e1,tabs);
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			this.locals.h[v.id] = v;
			if(init != null) {
				var v1 = this.varName(v);
				this.buf.b += Std.string(v1);
				this.buf.b += Std.string(" = ");
				this.addValue(init,tabs);
			} else {
				this.buf.b += Std.string("/*var*/");
			}
			break;
		case 8:
			var _g1 = _g.args;
			var _g2 = _g.e;
			var _g3 = _g2.t;
			var _g3 = _g2.p;
			var _g3 = _g2.e;
			if(_g3._hx_index == 2) {
				var _g4 = _g3.g;
				switch(_g4._hx_index) {
				case 35:
					var args = _g1;
					var g = _g4;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					this.buf.b += Std.string(", ");
					this.addValue(args[1],tabs);
					if(args.length != 2) {
						this.buf.b += Std.string(", ");
						this.addValue(args[2],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 36:
					var args = _g1;
					var g = _g4;
					var v = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v);
					this.buf.b += Std.string("(");
					this.addValue(args[0],tabs);
					if(args.length != 1) {
						this.buf.b += Std.string(", ");
						this.addValue(args[1],tabs);
						this.buf.b += Std.string(")");
					} else {
						this.buf.b += Std.string(", 0)");
					}
					break;
				case 53:
					if(_g1.length == 1) {
						var e1 = _g1[0];
						this.buf.b += Std.string("clamp(");
						this.addValue(e1,tabs);
						this.buf.b += Std.string(", 0., 1.)");
					} else {
						var v = _g2;
						var args = _g1;
						var _g3 = v.e;
						if(_g3._hx_index == 2) {
							var g = _g3.g;
							var v1 = this.getFunName(g,args,e.t);
							this.buf.b += Std.string(v1);
						} else {
							this.addValue(v,tabs);
						}
						this.buf.b += Std.string("(");
						var first = true;
						var _g3 = 0;
						while(_g3 < args.length) {
							var e1 = args[_g3];
							++_g3;
							if(first) {
								first = false;
							} else {
								this.buf.b += Std.string(", ");
							}
							this.addValue(e1,tabs);
						}
						this.buf.b += Std.string(")");
					}
					break;
				default:
					var args = _g1;
					var v = _g2;
					var _g3 = v.e;
					if(_g3._hx_index == 2) {
						var g = _g3.g;
						var v1 = this.getFunName(g,args,e.t);
						this.buf.b += Std.string(v1);
					} else {
						this.addValue(v,tabs);
					}
					this.buf.b += Std.string("(");
					var first = true;
					var _g3 = 0;
					while(_g3 < args.length) {
						var e1 = args[_g3];
						++_g3;
						if(first) {
							first = false;
						} else {
							this.buf.b += Std.string(", ");
						}
						this.addValue(e1,tabs);
					}
					this.buf.b += Std.string(")");
				}
			} else {
				var args = _g1;
				var v = _g2;
				var _g1 = v.e;
				if(_g1._hx_index == 2) {
					var g = _g1.g;
					var v1 = this.getFunName(g,args,e.t);
					this.buf.b += Std.string(v1);
				} else {
					this.addValue(v,tabs);
				}
				this.buf.b += Std.string("(");
				var first = true;
				var _g1 = 0;
				while(_g1 < args.length) {
					var e1 = args[_g1];
					++_g1;
					if(first) {
						first = false;
					} else {
						this.buf.b += Std.string(", ");
					}
					this.addValue(e1,tabs);
				}
				this.buf.b += Std.string(")");
			}
			break;
		case 9:
			var regs = _g.regs;
			var e1 = _g.e;
			if(e1.t._hx_index == 3) {
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					if(r != hxsl_Component.X) {
						throw haxe_Exception.thrown("assert");
					}
				}
				switch(regs.length) {
				case 1:
					this.addValue(e1,tabs);
					break;
				case 2:
					this.decl("vec2 _vec2( float v ) { return vec2(v,v); }");
					this.buf.b += Std.string("_vec2(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 3:
					this.decl("vec3 _vec3( float v ) { return vec3(v,v,v); }");
					this.buf.b += Std.string("_vec3(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				case 4:
					this.decl("vec4 _vec4( float v ) { return vec4(v,v,v,v); }");
					this.buf.b += Std.string("_vec4(");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(")");
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
			} else {
				this.addValue(e1,tabs);
				this.buf.b += Std.string(".");
				var _g1 = 0;
				while(_g1 < regs.length) {
					var r = regs[_g1];
					++_g1;
					var _this = this.buf;
					var _this1 = _this.b;
					var tmp;
					switch(r._hx_index) {
					case 0:
						tmp = "x";
						break;
					case 1:
						tmp = "y";
						break;
					case 2:
						tmp = "z";
						break;
					case 3:
						tmp = "w";
						break;
					}
					_this.b = _this1 + Std.string(tmp);
				}
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var econd = _g.econd;
			this.buf.b += Std.string("if( ");
			this.addValue(econd,tabs);
			this.buf.b += Std.string(") ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				if(!this.isBlock(eif)) {
					this.buf.b += Std.string(";");
				}
				this.buf.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buf.b += Std.string("discard");
			break;
		case 12:
			var e1 = _g.e;
			if(e1 == null) {
				this.buf.b += Std.string("return");
			} else {
				this.buf.b += Std.string("return ");
				this.addValue(e1,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			this.locals.h[v.id] = v;
			var _g1 = it.e;
			if(_g1._hx_index == 5) {
				if(_g1.op._hx_index == 21) {
					var e2 = _g1.e2;
					var e1 = _g1.e1;
					this.buf.b += Std.string("for(");
					this.buf.b += Std.string(v.name + "=");
					this.addValue(e1,tabs);
					this.buf.b += Std.string(";" + v.name + "<");
					this.addValue(e2,tabs);
					this.buf.b += Std.string(";" + v.name + "++) ");
					this.addBlock(loop,tabs);
				} else {
					throw haxe_Exception.thrown("assert");
				}
			} else {
				throw haxe_Exception.thrown("assert");
			}
			break;
		case 14:
			this.buf.b += Std.string("continue");
			break;
		case 15:
			this.buf.b += Std.string("break");
			break;
		case 16:
			var index = _g.index;
			var e1 = _g.e;
			this.addValue(e1,tabs);
			this.buf.b += Std.string("[");
			this.addValue(index,tabs);
			this.buf.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			var _g1 = e.t;
			if(_g1._hx_index == 15) {
				var _g2 = _g1.size;
				var t = _g1.t;
				this.addType(t);
			} else {
				throw haxe_Exception.thrown("assert");
			}
			this.buf.b += Std.string("[" + el.length + "]");
			this.buf.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buf.b += Std.string(", ");
				}
				this.addValue(e,tabs);
			}
			this.buf.b += Std.string(")");
			break;
		case 18:
			var _g1 = _g.def;
			var _g1 = _g.cases;
			var _g1 = _g.e;
			this.buf.b += Std.string("switch(...)");
			break;
		case 19:
			var _g1 = _g.loop;
			var _g2 = _g.e;
			if(_g.normalWhile == false) {
				var e = _g2;
				var loop = _g1;
				var old = tabs;
				tabs += "\t";
				this.buf.b += Std.string("do ");
				this.addBlock(loop,tabs);
				this.buf.b += Std.string(" while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" )");
			} else {
				var e = _g2;
				var loop = _g1;
				this.buf.b += Std.string("while( ");
				this.addValue(e,tabs);
				this.buf.b += Std.string(" ) ");
				this.addBlock(loop,tabs);
			}
			break;
		case 20:
			var _g1 = _g.args;
			var _g1 = _g.m;
			var e = _g.e;
			this.addExpr(e,tabs);
			break;
		}
	}
	,varName: function(v) {
		if(v.kind == hxsl_VarKind.Output) {
			if(this.isVertex) {
				return "gl_Position";
			}
			if(this.glES != null && this.glES <= 2) {
				if(this.outIndexes == null) {
					return "gl_FragColor";
				}
				return "gl_FragData[" + this.outIndexes.h[v.id] + "]";
			}
		}
		var n = this.varNames.h[v.id];
		if(n != null) {
			return n;
		}
		n = v.name;
		if(Object.prototype.hasOwnProperty.call(hxsl_GlslOut.KWDS.h,n)) {
			n = "_" + n;
		}
		if(Object.prototype.hasOwnProperty.call(this.allNames.h,n)) {
			var k = 2;
			n += "_";
			while(Object.prototype.hasOwnProperty.call(this.allNames.h,n + k)) ++k;
			n += k;
		}
		this.varNames.h[v.id] = n;
		this.allNames.h[n] = v.id;
		return n;
	}
	,newLine: function(e) {
		if(this.isBlock(e)) {
			this.buf.b += Std.string("\n");
		} else {
			this.buf.b += Std.string(";\n");
		}
	}
	,isBlock: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 4:
			var _g1 = _g.el;
			return true;
		case 13:
			var _g1 = _g.it;
			var _g1 = _g.v;
			var loop = _g.loop;
			return this.isBlock(loop);
		case 19:
			var _g1 = _g.e;
			if(_g.normalWhile == true) {
				var loop = _g.loop;
				return this.isBlock(loop);
			} else {
				return false;
			}
			break;
		default:
			return false;
		}
	}
	,initVar: function(v) {
		switch(v.kind._hx_index) {
		case 0:case 2:
			var _g = v.type;
			var tmp;
			if(_g._hx_index == 16) {
				var _g1 = _g.size;
				var _g1 = _g.t;
				tmp = true;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.buf.b += Std.string("layout(std140) ");
			}
			this.buf.b += Std.string("uniform ");
			break;
		case 1:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "attribute " : "in ");
			break;
		case 3:
			this.buf.b += Std.string(this.glES != null && this.glES <= 2 ? "varying " : this.isVertex ? "out " : "in ");
			break;
		case 4:
			break;
		case 5:
			if(this.glES != null && this.glES <= 2) {
				this.outIndexes.h[v.id] = this.outIndex++;
				return;
			}
			if(this.isVertex) {
				return;
			}
			if(this.glES != null) {
				this.buf.b += Std.string("layout(location=" + this.outIndex++ + ") ");
			}
			this.buf.b += Std.string("out ");
			break;
		case 6:
			return;
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 6) {
					var p = q.p;
					switch(p._hx_index) {
					case 0:
						this.buf.b += Std.string("lowp ");
						break;
					case 1:
						this.buf.b += Std.string("mediump ");
						break;
					case 2:
						this.buf.b += Std.string("highp ");
						break;
					}
				}
			}
		}
		this.addVar(v);
		this.buf.b += Std.string(";\n");
	}
	,initVars: function(s) {
		this.outIndex = 0;
		this.uniformBuffer = 0;
		this.outIndexes = new haxe_ds_IntMap();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.initVar(v);
		}
		this.buf.b += Std.string("\n");
		if(this.outIndex < 2) {
			this.outIndexes = null;
		} else if(!this.isVertex && (this.glES != null && this.glES <= 2)) {
			this.decl("#extension GL_EXT_draw_buffers : enable");
		}
	}
	,run: function(s) {
		this.locals = new haxe_ds_IntMap();
		this.decls = [];
		this.buf = new StringBuf();
		this.exprValues = [];
		this.decl("precision mediump float;");
		if(s.funs.length != 1) {
			throw haxe_Exception.thrown("assert");
		}
		var f = s.funs[0];
		this.isVertex = f.kind == hxsl_FunctionKind.Vertex;
		this.initVars(s);
		var tmp = this.buf;
		this.buf = new StringBuf();
		this.buf.b += Std.string("void main(void) {\n");
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < el.length) {
				var e = el[_g];
				++_g;
				this.buf.b += Std.string("\t");
				this.addExpr(e,"\t");
				this.newLine(e);
			}
		} else {
			this.addExpr(f.expr,"");
		}
		this.buf.b += Std.string("}");
		this.exprValues.push(this.buf.b);
		this.buf = tmp;
		var locals = Lambda.array(this.locals);
		locals.sort(function(v1,v2) {
			return Reflect.compare(v1.name,v2.name);
		});
		var _g = 0;
		while(_g < locals.length) {
			var v = locals[_g];
			++_g;
			this.addVar(v);
			this.buf.b += Std.string(";\n");
		}
		this.buf.b += Std.string("\n");
		var _g = 0;
		var _g1 = this.exprValues;
		while(_g < _g1.length) {
			var e = _g1[_g];
			++_g;
			this.buf.b += Std.string(e);
			this.buf.b += Std.string("\n\n");
		}
		if(this.glES != null) {
			this.decl("#version " + (this.version < 100 ? 100 : this.version) + (this.version > 150 ? " es" : ""));
		} else if(this.version != null) {
			this.decl("#version " + (this.version > 150 ? 150 : this.version));
		} else {
			this.decl("#version 130");
		}
		this.decls.push(this.buf.b);
		this.buf = null;
		return this.decls.join("\n");
	}
	,__class__: hxsl_GlslOut
};
var hxsl__$Linker_AllocatedVar = function() {
};
$hxClasses["hxsl._Linker.AllocatedVar"] = hxsl__$Linker_AllocatedVar;
hxsl__$Linker_AllocatedVar.__name__ = "hxsl._Linker.AllocatedVar";
hxsl__$Linker_AllocatedVar.prototype = {
	__class__: hxsl__$Linker_AllocatedVar
};
var hxsl__$Linker_ShaderInfos = function(n,v) {
	this.name = n;
	this.uid = hxsl__$Linker_ShaderInfos.UID++;
	this.vertex = v;
	this.processed = new haxe_ds_IntMap();
	this.usedFunctions = [];
	this.read = new haxe_ds_IntMap();
	this.write = new haxe_ds_IntMap();
};
$hxClasses["hxsl._Linker.ShaderInfos"] = hxsl__$Linker_ShaderInfos;
hxsl__$Linker_ShaderInfos.__name__ = "hxsl._Linker.ShaderInfos";
hxsl__$Linker_ShaderInfos.prototype = {
	__class__: hxsl__$Linker_ShaderInfos
};
var hxsl_Linker = function(batchMode) {
	if(batchMode == null) {
		batchMode = false;
	}
	this.debugDepth = 0;
	this.batchMode = batchMode;
};
$hxClasses["hxsl.Linker"] = hxsl_Linker;
hxsl_Linker.__name__ = "hxsl.Linker";
hxsl_Linker.prototype = {
	error: function(msg,p) {
		return hxsl_Error.t(msg,p);
	}
	,mergeVar: function(path,v,v2,p) {
		switch(v.kind._hx_index) {
		case 0:case 1:case 3:case 4:case 5:
			break;
		case 2:case 6:
			throw haxe_Exception.thrown("assert");
		}
		if(v.kind != v2.kind && v.kind != hxsl_VarKind.Local && v2.kind != hxsl_VarKind.Local) {
			this.error("'" + path + "' kind does not match : " + Std.string(v.kind) + " should be " + Std.string(v2.kind),p);
		}
		var _g = v2.type;
		var _g1 = v.type;
		if(_g1._hx_index == 13) {
			if(_g._hx_index == 13) {
				var fl1 = _g1.vl;
				var fl2 = _g.vl;
				var _g = 0;
				while(_g < fl1.length) {
					var f1 = fl1[_g];
					++_g;
					var ft = null;
					var _g1 = 0;
					while(_g1 < fl2.length) {
						var f2 = fl2[_g1];
						++_g1;
						if(f1.name == f2.name) {
							ft = f2;
							break;
						}
					}
					if(ft == null) {
						fl2.push(this.allocVar(f1,p).v);
					} else {
						this.mergeVar(path + "." + ft.name,f1,ft,p);
					}
				}
			} else if(!Type.enumEq(v.type,v2.type)) {
				this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
			}
		} else if(!Type.enumEq(v.type,v2.type)) {
			this.error("'" + path + "' type does not match : " + hxsl_Tools.toString(v.type) + " should be " + hxsl_Tools.toString(v2.type),p);
		}
	}
	,allocVar: function(v,p,path,parent) {
		var _gthis = this;
		if(v.parent != null && parent == null) {
			parent = this.allocVar(v.parent,p);
			var p1 = parent.v;
			path = p1.name;
			p1 = p1.parent;
			while(p1 != null) {
				path = p1.name + "." + path;
				p1 = p1.parent;
			}
		}
		var key = path == null ? v.name : path + "." + v.name;
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				if(q._hx_index == 4) {
					var n = q.n;
					key = n;
				}
			}
		}
		var v2 = this.varMap.h[key];
		var vname = v.name;
		if(v2 != null) {
			var _g = 0;
			var _g1 = v2.merged;
			while(_g < _g1.length) {
				var vm = _g1[_g];
				++_g;
				if(vm == v) {
					return v2;
				}
			}
			var tmp;
			if(!(v.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v.kind == hxsl_VarKind.Function || v.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v,hxsl_VarQualifier.Private))) {
				var v1 = v2.v;
				tmp = v1.kind == hxsl_VarKind.Param && !hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Shared) && !_gthis.isBatchShader || v1.kind == hxsl_VarKind.Function || v1.kind == hxsl_VarKind.Var && hxsl_Tools.hasQualifier(v1,hxsl_VarQualifier.Private);
			} else {
				tmp = true;
			}
			if(tmp || v.kind == hxsl_VarKind.Param && v2.v.kind == hxsl_VarKind.Param) {
				var k = 2;
				while(true) {
					var a = this.varMap.h[key + k];
					if(a == null) {
						break;
					}
					var _g = 0;
					var _g1 = a.merged;
					while(_g < _g1.length) {
						var vm = _g1[_g];
						++_g;
						if(vm == v) {
							return a;
						}
					}
					++k;
				}
				vname += k;
				key += k;
			} else {
				v2.merged.push(v);
				this.mergeVar(key,v,v2.v,p);
				this.varIdMap.h[v.id] = v2.id;
				return v2;
			}
		}
		var vid = this.allVars.length + 1;
		var v2 = { id : vid, name : vname, type : v.type, kind : v.kind, qualifiers : v.qualifiers, parent : parent == null ? null : parent.v};
		var a = new hxsl__$Linker_AllocatedVar();
		a.v = v2;
		a.merged = [v];
		a.path = key;
		a.id = vid;
		a.parent = parent;
		a.instanceIndex = this.curInstance;
		this.allVars.push(a);
		this.varMap.h[key] = a;
		var _g = v2.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = [];
			var _g1 = 0;
			while(_g1 < vl.length) {
				var v = vl[_g1];
				++_g1;
				_g.push(this.allocVar(v,p,key,a).v);
			}
			v2.type = hxsl_Type.TStruct(_g);
		}
		return a;
	}
	,mapExprVar: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			if(!this.locals.h.hasOwnProperty(v.id)) {
				var v1 = this.allocVar(v,e.p);
				if(this.curShader != null && !this.curShader.write.h.hasOwnProperty(v1.id)) {
					this.curShader.read.h[v1.id] = v1;
					if(this.curShader.vertex == null && v1.v.kind == hxsl_VarKind.Var) {
						this.curShader.vertex = false;
					}
				}
				return { e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p};
			}
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			var _g1 = e1.e;
			switch(op._hx_index) {
			case 4:
				switch(_g1._hx_index) {
				case 1:
					var _g2 = _g1.v;
					var v = _g2;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e1.p);
						if(this.curShader != null) {
							this.curShader.write.h[v1.id] = v1;
						}
						return { e : hxsl_TExprDef.TBinop(op,{ e : hxsl_TExprDef.TVar(v1.v), t : v1.v.type, p : e.p},e21), t : e.t, p : e.p};
					} else {
						var v = _g2;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				case 9:
					var _g2 = _g1.regs;
					var _g2 = _g1.e;
					var _g3 = _g2.t;
					var _g3 = _g2.p;
					var _g3 = _g2.e;
					if(_g3._hx_index == 1) {
						var v = _g3.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			case 20:
				var _g2 = op.op;
				switch(_g1._hx_index) {
				case 1:
					var v = _g1.v;
					if(!this.locals.h.hasOwnProperty(v.id)) {
						var e11 = this.mapExprVar(e1);
						var e21 = this.mapExprVar(e2);
						var v1 = this.allocVar(v,e11.p);
						if(this.curShader != null) {
							this.curShader.write.h[v1.id] = v1;
						}
						return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
					}
					break;
				case 9:
					var _g2 = _g1.regs;
					var _g2 = _g1.e;
					var _g1 = _g2.t;
					var _g1 = _g2.p;
					var _g1 = _g2.e;
					if(_g1._hx_index == 1) {
						var v = _g1.v;
						if(!this.locals.h.hasOwnProperty(v.id)) {
							var e11 = this.mapExprVar(e1);
							var e21 = this.mapExprVar(e2);
							var v1 = this.allocVar(v,e11.p);
							if(this.curShader != null) {
								this.curShader.write.h[v1.id] = v1;
							}
							return { e : hxsl_TExprDef.TBinop(op,e11,e21), t : e.t, p : e.p};
						}
					}
					break;
				default:
				}
				break;
			default:
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		case 11:
			if(this.curShader != null) {
				this.curShader.vertex = false;
				this.curShader.hasDiscard = true;
			}
			break;
		case 13:
			var _g1 = _g.loop;
			var _g1 = _g.it;
			var v = _g.v;
			this.locals.h[v.id] = true;
			break;
		default:
		}
		return hxsl_Tools.map(e,$bind(this,this.mapExprVar));
	}
	,addShader: function(name,vertex,e,p) {
		var s = new hxsl__$Linker_ShaderInfos(name,vertex);
		this.curShader = s;
		s.priority = p;
		s.body = this.mapExprVar(e);
		this.shaders.push(s);
		this.curShader = null;
		return s;
	}
	,sortByPriorityDesc: function(s1,s2) {
		if(s1.priority == s2.priority) {
			return s1.uid - s2.uid;
		}
		return s2.priority - s1.priority;
	}
	,buildDependency: function(s,v,isWritten) {
		var found = !isWritten;
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var parent = _g1[_g];
			++_g;
			if(parent == s) {
				found = true;
				continue;
			} else if(!found) {
				continue;
			}
			if(!parent.write.h.hasOwnProperty(v.id)) {
				continue;
			}
			if(s.vertex) {
				if(parent.vertex == false) {
					continue;
				}
				if(parent.vertex == null) {
					parent.vertex = true;
				}
			}
			s.deps.set(parent,true);
			this.debugDepth++;
			this.initDependencies(parent);
			this.debugDepth--;
			if(!parent.read.h.hasOwnProperty(v.id)) {
				return;
			}
		}
		if(v.v.kind == hxsl_VarKind.Var) {
			this.error("Variable " + v.path + " required by " + s.name + " is missing initializer",null);
		}
	}
	,initDependencies: function(s) {
		if(s.deps != null) {
			return;
		}
		s.deps = new haxe_ds_ObjectMap();
		var r = s.read.iterator();
		while(r.hasNext()) {
			var r1 = r.next();
			this.buildDependency(s,r1,s.write.h.hasOwnProperty(r1.id));
		}
		if(s.vertex == null) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == false) {
					s.vertex = false;
					break;
				}
			}
		}
		if(s.vertex) {
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.vertex == null) {
					d1.vertex = true;
				}
			}
		}
	}
	,collect: function(cur,out,vertex) {
		if(cur.onStack) {
			this.error("Loop in shader dependencies (" + cur.name + ")",null);
		}
		if(cur.marked == vertex) {
			return;
		}
		cur.marked = vertex;
		cur.onStack = true;
		var _g = [];
		var d = cur.deps.keys();
		while(d.hasNext()) {
			var d1 = d.next();
			_g.push(d1);
		}
		var deps = _g;
		deps.sort($bind(this,this.sortByPriorityDesc));
		var _g = 0;
		while(_g < deps.length) {
			var d = deps[_g];
			++_g;
			this.collect(d,out,vertex);
		}
		if(cur.vertex == null) {
			cur.vertex = vertex;
		}
		if(cur.vertex == vertex) {
			out.push(cur);
		}
		cur.onStack = false;
	}
	,uniqueLocals: function(expr,locals) {
		var _g = expr.e;
		switch(_g._hx_index) {
		case 4:
			var el = _g.el;
			var _g1 = new haxe_ds_StringMap();
			var k = haxe_ds_StringMap.keysIterator(locals.h);
			while(k.hasNext()) {
				var k1 = k.next();
				_g1.h[k1] = true;
			}
			var locals1 = _g1;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.uniqueLocals(e,locals1);
			}
			break;
		case 7:
			var _g1 = _g.init;
			var v = _g.v;
			if(Object.prototype.hasOwnProperty.call(locals.h,v.name)) {
				var k = 2;
				while(Object.prototype.hasOwnProperty.call(locals.h,v.name + k)) ++k;
				v.name += k;
			}
			locals.h[v.name] = true;
			break;
		default:
			var _g = $bind(this,this.uniqueLocals);
			var locals1 = locals;
			hxsl_Tools.iter(expr,function(expr) {
				_g(expr,locals1);
			});
		}
	}
	,link: function(shadersData) {
		var _gthis = this;
		this.varMap = new haxe_ds_StringMap();
		this.varIdMap = new haxe_ds_IntMap();
		this.allVars = [];
		this.shaders = [];
		this.locals = new haxe_ds_IntMap();
		var dupShaders = new haxe_ds_ObjectMap();
		var _g = [];
		var _g1 = 0;
		while(_g1 < shadersData.length) {
			var s = shadersData[_g1];
			++_g1;
			var s1 = s;
			var sreal = s1;
			if(dupShaders.h.__keys__[s1.__id__] != null) {
				s1 = hxsl_Clone.shaderData(s1);
			}
			dupShaders.set(s1,sreal);
			_g.push(s1);
		}
		shadersData = _g;
		this.curInstance = 0;
		var outVars = [];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			this.isBatchShader = this.batchMode && StringTools.startsWith(s.name,"batchShader_");
			var _g1 = 0;
			var _g2 = s.vars;
			while(_g1 < _g2.length) {
				var v = _g2[_g1];
				++_g1;
				var v2 = this.allocVar(v,null);
				if(this.isBatchShader && v2.v.kind == hxsl_VarKind.Param && !StringTools.startsWith(v2.path,"Batch_")) {
					v2.v.kind = hxsl_VarKind.Local;
				}
				if(v.kind == hxsl_VarKind.Output) {
					outVars.push(v);
				}
			}
			var _g3 = 0;
			var _g4 = s.funs;
			while(_g3 < _g4.length) {
				var f = _g4[_g3];
				++_g3;
				var v1 = this.allocVar(f.ref,f.expr.p);
				v1.kind = f.kind;
			}
			this.curInstance++;
		}
		var priority = 0;
		var initPrio_init = [-3000];
		var initPrio_vert = [-2000];
		var initPrio_frag = [-1000];
		var _g = 0;
		while(_g < shadersData.length) {
			var s = shadersData[_g];
			++_g;
			var _g1 = 0;
			var _g2 = s.funs;
			while(_g1 < _g2.length) {
				var f = _g2[_g1];
				++_g1;
				var v = this.allocVar(f.ref,f.expr.p);
				if(v.kind == null) {
					throw haxe_Exception.thrown("assert");
				}
				switch(v.kind._hx_index) {
				case 0:case 1:
					this.addShader(s.name + "." + (v.kind == hxsl_FunctionKind.Vertex ? "vertex" : "fragment"),v.kind == hxsl_FunctionKind.Vertex,f.expr,priority);
					break;
				case 2:
					var prio;
					var status;
					switch(f.ref.name) {
					case "__init__fragment":
						prio = initPrio_frag;
						status = false;
						break;
					case "__init__vertex":
						prio = initPrio_vert;
						status = true;
						break;
					default:
						prio = initPrio_init;
						status = null;
					}
					var _g3 = f.expr.e;
					if(_g3._hx_index == 4) {
						var el = _g3.el;
						var index = 0;
						var _g4 = 0;
						while(_g4 < el.length) {
							var e = el[_g4];
							++_g4;
							this.addShader(s.name + "." + f.ref.name + index++,status,e,prio[0]++);
						}
					} else {
						this.addShader(s.name + "." + f.ref.name,status,f.expr,prio[0]++);
					}
					break;
				case 3:
					throw haxe_Exception.thrown("Unexpected helper function in linker " + v.v.name);
				}
			}
			++priority;
		}
		this.shaders.sort($bind(this,this.sortByPriorityDesc));
		var entry = new hxsl__$Linker_ShaderInfos("<entry>",false);
		entry.deps = new haxe_ds_ObjectMap();
		var _g = 0;
		while(_g < outVars.length) {
			var v = outVars[_g];
			++_g;
			this.buildDependency(entry,this.allocVar(v,null),false);
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.hasDiscard) {
				this.initDependencies(s);
				entry.deps.set(s,true);
			}
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			if(s.vertex != null) {
				continue;
			}
			var onlyParams = true;
			var r = s.read.iterator();
			while(r.hasNext()) {
				var r1 = r.next();
				if(r1.v.kind != hxsl_VarKind.Param) {
					onlyParams = false;
					break;
				}
			}
			if(onlyParams) {
				s.vertex = false;
			}
		}
		var v = [];
		var f = [];
		this.collect(entry,v,true);
		this.collect(entry,f,false);
		if(f.pop() != entry) {
			throw haxe_Exception.thrown("assert");
		}
		var _g = 0;
		var _g1 = this.shaders;
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			s.marked = null;
		}
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var d = s.deps.keys();
			while(d.hasNext()) {
				var d1 = d.next();
				if(d1.marked == null) {
					this.error(d1.name + " needed by " + s.name + " is unreachable",null);
				}
			}
			s.marked = true;
		}
		var outVars = [];
		var varMap_h = { };
		var addVar = null;
		addVar = function(v) {
			if(varMap_h.hasOwnProperty(v.id)) {
				return;
			}
			varMap_h[v.id] = true;
			if(v.v.parent != null) {
				addVar(v.parent);
			} else {
				outVars.push(v.v);
			}
		};
		var _g = 0;
		var _g1 = v.concat(f);
		while(_g < _g1.length) {
			var s = _g1[_g];
			++_g;
			var v1 = s.read.iterator();
			while(v1.hasNext()) {
				var v2 = v1.next();
				addVar(v2);
			}
			var v3 = s.write.iterator();
			while(v3.hasNext()) {
				var v4 = v3.next();
				addVar(v4);
			}
		}
		var cleanVar = null;
		cleanVar = function(v) {
			var _g = v.type;
			if(_g._hx_index == 13) {
				var vl = _g.vl;
				if(v.kind != hxsl_VarKind.Input) {
					var vout = [];
					var _g = 0;
					while(_g < vl.length) {
						var v1 = vl[_g];
						++_g;
						if(varMap_h.hasOwnProperty(v1.id)) {
							cleanVar(v1);
							vout.push(v1);
						}
					}
					v.type = hxsl_Type.TStruct(vout);
				}
			}
		};
		var _g = 0;
		while(_g < outVars.length) {
			var v1 = outVars[_g];
			++_g;
			cleanVar(v1);
		}
		var build = function(kind,name,a) {
			var v = { id : hxsl_Tools.allocVarId(), name : name, type : hxsl_Type.TFun([{ ret : hxsl_Type.TVoid, args : []}]), kind : hxsl_VarKind.Function};
			outVars.push(v);
			var exprs = [];
			var _g = 0;
			while(_g < a.length) {
				var s = a[_g];
				++_g;
				var _g1 = s.body.e;
				if(_g1._hx_index == 4) {
					var el = _g1.el;
					var _g2 = 0;
					while(_g2 < el.length) {
						var e = el[_g2];
						++_g2;
						exprs.push(e);
					}
				} else {
					exprs.push(s.body);
				}
			}
			var expr = { e : hxsl_TExprDef.TBlock(exprs), t : hxsl_Type.TVoid, p : exprs.length == 0 ? null : exprs[0].p};
			_gthis.uniqueLocals(expr,new haxe_ds_StringMap());
			return { kind : kind, ref : v, ret : hxsl_Type.TVoid, args : [], expr : expr};
		};
		var funs = [build(hxsl_FunctionKind.Vertex,"vertex",v),build(hxsl_FunctionKind.Fragment,"fragment",f)];
		var s = dupShaders.keys();
		while(s.hasNext()) {
			var s1 = s.next();
			var sreal = dupShaders.h[s1.__id__];
			if(s1 == sreal) {
				continue;
			}
			var _g = 0;
			var _g1 = s1.vars.length;
			while(_g < _g1) {
				var i = _g++;
				this.allocVar(s1.vars[i],null).merged.unshift(sreal.vars[i]);
			}
		}
		return { name : "out", vars : outVars, funs : funs};
	}
	,__class__: hxsl_Linker
};
var hxsl_Output = $hxEnums["hxsl.Output"] = { __ename__ : true, __constructs__ : ["Const","Value","PackNormal","PackFloat","Vec2","Vec3","Vec4","Swiz"]
	,Const: ($_=function(v) { return {_hx_index:0,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Value: ($_=function(v,size) { return {_hx_index:1,v:v,size:size,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v","size"],$_)
	,PackNormal: ($_=function(v) { return {_hx_index:2,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,PackFloat: ($_=function(v) { return {_hx_index:3,v:v,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["v"],$_)
	,Vec2: ($_=function(a) { return {_hx_index:4,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec3: ($_=function(a) { return {_hx_index:5,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Vec4: ($_=function(a) { return {_hx_index:6,a:a,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a"],$_)
	,Swiz: ($_=function(a,swiz) { return {_hx_index:7,a:a,swiz:swiz,__enum__:"hxsl.Output",toString:$estr}; },$_.__params__ = ["a","swiz"],$_)
};
hxsl_Output.__empty_constructs__ = [];
var hxsl_Printer = function(varId) {
	if(varId == null) {
		varId = false;
	}
	this.varId = varId;
};
$hxClasses["hxsl.Printer"] = hxsl_Printer;
hxsl_Printer.__name__ = "hxsl.Printer";
hxsl_Printer.opStr = function(op) {
	switch(op._hx_index) {
	case 0:
		return "+";
	case 1:
		return "*";
	case 2:
		return "/";
	case 3:
		return "-";
	case 4:
		return "=";
	case 5:
		return "==";
	case 6:
		return "!=";
	case 7:
		return ">";
	case 8:
		return ">=";
	case 9:
		return "<";
	case 10:
		return "<=";
	case 11:
		return "&";
	case 12:
		return "|";
	case 13:
		return "^";
	case 14:
		return "&&";
	case 15:
		return "||";
	case 16:
		return "<<";
	case 17:
		return ">>";
	case 18:
		return ">>>";
	case 19:
		return "%";
	case 20:
		var op1 = op.op;
		return hxsl_Printer.opStr(op1) + "=";
	case 21:
		return "...";
	case 22:
		return "=>";
	case 23:
		return " in ";
	}
};
hxsl_Printer.toString = function(e,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).exprString(e);
};
hxsl_Printer.shaderToString = function(s,varId) {
	if(varId == null) {
		varId = false;
	}
	return new hxsl_Printer(varId).shaderString(s);
};
hxsl_Printer.prototype = {
	shaderString: function(s) {
		this.buffer = new StringBuf();
		var _g = 0;
		var _g1 = s.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addVar(v,null);
			this.buffer.b += Std.string(";\n");
		}
		if(s.vars.length > 0) {
			this.buffer.b += Std.string("\n");
		}
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.addFun(f);
			this.buffer.b += Std.string("\n\n");
		}
		return this.buffer.b;
	}
	,exprString: function(e) {
		this.buffer = new StringBuf();
		this.addExpr(e,"");
		return this.buffer.b;
	}
	,addVar: function(v,defKind,tabs,parent) {
		if(tabs == null) {
			tabs = "";
		}
		if(v.qualifiers != null) {
			var _g = 0;
			var _g1 = v.qualifiers;
			while(_g < _g1.length) {
				var q = _g1[_g];
				++_g;
				var v1;
				switch(q._hx_index) {
				case 0:
					var max = q.max;
					v1 = "const" + (max == null ? "" : "(" + max + ")");
					break;
				case 1:
					v1 = "private";
					break;
				case 2:
					v1 = "nullable";
					break;
				case 3:
					v1 = "perObject";
					break;
				case 4:
					var n = q.n;
					v1 = "name('" + n + "')";
					break;
				case 5:
					v1 = "shared";
					break;
				case 6:
					var p = q.p;
					v1 = $hxEnums[p.__enum__].__constructs__[p._hx_index].toLowerCase() + "p";
					break;
				case 7:
					var max1 = q.max;
					var min = q.min;
					v1 = "range(" + min + "," + max1 + ")";
					break;
				case 8:
					v1 = "ignore";
					break;
				case 9:
					var n1 = q.v;
					v1 = "perInstance(" + n1 + ")";
					break;
				case 10:
					var s = q.s;
					v1 = "doc(\"" + StringTools.replace(s,"\"","\\\"") + "\")";
					break;
				}
				this.buffer.b += Std.string("@" + v1 + " ");
			}
		}
		if(v.kind != defKind) {
			switch(v.kind._hx_index) {
			case 0:
				this.buffer.b += Std.string("@global ");
				break;
			case 1:
				this.buffer.b += Std.string("@input ");
				break;
			case 2:
				this.buffer.b += Std.string("@param ");
				break;
			case 3:
				this.buffer.b += Std.string("@varying ");
				break;
			case 4:
				this.buffer.b += Std.string("@local ");
				break;
			case 5:
				this.buffer.b += Std.string("@output ");
				break;
			case 6:
				this.buffer.b += Std.string("@function ");
				break;
			}
		}
		this.buffer.b += Std.string("var ");
		if(v.parent == parent) {
			this.buffer.b += Std.string(v.name + (this.varId ? "@" + v.id : ""));
		} else {
			this.addVarName(v);
		}
		this.buffer.b += Std.string(" : ");
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			this.buffer.b += Std.string("{");
			var first = true;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addVar(v1,v1.kind,tabs,v1);
			}
			this.buffer.b += Std.string("}");
		} else {
			var v1 = hxsl_Tools.toString(v.type);
			this.buffer.b += Std.string(v1);
		}
	}
	,addFun: function(f) {
		this.buffer.b += Std.string("function " + f.ref.name + "(");
		var first = true;
		var _g = 0;
		var _g1 = f.args;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(first) {
				this.buffer.b += Std.string(" ");
				first = false;
			} else {
				this.buffer.b += Std.string(", ");
			}
			this.addVar(a,hxsl_VarKind.Local);
		}
		if(f.args.length > 0) {
			this.buffer.b += Std.string(" ");
		}
		var v = ") : " + hxsl_Tools.toString(f.ret) + " ";
		this.buffer.b += Std.string(v);
		this.addExpr(f.expr,"");
	}
	,addVarName: function(v) {
		if(v.parent != null) {
			this.addVarName(v.parent);
			this.buffer.b += Std.string(".");
		}
		this.buffer.b += Std.string(v.name);
		if(this.varId) {
			this.buffer.b += Std.string("@" + v.id);
		}
	}
	,addConst: function(c) {
		var _this = this.buffer;
		var _this1 = _this.b;
		var tmp;
		switch(c._hx_index) {
		case 0:
			tmp = "null";
			break;
		case 1:
			var b = c.b;
			tmp = b;
			break;
		case 2:
			var i = c.v;
			tmp = i;
			break;
		case 3:
			var f = c.v;
			tmp = f;
			break;
		case 4:
			var s = c.v;
			tmp = "\"" + s + "\"";
			break;
		}
		_this.b = _this1 + Std.string(tmp);
	}
	,addExpr: function(e,tabs) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 0:
			var c = _g.c;
			this.addConst(c);
			break;
		case 1:
			var v = _g.v;
			this.addVarName(v);
			break;
		case 2:
			var g = _g.g;
			var v = hxsl_Tools2.toString(g);
			this.buffer.b += Std.string(v);
			break;
		case 3:
			var e = _g.e;
			this.buffer.b += Std.string("(");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(")");
			break;
		case 4:
			var el = _g.el;
			this.buffer.b += Std.string("{");
			tabs += "\t";
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(";");
			}
			tabs = HxOverrides.substr(tabs,1,null);
			if(el.length > 0) {
				this.buffer.b += Std.string("\n" + tabs);
			}
			this.buffer.b += Std.string("}");
			break;
		case 5:
			var e2 = _g.e2;
			var e1 = _g.e1;
			var op = _g.op;
			this.addExpr(e1,tabs);
			var v = " " + hxsl_Printer.opStr(op) + " ";
			this.buffer.b += Std.string(v);
			this.addExpr(e2,tabs);
			break;
		case 6:
			var e = _g.e1;
			var op = _g.op;
			var _this = this.buffer;
			var _this1 = _this.b;
			var tmp;
			switch(op._hx_index) {
			case 0:
				tmp = "++";
				break;
			case 1:
				tmp = "--";
				break;
			case 2:
				tmp = "!";
				break;
			case 3:
				tmp = "-";
				break;
			case 4:
				tmp = "~";
				break;
			}
			_this.b = _this1 + Std.string(tmp);
			this.addExpr(e,tabs);
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			this.addVar(v,hxsl_VarKind.Local,tabs);
			if(init != null) {
				this.buffer.b += Std.string(" = ");
				this.addExpr(init,tabs);
			}
			break;
		case 8:
			var el = _g.args;
			var e = _g.e;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string("(");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string(")");
			break;
		case 9:
			var regs = _g.regs;
			var e = _g.e;
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(".");
			var _g1 = 0;
			while(_g1 < regs.length) {
				var r = regs[_g1];
				++_g1;
				this.buffer.b += Std.string(hxsl_Printer.SWIZ[r._hx_index]);
			}
			break;
		case 10:
			var eelse = _g.eelse;
			var eif = _g.eif;
			var cond = _g.econd;
			this.buffer.b += Std.string("if( ");
			this.addExpr(cond,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(eif,tabs);
			if(eelse != null) {
				this.buffer.b += Std.string(" else ");
				this.addExpr(eelse,tabs);
			}
			break;
		case 11:
			this.buffer.b += Std.string("discard");
			break;
		case 12:
			var e = _g.e;
			this.buffer.b += Std.string("return");
			if(e != null) {
				this.buffer.b += Std.string(" ");
				this.addExpr(e,tabs);
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			this.buffer.b += Std.string("for( ");
			this.addVarName(v);
			this.buffer.b += Std.string(" in ");
			this.addExpr(it,tabs);
			this.buffer.b += Std.string(" ) ");
			this.addExpr(loop,tabs);
			break;
		case 14:
			this.buffer.b += Std.string("continue");
			break;
		case 15:
			this.buffer.b += Std.string("break");
			break;
		case 16:
			var e2 = _g.index;
			var e1 = _g.e;
			this.addExpr(e1,tabs);
			this.buffer.b += Std.string("[");
			this.addExpr(e2,tabs);
			this.buffer.b += Std.string("]");
			break;
		case 17:
			var el = _g.el;
			this.buffer.b += Std.string("[");
			var first = true;
			var _g1 = 0;
			while(_g1 < el.length) {
				var e = el[_g1];
				++_g1;
				if(first) {
					first = false;
				} else {
					this.buffer.b += Std.string(", ");
				}
				this.addExpr(e,tabs);
			}
			this.buffer.b += Std.string("]");
			break;
		case 18:
			var def = _g.def;
			var cases = _g.cases;
			var e = _g.e;
			this.buffer.b += Std.string("switch( ");
			this.addExpr(e,tabs);
			this.buffer.b += Std.string(") {");
			var old = tabs;
			var _g1 = 0;
			while(_g1 < cases.length) {
				var c = cases[_g1];
				++_g1;
				this.buffer.b += Std.string("\n" + tabs);
				this.buffer.b += Std.string("case ");
				var first = true;
				var _g2 = 0;
				var _g3 = c.values;
				while(_g2 < _g3.length) {
					var v = _g3[_g2];
					++_g2;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addExpr(v,tabs);
				}
				tabs += "\t";
				this.buffer.b += Std.string(":\n" + tabs);
				this.addExpr(c.expr,tabs);
				tabs = old;
			}
			if(def != null) {
				this.buffer.b += Std.string("\n" + tabs);
				tabs += "\t";
				this.buffer.b += Std.string("default:\n" + tabs);
				this.addExpr(def,tabs);
				tabs = old;
			}
			this.buffer.b += Std.string("\n" + tabs + "}");
			break;
		case 19:
			var _g1 = _g.loop;
			var _g2 = _g.e;
			if(_g.normalWhile == false) {
				var e = _g2;
				var loop = _g1;
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string("do {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "} while( ");
				this.addExpr(e,tabs);
				this.buffer.b += Std.string(" )");
			} else {
				var e = _g2;
				var loop = _g1;
				this.buffer.b += Std.string("while( ");
				this.addExpr(e,tabs);
				var old = tabs;
				tabs += "\t";
				this.buffer.b += Std.string(" ) {\n" + tabs);
				this.addExpr(loop,tabs);
				tabs = old;
				this.buffer.b += Std.string("\n" + tabs + "}");
			}
			break;
		case 20:
			var e = _g.e;
			var args = _g.args;
			var m = _g.m;
			this.buffer.b += Std.string(m);
			if(args.length > 0) {
				this.buffer.b += Std.string("(");
				var first = true;
				var _g = 0;
				while(_g < args.length) {
					var c = args[_g];
					++_g;
					if(first) {
						first = false;
					} else {
						this.buffer.b += Std.string(", ");
					}
					this.addConst(c);
				}
				this.buffer.b += Std.string(")");
			}
			this.buffer.b += Std.string(" ");
			this.addExpr(e,tabs);
			break;
		}
	}
	,__class__: hxsl_Printer
};
var hxsl_AllocParam = function(name,pos,instance,index,type) {
	this.name = name;
	this.pos = pos;
	this.instance = instance;
	this.index = index;
	this.type = type;
};
$hxClasses["hxsl.AllocParam"] = hxsl_AllocParam;
hxsl_AllocParam.__name__ = "hxsl.AllocParam";
hxsl_AllocParam.prototype = {
	__class__: hxsl_AllocParam
};
var hxsl_AllocGlobal = function(pos,path,type) {
	this.pos = pos;
	this.path = path;
	this.gid = hxsl_Globals.allocID(path);
	this.type = type;
};
$hxClasses["hxsl.AllocGlobal"] = hxsl_AllocGlobal;
hxsl_AllocGlobal.__name__ = "hxsl.AllocGlobal";
hxsl_AllocGlobal.prototype = {
	__class__: hxsl_AllocGlobal
};
var hxsl_RuntimeShaderData = function() {
};
$hxClasses["hxsl.RuntimeShaderData"] = hxsl_RuntimeShaderData;
hxsl_RuntimeShaderData.__name__ = "hxsl.RuntimeShaderData";
hxsl_RuntimeShaderData.prototype = {
	__class__: hxsl_RuntimeShaderData
};
var hxsl_ShaderInstanceDesc = function(shader,bits) {
	this.shader = shader;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderInstanceDesc"] = hxsl_ShaderInstanceDesc;
hxsl_ShaderInstanceDesc.__name__ = "hxsl.ShaderInstanceDesc";
hxsl_ShaderInstanceDesc.prototype = {
	__class__: hxsl_ShaderInstanceDesc
};
var hxsl_RuntimeShader = function() {
	this.id = hxsl_RuntimeShader.UID++;
};
$hxClasses["hxsl.RuntimeShader"] = hxsl_RuntimeShader;
hxsl_RuntimeShader.__name__ = "hxsl.RuntimeShader";
hxsl_RuntimeShader.prototype = {
	__class__: hxsl_RuntimeShader
};
var hxsl_Serializer = function() {
};
$hxClasses["hxsl.Serializer"] = hxsl_Serializer;
hxsl_Serializer.__name__ = "hxsl.Serializer";
hxsl_Serializer.prototype = {
	readVarInt: function() {
		var b = this.input.readByte();
		if(b < 128) {
			return b;
		}
		if(b == 255) {
			return this.input.readInt32();
		}
		return (b & 127) << 8 | this.input.readByte();
	}
	,readType: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Type.TVoid;
		case 1:
			return hxsl_Type.TInt;
		case 2:
			return hxsl_Type.TBool;
		case 3:
			return hxsl_Type.TFloat;
		case 4:
			return hxsl_Type.TString;
		case 5:
			var bits = this.input.readByte();
			var v = hxsl_Serializer.TVECS.h[bits];
			if(v == null) {
				v = hxsl_Type.TVec(bits & 7,Type.createEnumIndex(hxsl_VecType,bits >> 3,null));
				hxsl_Serializer.TVECS.h[bits] = v;
			}
			return v;
		case 6:
			return hxsl_Type.TMat3;
		case 7:
			return hxsl_Type.TMat4;
		case 8:
			return hxsl_Type.TMat3x4;
		case 9:
			return hxsl_Type.TBytes(this.input.readInt32());
		case 10:
			return hxsl_Type.TSampler2D;
		case 11:
			return hxsl_Type.TSampler2DArray;
		case 12:
			return hxsl_Type.TSamplerCube;
		case 13:
			var id = this.readVarInt();
			var t = this.types[id];
			if(t != null) {
				return t;
			}
			var f = $bind(this,this.readVar);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			t = hxsl_Type.TStruct(_g);
			this.types[id] = t;
			return t;
		case 14:
			return hxsl_Type.TFun(null);
		case 15:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TArray(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 16:
			var t = this.readType();
			var v = this.readVar();
			return hxsl_Type.TBuffer(t,v == null ? hxsl_SizeDecl.SConst(this.readVarInt()) : hxsl_SizeDecl.SVar(v));
		case 17:
			return hxsl_Type.TChannel(this.input.readByte());
		case 18:
			return hxsl_Type.TMat2;
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readString: function() {
		var len = this.readVarInt();
		var s = this.input.read(len).getString(0,len);
		return s;
	}
	,readConst: function() {
		switch(this.input.readByte()) {
		case 0:
			return hxsl_Const.CNull;
		case 1:
			return hxsl_Const.CBool(this.input.readByte() != 0);
		case 2:
			return hxsl_Const.CInt(this.input.readInt32());
		case 3:
			return hxsl_Const.CFloat(this.input.readDouble());
		case 4:
			return hxsl_Const.CString(this.readString());
		default:
			throw haxe_Exception.thrown("assert");
		}
	}
	,readExpr: function() {
		var _gthis = this;
		var k = this.input.readByte();
		if(k-- == 0) {
			return null;
		}
		var e;
		switch(k) {
		case 0:
			e = hxsl_TExprDef.TConst(this.readConst());
			break;
		case 1:
			e = hxsl_TExprDef.TVar(this.readVar());
			break;
		case 2:
			e = hxsl_TExprDef.TGlobal(hxsl_Serializer.TGLOBALS[this.input.readByte()]);
			break;
		case 3:
			e = hxsl_TExprDef.TParenthesis(this.readExpr());
			break;
		case 4:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TBlock(_g);
			break;
		case 5:
			var op = this.input.readByte();
			e = hxsl_TExprDef.TBinop(op >= 128 ? haxe_macro_Binop.OpAssignOp(hxsl_Serializer.BOPS[op & 127]) : hxsl_Serializer.BOPS[op],this.readExpr(),this.readExpr());
			break;
		case 6:
			e = hxsl_TExprDef.TUnop(hxsl_Serializer.UNOPS[this.input.readByte()],this.readExpr());
			break;
		case 7:
			e = hxsl_TExprDef.TVarDecl(this.readVar(),this.readExpr());
			break;
		case 8:
			var e1 = this.readExpr();
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TCall(e1,_g);
			break;
		case 9:
			var e1 = this.readExpr();
			var bits = this.input.readUInt16();
			var swiz = hxsl_Serializer.TSWIZ.h[bits];
			if(swiz == null) {
				var _g = [];
				var _g1 = 0;
				var _g2 = (bits & 3) + 1;
				while(_g1 < _g2) {
					var i = _g1++;
					_g.push(hxsl_Serializer.REGS[bits >> i * 2 + 2 & 3]);
				}
				swiz = _g;
				hxsl_Serializer.TSWIZ.h[bits] = swiz;
			}
			e = hxsl_TExprDef.TSwiz(e1,swiz);
			break;
		case 10:
			e = hxsl_TExprDef.TIf(this.readExpr(),this.readExpr(),this.readExpr());
			break;
		case 11:
			e = hxsl_TExprDef.TDiscard;
			break;
		case 12:
			e = hxsl_TExprDef.TReturn(this.readExpr());
			break;
		case 13:
			e = hxsl_TExprDef.TFor(this.readVar(),this.readExpr(),this.readExpr());
			break;
		case 14:
			e = hxsl_TExprDef.TContinue;
			break;
		case 15:
			e = hxsl_TExprDef.TBreak;
			break;
		case 16:
			e = hxsl_TExprDef.TArray(this.readExpr(),this.readExpr());
			break;
		case 17:
			var f = $bind(this,this.readExpr);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TArrayDecl(_g);
			break;
		case 18:
			var e1 = this.readExpr();
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				var f = $bind(_gthis,_gthis.readExpr);
				var _g3 = [];
				var _g4 = 0;
				var _g5 = _gthis.readVarInt();
				while(_g4 < _g5) {
					var i1 = _g4++;
					_g3.push(f());
				}
				_g.push({ values : _g3, expr : _gthis.readExpr()});
			}
			e = hxsl_TExprDef.TSwitch(e1,_g,this.readExpr());
			break;
		case 19:
			e = hxsl_TExprDef.TWhile(this.readExpr(),this.readExpr(),this.input.readByte() != 0);
			break;
		case 20:
			var e1 = this.readString();
			var f = $bind(this,this.readConst);
			var _g = [];
			var _g1 = 0;
			var _g2 = this.readVarInt();
			while(_g1 < _g2) {
				var i = _g1++;
				_g.push(f());
			}
			e = hxsl_TExprDef.TMeta(e1,_g,this.readExpr());
			break;
		default:
			throw haxe_Exception.thrown("assert");
		}
		return { e : e, t : this.readType(), p : null};
	}
	,readVar: function() {
		var id = this.readVarInt();
		if(id == 0) {
			return null;
		}
		var v = this.varMap.h[id];
		if(v != null) {
			return v;
		}
		v = { id : hxsl_Tools.allocVarId(), name : this.readString(), type : null, kind : null};
		this.varMap.h[id] = v;
		v.type = this.readType();
		v.kind = hxsl_Serializer.VKINDS[this.input.readByte()];
		v.parent = this.readVar();
		var nq = this.input.readByte();
		if(nq > 0) {
			v.qualifiers = [];
			var _g = 0;
			var _g1 = nq;
			while(_g < _g1) {
				var i = _g++;
				var qid = this.input.readByte();
				var q;
				switch(qid) {
				case 0:
					var n = this.input.readInt32();
					q = hxsl_VarQualifier.Const(n == 0 ? null : n);
					break;
				case 1:
					q = hxsl_VarQualifier.Private;
					break;
				case 2:
					q = hxsl_VarQualifier.Nullable;
					break;
				case 3:
					q = hxsl_VarQualifier.PerObject;
					break;
				case 4:
					q = hxsl_VarQualifier.Name(this.readString());
					break;
				case 5:
					q = hxsl_VarQualifier.Shared;
					break;
				case 6:
					q = hxsl_VarQualifier.Precision(hxsl_Serializer.PRECS[this.input.readByte()]);
					break;
				case 7:
					q = hxsl_VarQualifier.Range(this.input.readDouble(),this.input.readDouble());
					break;
				case 8:
					q = hxsl_VarQualifier.Ignore;
					break;
				case 9:
					q = hxsl_VarQualifier.PerInstance(this.input.readInt32());
					break;
				case 10:
					q = hxsl_VarQualifier.Doc(this.readString());
					break;
				default:
					throw haxe_Exception.thrown("assert");
				}
				v.qualifiers.push(q);
			}
		}
		return v;
	}
	,readFun: function() {
		var tmp = hxsl_Serializer.FKIND[this.input.readByte()];
		var tmp1 = this.readVar();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { kind : tmp, ref : tmp1, args : _g, ret : this.readType(), expr : this.readExpr()};
	}
	,unserialize: function(data) {
		this.input = new haxe_io_BytesInput(haxe_crypto_Base64.decode(data,false));
		if(this.input.readByte() != (hxsl_Serializer.SIGN & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 8 & 255) || this.input.readByte() != (hxsl_Serializer.SIGN >> 16 & 255)) {
			throw haxe_Exception.thrown("Invalid HXSL data");
		}
		this.varMap = new haxe_ds_IntMap();
		this.types = [];
		var tmp = this.readString();
		var f = $bind(this,this.readVar);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		var tmp1 = _g;
		var f = $bind(this,this.readFun);
		var _g = [];
		var _g1 = 0;
		var _g2 = this.readVarInt();
		while(_g1 < _g2) {
			var i = _g1++;
			_g.push(f());
		}
		return { name : tmp, vars : tmp1, funs : _g};
	}
	,__class__: hxsl_Serializer
};
var hxsl_ShaderList = function(s,n) {
	this.s = s;
	this.next = n;
};
$hxClasses["hxsl.ShaderList"] = hxsl_ShaderList;
hxsl_ShaderList.__name__ = "hxsl.ShaderList";
hxsl_ShaderList.addSort = function(s,shaders) {
	var prev = null;
	var hd = shaders;
	while(hd != null && hd.s.priority < s.priority) {
		prev = hd;
		hd = hd.next;
	}
	if(prev == null) {
		return new hxsl_ShaderList(s,shaders);
	}
	prev.next = new hxsl_ShaderList(s,prev.next);
	return shaders;
};
hxsl_ShaderList.prototype = {
	__class__: hxsl_ShaderList
};
var hxsl_ShaderInstance = function(shader) {
	this.id = hxsl_Tools.allocVarId();
	this.shader = shader;
	this.params = new haxe_ds_IntMap();
};
$hxClasses["hxsl.ShaderInstance"] = hxsl_ShaderInstance;
hxsl_ShaderInstance.__name__ = "hxsl.ShaderInstance";
hxsl_ShaderInstance.prototype = {
	__class__: hxsl_ShaderInstance
};
var hxsl_ShaderGlobal = function(v,gid) {
	this.v = v;
	this.globalId = gid;
};
$hxClasses["hxsl.ShaderGlobal"] = hxsl_ShaderGlobal;
hxsl_ShaderGlobal.__name__ = "hxsl.ShaderGlobal";
hxsl_ShaderGlobal.prototype = {
	__class__: hxsl_ShaderGlobal
};
var hxsl_ShaderConst = function(v,pos,bits) {
	this.v = v;
	this.pos = pos;
	this.bits = bits;
};
$hxClasses["hxsl.ShaderConst"] = hxsl_ShaderConst;
hxsl_ShaderConst.__name__ = "hxsl.ShaderConst";
hxsl_ShaderConst.prototype = {
	__class__: hxsl_ShaderConst
};
var hxsl_SharedShader = function(src) {
	this.instanceCache = new haxe_ds_IntMap();
	this.consts = null;
	this.globals = [];
	if(src == "") {
		return;
	}
	this.data = new hxsl_Serializer().unserialize(src);
	this.initialize();
};
$hxClasses["hxsl.SharedShader"] = hxsl_SharedShader;
hxsl_SharedShader.__name__ = "hxsl.SharedShader";
hxsl_SharedShader.prototype = {
	initialize: function() {
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.browseVar(v);
		}
	}
	,makeInstance: function(constBits) {
		var $eval = new hxsl_Eval();
		var c = this.consts;
		while(c != null) {
			var c1 = c.v;
			var _g = c.v.type;
			var tmp;
			switch(_g._hx_index) {
			case 1:
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			case 2:
				tmp = hxsl_Const.CBool((constBits >>> c.pos & 1) != 0);
				break;
			case 17:
				var _g1 = _g.size;
				tmp = hxsl_Const.CInt(constBits >>> c.pos & (1 << c.bits) - 1);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
			$eval.setConstant(c1,tmp);
			c = c.next;
		}
		$eval.inlineCalls = true;
		$eval.unrollLoops = hxsl_SharedShader.UNROLL_LOOPS;
		var i = new hxsl_ShaderInstance($eval.eval(this.data));
		this.paramsCount = 0;
		var _g = 0;
		var _g1 = this.data.vars;
		while(_g < _g1.length) {
			var v = _g1[_g];
			++_g;
			this.addParam($eval,i,v);
		}
		this.instanceCache.h[constBits] = i;
		return i;
	}
	,addParam: function($eval,i,v) {
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var v1 = vl[_g];
				++_g;
				this.addParam($eval,i,v1);
			}
		} else if(v.kind == hxsl_VarKind.Param) {
			i.params.h[$eval.varMap.h[v.__id__].id] = this.paramsCount;
			this.paramsCount++;
		}
	}
	,browseVar: function(v,path) {
		v.id = hxsl_Tools.allocVarId();
		if(path == null) {
			path = hxsl_Tools.getName(v);
		} else {
			path += "." + v.name;
		}
		var _g = v.type;
		if(_g._hx_index == 13) {
			var vl = _g.vl;
			var _g = 0;
			while(_g < vl.length) {
				var vs = vl[_g];
				++_g;
				this.browseVar(vs,path);
			}
		} else {
			var globalId = 0;
			if(v.kind == hxsl_VarKind.Global) {
				globalId = hxsl_Globals.allocID(path);
				this.globals.push(new hxsl_ShaderGlobal(v,globalId));
			}
			if(!hxsl_Tools.isConst(v)) {
				return;
			}
			var bits = hxsl_Tools.getConstBits(v);
			if(bits > 0) {
				var pos = this.consts == null ? 0 : this.consts.pos + this.consts.bits;
				var c = new hxsl_ShaderConst(v,pos,bits);
				c.globalId = globalId;
				c.next = this.consts;
				this.consts = c;
			}
		}
	}
	,__class__: hxsl_SharedShader
};
var hxsl__$Splitter_VarProps = function(v) {
	this.v = v;
	this.read = 0;
	this.write = 0;
};
$hxClasses["hxsl._Splitter.VarProps"] = hxsl__$Splitter_VarProps;
hxsl__$Splitter_VarProps.__name__ = "hxsl._Splitter.VarProps";
hxsl__$Splitter_VarProps.prototype = {
	__class__: hxsl__$Splitter_VarProps
};
var hxsl_Splitter = function() {
};
$hxClasses["hxsl.Splitter"] = hxsl_Splitter;
hxsl_Splitter.__name__ = "hxsl.Splitter";
hxsl_Splitter.prototype = {
	split: function(s) {
		var vfun = null;
		var vvars = new haxe_ds_IntMap();
		var ffun = null;
		var fvars = new haxe_ds_IntMap();
		this.varNames = new haxe_ds_StringMap();
		this.varMap = new haxe_ds_ObjectMap();
		var _g = 0;
		var _g1 = s.funs;
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			switch(f.kind._hx_index) {
			case 0:
				this.vars = vvars;
				vfun = f;
				this.checkExpr(f.expr);
				break;
			case 1:
				this.vars = fvars;
				ffun = f;
				this.checkExpr(f.expr);
				break;
			default:
				throw haxe_Exception.thrown("assert");
			}
		}
		vfun = { ret : vfun.ret, ref : vfun.ref, kind : vfun.kind, args : vfun.args, expr : this.mapVars(vfun.expr)};
		var _g = 0;
		var _g1 = Lambda.array(vvars);
		while(_g < _g1.length) {
			var inf = _g1[_g];
			++_g;
			var v = inf.v;
			switch(v.kind._hx_index) {
			case 3:case 4:
				v.kind = fvars.h.hasOwnProperty(v.id) ? hxsl_VarKind.Var : hxsl_VarKind.Local;
				break;
			default:
			}
			switch(v.kind._hx_index) {
			case 3:case 5:
				if(inf.read > 0 || inf.write > 1) {
					var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
					this.vars = vvars;
					var ninf = this.get(nv);
					v.kind = hxsl_VarKind.Local;
					var p = vfun.expr.p;
					var e = { e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : nv.type, p : p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : p}), t : nv.type, p : p};
					this.addExpr(vfun,e);
					this.checkExpr(e);
					if(nv.kind == hxsl_VarKind.Var) {
						var old = fvars.h[v.id];
						this.varMap.set(v,nv);
						fvars.remove(v.id);
						var np = new hxsl__$Splitter_VarProps(nv);
						np.read = old.read;
						np.write = old.write;
						fvars.h[nv.id] = np;
					}
				}
				break;
			default:
			}
		}
		var finits = [];
		var todo = [];
		var inf = fvars.iterator();
		while(inf.hasNext()) {
			var inf1 = inf.next();
			var v = inf1.v;
			switch(v.kind._hx_index) {
			case 1:
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Var, type : v.type};
				this.uniqueName(nv);
				var i = vvars.h[v.id];
				if(i == null) {
					i = new hxsl__$Splitter_VarProps(v);
					vvars.h[v.id] = i;
				}
				i.read++;
				var vp = new hxsl__$Splitter_VarProps(nv);
				vp.write = 1;
				vvars.h[nv.id] = vp;
				var fp = new hxsl__$Splitter_VarProps(nv);
				fp.read = 1;
				todo.push(fp);
				this.addExpr(vfun,{ e : hxsl_TExprDef.TBinop(haxe_macro_Binop.OpAssign,{ e : hxsl_TExprDef.TVar(nv), t : v.type, p : vfun.expr.p},{ e : hxsl_TExprDef.TVar(v), t : v.type, p : vfun.expr.p}), t : v.type, p : vfun.expr.p});
				this.varMap.set(v,nv);
				inf1.local = true;
				break;
			case 3:
				if(inf1.write > 0) {
					var nv1 = { id : hxsl_Tools.allocVarId(), name : v.name, kind : hxsl_VarKind.Local, type : v.type};
					this.uniqueName(nv1);
					finits.push({ e : hxsl_TExprDef.TVarDecl(nv1,{ e : hxsl_TExprDef.TVar(v), t : v.type, p : ffun.expr.p}), t : hxsl_Type.TVoid, p : ffun.expr.p});
					this.varMap.set(v,nv1);
				}
				break;
			default:
			}
		}
		var _g = 0;
		while(_g < todo.length) {
			var v = todo[_g];
			++_g;
			fvars.h[v.v.id] = v;
		}
		var v = vvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			this.checkVar(v1,true,vvars,vfun.expr.p);
		}
		var v = fvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			this.checkVar(v1,false,vvars,ffun.expr.p);
		}
		var v = this.varMap.keys();
		while(v.hasNext()) {
			var v1 = v.next();
			var v2 = this.varMap.h[this.varMap.h[v1.__id__].__id__];
			if(v2 != null) {
				this.varMap.set(v1,v2);
			}
		}
		ffun = { ret : ffun.ret, ref : ffun.ref, kind : ffun.kind, args : ffun.args, expr : this.mapVars(ffun.expr)};
		var _g = ffun.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			var _g = 0;
			while(_g < finits.length) {
				var e = finits[_g];
				++_g;
				el.unshift(e);
			}
		} else {
			finits.push(ffun.expr);
			ffun.expr = { e : hxsl_TExprDef.TBlock(finits), t : hxsl_Type.TVoid, p : ffun.expr.p};
		}
		var _g = [];
		var v = vvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(!v1.local) {
				_g.push(v1.v);
			}
		}
		var vvars = _g;
		var _g = [];
		var v = fvars.iterator();
		while(v.hasNext()) {
			var v1 = v.next();
			if(!v1.local) {
				_g.push(v1.v);
			}
		}
		var fvars = _g;
		vvars.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		fvars.sort(function(v1,v2) {
			return v1.id - v2.id;
		});
		return { vertex : { name : "vertex", vars : vvars, funs : [vfun]}, fragment : { name : "fragment", vars : fvars, funs : [ffun]}};
	}
	,addExpr: function(f,e) {
		var _g = f.expr.e;
		if(_g._hx_index == 4) {
			var el = _g.el;
			el.push(e);
		} else {
			f.expr = { e : hxsl_TExprDef.TBlock([f.expr,e]), t : hxsl_Type.TVoid, p : f.expr.p};
		}
	}
	,checkVar: function(v,vertex,vvars,p) {
		switch(v.v.kind._hx_index) {
		case 3:
			if(!vertex) {
				var i = vvars.h[v.v.id];
				if(i == null || i.write == 0) {
					throw haxe_Exception.thrown(new hxsl_Error("Varying " + v.v.name + " is not written by vertex shader",p));
				}
			}
			break;
		case 4:
			if(v.requireInit) {
				throw haxe_Exception.thrown(new hxsl_Error("Variable " + v.v.name + " is used without being initialized",p));
			}
			break;
		default:
		}
	}
	,mapVars: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return e;
			} else {
				return { e : hxsl_TExprDef.TVar(v2), t : e.t, p : e.p};
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TVarDecl(v2,this.mapVars(init)), t : e.t, p : e.p};
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			var v2 = this.varMap.h[v.__id__];
			if(v2 == null) {
				return hxsl_Tools.map(e,$bind(this,this.mapVars));
			} else {
				return { e : hxsl_TExprDef.TFor(v2,this.mapVars(it),this.mapVars(loop)), t : e.t, p : e.p};
			}
			break;
		default:
			return hxsl_Tools.map(e,$bind(this,this.mapVars));
		}
	}
	,get: function(v) {
		var i = this.vars.h[v.id];
		if(i == null) {
			var v2 = this.varMap.h[v.__id__];
			if(v2 != null) {
				return this.get(v2);
			}
			var oldName = v.name;
			this.uniqueName(v);
			if(v.kind == hxsl_VarKind.Local && oldName != v.name) {
				var nv = { id : hxsl_Tools.allocVarId(), name : v.name, kind : v.kind, type : v.type};
				this.varMap.set(v,nv);
				v.name = oldName;
				v = nv;
			}
			i = new hxsl__$Splitter_VarProps(v);
			this.vars.h[v.id] = i;
		}
		return i;
	}
	,uniqueName: function(v) {
		if(v.kind == hxsl_VarKind.Global || v.kind == hxsl_VarKind.Output || v.kind == hxsl_VarKind.Input) {
			return;
		}
		v.parent = null;
		var n = this.varNames.h[v.name];
		if(n != null && n != v) {
			var prefix = v.name;
			while(HxOverrides.cca(prefix,prefix.length - 1) >= 48 && HxOverrides.cca(prefix,prefix.length - 1) <= 57) prefix = HxOverrides.substr(prefix,0,-1);
			var k = prefix == v.name ? 2 : Std.parseInt(HxOverrides.substr(v.name,prefix.length,null));
			while(Object.prototype.hasOwnProperty.call(this.varNames.h,prefix + k)) ++k;
			v.name = prefix + k;
		}
		this.varNames.h[v.name] = v;
	}
	,checkExpr: function(e) {
		var _g = e.e;
		switch(_g._hx_index) {
		case 1:
			var v = _g.v;
			var inf = this.get(v);
			if(inf.write == 0) {
				inf.requireInit = true;
			}
			inf.read++;
			break;
		case 5:
			var _g1 = _g.e2;
			var _g2 = _g.e1;
			var _g3 = _g.op;
			switch(_g3._hx_index) {
			case 4:
				var _g4 = _g2.t;
				var _g4 = _g2.p;
				var _g4 = _g2.e;
				switch(_g4._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g4.v;
					var inf = this.get(v);
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g5 = _g4.regs;
					var _g5 = _g4.e;
					var _g4 = _g5.t;
					var _g4 = _g5.p;
					var _g4 = _g5.e;
					if(_g4._hx_index == 1) {
						var e1 = _g1;
						var v = _g4.v;
						var inf = this.get(v);
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			case 20:
				var _g4 = _g3.op;
				var _g3 = _g2.t;
				var _g3 = _g2.p;
				var _g3 = _g2.e;
				switch(_g3._hx_index) {
				case 1:
					var e1 = _g1;
					var v = _g3.v;
					var inf = this.get(v);
					if(inf.write == 0) {
						inf.requireInit = true;
					}
					inf.read++;
					inf.write++;
					this.checkExpr(e1);
					break;
				case 9:
					var _g2 = _g3.regs;
					var _g2 = _g3.e;
					var _g3 = _g2.t;
					var _g3 = _g2.p;
					var _g3 = _g2.e;
					if(_g3._hx_index == 1) {
						var e1 = _g1;
						var v = _g3.v;
						var inf = this.get(v);
						if(inf.write == 0) {
							inf.requireInit = true;
						}
						inf.read++;
						inf.write++;
						this.checkExpr(e1);
					} else {
						hxsl_Tools.iter(e,$bind(this,this.checkExpr));
					}
					break;
				default:
					hxsl_Tools.iter(e,$bind(this,this.checkExpr));
				}
				break;
			default:
				hxsl_Tools.iter(e,$bind(this,this.checkExpr));
			}
			break;
		case 7:
			var init = _g.init;
			var v = _g.v;
			var inf = this.get(v);
			inf.local = true;
			if(init != null) {
				this.checkExpr(init);
				inf.write++;
			}
			break;
		case 13:
			var loop = _g.loop;
			var it = _g.it;
			var v = _g.v;
			this.checkExpr(it);
			var inf = this.get(v);
			inf.local = true;
			inf.write++;
			this.checkExpr(loop);
			break;
		default:
			hxsl_Tools.iter(e,$bind(this,this.checkExpr));
		}
	}
	,__class__: hxsl_Splitter
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
Math.__name__ = "Math";
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
haxe_Resource.content = [{ name : "R_sfx_hit_wav", data : ""},{ name : "R_fonts_alterebro_png", data : "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Z14oNeve7ea56t61rm9nSNpup4sVT8eOo2mHjTeVke2f4KQuO+sTOeho5l3BVx6xTi+CdN4UvtLGydu5+aot2yOo1dKVZWf1qbwYavsUoGzmHaFfLbvKFrhjrXRXbNTdjfMKl3bzreL7A0JUQES4n2+RLVoILrP9FmhvIBlOhNBG8atTnuzWTqDVNnJ2ERk7hq7YVjl3iOydQC2btfsn2xG0RQq23oWnZdadbl1lk86dpWUsCPEK22bG9qO+gDcE/1XnzhUl8NcAnT83AsDJ84dHAKbetunVES/ATz4FULwluqctA//sCFByBjn/KBL4lwnQkBL1vyMD/thTQPR/+oA/QACMAL9xEdiREg07iPBLdAAAUwAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgAAACACAAAAIAIAAAAgAgADCH/wYAMwbidIeMXPYAAAAASUVORK5CYII"},{ name : "R_fonts_04b03_png", data : "iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAdhwAAHYcBj+XxZQAABOhJREFUeJztnG2P3CAMhLNV//9fTj/lRDnAY2xCsjOPVN1p45i3CVkGrp/zPA/By5/dFRB7kQDIQQTQe0ecxnU0xiqnvmblOsEY77Wsdu6iWbeVM0DdKZEO/DjK/Djie/f36jCq3+jeK/cuunWLCOBT/bSu9+LO4ro1cFYnXwORJSiUq16R2XKUG5nVRvd32/tZuApoJUaekJFQPAJB4r1lzOTMuHcWs8zIdwALzwxgDT5ap3IGGD2RPaynODKAiHhnCNV35QzgZccT8hS2tf1Jy0DWwT+OjW1/kgDEBiQAciQAciQAcv42PkPW473r5ZLCun8UU8YieZDyVudBY2aYXSWY99UCQIwUyxK1CkdirmsWUeewVR8rTy+nNwatJ9pHo7Hq9kFrBoiS8aSgRk7mU4nuA8zsFZQxns8R69tiKILs7wDoZswVE90gQvKgZSEWMFrWKI/nc6Te1j6BawZAlG5hTUvIdwDEz0fzZLyX0TzILDFbtvU67dVnGPMkK1hsQMtAciQAciQAciQAclpG0AW6nImu96N5MtzHrByIEWSVU8ZlG06/aC0DrST15xFn7ABiPG4eUo6Vo0XWgQ3TmaviRqTUaWYvoI6Lsso/95aT5WDeQdoJotZ3AMTJK2NHWC5VWd7qzrPahTqYkTIs0D5I66/eDGB11OmIveJ6eDz2lU/viKwOt/rN41xarxMoj5xAcrQMJEcCIEcCIEcCIKcWQP2NEDnAgBxYsK4jpkdmnlG7rOut3yMxmbnc7WrNANZJHKuw8nrGiZ0VeSy3cLUpdXHXEqzb5pYPUK4vrQ5/0xoy63QQSoZbh9QZHYdmfXqHQj1OYFQEWYOC5EH2DJ7EzH6Klec/VpwKvkCfOM/GSGRw0Z24aF2QDZ96lr1D/M2YtzmBb3lyX8PbloEa/GTeJgCRjARAjgRAjgRATssKRu3LHohtG2H3/SvyRXKgJlCT3pGwFqjpgxyujDTYuh/ZF8jcf4jkuGKsPovWpZvf+wrIGLzyZzRPTen3W/ej+waz5dQuXi/Gup7VniYz3wHetgewE2sA7958+sXModDjGFuYme8zb8d4NkZG+S3LFynniom4l8sftrdZwcwsscFXbgaJHJZuYUsAz2fp9wMZQeRIAORIAORIAOSMTgWjn3tjGHlsv3j2Akq8DTqrf0gcki8rz6xVm5Hj7Pw+G4PU+QfPDFBen/0T6+untXFx998JjBi1t1yjP9buHeH1AR47lS0EPYlsxWZgHQ13nzT2CuAJ5+rRY+Iev38W9Kj5aFA8+wrpfd7aC/iGo9feNnxDm6donQii7AhWtBtIjowgciQAciQAciQAcnYKYOZvEFB7d5RDFPT+j6CoJ4168TOHPke4nTB2agFkdF7pi1vn6mfz94T1aN/9iax6BVgDHLFh9XQn0nMCR08YshV7AHEHcD0aLwwiTqCexC9g5lj4XVuf4gZmBKCB/yJkBJEjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZAjAZDzD+xTuNG6joBJAAAAAElFTkSuQmCC"},{ name : "R_sfx_ambiant_mp3", data : ""},{ name : "R_sfx_robinet_wav", data : ""},{ name : "R_sfx_help_wav", data : ""},{ name : "R_sfx_door_wav", data : "},{ name : "R_sfx_footstep2_wav", data : "UklGRhIJAABXQVZFZm10IBAAAAABAAEAIlYAAESsAAACABAAZGF0Ye4IAABLA1AD1QPbA+EDGwQhBCgEDwQVBBsEIQSpA64DswPeAuIC5gLHA8wD0QO0BLoEwATGBJ4DogOnAw0FEwUZBUUDOAMsAywDIAMTAwcDZANWA0gDlwOHA3gDEAMCA/QC7APaA8cDtAPgAdYBzQE1AyMDEgM5AyYDFAOGAncCaAJZAssBvwGzAUsCOgIqAiMCEwIDAhkCBwL2AeQB8QDoAN8AYgFTAUUBFgEJAfwA7wAfAQ8B/wDQAMIAswCXAIsAfgBPAEYAPQA0AC8AJgAcABcACwD///X/6//g/7//r/+f/5D/lv+K/33/Zf9X/0n/jv+G/37/R/88/zH/J/8j/xn/D/+Q/oH+cv7E/rn+rv5x/mT+WP5L/tz+1P7M/pj+j/6F/rn9q/2d/bX9qP2c/Y/9J/4d/hT+3P3S/cj9Ov4y/iv+I/77/fP96v2O/YT9e/3g/NT8yfzt/OP82PzN/Af9/vz0/Ij9gP15/fb76vve++/75PvY+8z79/vs++H7i/uA+3T72fvB+6j7tfue+4b7b/uk/LT8xPwL+yT7PftW+2/7iPuB/Y/9nf2r/SP8O/xS/Lr9yf3X/Qn9Hv0z/fv8Ev0o/T/9R/5o/oj+yP38/TH+0P73/h3/Lf9X/4L/rP/V/wAALABcAIkAtwCKAKUAwADcAIUBsAHaAQICLAI5Am4BaQFjAVICSQJAAjcCWwFWAVABmwGVAY4BmAGRAYoBTQFHAUEBOwGGAX4BdwFCATwBNQF7AXMBawFeAVYBTgFGATwBNAEsAR8BGAEQASQBGwETAbIArACnAKIAuACyAKsAtQCuAKcAgAB7AHUAbABnAGIAXQB8AHUAbgBEAEAAOwA0ADAAKwAnAB8AGwAXAB0AFwARAAsABQD///n/8//t/+f/3P/V/87/3P/Y/9T/s/+t/6b/y//H/8T/wP+H/4H/e/+F/3//ev+m/6L/n/+W/5L/j/+L/4z/if+G/0j/RP8//w//Cf8E/zz/Pv9E/0n/eP98/4D/Sv9Q/1b/Z/9s/3H/lf+Z/57/ov+J/47/lP/A/8T/x/+3/7v/wP+u/7T/uv/A/9//4v/l/+T/6P/s/+r/7//0//n//v8EAAkADwAVABsAFwAaAB4AJgAqAC4AMgAuADEANQBCAEYASgBPAFMAVwA/AEEARABHAFkAXABfAHMAdwB6AJsAoACkAJMAlwCbAJ4AbgBxAHMAuwC/AMMAnwCiAKUA6QDtAPEA9QCRAJMAlgDlAOkA7ADjAOYA6QAMARABEwEXAQQBBwEKAfoA/QAAAcEAwwDFAMcAywDNAM8AHQEfASIB4gDkAOYAdQF4AXcBdQEkASMBIgHDAMIAwgDmAOUA5ABNAUsBSgFJARcBFgEVASIBIQEgAQgBBwEGAVUBVAFSAVEBtwC2ALUA/wD+AP0AwAC/AL8ALAErASoBKAELAQoBCQH9AP0A/AD3APYA9QAIAQcBBgEFATYBNQE0AccAxgDGAKEAoACgAJ8A2wDaANkA2wDbANoAsgCxALAAmgCaAJkAmQCvAK4ArQChAKEAoADJAMgAxwDHAMcAxgDFAIkAiQCIALkAuQC4APAA7wDuAJwAnACbAJoA9gD1APMAggCBAIEAvAC5ALUA6ADkAN8A2wDaANYA0QBoAGYAZACfAJwAmABzAHAAbgBrAKIAngCaAHkAdgBzAH0AeQB2AFYAUwBRAE4AUgBPAE0AaABkAGEAWQBWAFMAUABQAE0ASgAtACsAKQAjACEAUwCNAI4AjwCQAFoAWgBbAJMAlACVAHsAfAB9AJEAkgCTAJQAfgB/AH8AcgByAHMAqwCrAKwAWQBaAFoAWgCVAJYAlgBjAGQAZABrAGsAbACHAIgAiACJAJIAkwCTAHYAdwB4AH0AfgB/AHkAeQB6AHsAsgCzALQAcgBzAHQApgCnAKgAqQCkAKUApgCxALIAswCRAJIAkwBwAHEAcQByAHsAewB8ANYA1wDYAMUAxgDHAN0A3gDfAOAAxADFAMYAlwCXAJgAmQCaAJoAtQC1ALYAtwCUAJUAlQDuAO8A8AC+AL4AvwDSANMA1ADUAKsArACsALQAtAC1AKUApQCmAAsBDAENAQ0B2gDaANsAiACIAIkAEQESARIBEAERARIBEgGhAKIAogD6APoA+wCaAJsAmwCbAKoAqgCrAJgAmACXAJ0AnACaAO8A7ADqAOgAkQCQAI4A7QDqAOgAzADKAMgAvgC8ALoAuACPAI0AjADNAMsAyQDJAMcAxACXAJUAkwCSAL4AvAC5AK0AqwCpAIcAhQCDAHcAdQB0AHIAlgCUAJIAcwByAHAAgAB+AH0AlQCTAJEAjwBxAG8AbgBJAEgARwBoAGcAZQBjAHgAdgB0AGsAaQBnAFMAUgBRADoAOQA4ADcALwAvAC4ARgBFAEMARwBFAEQANgA1ADQAMwBDAEIAQAAsACsAKgA4ADYANQArACoAKQAoAC8ALQAsACQAIgAhACAAHgAdABUAFQAUABMAGQAYABcAFQAUABMADwAOAA0ACwALAAoACQAMAAsACQAHAAYABQAFAAQAAwABAAAA//////7//f/9//z/+//7//f/9v/1//T/9//2//b/8v/x//D/8P/v/+7/6v/p/+j/5//r/+r/6f/u/+7/7f/n/+b/5v/r/+r/6v/p/9n/2f/Y/97/3f/c/9j/1//X/9j/1//W/9b/5v/l/+X/1f/U/9T/1//X/9f/x//H/8b/xv/f/9//3//f/9//3//a/9r/2v/P/8//z//P/8r/yv/K/9r/2v/a/9r/2v/a/9r/4v/i/+L/1v/W/9b/2v/a/9v/y//L/8z/zP/N/83/zf/W/9b/1v/L/8z/zP/g/+H/4f/h/87/z//P/9L/0//T/9P/0//U/97/3//f/9//2P/Y/9n/5P/k/+X/4f/i/+L/6P/o/+j/6f/n/+j/6P/p/+r/6//r/+v/7P/p/+r/6v/r/+3/7f/u/+v/7P/t/+7/7//w//D/9v/3//f/9f/2//f/+f/6//v/+//8//z//f/9//7///8"},{ name : "R_fonts_alterebroOutline_fnt", data : "QkZOVAABFABBbHRlcmVicm8gUGl4ZWwgRm9udAwAFABhbHRlcmVicm9PdXRsaW5lLnBuZw0ACwA/AAAAbwAAAAEAMwAGAAcA//8FAAUAAAAAAEoAAAAMABcABgAJAP//AwAFAAAAAAAlAAAAHgACAAkACQD//wMACAAAAAAA3wAAAAgATgAHAAkA//8DAAYAAAAAAHAAAAAIADMABgAJAP//BQAFAAAAAABLAAAAEwAXAAYACQD//wMABQAAAAAAJgAAACgAAgAHAAkA//8DAAYAAAAAAKwgAAArAFsABwAJAP//AwAGAAAAAADgAAAAEABNAAYACgD//wIABQAAAAAAcQAAAA8AMwAGAAkA//8FAAUAAAAAAEwAAAAaABcABQAJAP//AwAEAAAAAAAnAAAAMAACAAMABAD//wMAAgAAAAAA4QAAABcATQAGAAoA//8CAAUAAAAAAHIAAAAWADMABQAHAP//BQAEAAAAAABNAAAAIAAXAAcACQD//wMABgAAAAAAKAAAADQAAQAEAAsA//8CAAMAAAAAAOIAAAAeAE0ABgAKAP//AgAFAAAAAABzAAAAHAAzAAYABwD//wUABQAAAAAATgAAACgAFwAGAAkA//8DAAUAAAAAACkAAAA5AAEABAALAP//AgADAAAAAADjAAAAJQBOAAYACQD//wMABQAAAAAAdAAAACMAMQAFAAkA//8DAAQAAAAAAE8AAAAvABcABgAJAP//AwAFAAAAAAAqAAAAPgACAAUABQD//wMABAAAAAAA5AAAACwATgAGAAkA//8DAAUAAAAAAL8AAABeADIABwAJAP//BAAGAAAAAAB1AAAAKQAzAAYABwD//wUABQAAAAAAUAAAADYAFwAGAAkA//8DAAUAAAAAACsAAABEAAMABwAHAP//BAAGAAAAAADAAAAAZgAuAAYADAD//wAABQAAAAAAdgAAADAAMwAGAAcA//8FAAUAAAAAAFEAAAA9ABcABgAJAP//AwAFAAAAAAAsAAAATAAIAAMABAD//wkAAgAAAAAAwQAAAG0ALgAGAAwA//8AAAUAAAAAAHcAAAA3ADMABwAHAP//BQAGAAAAAABSAAAARAAXAAYACQD//wMABQAAAAAALQAAAFAABQAFAAMA//8GAAQAAAAAAOcAAAAzAFAABgAJAP//BQAFAAAAAADCAAAAdAAuAAYADAD//wAABQAAAAAAeAAAAD8AMwAGAAcA//8FAAUAAAAAAFMAAABLABcABgAJAP//AwAFAAAAAAAuAAAAVgAIAAMAAwD//wkAAgAAAAAA6AAAADoATQAGAAoA//8CAAUAAAAAAMMAAAABAD4ABgALAP//AQAFAAAAAAB5AAAARgAzAAYACQD//wUABQAAAAAAVAAAAFIAFwAHAAkA//8DAAYAAAAAAC8AAABaAAIABgAJAP//AwAFAAAAAADpAAAAQQBNAAYACgD//wIABQAAAAAAxAAAAAgAPgAGAAsA//8BAAUAAAAAAHoAAABNADMABgAHAP//BQAFAAAAAAAwAAAAYQACAAYACQD//wMABQAAAAAAVQAAAFoAFwAGAAkA//8DAAUAAAAAAOoAAABIAE0ABgAKAP//AgAFAAAAAAAxAAAAaAACAAQACQD//wMAAwAAAAAAVgAAAGEAFwAGAAkA//8DAAUAAAAAAOsAAABPAFAABgAHAP//BQAFAAAAAAChAAAAVAAxAAMACgD//wMAAgAAAAAAMgAAAG0AAgAGAAkA//8DAAUAAAAAAFcAAABoABcABwAJAP//AwAGAAAAAADHAAAADwBAAAYACwD//wMABQAAAAAAWAAAAHAAFwAGAAkA//8DAAUAAAAAADMAAAB0AAIABgAJAP//AwAFAAAAAADtAAAAVgBNAAQACgD//wIAAgAAAAAAyAAAABYAPQAGAAwA//8AAAUAAAAAAFkAAAB3ABcABwAJAP//AwAGAAAAAAA0AAAAAQANAAYACQD//wMABQAAAAAA7gAAAFsATQAFAAoA/v8CAAIAAAAAAMkAAAAdAD0ABgAMAP//AAAFAAAAAABaAAAAAQAiAAYACQD//wMABQAAAAAANQAAAAgADQAGAAkA//8DAAUAAAAAAO8AAABhAE4ABQAJAP7/AwADAAAAAADKAAAAJAA9AAYADAD//wAABQAAAAAAWwAAAAgAIQAEAAsA//8CAAMAAAAAADYAAAAPAA0ABgAJAP//AwAFAAAAAADLAAAAKwA+AAYACwD//wEABQAAAAAAXAAAAA0AIgAGAAkA//8DAAUAAAAAADcAAAAWAA0ABgAJAP//AwAFAAAAAADxAAAAZwBOAAYACQD//wMABQAAAAAAXQAAABQAIQAEAAsA//8CAAMAAAAAADgAAAAdAA0ABgAJAP//AwAFAAAAAADNAAAAMgA9AAQADAD//wAAAgAAAAAAXgAAABkAIgAFAAQA//8DAAQAAAAAADkAAAAkAA0ABgAJAP//AwAFAAAAAADzAAAAbgBNAAYACgD//wIABQAAAAAAzgAAADcAPQAFAAwA/v8AAAIAAAAAAF8AAAAfACgABQADAP//CQAEAAAAAAA6AAAAKwARAAMABQD//wcAAgAAAAAA9AAAAHUATQAGAAoA//8CAAUAAAAAAM8AAAA9AD4ABQALAP7/AQACAAAAAAD1AAAAAQBbAAYACQD//wMABQAAAAAAYQAAACUAJAAGAAcA//8FAAUAAAAAADwAAAAvAA8ABQAHAP//BQAEAAAAAAD2AAAACABdAAYABwD//wUABQAAAAAA0QAAAEMAPgAGAAsA//8BAAUAAAAAAGIAAAAsACIABgAJAP//AwAFAAAAAAA9AAAANQAPAAUABQD//wUABAAAAAAAYwAAADMAJAAGAAcA//8FAAUAAAAAAD4AAAA7AA8ABQAHAP//BQAEAAAAAADTAAAASgA9AAYADAD//wAABQAAAAAAZAAAADoAIgAGAAkA//8DAAUAAAAAAD8AAABBAA0ABwAJAP//AwAGAAAAAAD5AAAADwBaAAYACgD//wIABQAAAAAA1AAAAFEAPQAGAAwA//8AAAUAAAAAAGUAAABBACQABgAHAP//BQAFAAAAAAD6AAAAFgBaAAYACgD//wIABQAAAAAA1QAAAFgAPgAGAAsA//8BAAUAAAAAALAAAABYADEABQAFAAAAAwAFAAAAAABmAAAASAAiAAUACQD//wMABAAAAAAAQQAAAEkADQAGAAkA//8DAAUAAAAAAPsAAAAdAFoABgAKAP//AgAFAAAAAADWAAAAXwA+AAYACwD//wEABQAAAAAAZwAAAE4AJAAGAAkA//8FAAUAAAAAAEIAAABQAA0ABgAJAP//AwAFAAAAAAD8AAAAJABdAAYABwD//wUABQAAAAAAaAAAAFUAIgAGAAkA//8DAAUAAAAAAEMAAABXAA0ABgAJAP//AwAFAAAAAABpAAAAXAAiAAMACQD//wMAAgAAAAAARAAAAF4ADQAGAAkA//8DAAUAAAAAANkAAABmAD0ABgAMAP//AAAFAAAAAABqAAAAYAAiAAQACwD//wMAAwAAAAAAIAAAAAEACQACAAIA//8KAAMAAAAAAEUAAABlAA0ABgAJAP//AwAFAAAAAADaAAAAbQA9AAYADAD//wAABQAAAAAAawAAAGUAIgAFAAkA//8DAAQAAAAAACEAAAAEAAIAAwAJAP//AwACAAAAAABGAAAAbAANAAYACQD//wMABQAAAAAA2wAAAHQAPQAGAAwA//8AAAUAAAAAAGwAAABrACIAAwAJAP//AwACAAAAAABHAAAAcwANAAYACQD//wMABQAAAAAAIgAAAAgAAgAFAAQA//8DAAQAAAAAANwAAAABAEwABgALAP//AQAFAAAAAABtAAAAbwAkAAcABwD//wUABgAAAAAASAAAAAEAFwAGAAkA//8DAAUAAAAAACMAAAAOAAMABwAHAP//BAAGAAAAAABuAAAAdwAkAAYABwD//wUABQAAAAAASQAAAAgAFwADAAkA//8DAAIAAAAAACQAAAAWAAEABwALAP//AgAGAAAAAAAAAAAA"},{ name : "R_sfx_footstep1_wav", data : "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KwAiACEAIAAVABUAFAAeAB0AHAAcACEAIAAfAB0AHAAbABUAFQAUAA4ADgANAA0ACwALAAoADwAPAA4ADgAOAA0ACgAKAAkACQALAAoACgAGAAYABQAHAAYABQAEAAQAAwACAAIAAgABAAAAAAD//////v/+//7//v/9//3/+//7//r/+v/5//n/+v/5//n/+f/4//j/+P/z//P/8v/1//T/9P/v/+//7v/u//P/8//y//P/8//z//P/8//y/+z/7P/r/+v/8P/w//D/6//r/+r/6v/q/+r/5f/l/+T/5P/o/+j/6P/u/+7/7f/n/+f/5//s/+z/7P/r/93/3f/d/+L/4v/h/97/3v/e/9//3v/e/97/6//r/+v/3v/e/97/4f/h/+H/1f/V/9X/1f/o/+j/6P/o/+j/6P/l/+X/5f/d/93/3v/e/9r/2v/a/+b/5v/m/+b/5v/m/+b/7P/s/+z/4//k/+T/5//n/+f/3f/d/93/3v/e/9//3//k/+X/5f/e/97/3v/s/+z/7P/s/+D/4f/h/+P/4//k/+T/5f/l/+z/7P/t/+3/6f/p/+r/8P/w//H/7//w//D/8//z//T/9P/z//T/9P/1//X/9f/1//b/9v/1//X/9v/2//f/9//4//b/9//3//j/+P/5//n//P/8//z/+//8//z//f/9//7//v/+//7/////////AAA"},{ name : "R_fonts_alterebroOutline_png", data : ""},{ name : "R_fonts_04b03_fnt", data : "QkZOVAABBQAwNGIwMwgACQAwNGIwMy5wbmcIAAYAPwAAAG8AAAAqADgACAAIAP7/AAAFAAAAAABKAAAAYQAWAAgACQD+////BQAAAAAAJQAAACcAAQAJAAkA/v///wYAAAAAAHAAAAAzADgACAAKAP7/AAAFAAAAAABLAAAAagAWAAgACQD+////BQAAAAAAJgAAADEAAQAJAAkA/v///wYAAAAAAHEAAAA8ADgACAAKAP7/AAAFAAAAAABMAAAAcwAWAAcACQD+////BAAAAAAAJwAAADsAAQAFAAYA/v///wIAAAAAAHIAAABFADgABwAIAP7/AAAEAAAAAABNAAAAAQAgAAkACQD+////BgAAAAAAKAAAAEEAAQAGAAkA/v///wMAAAAAAHMAAABNADgACAAIAP7/AAAFAAAAAABOAAAACwAgAAgACQD+////BQAAAAAAKQAAAEgAAQAGAAkA/v///wMAAAAAAHQAAABWADcABwAJAP7///8EAAAAAABPAAAAFAAgAAgACQD+////BQAAAAAAKgAAAE8AAQAHAAcA/v///wQAAAAAAHUAAABeADgACAAIAP7/AAAFAAAAAABQAAAAHQAgAAgACQD+////BQAAAAAAKwAAAFcAAgAHAAcA/v8AAAQAAAAAAHYAAABnADgACAAIAP7/AAAFAAAAAABRAAAAJgAgAAgACgD+////BQAAAAAALAAAAF8ABQAGAAYA/v8DAAMAAAAAAHcAAABwADgACQAIAP7/AAAGAAAAAABSAAAALwAgAAgACQD+////BQAAAAAALQAAAGYAAwAHAAUA/v8BAAQAAAAAAHgAAAABAEQABwAIAP7/AAAEAAAAAABTAAAAOAAgAAgACQD+////BQAAAAAALgAAAG4ABQAFAAUA/v8DAAIAAAAAAHkAAAAJAEQACAAKAP7/AAAFAAAAAABUAAAAQQAgAAcACQD+////BAAAAAAALwAAAHQAAQAJAAkA/v///wYAAAAAAHoAAAASAEQACAAIAP7/AAAFAAAAAAAwAAAAAQAMAAgACQD+////BQAAAAAAVQAAAEkAIAAIAAkA/v///wUAAAAAAHsAAAAbAEMABwAJAP7///8EAAAAAAAxAAAACgAMAAYACQD+////AwAAAAAAVgAAAFIAIAAIAAkA/v///wUAAAAAAHwAAAAjAEMABQAJAP7///8CAAAAAAAyAAAAEQAMAAgACQD+////BQAAAAAAVwAAAFsAIAAJAAkA/v///wYAAAAAAH0AAAApAEMABwAJAP7///8EAAAAAABYAAAAZQAgAAgACQD+////BQAAAAAAMwAAABoADAAIAAkA/v///wUAAAAAAH4AAAAxAEMACAAGAP7///8FAAAAAABZAAAAbgAgAAgACQD+////BQAAAAAANAAAACMADAAIAAkA/v///wUAAAAAAFoAAAB3ACAABwAJAP7///8EAAAAAAA1AAAALAAMAAgACQD+////BQAAAAAAWwAAAAEAKwAGAAkA/v///wMAAAAAADYAAAA1AAwACAAJAP7///8FAAAAAABcAAAACAArAAkACQD+////BgAAAAAANwAAAD4ADAAIAAkA/v///wUAAAAAAF0AAAASACsABgAJAP7///8DAAAAAAA4AAAARwAMAAgACQD+////BQAAAAAAXgAAABkAKwAHAAYA/v///wQAAAAAADkAAABQAAwACAAJAP7///8FAAAAAABfAAAAIQAvAAgABQD+/wMABQAAAAAAOgAAAFkADQAFAAcA/v8AAAIAAAAAAGAAAAAqACsABgAGAP7///8DAAAAAAA7AAAAXwANAAUACAD+/wAAAgAAAAAAYQAAADEALAAIAAgA/v8AAAUAAAAAADwAAABlAAwABwAJAP7///8EAAAAAABiAAAAOgArAAgACQD+////BQAAAAAAPQAAAG0ADQAHAAcA/v8AAAQAAAAAAGMAAABDACwABwAIAP7/AAAEAAAAAAA+AAAAdQAMAAcACQD+////BAAAAAAAZAAAAEsAKwAIAAkA/v///wUAAAAAAD8AAAABABYACAAJAP7///8FAAAAAABlAAAAVAAsAAgACAD+/wAABQAAAAAAQAAAAAoAFgAJAAkA/v///wYAAAAAAGYAAABdACsABwAJAP7///8EAAAAAABBAAAAFAAWAAgACQD+////BQAAAAAAZwAAAGUALAAIAAoA/v8AAAUAAAAAAEIAAAAdABYACAAJAP7///8FAAAAAABoAAAAbgArAAgACQD+////BQAAAAAAQwAAACYAFgAHAAkA/v///wQAAAAAAGkAAAB3ACsABQAJAP7///8CAAAAAABEAAAALgAWAAgACQD+////BQAAAAAAagAAAAEANwAGAAsA/v///wMAAAAAACAAAAABAAYABAAEAP7/BAAEAAAAAABFAAAANwAWAAcACQD+////BAAAAAAAawAAAAgANwAIAAkA/v///wUAAAAAACEAAAAGAAEABQAJAP7///8CAAAAAABGAAAAPwAWAAcACQD+////BAAAAAAAbAAAABEANwAFAAkA/v///wIAAAAAAEcAAABHABYACAAJAP7///8FAAAAAAAiAAAADAABAAcABgD+////BAAAAAAAbQAAABcAOAAJAAgA/v8AAAYAAAAAAEgAAABQABYACAAJAP7///8FAAAAAAAjAAAAFAABAAkACQD+////BgAAAAAAbgAAACEAOAAIAAgA/v8AAAUAAAAAAEkAAABZABYABwAJAP7///8EAAAAAAAkAAAAHgABAAgACgD+////BQAAAAAAAAAAAA"},{ name : "R_sfx_close_wav", data : "},{ name : "R_sfx_smallHit_wav", data : "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AfACcALgA4AEAAOgA0ACwAJQAbABIACgADAPz/9//1//P/8f/v/+3/6v/o/+f/5v/m/+v/7//0//f/+////wQACQAOABAACAAAAPj/8f/q/+L/2//U/87/y//T/9v/4//q//L/+f8BAAgAEAAUABAADAAIAAQAAAD8//j/9P/v/+7/8v/2//r//f8AAAMABgAIAAsADAAMAAsACwALAAsADAAMAAwADAAPABMAGAAcACAAJQApACwALwAyACwAIAAVAAkA///1/+v/4f/Y/83/yf/J/8n/yf/J/8r/y//M/83/zv/V/93/5v/v//j/AQALABUAHgAoACQAGwATAAsAAgD7//T/7f/n/+L/4//l/+j/6v/t//D/8//3//r//v/7//j/9f/y//D/7v/s/+v/6v/m/+X/5P/i/+H/4P/h/+P/5f/m/+j/7f/x//T/9//7//7/AgAGAAoADQAJAAUAAAD8//f/8v/u/+n/5f/j/+r/8f/3//3/AgAGAAkADgATABcAFwAYABgAFgAVABQAEwASABEAEAAMAAcAAgD9//f/8v/t/+n/5f/k/+j/6v/t/+//8v/0//b/+P/7//z//P/8//z//P/8//z//P/8//z//f/+/wAAAgAEAAYACAAKAAsADQALAAgABQADAAAA/v/7//n/9//1//b/+P/5//r//P/9//3//v//////AAAAAAEAAQACAAIAAgADAAMAAw},{ name : "R_sfx_teleport_mp3", data : "//uQxAAAAAAAAAAAAAAAAAAAAAAASW5mbwAAAA8AAAD6AAGZygADBQgKDQ8SFBcaHB4hJCYoLC8xNDY4Oz1AQkVISk1PUVRYWl1fYWRnaWtucHN2eHp9gYOFiIuNkJKUl5qcn6Gjpqmsr7Gztrm7vsDCxcfKzc/R1Nfa3d/h5Obp7O7w8/X4+/0AAAA5TEFNRTMuOThyAc0AAAAAAAAAABSAJAXKQgAAgAABmcrWdwPEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA//uQxAACUjYK9kCJ/QKgwWAcEz74bgAAAIAALn/8Hj/wAByBGMYxzGMAAAAAG4x//53k/V8hGUhJGyMRiEIQjb5CEahGDnIIJyNQjUIQhGoT/1Of9MUo8iengUy/xEhz03TT9/Hfx+/V7PAVkzGr49X8e99sE1741Dj5P8ublGLYlFe/j3fv4MeApC2HRBL+QsuBoFsEIHAqMyKxDzTNNVqRYP8g59hTjP+vL/rsWIoqyZd8eWqqqmqpmZmZl61t9N28558w/2v2j/J/YyXnWxPs9F/wZju+ZtNT6/dIbNJnu/pvCXy2v35yprfu62tku798nF30SNBpaLqHFiPoLpio0wIjpnjbbIy5b0wbihOdGZgKg/FhbwzHYsl8L4s7ShyK1DUk7RCXJS3Oo86smOFdNq1g1SlH6u1QozeQ8kaEHQLZfJ7oNdIMvpyos7kQP/yLznf/LPPDv1pJA7E4ikfAzGGoZrCO8Alajo7UEgE8xSh82pOLMSEFDven5mcKmfmWc8ySYg59M4jXrPuHXPb4nsxNLm1OSmXlY4sqMwtu//uSxCkDUmoLACAN+1J1wV/IEb/YbIkVM5ndMvHg5xWxFJ9OKYtiOHQ0plhS70ujCdqnMU/EmrE6T09DraVptGYXUpzdMZRDfUgvpUPGIDBL+aSIcjbUn//3/f+L+///K4zmC+wkkFEOzycMwNArD4dpATk5QEOtAhFA6DVZqaBY4xOzRjUhRXBBRxRemLVFOcPXtPmOkw8nixNx8UiQGG8NnYrbVbUr4TS733KdTTpNuWIVFcxP4CvL6HStmWR8hUnC4l3R27KEeCXVitSpkE1SsVqYlK2qRFrhIMyIG8XTI4lZFWG8NkmTS5jxIynSdoYGYnFAD/////r3Rbt///9lr2u4dLu/ZrrTJztuwfXvxO1RqoecwQydQR8mqj1NZDyzzsunib69U2zXjGfe1fN+tPqy5sbibtCbtR3jhNuNG1pannnVzZGrt5h7IZSNiKVuVzZDdQalBVLvzLUiibUqqkJqXYmqkjIYRZLGgYRhJs9EUZ6YWXq7HqTaLVzwn0w9Is5Mx2EghGakDrG4MWCkA/////g5H///+oR2zDTEwv/7ksRXAxOKCwBBGf7CfkFgCBM/2BspW0/mPEfTsMLmysc+8VKBuoVrUgXOsxGWRP1LdNteHsBT2PQPvd7LKZrf47b/E07a21vvWf6jyy53t/EiSq1iiU2rncLKphTsVtF5laHjUaOpHbRBT706EG1vXbk1GBHYTkOZOJVU3WHM8zyQs0S6MR4LhVmYUDGqy4DFNIlI7i8EwTJK1UhJwkFOsy5wRkED/////V8+v//+hhLsKjCUMsxendSMG7nnZCM9A2ghyI4pibTEBRxJmDA0BsCUyQzUhcaM3SMs+czyL/vrd5/Jm1M7vv8LW9K7ppA6drovvsHiSmUmqw1Sycnp88TCaKS+Sjw8CIfjto+OCm0tIZ0tLa+EQioIA9h+CCI7HshF8BAlCNJMdKgilolgqOgXMKAH//5//4uVGX///zopTEwUHWp+EhvqO6pqiy1ESDEPJosMDjihS5RcWG3Kc3IuDQR0hGp0pWsqJVRtz2se7cMsIms7g0vR9mBJPCeaY13GmrEgSpKCyYhKNKOnGK2G63n8jHipjynIrnjGMeX/+5LEf4MSJgsEYI2dApXBX8gUP9gXEnzWsl8Q0ySEhKVO5wVIox6VexB1naWIgCfQhQqpEnOdBdC6G0hpGS4FcQVSFOfgaBzkvLwO+rKAD////+SMptWH///12F92M9q87kSfatNiye0xwp1qAgPqqELYxG4VAWyCVAOubzlhTUr46ZUyOHlOyXrf5kxWZ61vqxYeFfiMyTPkdM4v43ebXnyvZnBhckqoYekkkGFXp9vOlQlzVRcTdQtDlYkD/VQn52TIYficLAkyVmEeDSXKd+appEnXbkby8T00hxtJNi3nawn8b5/r/1////5F///n6pf+seLlxPf0z10OJmwPRqLR34DQHcZ3Y2H0EvHF7RBZuD0YE+jsFzT8v79yLzKrd7vEnjwn1cxYSceYw5XcFjCvXKy2vnrc2Nr6vQ9YP56oHNGm0fsE9j8pFQqIXplJKdBPF5CzNMNeZE+TWATdGKst6EHa1IYj7Hc4hwE+G4dp3EjNwfp2IYXpJmEW4MazQA9v////f6FXJ//bTuEP55lGYyI0p0ovlbRLVXqjhxfg//uSxKqDU04LAECN/QJiwWAEEb+inJOiHBqykFptKMiBBZMFKHVIWEEduSwcj4djyH/w9Sznd55dx5oEVxph72HL9uzduZdMiomWVa+0pGjK5RsQ/254vpwv5AzxUFRgpVgMqEYR4omGXmZRjDZm+KajWKA5UISyVVLQbzcqEMJ6f7KI4uS8nQHORZMRcg1ZPB14dyihowNSuVPjDUEz9qfz727fzsZdr52pZMTmreVFWqzGE5bryD6GX16aZnpsT4IwoM6GZANTkLBFG4ECqUTxQvXr0PO3HP+v/M7a/Q0xy3QQMwX7qPpl2uUxDtRcd1gSsIS+0KhtGsfO219EJ5grNOz5gjdo0y/WzGzjHyzTsx3KtbvOX6e67epeVrnCk80ngcQy+0WGnrpqqhJOHhCgHl4cikKTECh0nOzdZUg9sDTHngOG2HtMg3uL1v+zV3nIT+UcXW4al0bnFYUt1mrPWKhyVyma7T9jxljQc37IFtJxFpmGJNlzJSimxJ3mbJVIKwAAYaEAD/rXMVCMHAILAdm0teyk3KKb+1e5fRZc5f/7ksTXglPCCwBBDf0Dy8FfWcZjONxsWLeXPz1hq/lrJG68EKtJLVCkclRrd/QjxbOZGCjTJE3rnCQcdQYR3ciJSrOJ+xmAcjlMwMiAlFh9WEGCcT+ijEDQwtN31y8zNFKPvhsUiMtIVcViRNbgwKTVcWKNqZhaVzI/UzM8b1pmZmdrfK+ZTqx+r3FtL9VOzxFE9PFVs6TSasQw/TwP9EOB2J9FkhMRVq0u0BYRD8/j7Oah/jbVaFk+O07IJDQr/ZQD8CRMngoEAtE934CbM8mMrkvbtfv37e8tf/Obys45/eyqY4dRUjlGpxwQzxRHzfU+EWzxNSkClv9Tv0m6b5Oytq3Whvy5KnzJUnKx5bufNDiawv3uadnM/+b+MZz8b9t5z71zmksGG/dxPvctn8nzAew4kl4ivWctrBGnV0Dv29jgaTh/xGWCplZARd4yy9NM5jlY2NwUyHJFUzmQ1uSd2sIS5IUU+wAAYplADkuYgMhKB46AZQBzsU0B9gB9OzMrv3b9NrGr3uFj8e/nvWH5dz4IIb9C9TtyNxZN9GcxkvT/+5LE1YIY2gsDLg33wqlBYSXBvvjk1yI4QQzNFmrYgiQL9J3B5J2HckDId+VjeN2tyKRRihqUqnn0oRqdyfh/y9c4+M+/r++h1e2+bvNwIdcuqSOG4jyBHYD8cXjTGetjX03CXKhhLg9HFiptULlmV6fQt8jW5gPE4DF0e6okVyTLuOhtL+hTOcAuMCIj1c+SKgGUMwqYa4BJgQAWFYAJEBm0ov2RAHU683XotO3I7rqPlbqY93ex1nOas49sazzxd3XEy+b8fMbqNf7FJmQ1szY/rbye2+Doo1DNZLpM9XZg42t5lxenlQV9Pe2zaMTPqFEFsZGYdpJnYxL96vXxo8yuK2ndn687EqxqVs/pqHAeQWZue693COvvHNX1iNl2BW6Q2hjQnaSYUS4IlXMqvfyotHREG3p5GKJDyel+Q09S8Gi4IsuJqKFCja2/fqU6h7wAZx4FeMRaax+DRWEiLiNxDzEMpQAAh/dADBAS6ME4CAGgDGAAAIPAL3VJq4xcBwbccjdHclsXwv1Nfhj9/Puvv4Z9wtJg/ZbSJHKmxHrT//uSxOOCFs4LBy6N98NUwWAF4z74OnT6p5a1YEyYTl89JPdTTOX/2q9uxEMReMZFn2tGPQlkIjMi+emVLKQsstC7zPUptei7L/tfZtFBMUKKjMG0b7z5xTfiudJVEK5ZQ8EhDLzxsfsZY7PFDByqOZiSJyiLj0G4dDoVHSym18R0I/HsrrmlwajmSioMAAGgXHqIgcwgD4wLAGgUCcKADjoAACABoEi0nKZojd7VZk7KM6HLn2J/dFLPzwz3fw568s6SDEkzopTvUR/mvuEYr7rzLS2PGovTd+zzGTi8Y53hNSqa1uUczL7JlQyn4ZWzFDoQ6LtcRPTKSKTx65nYv94NfPuK2MturMRZb4VsS8D6iY76BuAwTQrvXyoeSO1Kq+nF2chvIBHKlrMlX2hIpnXRwrpRos71ebKSMxR4Okm90ibRcz8wyKo8EzyRk+GeeYuaMUTxBC5EwJUzMR9E5Yy5Gu3qSkADSsWWMH0EwwDgTwSBgpfIisAYoASp2SPNJnqiMsuyR9+VN465f+/l+9Z8//rW5ptSD+ZbQFTIKSD01f/7ksTkAhZGCwkvDZfDYUFgCeM++J/5GsYigf2zL4dTv0hXG+QwyuK6ScZwC1DB3pB9+hXzhZ7J5FoSFXzs7mRXu9pmn9165FuXs1Z76NQN4iow7LkbPkCOg7Fg5iMVRZYSJ3nmDWMfhJOD9iTLCUtPBIHLIC2PgoHeOFMJ5+NZYUcVz88B8ph22OR6akkCTkjWVMWAH8IBnMAEEQBAJI4BgCJgGACXUzhwAWbUef1ilRaq0O01LypZnMZBEc8bWt/rt26LrKQZjazW1mPWeDNRaDTCJF2d4hE3p/Hx7NxqpkMlK0bfEQJ923VcF0rUtY7S8lKh8k3NNS06HLRs1KuUBtKP3c3bifyVPLP5z7upva14buaDu0Fys3P71g5gM0ViZ4SfxZngPKvnJAwDjb1mF3NVFWX5wUhuqTZlKVKsikLkSwxDiYllPE8MU8lXR6YCKQSOUQ9SGuAfkjYYKUQkeBpl4MCQes7yXmHVfA2zgzzErAqMD4BQwKQSBYBVE5S9ATSKU0TZ2wRRq2bQ25415T3K/Z+1U1vueX7/2u5xgcv/+5LE5QNWwgsGTw2Xw3jBYAnjPvgOMpIaWmc3UzP4cR/TSs7ui/LLTp+hP4dJYS2Q/RawOHgIukbtVFE7PSd7cf83+epZ5SGX5e135yczZtVvFjFdmuJ6VuwvZRt1SHdIi0lsemuMrT0+UHyctl44WiKeB0boSU6NFyEWnYjo5IKrCCIxKLIkF1NCHo4kgZHlyYtuJEMoAAbn7BQCLMMDkGAwGAThoABcpEBsLAVQ+SABEgAlI1R9Id4uhhleZlfcbU92U0GG86a1Upsax+SrVkHpF3NjCJuc6Up5cQhD1Nyh03K3Va6lMEisdZWN2iigQ6gwdwC0PxoVZRQVyolMzlU1v6MVmdv5Xr93n2p/fVJKag7feB9uWGF84ttW1jlgPoimuys6ohLg72iZDmIo0awFuo9grmJBV6pWFZFUD5Vl5LYZbE8OEvLdtiVCpNMsxCjnOdzclQYx5x0ckNQVaeUDR8iLMP0EMAAUGA0B4JAaJTl4AwCCWKBypqzZJpoeTW23rZ09/PCi1QZ2d91zG3nQHXBqcCCua6ocm3vdn9n1//uSxOEDFr4LBi8Nl8MmwWCJ4b743jeSWgYXjrlQGot3Ol9V9fYlVqXb+PzKOwHsy+UmRgrDEagzSWw8aH3Z7YcUz8t/vff/fb/Mztra+eM7/6tLUxuWmPxZGcq4XX24HXbe1yd+jNmakOBw45hKTUKj9UJtksJm0cRZjJSIRZHIGxULhGLisSC2EFkEgr8G58EBBC0eB2IxuS3VoSoAYNtPxg2A9GACC+YDAJgcCSwgeAxAoAttMVAXCW7NfZttpDWZ2pK+/Zp/vyvmP4/lvGti6czQEDEEmdf9E2UWavumjdYRlacZ9WoODop7tf6pHmhGYcnCXeOsH87Dt1Z88P6kZlzQ8vLup53yYubv/eHfOtTya+dVeZisWZnUP0zazW+miRIKthR2t62qhzfxmTR1MkaDVS3cVSaDjKwtaUOVtRkYmsR0eqnQxRNTGojvQ6MiVYcJ0F+MA1U6fqEsSgZAA0w6szCMCjMCEDUKATAIEBpgKAHKoBVUqACIIXXgJa7BMVzqyU81K8Pn6TtDM9+9nrestKajHahKJ0l3xDLqzv/7ksTngxkuCwZPGZfDDEGgyeG++GYMMGvd1VQxGxGka5l5GR5odBmUoPMjpMbMpwF+d7veoUGPWkTov3ZiupHYszy/+c2/OnYK7eOj8X/zE46dPpjuaMn9J02RncoRxp4sokjLrKwckjy8Sh7ZeQzfeFANj8yZtGObaAWBLAIHIdDs0ZPn40F8xLLoVUNjk3Tqybgz0xiVhBGCUCiYI4JwOBxTiIgGgQAHKFTs5U5qr+abgwx3565uxykt/VlNv8ddw7ZuY26nUJdGfvHYVbFRJktJ3NyyLUinq8Q8ypFHeuW8+nO8oKn1Dn05NaQc7DLJbCkO7XMnUqWdhKdukzM5+bPNd9as9728ifgRJbX+yukY6Jlr6VtDMF0SQuH/ozeqhiGNUYKD5+MrWHdY4SXnkZG9HGfODQQkgkHzfrzLVY5pxeExZhgOzFK0yIAfTBZBsMAsEwDAkGAAAGYBQAhgKgBQoRAEkoAS3mqsGSDtKbo6vZJMpN9DO50kM5dt3dXPw0uWNKt8V4aYn4op9NyPOXe56pnral8bw273pu0W17j/+5LE54NXzg0GTw2XwtXBoQnhsvjbTY2PlvESmy7eZmaZ8KvUGR4yI1/2vJuGjX7zm9/P+XGd4+NVa3/i/ktn+NGpeaZY25wXkJNPI0GVLM7O7gs6YcWtka4kKKwYfOnafb1YhLmhy4QxSp5WQ2JCVetE/TTEbqperz9dMR3rzYpTQgGmcKFn6XhBi4DdjmIuCnOgm+ZAYCBgwA1GBODUDgeS5xgLABhAGshEAAwqANFnxas3DbJXQgWapt/QTXxyU4bwuf3HHYoVzSqL3DlUidp2WN2bzrMOxmYNcvZizpJlHqmyjHCJl6euFLdkFQtEzhmQ+Qs7bnc7Rzyin5S36eR+0rfO/JjzYy+rNFvAh6Z9T3eT3q2ODnSLGa2qLMzMm5tK9FYVqJamdNwlA/VkRA2Sa7oe7bJRleJeJDNJdKmzNCZjiJDdJoBUHCzuK0nDwcEQ0QhQA3qaojGwBiMEcFIwRAcAwBFhgQCuHAjQ+IQAhAAU5lhJhNWomUk5P0Eik/yWV/QUsm1u7+8ecEDeWRAu3wiEv3muRM5qUapXNnJk//uSxPQDWuoNBC8Z98MOwaDF4b744a3TMqchO06C5UHJkrAo1NJq+60izN0bOydZ8nX+yn9/73P77Mzudan/RddjY1GNte1elWcb1o2PFSptGrPm3dXHi2pXUDwXrXYSEZWvLiMGZBMloyOSybGBidJlQ8ryQBs4KiRyM7BufJyUfjq4ZrxgMNKQAzA9wNswAMBEMBkAYlFBEADiAAYGgFmCBCAEl9CYAEbI9ZWAA10Z3iXFk/cxhEKW1JJZCfuWPq43ugxShSGgoLhMdO5hFqEg4bM0LVXaQTVJm9DdMqeJOtr9NC+0iuKFA032MGhi4L+VtwRRyRR8ZpGZz/+cXpkRdYm/vXWcy+uLahuU0GPJd/rwVPBY4L7ESA3qR7HqnHRoFzxDTaeOBWv30IvcZNpFOpw6GBpMM6n7KuHmxxHcyp5HKpKLlUqGtzRPcsaMQ9eS7WsqV4uXakZAA0nM1DCrDIMBwI8wFAcASAWIwADAgADHgOqUgAJUqRYtJ5qWccVh7Z5mmkPz8xlQSyn+rW525z2C0GwxQNwnznUJhjpM0f/7ksTtAxe6DQZPDZfDTsGghfG++O3OZddLAR+curZ7c720yNKx28ucJ/S1n3jG91fzmdP8/n3LLuUyyn3nfvb5pb//969bsPoTj9HItqe3O19GGmshdIrjxPhTURwD6tQf5hUiMGrHETZDLC4YnhiWX0lB2Xl0jvFcP3IXiUZoykmBMnitBHA6Cb1TH6DlMHUE0wLAMDBbAALsjwNYYCbPKaCwARWAQ9bYET6yLid8WqyyL7pY9Y7AsW+pX5vL8LtB9fLHew+eZZdAu0ax2UfrB5TZCQT4j4RpUBGRU9GYk5HuylgoHWUklkH63cs+o1Q4Rl7lZNlkzz7/5Q/eKY+fi+sYgWxGiR8NWbSOWIu5Y+GXessTDGfxmN2+ZlXK6f2ldL6jeZgG7LMdXVrIuWCLDY0VPTScmalfETmXMvSPeIIksiMZjTJIhrM8RjaSAOF41wxxQWDuaTmtgFbTyMAADk0hIAjdkCWC3WAaiy0WEjKCjiTrZHPNV+MtUpWT1/pA3ZKTemrafl0ni3fHIfLleytJMl18c+74LVO9ncITvf//+5LE6oMXOg0ITw2XwxVB4MXhvzBilKdbluit6rbpiMvmetjX3E/KqhL5Ufuetr/+v/X///rP/tZ9/zPkJSq+gumuzlrQnSdNRYeikdhcZLtIDD23Yu4dXssXONiIJslYoBFATLjxCRAwJBSJGG0ZgbBsoRicdYe5IBgAPbGGAMY4MH0AkwTwFisLtCgwFgFzAwAPXuIwDC7BMBDEi+YjABrkIAowAG9lSLvv9NZkE3C3/1V73VFRfT3eY81qhoNcvcx/PnRR4cLhObrCziQZQQh2S55WJFCMe6jzqnMmE63vo5E6Doq9JKa7ZidzCcDj1d4Tnrkt/Sn6FLve/v5vivxvUJ9G3qLi0BSO2+K9s9Ym9OqZX0evY7pGtzaqoSgkXSny4SKwuUpzPzgaH136UIUyqEz1hYNtdG6wqFoUirPRvThBVWZSoXZWJ8GCTZOMkGcBggN1zMMxzwlzBIBoMGkBMOD6SvCATjAXAaZZA4KAIKADI6rckZmm6jfFbsujnI/VosI1HPuZX+9z8GHmMtLQiB9XrTSGjDftRqPmzCHY//uSxPGDF1INDG9pIYNmQiCJ4b9ogfl5EbaxDmUYuskUjIunOmMhg+FozMKQSUlQSCbeeXM4aHlcsvZJC7szNZn4OitMdP31ucyuy0KN6Oz6p6iaqHMRgnaeyLI5MSYcF4eTiyevENteOi0yPTM+La05JR0bhYPZbPToek61ha8PpkIwN14Tk8wClH4MBsBJDAGgEwwEUAVMB/AAUVgcA0AQAvh8RgCIIAACgAJsDQACXv3FC4cl97YDux23CMnygv6DV/lrDiB8nZA2TOGp0iJTJHxb8StD6RMb3Ip2POFn+SEJW8IORCF+t1jVq/Vwd7HzgxkbZ39If0u/naX5P993e2f38zuo8spqsuI37Wt96U9VC7RST2211FiYwVrSSsdTtRFji2VyqsLNnuMUOYg8LbOQEwU4sMR6OQTPRHDEQS+fjIG56SBJDktPVQGRA3y+3zGYERMGcOAwPggzBTAcLamAmAWFALIAJAFSAAKHayEaYFpVBHtp9+H4h+M/Js4fiH95b+xngCDlRS7MNynL6slTVEKYLNPZcMNopYumTf/7ksTuAxhKDQhPDZfDE8HgwfGy+I1nWmbqZqp5nrxUtlxh7yBkUxIpGGTSE3Ic/JPpw/v/n78Xb/tJzt16lK1355mObRUtf091DyTVTaSjVH9qPrTzVooDxOwdOOti5QNF4E5+UlCNDNXy4hGAzHsdBoXn5AK4vbKpTHBDKxFTO4ex1cxmQh/GFIBYYBwJIkE6EALDgDBgSgUq0kACJgBgDI17LwJdRQsABNzIgB7cARflyXQdhEIf5nZtfXs40GNFyzW34obIIXlhg+sPuVJsj/LIFpvSyuRMdJQ4Jzic9BykiEDU+SrZL0LHYIZbRWBRqW988iRbc+W53mt+tZxql9TViU1qLDvBo1SUgQXzn3loTUzJ+Iy6b0fGUrM3q7yzvX6dYjyev4rLthhl+hua/dUvTAU+2JzOxMG5p61JhLKgba4Qwyk+hx/qSCdavR4PNMxgzHAQzCnBMMK4FcwYAEBIB0wCgER4ExUZUAHHgEh4CeXIhoIZ9AhDhMAFaguI37kar9g2I290uvqTWQIhiYPuKF4I0mWDpg8VoFY1kfP/+5LE8IMYDg8ITw2XwznBoMHhvzCOPYShythiL6tmhtwjj9PIX1ao0RzhTOG+rITrn61OnPbQsvsyPzJ/z85m8/8H5t+x+G+zBt/KcdKORbCrsqivazZ3ehetpiexk27h02VUnFRQT6HxwSF7J4JLoqUn55duM6LZcFCGUiHyzD1EoqTy8pudxnXpl9hVmDMAWBg5QgaBgZgYgJGA+BMgY10IAnGgLqcgACFABpcWAAE5G5U71PBlQQp7+PQ8F/GiotV88gTAeFBuQ4FQYPxzwk8QRHT6uvnxqadLKKCMqrmpgzJk1LpERWWMa8rk47nWuttlhUvLJy01vYSyBOHZDN9vP/PnNynXrOt0feelYc2j5ctPFTxTVDzGldYi2h6hOISw5QYA4qeBeYootMyQaUbaVxmJYoWF4wKgLm5KDofhBcEo+NAnF5GJYhls/gRqAlADLd+8MOYPoGhUmCcC4YOgC6OhgVAAkAGLhy8DANvVmn61d7U2n0Qs3H7V7KL03YnNXvvZ95d+DhsFvII8OWyXCP0fWi8VFQ/KncbPtimc//uSxO+DGIYPCC8Nl8MlQWDB4bL5hVJ/IUeFxMQTmdvuz9fvueiTOH7Z/eH+f/NL8/r+/1mmzlv+e78yt+5bm4s1hg9vFtky9+J6zaG0eLiklK8RxNG19lrp1KQ4WEkvr1yUsvkdtefNtnGFuI+cqqOxSJK0uo15OW+EBk+K5GYRwDinQqZwyQNGxhwSLXxlRINBXgY/DkiQFQIGBF/yoELzBOsxfDDewz7NrSMP9ZhVZstzbElcnH7pPR05+SX/V/LSN913mLulIevBvi9IkHEWzPr3381npmkutUpqe2YGYeN0/r8ekCb/NsP84vq0SSWNqNjcSXeabxXO64xv63X4zTGvvEmJ9Y+tf41qfPpaPfdqyvGqHPv4tW8Jt01ydQxFK5QFnqFbgRnkysWGqA/iohIp1tY2LL9Vq8yjfkY6sR+n+J6kkSyK08JGZcIw5UUoH7JGOJGNJRHettbnqgVhA6CpODJ5DQMIYMEwRQUjBLAfAQCwQC4YCYCCTD0BgBQkALeS3Zw+anTL0g56Xym/dpqfsSgnn27375Y+xa+7+f/7ksTvAxbGDwpPDZfDlcIghf28MvixMBKm5dzMgXVQqvmZ7akcpKcIkWahhdTv+3D34ZHk+SvSbESOVQtoemiLUz/M83t6d/tI8/LM/hzMnp96h1Rl1Zndg1eGCfrCoompSkZ0+76RmJs5xEdMojBFC40u4eiy2mhQ1KM/cD0wXD2JA3K6w/kpxgMgB8ylrGeQDCYW4P4hAxMN8AYuyYHoCI4CW4bpgoD4IAbkQUAAHQCJA6Q0AMsByM0EiuwiPagN4e41r+rv3vq0ud3O/uYrc1y9+u+o3hqQMwetFFZDawGpmTZkclg4cqObfkRPauNNqRP5kpc/vlHpNJscv7vOS7evsWfN9dqqlsEtnLbuqnH1jLlrPx5BI7JBRgwROciUSaSJjCcx5ZCVH0JXAbI5ligaOjQDAbETR0UA4SgM4hBBCERK54NLqA4LiseQAQQZPQ7IO7zMZDDOEXzmXk08kCAMzYcARIRASqYGOwwql6OcKXA6ZMJBgLSNkeiNg1JOCkVx6pdmG8UpkKWbzp23WD7/MzMS34axS9BO2+tdxqz/+5LE54MW3g0MTw2ZwyBB4Qnhp2jd2msepSe5699ytWaOU/Ztn/v7/t+1k0za5HRmdvOPLul22Vdruf7Gz2VyZ/Pn6zPTm5mz3TuX796Zrea3jb2kx8qryiB7mn2WqQJT5Lsq+WKIokhzBVcsVD0sgapWNnmUMgwBwnFBwaKzMlPq4lqBQrEkaiHR9MZMlgw48WACC+05GkQYj8AEBC2V7uZqNwVYu27Eo1hqBulBcSsH8XD2fKetsF39p3+9NJz3h0C6h0n07wnphoWhM48O/3/u7zreCtmZ11Td7k02aop70u0tIXmLNb9o6IcBQohHRzSZ76/ujTtF///9nNJiCmopmXHJwXGSqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqBTiTAMm1TaTCagZM5dsNRRTuiQxoNMgIDBTUrCCQNMHAjDgOICoIMA7N31FgwHAEVbvBlGSUHPicSzSWEP+fVyXi6/VxvSscm9EbudMbR0cwXjUYbrF6xeYaduvtPOywnUfaky7aPKQvVxc87GxHari9//uSxO6AGbYNCC9tgcGwIyWpwpl21y69bWG8F2b99lljlHq9YjPqKnY3qY0iauhxOQv7PzMz27SfnM2Z6e352Zn5rv/W9Ir0/JnrL70PtzGWk1XWWFps8uh6BYvUUodLlKUsFhUck+yxIJ5YMhLX4dMPp1x4VD0owOFYmnQ8l1dsAgFcNF44QklcCBolxjsYlyCoGCFAPJgioFgYFwAtmAJgChr0oAilvyE2wQarxcQi05SYOvgt6AQc9GWtc49rYPbJtqGJHj7elZHE/RlKk0Ju2JVX2TKW3KexSqezjk/8niWuh7X3GZ74SfHLvYT/jUfHIQjKtSxmM9rNg7WE/vyvl744xCd3Lwja+X6jK4+/PfXvL/xmoR29zyTr3PcYQz85MJEO+yeIrhAVHGQA09+4jRiZCfQCQPhw2HzAINrCUGAogNGDrJ8CyoJAuBYnA0QCwAgbeFzwooWLTBEIFGoAkAPVVyQoehMK8EIwWQPDCbAXSZDgQDAMAoKwCSwAOLASgwAKqtVlSiMSGgAy8laOQ1nlA8N7gyaivyig+72yxf/7ksT/gxzeDQhv7YHDW8Hgxf0kuDCyHEYWcexxPpRKsZUM0gwozsrjFKp52ZXi9kkrzJSQiMjqmiVVSSSncrqyqNi3Rm89TNfslV/17Zp2bzdsyt8+u1mawNflLJb7rNl9715PQvmChGcRQx3aZfXbCUWXhxPD52ElPqGFRQQpdGRw+2dxkQsRF+I7FhkeLC6q4/Ddc8HMj8OkwSAgDCTArMJ8AwumYDYBgNAwDgBF2CwFgGARlBKAEnYpzBqpkJ/IMmJP8OS2/JL8D9v6vbvWvoMresrngwNCCI8Nd1TJdkLt5+YIzFit6xSNV8G5HodTM1uh8BPw4Z91uv5ObRbfYov/IfvrT+J/Sy58idmZwuSnCg70yBRFGCMBK1EAdoEcmyZ3hZOjJmF0lXo5xWkWatd0oPURg2TIV2BMVAsMDorZYJBO9ewsSwgMR2XHDA4wcgwGIAHMDBAIzISMkA+OTbLJtSRAShJzpGvcLCKM2B50tRlBkmbPlD74UDwFhayunqizpyBvmW8TeextKX2ex2Pmt5MPtS1+2rtpSiszmb//+5LE5wMX0g8KTxWXwt3BoYXhpzhra/2qjKcZ3PIrV8/9xuEtnCdSS+p/1VXUf5V/m5/tRjHP/VR/rPVeX2H+pf1u+EN6WwhvLeetJyfa7ayGH6j6JXEi6Sqy9iFRdEITwaikkgOPHBmhOoIjR6BAB4iRIiYIGQJAYcA0FgTDIwwwNPBIsJUAEPB4V/qmbgLqYY4eRgFgtmFEBoYEgBJgSghAAFNNcZAADACwEBhKSwASh2avHgwANDe9MPzLuxSjnMmzuryYzvfbv7AI8FBaFgc1YsiPFIoRyhBiOHitOXEhjhpq7qV0/dWeYbh95YJmO8fpI8PRysQ++uuXn0jzz/1275fDn354+vGfn51jFRPVqOFGabuMo20RqOZWipS1oCQ+bRSVcq9Q6KyEMCIqOxChIuIzAqIsA8iChlCVMCAqTkJYnE4kIxApByoBlQPvAmY0eQpjDiBEML0HIwogTTAJAACgKIgAVGgM2HkQI5gDgG22mlqlPx9FxDWR0ECwJyLQTZm4eefVBjY3STNAUUURR1BBlHavHnnG7iphrnad//uQxPKDGXYLCC/lI9sOQeFF4ab4OQSQVcz9q1eRVQbRWco5jI4s6uo8+asqudVEDCOs45jSKIolr9vv0uStN/yXn3e/CtuMPUkeOlBmMf1kLnk+oKKHpizplisGSpAyndsMzWmSEoYDpNEgFIjQF2CpCQDKoQSFiUPLisAskJOJAuTwDgzYlEgMRMA8DsYA1dWPdP0OBix8YEgER2MiZdosC1IOBQjACIHjgEAxkMllA2ge6KRNfShADCfcUevYtAoUykTR4zDjFrzm5MdpZv82t8N/n62r3fd2LIqfNepavIWf67vmd7/mdgerlJ7/+9dl3uzfn9pPVnMz+vP0mu79JpOZ0zOflp2mz3TOzvVva94bvNI62qvaU0va58t+7R2vbOocTIzp894/TIKDRpUmXoDkGHxPutYXqebWp1RzUtJiYbri4tCZeQDw9LpHHscQ9QxQTjmKHwwdRMTMDXBbTB+Q1VjOjQCULJkoQHSRDEQ4oBgbWIQBchED5FxkBcJmpMDcgcOi9BkG7VYZtSWJYb2lN71PXfV5se71e9yu//uSxPCDGIIPCk8VN8NTQeEF/bA43PPn/+6rB2+XzPnvO+thjfl+lWfarUC96m/fKn/LnPZfbyo+cNzducc2Wb/W/38v/7/uf3VXsIw89/2Xjk1qWpphrG39W20VzbM9uCnmtS609PTRmwsuRzHUaBM6NI0IuCzJOrZMEAseXIWjg1QYIA0JBwuKRJIGqgMmGROjCwwYQjSBc6OeCgEFGWE5iJENHBACAYNAIdef5SJWD05dFCa38cmSAzx0hnjIfbMWH6TVWgvNOWLyWH6UeyffmR7Qus/22FdlevMFOns2TERL56Sa5+9+vFS9aj8pSmpLH6TkdbX3cZxzIc5/GyIrv+/+ufjn66/jnlW9lTEP+enxuUas5zbm0GTblnFTlmIHTJIkEpyqtokEqXrEuiSgkbqjsMUyeT3EEgPZCkOTzpqSi9o7iQ1RipxGCQ/r32zTwEJMQcOphJhLABg4FkwGQVhEAaUAiqHDQI5gAAL7SXLkjwAWwcAEMAEPNQQt3cXrqwu64jpYUN6e+xM1Fg/CMWi4ROg8tLzjVSOlEnjkc//7ksTqgxfiCwwv7SHDA0Fhif2sOBzuUxziglS26UzUuqO7se1mZp7LMQyFQkXK7sxBhpJ7nPQpGZpbN9H0Vp1z89s58H1v1522X6WbvW2+7Cdnrjtj2TNN7S5zI6nVojhq9VMDJUJJyfndTutcVnbR1z5gDY7HkICbYnHZ2XhRGWnTpYYLAQP7r281QQszDsC2MPMEwwiwWx4DYwBQTxUFUiBJWSYAIBRgBgRURYANCwAKdHAIAOOgDLcutSc74i/73da2zOzuQyzVab7yTTnaGnywEGK2DeciIeOL2Y2rplOSQGFIN2vU3fcSknco3u5kh0Q7HWI/M9+sKeGSD95mF2eZk5Z//TlI9SQ5/Ogps33Y/vecz3e+YfY9iFhmmuwVPvQa8ylboK1Ly08eRa42Sh7TFAtOulk8IzCx08eiSoRXP3EIfUw7EslJByD4Fh6EiT4AUgMQRUCjBlgYJJobLjowwFBxkwKYCgsjpSJNEA3TlQFmSYQiAqCKZqcV7g40BvLsEgdpfRYrD07z6VK62YMX1kb+O1GbmQpF7JtzJ3v/+5LE8QMYyg0KLxWXwzdBYQXhszA88hLov6ZVVXV7mX9+2oYz6m/i4p6lscgqeYxp64dc1G/fH3/8V/XXH8fx/dvivrqt7X9nF1mzESxmaMLuTB523KnSWxhLPFo7CISChctNYMVFTI+VNJSyTTQ1MWDy0mGw+Goei04OsrPAsN5PGsfR2AE0BkmKZiYWQDcnY9hob2bwyGQB5jagYMekR3GgCAhYayLAGpklbwdBywDw71sw5xCJZMoEsWHoaVaqNUaFcyxPti+9D+tGKzl8TDnZ7a574t5So+3Rw3q44l10xjZl8P4ci50oMSayWJy1ktXchn5Vc3uLq22zvj/+u/nrj+4r+Ln+23cunfLLY5A9oHGweda671zyCD00ES9ZNNh4nMWTJb1jQuJpILzYeSQQxLLiW4drx6KTUpEc2agHszSIc6m0wcWDugQNBiJwDFcQTw44Kzj56NnHsweDgaVQoIR4xo7mEwAYPC8ClgCpJCwbk5aAYBa35qJjGxCVCLgTAWMshynROmVG5SegyQzFpnmjv7vc3Po1DzvPffy3//uSxO2DF94LDE/tYcMXwWGJ/aw44ce2PqHfFOl6MbK397InplR/XD6rc/h9X7ptsRf7PZ1XVfX/HF/xE++6h198S+c/+uu61HnFZhyDNNLKLSNCTpknOoKm5yoabUHgsBOHaZkAYkIIQJhWqbjQNuWtNSk2PEOO43BPDyO8pBLpYhh+IM0NCvQCDF4AMQ4aHjXYWOcjFzTDQfAoFFlGh3GjYEDxj5ACUFwcBqcGgJCeUA+y04GywTCkVfBIqDa6EUtbcRcolVRtPqHDl39i/u7LPz2dsce78/XfnpyCi74W8+8zmblLX5y8/8e/f9pk5BWnTvz9snppb9p14fy+ZPZ85XemnTnT27t9rubOZPZPTboMnp3Nrzb32ohuTfsYW7mwHTrcMr3C8TV5dPefaKlkxPeqw0ifNfE9wdDM6WLilTyaVzQtGCguvukkwTDDg0KqNSX4KggMSUYczB8we8kApDA2wI0wDECWEQAaKgNy8BoCOoTq02uagSngcbA+o7F/SheDUG69fC22fFo/uZk0ruThfkEgZ5saZTRlop1L3f/7ksTxg9jqCwov8WHDQEFhAf4wOE57rUhknG6ucuN0OiUHHPf8M43cR74j/9nbqZb5a+++Jds1H79l772NbHU/c/vq/v5/n/2MjY1zIrqXMi3MOWY3DWKPSPGMMNUno2TR3MIZYsIQ3aquUFlk4ajImrJQOgxJKKRwb1jU3pIhjctsfGsJJaO4PAzJIjmRMIag8gVHZrKiZVysRhng2G9GeIgHhbkwNlCec29SneclqTfztmD/zM5SZDzobQ6tNlvcL6NaaEE2a1enzrV3jPZVyVdnYsyNjUydNrxPTa1O0h2Y4rYmMzY3S4mNyazY6F1OmCzHE1Dp92WLHl4sg6utW2hGitojGiQug2wQPL7RrL3CpPi7glMlTClniLwEmIKaimZccnBcZVVVVVVVVVUFDWgyrsx/QGTBQa0TAgZgj4DiYBMAMmAAgOZVAEigDfTdMAcAFzAFACZM4YACSgAJAwBVIxwAgUrKwBuqvB3pymY83HqjkSU4+QQZyrPxncE7hecukrIFQcxlCJcrY0o+SaE2gyqHDOjerJ7OFIg2mrf/+5LE7AIZHgsKL+FpQjAjZCnsmDzRrc05OF1FHcfExXcKk0QPuFl1UuMfBJUdF2KJX9xCLbVHo083H6c3DVB5/crr2S5QojKPUwgXOYo4cSIBsiGfo4sq/tfYVEulDZjcPOjzocWpQI1KSnZDQ5Vrc430LUyoVqjLEVasTyQa2xdR1I1MZuMi5fl9ToSGcoIn5irYH6YHAA5mB3gHJxLsHH5lhcY+MC0U4IOWjCwxPBsJEQDxJJlMi35QLX2ytH5Xe4EaAqA4IGjM8tRmbZibnspMWwbkvSY3+dZvLbpzKY8+17K5ncddUb72e+oa1r7iZ/6t7OuX01y8LfNWyIf2dqod3KJ7b+2u+f7fX1/zPxHH/nI+ta6t8G7YeyGo1ZxVZIqadN0iuJTQJCZ60U7NSWibsRH03IUtYNxMUNicTzhCKlpAkspcZDgPZYQRoCMbRQlNiWRVBwwPVdSMDgB9jDUnMvk43sDQoFASPAAGA5JqrlYmHRLEWYFYIBQDtkoFRvVdaeAHROIIeAFkoAIEbCohjmMFcaeImMkdnGcY94i7//uSxP+DHSYLBi+h+cMpwWFF/ax4sZyOiXStJv5qetpreOI3ji9lnOGTjk/vWpWVqbRt3boZ3+pr2kvFVy6TEbf/X89X/1Fc7TPyk0rS0K9XxqnCs7Ewgji1BxyPHwJRdXKHg8Ip4OtioqYQ6xQeGBgSmC5wKhKBIeSHQdjSgaA0D4RhhAqIYASjRBlcKHeYeQDWleybQFnAoJiQWZCDkxgTRTCRI/RZSjVQbiIgCqOBKVLLLL7jwZsGkPUPHASswMa0TDVPI7mrZ1Ktdn0u5Zy0HVYVYfl9L2emJd5idIQ8duTY0dBwphhIe166zNKaZrts40xJ7XdPbdnnqry9S3uqeO7ZCexsz1vZNf8fz/dX//F/O5ytzH7YqYmdNjD0sWhrTl0SlZTSXPlbjjGmxcbmkqoE0st50/ooqJjabmmieIhIYVnTofS9fI5gQKoFDSFAGIxtEDMMFaA/TADQAwwHEBiEgG40G0zIkXVM5NIIKrSAGZDx8qi/GAYsNHkntYZ9qs77o2brNX0aSx5dJsb0jRdJiidg2TW1zfmohz6zyv/7ksTsAxeuCwwv8QHDG0Fhzf2sOG1rqRleqipZdKrFlO6ZzxUPPNh1RE06vmaiPdvpjE/WZ3azHTPUR3e2+ojr3/c//x9R/X88VL+lLe1vC6yCjYQelLTaVTViSjqavC5us9QbVykygpJpqRC570iebgknCSbFJkO8jD4Rsd55QEosKR1B4IAPbA+ARsHiiiUDKh09YxEgFuMCVAvTA7gC4BA6IGAICsAZ8eVy2fmVEiwIiGMjFhQqG7iGCBYTOQM9Eg2/z4dwaA6tECVszVF7SwtzFU/lJjWcW+q1WrbOtaurvuKmZ5WV5bU1cMlPVYtU9SsyYp3LKqU7Tm9Zs8wvLPzpyJZxPsffH8//HzxH/z/z3NMY/dcKRs4Sun3T06QKmGpucy41fLriIRRTTOnpJBtC5wPhabKH4QLyMimZnFzQdpggO4iis8iah4HUQJAD6SCGqgBaAxdlibMG6CQTAgQKwwRYAzMC5ASwYAEiPUOuQi8/poAQypZK0UOADAufUeDAgcHnmYyp8tPLDeUcfJqdjg7ETOQfBofWNzsgQ/f/+5LE8AOZygsKL+llwxVBYYn9LLgringnHY8bUS3NjueJuLLkr6q7h56YtJzWM2RFl4FeYOV7PR3etYc3y5Mu7qI0tLp9OU+fv74q+C/XiPqYTeeW5Qt7GLUTxdkimPxELtilJOEoufYSniooNEEkKg4Hsnh6IIeEALiCWLi40O7EAFrMI8CEQC4THhlgGi7UD7AIfoHkhrijcGKEDGYMgEBgthqxwIQGKWrBQwBk4WLjQtwBYiODKidg0JDiWbgDuGFicEk6IRiBJmFkZxSYOeQ5TacHMwNa1Fa9jpudFHlyv2/m/a6pXV7if/bx1FRfDdtcdMtszfxu3KtuY92m/p19X1P87u/7///nq73ff6rvbKk2y0IQSo/Fy1e7hhSYsQVauucOnnPJhdRSTTYqlQ2Yg9VcmKjyXkMOw0BAG1c+RyJZUNzSwhRHJRqVJHDCiEoAqkPzu2Q2JAWjEVCYMPoAEwtARQ4FU4bzy1DyJGNiCIIrLbEEHhUuWqyDSoYpedKGHy2/DwXqZqbX6LJK9Qi2JIU6bC/syYtdX+v7e16j//uSxOyDGTYLDE/pBcL/wWGF7SxwC2cbjAps5TklC6MJb0r9b4ScxS84c03DWv04a9lqeQqMmXPnee8plaVwaTx+5PNln9SS/2//u769f/Z/f/P//+9+XsN8sfdwb1fIXGKUkZ+qKFV1ihgvGKDWDZpyRdDcZ9QmF02kLEBKSqpBtpCOFARDSxEB48mKgXY0qEhiljGmYUSEQmAKAmgWAXyYH6MABAFRwBPLAAqDgLxbBgDYAUFgCpXTRS2xZCFtyEgBQvrt438hOEDvFJ5l/mufNZSPuUxn9PTWMJ0KQaKAqsNeyuskSUcyCAu5TursZmqPGMpC73WQsp2YvOQx9EnZdyOx6nR0IuzKimay0ZjXvtPT/9qrpLq6MJmuclUGjWQxanEBAECqTKE5dFFC5GQTQDQqcvI0fEEqWmrQzIjJ8NGUQxomLwYSRk6NcViIEx0AobozZ5oQMUfCqjBJgFcwR0A8MD0AbDAGwBo0k836ID2V1GKahVYNCKpMwGgzTIDIkoQin2EwFV97aOF4rge6io3JGVoH5HYVnUjcr1Swvv/7ksTuAxlWCwxPZSXDD8FhhfKnOMwV//WvUid7F9RrGsnli8KuiLqZdfNzd6+1L3xU3tR+F6bHE30yXfMVGu+W97K2R/f/+37/7/nq9nuiX6x5V01EbnotlBpi59rk40NXnSpF5WiN0uWPrkATRysfamWnjIbDMwIEhSeXoHEUVS1AkDumoECbjpkHiOs4f0i8dQArAaHmHlmN6AfJgsIFAYDyAQmAkgSoGAVQDYa+AWHdcR3DIxRRAQCHEBsPp/jRI05ZiL9PPp2oJo5hr7cW0j5XDum9NjNxRMbRkgyUXfK/nHpVLp2f6d54sbkarGm/kq3ztPJVGO4lUM627e3m5HyyCONw91LcyGsq7m27Knu/f62flD/+/v/3///dn5b/5x9wixvq7V1PYQ1KLclZPmWtDkJpsxVSQDGLvpsMjJLUX9ZrIKKRmQh8mEeEggbePlwoWRApQwPEaII1AEIDLTFYsxQ8GjMCqALDBKQDMwJkCmAwAuYDMZU4DybETKn1gSJhBoyGEA5yiUGxMDE85Q87Us2wvjR7bEzA4aFg6ov/+5LE7QMZZgsKD+llwylBYYn8pLg8pxBEO4FRJUKIfmG1DeMGcjibmUvurZK3dIHncRdfcVNyiV0bP9/o1yl1dMP6GNdnGeo2WLqauY5nnme5/n/h//hYSI//+2oebM8vI0hiPNHudh6KTY68kwSHjBg/okWscEAAQNjzjxGWTxKg0HiTSbDqgfDgHRwghELmlB7ChQ0KC4BKgYxEu9GEDhJRgSQJaYFuA/GB4AN4FAIBAAZIWjwFVJRYAtAoASUAEsqBQAKlcxVhI0ALggACsQZD9JuMPHb27MNSC7hKe435z6C73VNnzU/Mf+FvnL2FaG7AEUComqXGJsWMU3pQz9NLCR+VI2axW3pnm1yabcNygtypF/e/S/nf/55f9P2/RnWw4hXO7VHZ4FFHKLU3r0eJE7VtLRvFUKNAjm5tSkE8fNMuRPWfoyRDi5ds4QImqEgqChoLKgAlA0K85HMb0BzQwLKMDYAKwME9GAOACpn3BymIBISgLthQuRIchY0VS8bXgHDgCJybJImo2G7QDP6bk8YVgKhipOF8JhURMVG1//uSxOiDGOYLDE/pBcL8QWHJ8adwJB9QakT30VWQ9Y4rjvRq1vUPCoijJ+6Vmz+pHQl2lqjNO28YzXZK65t1lR1KdCX/83//X//fc8x/dd+ktdbyXd7jHqJk4kXHlki4eJjc0eIAxz2Ce7D2hxwSEC2MQYJBEMJHHjw8UJEKEoShlDQ9ZRYXBoFAyDQkQyQ0Hh6Kcnmu+GmYgwGIsIYYcgNhEAGIg4Cwg9xEgShEBkoG4lBFbqz1Gg4QAAHYIgZ39SuGYX7RWqzonI8Vkt6MHqOHc5UrOm18vM6UM6af64f9Nw63ykqy1y/+r1CPhW/lEt2Ze5bOsk3cEtTjOLUk/W6klHc/3zu98b899e/6nX3//////57/2/t/M9ZdzlWwupxyXxmrQRRpF1/NbIIWidAy+by7lWdNor1ByZs2k6TLiUbuIrBWI7S6NEdIkcSZA8mqCwwKJ/0MEIDAjAaANUwRACEMB/BCzAGwCgKAOZgGgBgcRGl2ZAKYNOULNkSskPNyaWDkICJzrxNu4W2j4qf0vBsL340FnO6YFOzEi9ajd//7ksTrgxieCwxP6QXDCcFhxe0kui0T9tQ3sR8lG/BPeig3b14yi/ah6UVuG5vhPJQ3yU/q2qagxKf+y3xn5Szcvf6hHrTlSGdQzandZv/r+sv///d+bV1/Lah43XysrvSjiOWPycctM3A35oD2F5mWTGHC1pyJ4iho4gQjBIfhI5UR5ghFRYcF9ohOEowIxEREo+Hi4WWA2Tkg0DhmwKQ2YtYEKnL5YbuSZhd1GKhGYRHIYJDKIBdULjYRBEmDmxoIF9k8WxhwbQtk9YLiVgijuJ1EcEkO5JIkZ0q6Mi7MWlmVqL6yV9R6zuG+rFzXxbP73NupdvmOKjVZVTR6FnOm98VG2lon7pzrfzdRakx3MRf8/VX//fxN/H8fzff9XdPrmz1Useu4ik7pWkHtv1qdULVahgSpeaONLVojE80LtRQrIrASTpqTwSCk4UD6SIDVFdd5gRWFFQ8NDoKYTHwQCUwVoCCBQQOYDcBzhACUZTGZcucM4lYGDzFDyKBRFBZBtAk3QhBBUg/E2xZqfarzOZVYS9YSyCKjkF5XqFpGkxP/+5LE7gMatgsKL+knwvNBYcX+LDhDudSM9dN/cxCy3FLbFH09Tzz/pmqasuHRcdRduVOI1M3DKb7L3n6vW5X2KUl07h6vU9Vdx/8O6/r/7/4666ts9bZZs3t2smLk/TOTqkZmtTzLOJ2SjYpN5Qo5RodJhMTYO9hAFpUO04XqFjX42HTYsJpLDzJqXOD40vEUdpPPiCSHcAVYGJtsRBhXwRsZrHn/mxtcoKhQorgIjNOAmThQ1SnIkzEICR0PkE8DhkVDZbHzYSbBONtjsBDIZ5FetKhy1JL9VhfmFme1XnrjX85NlSB+0Eqmkazr9U4ZPhm+ZZoLXSyjVYUh6DIh2cvhGTx1F5yHoH3MNnoOtyVWhGu++ep4uP/+f/54nv5v/ZM3FXurWmYY6F6Ycl1QclBsMs2XaqtR2CuzFp67PGK5LZdWfJiVFBxY/JiRiHUPpojaUqD682J8qgcMwbVjzFMAl0wS0CGMBTARzAQgHMwC4AbNGkFXHUyztoJeonNlgFEGDVY4iNPq9anSt5A/6edz8mjR0PKEAQx0CohVhcTS//uSxOsDGXYLDC/pZcMKQWHJ/aw4SoyijRPQwmuYrH145r6H7NUXF7/Jg9pMeIdN2fteUnXdf+ftFU2FabjnmFSqH96V/HNpVd/Pv///x8X32nPxykq50Suz2lpyMVbURzEOYaxzmtLMUp4Rigfmh+PEj0YNcbQBhAFhgQB6YLCpwUPBoDtCQVoBoc0NRWFQzJjQLIwcYETMCdAhDAjwKQwD8AMMAkAUwMBxA4D7L+EHxLAHmy0cfHByZt4DQIJHpRMM1ajldZs1zjPnNW5yels5oerWkeB6oxPlPBCkykzr6U6s0MOJb5kaarp5dfDHaJ11Uc+OJtzkH3Ms+mPfb7e6+m9tNmsqqTjuHv1aP9cTHTbr7rnv3fUT+7pDmpU3bHr7jx3qKulGywxhdp9VyEND+bOg0TT2rpHyRI/m9Jk8mIkd5e9AQA66HYCcQBPTJo3Hisd6hUKTmiBMR9VNiHHUQo7aAGoDFm0m4wvwGgM5nzwEI457JQAqD4KUyQUjRCBAAKaXNCAAm0Yq5e9qSnrQEwFqEobCeIAIDXEo0zJLrP/7ksTqA5e2CQ4v5QXDY8FhRfytMFRD1HleYTjZH/1v1j24p+e+Lv+2FhCvZ4Z+ou4Z6to97b1+0i5HUMhkmItampbm6oZ3//P83////M9f9T/xxpL1UxHU878O80kxFi92gwY6Mq2WcXZyDoHyMRRqECgdDzWHEKJFHiIaGxO7MYUSChnHL1GYxcGumCtgxBg1AGSYJ+B8GAaAHJgD4ASRAR5+i6aZiVZmAgZ3pige1YoXQgAEB1CzWVu0tm3BNRql661BV/aWeg7RQ6zxMVPwUG+kZFUTtNe/4MTYoxPKbUu5u8PKN1Kypx32P+3WtKXGcPHN8bnG5ZWq+7ZSlTUsY85wnjt9M+vnl////G9/2Pr/5/Xy6j6j/PZvdtR7UshC2Hb2Wk/BCowtJodimfKOcyKQ+mQnSIyo4WmVTL0jeDTC4NlAEs5hgfGggjEovqNIlLAcGkANsoYPD/8D8N78MwxbALAULmYfwSZgWgDGAoBeAgsjBLATZIQgboNiQKz/iAA1+ygBefBoBYwAaqPBqLgWqr2Pj+2gux8xTUv26vP/+5LE5QMVXgkST+0Bw1vBIUX9JPjpbl/wEQYIDAcHjFx8EQ24PwTFsfMiM0wQYpb1I1Mfxb92IysnNZ6N2IWWdrR7e58K/mRZd/y7D/Xe8pI13z5bSdpk5DHnwyEgwEyXnPZTmvrjlY8MLvmFagoTRYZMDp1yWIxEZ3t2sGeomTngTXdIQnwUMmJbFjFQAmYwLcCBMENALjA9wHoAABgXARQMBLiHh+zCjNVUYAvgw5dZFPeMAx+Sg/Bm7hTlA6rPPmGOMp1JK0jxOpuoRDDVkw1Cx4a6eG/93p47qp/qpxrM37L/Y84gn6hO5yy4q7WqVfh/ks379r+08pefhmblVPzu6r+P3/P8/r5/8/rK2v6r////1/l3fxPxyMJRnTn40yrGpJOVWJDBeUj5HhtUW1GgcuSAcTEgfIkxCuNlSKrEp1pe9GLBwmVDDkC5OOkB1Kozbl/9MYYDgzBfwNgwIEBvMCUAgTAOADMwCUAvIgHc9C9HtRQMbiYx5AKKLUlDaLGPBiIMREqVhi27NZm7K6r0N6u7sEYyr1XhyILh5/M6//uSxOqDFzoJDi8NOcMuQWGF/KT46xIRx55j/c52r04vmpJ55qe5R+7Vwxr1m5fj7+wYvLzffhl18v+DX+1HPmes803yuVznty/+3/6z3eTv/5n9/f7jVVcJzht3VrYnewnFhHqTOpQRFSLUBsgmmRnknEKNEq02KTIoGRxtyaMBd84lk0yEgBNM0PA4FWSZgMiMUCIPBxNxQeLgDUh8YDvG42GcYqAYJgVg3HD6GhFGOghG4XPqUChIwoQDCcRkSMAUWs0ISEIx7B43hn7oPBoeGAXgAWElCLjDjdRYflSZi5Nw7fc87cUO3JjIiuo4Qmhkia6SuITXtB807jWmnJq2q+7jkbxr/txKTbSZdLHxU/Pz81///P38fN36/fM00Sjt8RA7kdSq463ckiRcYJh4dFGix1m3YtF2o4YH4muMVOEFkUtMwQqEVB5TWIg+MrtfljGQguIwKkDbMGUAWDAvATUKgCgyA6hwAsdp0l2BIBZIDg2/BA8AkVbINApgRGFv8Xw+j53l+r6sZqFKrcmp+B9Fmh/g40E9G0zFEFH+iP/7ksTuAxquCwoP6SfC0cFiCe0geL/5CosO9MJ87Fi5QZ8vmXX7aLM6/r7vnsC+Vq1Pqd7eb5471f8+pfv1tXi/2/Jn+7qsr3/c6qt33Vf/+q/hdZ8tmk6nSd3B6zTik0cyKpKsXiNRIiSWaRE66OuQUKB9GhkWNE4JpYKh0dXbAATojGMC1FhKiFYRRkCgyA4D2QjoRmvwywFjvMUOCzzBIQVgwOAC5MCbBIDALgCMwA8ApGgDAwsF3RCyAQUwYanEQRFcaMUAhIkAhi+Lc2wT2m/jdFQwwxveUjlmxh5GEyndWJqF0E+aNvqKxzcU1E2vMTrfw3ig2ZPS+Elr4m6hpOyVP4+aZrsqppfSOkeYi+uYmK/r+u6n/n///6jnq7n9au1ltKkqWPZaLHuUeUKCj0cI9QQKUSOL0FCRHDg2hIJ5EpIdg0EQTMg0YJzHECxDFCyBZoehI4mqAAYDQRARkyHUDGMF6ABxYLfMBiBDzALwAAzT0ekGViKGEiIiSFGR1B0kpgNIZAhaFQiJdprDPrG3EarbqM1AACcaIwf8Dyb/+5LE74OahgsKD+knwwzBYcX9IPgEgmCmIEDrDlhPlY/ueDxtNc852N7+77j3G319c1V3ePl1VOq/irbvKujkIW1jUze1vK+5/+PTeo+f/r17v++79u9x03G1RHYxJVYq9seprQ6B2ccwvajhOKhxYtB7jCBKUQUULCMHymBcQClC1B8CgPjAqKUYIgVDkOQC7QxmlaQMPwCHjAdwNswL0B6MAMAuCAAQHAB0wFAACPi9YccWB0BhkxJPYtoz+lKiCixEnhA70Tmb/0si61N0qK7LLPMTiFjBMXjEPgixPI2B+s+MjlhmoiGoNzIgf42j5UtrPhnk0UpJaYicxY6HSsrOjOXQiuLIbbd1uOzOaU87v+Wv+Z/bn/++b/i92/vnrqEMlEabZRyWuaX0fL3Q7cu4Y05hkD7G2cUL0LYQ3Y2ZyjB0DB6GEIDW3GZ9jzP3X4cx7QOnMGrA3DBZgFcwP0DpMBOAQzAGwD4wJYAPP+uUAELIDXTYln/GQJEMJp0DJNoWk0qnXK3J7M2cRBzvU0ZnCbkZgq+meIGTA6QVmBab//uSxOoDGDoJDk/pBcL9QWIJ/KD4ZERU2tM9KfVMLsyuoaVVKz57rmnQo8sY2HXdxvjpscPU3VfN9/HN0ybr9m7j9lH4dVxUxHVXzfzf8V9boZe7pSv+YZXL2SxNls/Raw3D+aMNoeftWDxk82JJrqGhYfJ5PmC1FVg7EyUYFR0sMESCyFcbHB5BPH8lk4GSKP5Cj5aA7wCqQ+GlvTetBEMWQBkwfgDDDiB0MDsAAwGAIAwDUSC1mSEwotH0IFIR0TUqtEJ6Oo0FbZ5BU7uB3wo8HDaLb+elf0IggYw8QcZRuMHCbGK28+kXjxq0IwupCr8XypuIQ8npq3XSG8qx0FJF3LNc8pNpnvJw+mho2HzDVUEIqzvfXX8Pz38dXM8f0kQn9d03VprTjlW3rWbccc5bZ5w8i0xkLY7NMkO6dCA/3JKKNcULFDmGDxDD0WsRrCwfKLmh1QCqQxClg2MMACWjAIwFsoACzAqwD8wAIAILABANAAYcBTtGJIC2DmujLDZaUlkCCEuGjhyLPpn8ZeCj9wIjC/nJm9zU4scBMVa3Kf/7ksTwAxqiCwoP6WfC/sEiCeyhMET5XV3+Psb5eGGgfygL3j7utjByU9OffU7NWPCsNZCAK23XjZqtqqtZCo2vlNPjoVHe///8vf8v42f9vP+P/2//+Z+zPsPmvXdnar3OkTnlsuMjfodPTYNJlEylcPay4lRqYrpFjPAqTAeQCoBkAwLpRAAGGf3smZkGgYuYOCCWGBcgVJgMQB2YBIAcmAUgIxgK4AmeIEVAYhVA5aSJJkqF0UgqH6jYPDiZ7JltyRv8mfPFB+LE7Cn+Q/STrB8GXkPA7rDZtjFBzGMXza41DMZNZQ31KrvvgvthLzbfTTGmS1RTVzT1OqxFaWl1/r6cUOb6H/fxr1DXe3xe0/VxfX31rLzbTFTNzUCFYxxlPNGFSWwjWSIYNqDpxISHUFUFDxQSCWCTA8Hiaw5Ec4PwqgPoNDYuGBEFAbg4FAXIQJBMNDkXCEMKBA0WQ6rMn1AqzBrAJcwOkCeMA3BAjADwAwwAYAZBwIsD56UhAkTgMshwJCIsHAyp3yAoW6Q/rOC86n83/cJv+trGlP/LI9f/+5DE7AMX5gsQT+DJg0VBYYH9IPiyadM4JJJPqqFVQP5LpRhh9u1bbqLLap045R1f3z3rMPtY/nlrnt0eKm7tv8U25velDKe2/56i98x1XzPfPNs5++7j6/j4/j74iLl8LPf9W1Sjh1FI2K3LwdOn2MLkj3RgseVPqGkIDwgUIopJFqQ9vPS6zUdiFlha4sRJKwjGodB2RDyRweABqQwMhO+MCwCCjOrE6RQMU1zAwgLFZhoQJMLPxgKT7MPALaBbHx4M2VATZMHXxAC2RKFUkC2gZGB2XKZMUeTEDyUrU5nlivarPsfKy1zHnO8yfHyPfWjqj1JD90zDXmTKF6maq7u85GOps6Nq9v7G//969/YzbZ9b33seaa8qUONY9yI8405x6PazVVTiFzzSqEiHE5G5YqODdR6ouIDUcgIyYvUAVgNRxWuTLNgx8wisGcMFmBDzANAXowCwAtMAlADQUCKH5KK3CFEEbzdC5wlLiwYx41ziE4gNMcEkKd1VVmEUclttsrclWrcAx7nIRqVBkDq4+M7w4NZNdje6VJnmekz/+5LE6YMZugsML+lnwpLBYon9qDiciVo37c17hLZR+jMh/535dZjNft983NSvEr25rXOCtmSbZ+mZxagXm0xV+ScrnctvP7j926/z7f/3P/kPkH/Yfr+M8yDp7NPMOXOWLTTtRlVyuqqbNQ2UNGTpqKoyjASdkJGQEqNsmCxsEAFiQkKIRjpI08VicsfXFm0MuMRcTHEQWcwQQBmMFDANzAjwBMHAAphBB0AJxj6cLflF8IlcLAV5yQNRlUIgYWdqNihyI6eiUvxtooLirSBYxziW8scdTu/m9d5JZ7v1Fb10/eIPjmcvIfMyrbNeF+q/qoS6iW+4/H6zK5bu1FzKc4yvZ3H9hicelCc26vd+f/z31X93/f9yjn3+s/jd3O//uZuZs/v/tm7vLmpKn9WqbaR5ZIiaPdhRRV0xdFc52wscSeNCo84IhQVrvSMsTH3IDqoBKS2kzzPTDGpGsNmrzX2g155MbBC4jlmFjTLknxoOEg3SjbuKU2lGntSC6JBMFrEhwV6D8EKKQdul5Yys6B+IglHZtju6vHjfHkXYUF4x//uSxPaDm0IBCk/pJ8MMwWIJ/SS4x8JWtJ24jh50fXoP9CJag3Y4aIjy5lWrqroaPbuRh8END9nKYeU56XI8y7qx3/GP+x/L09f//8fysfPXzE3vWyL5CTcPDXVDaqZppaIiplIfmUplGuhKlih1zZrDjoACckQPsN484jhYTGDB2MYYBcwXRIAEDaYDoCBglgCkALa1So8uIB7YJOkzAKSeJSKtEuUUGPa6nxKBnXyeiHnVwr2b3K6P9yL2d0/0RV3WOnsiltoDs5oA8gojQupGV3xlTRKpS48I23yLtvxSGMJ7MwsysuyiJG4xka7AexiR2SOaJaUjRVlDKCCl1Z6pCGS+eFX9//3LlCvX9XH/c3//J1fhvv7ewyWqXklGmMkorGS12/Yn2Vmji69MJQRxXSxEeaTOroVNg3I9lsLJa9tGIl5KlHUAZQMpWeEzHFQvMwNwE8HAPMwIMDlMAcAJywAHmAkgCBi0Iw9I0amDKB175CTHBgwi9xKHMnMTAaNsDUG74yRv3o2p1FlR2o7SwvYk61gcsHYwbF9D50cw6v/7ksTuAxWyBRhvbQHDVMEiDewlMG7KhPz75N07ChSGJJT7TWSa1y5IZn8cvGN9ZyUsczGpGrrp76uPzFcm/x+535NOfrdufyGbv/v+7/2o/P6z/5V7Ksu4+N5uX4bmNVVo9NQRVkXIjS7NzTihdiNAVHyCJ9ebCZ9tEuvBTubkKoSQkwXQg+0BbiEEiISLoQDxFCAYIAH/gyGBHkMSJCJDA5gLswSMBWMCWARzAQwBY0GzqKNWdSpEwWhAqVlhCQIXAtLaTjLkckkhgLOgk8O+9TgoxLjKhzMpTsSTHViaqsdU9uqj3SxNAhiEmNGVJutoNrEEQmhSrnTtxswKlTL1p0NSxjxTQg9KnqNKvnlnqhv8zVdfE+t1P/y/Mf/z/f8/1MVCRTJFzJlrCstK12sozRcWOQY5MCkMdjg+NQfZQ1oKSh1QswdaC9Y9AJdDQJSagyg4AQMGvAQTA4AH4wK0EeGgKgwBkAcMBgAFzgAwEFBpQz4sqM3xKoIvmIitHIiZuYsL71V2k8gyFNt1o0iaT2S9luKNF6WPDkizj2HESer/+5LE8wMbQgkMT+0nwtdBYon8oLhSj73ecvetAWuCzE0FdJF887yJxZ3qoZVXcr2DV5bltn/CWantxaVRLT3U5ROU6a3YpGjbIYPrX7m/+qz/d91/731n2vDMnO633/sl/4XCU8TWhs3LzlDLSSlUWkPmXGmnh9tJrTNIVWRVjdFZpuMIVF2yY4kK4tGERCJyiEiXFgUMCyeqTCHw1EwBUEsMFWAvTX+Myw7MHNDVR8ydqIgYIAwc7GAFj/S8oNhQWkCL4kFA4QtR5obMtiEoBnFwTAGyKsQ2oubcEIS9IsN8wshtSjP7jc85ycnUgy3d89TMnITY1r4rjt8/01nw+5quv43tpWms5h9smve5jtZWv7r//7Zzcf99/LvfH/HWxnW1Z11Zxe6a/e2mla51XYVNJBPVNDTe1ssJBs0mk80JI7F02FyaJyyHK1jUpIw+pGBbLzBInmYAFgM4aQBDIaQjQwZACZIgm8wNgAzMB3AHjAIACcwFMAaAoDOiABGmRADG0BO9L4Anc1YEIIRGkErak2PCPPI5XMmPtJ7VnKLg//uSxPGDGsILDk/pJ8MPwSHF/ax4ThzwJhCcYOGUIUh5jFIqLW8evKD+Ke+mqX4i6xBsX85b2nremmu2uEurSL53eyR3NNfPUp3x7rU/P8fP1H/X////f8f39J1GbcmdyPl4uoIizZo9xcYOkcRhdT5FpYkWFLQeLwMHpR4jmOJCDTRYSGgkuoxllwVIYNyCBmBhgchgYoLUYDAAWGAIgE5gUQBQdBAYgWDAR2A5pGY8DaaNTBZSs9ngKmmKNt+6LoKUX4mzVYHNsrJk3tXHtf7rmhFAPIQP5yIfxQfE/OaXq930bRameM4o5b45nI7U4a/pzWzN/ntXXz1Uf2owqvUf926jPHedbeZeXl1lbK7qvXqX2p/PVbL7n/zz9e7/X7XuN1t2tL2625pHn5LRs0NausoQvaTznRgbLGApSIiQiJUNnj2TgSuAQzlE6ip1nGqTFQCOB0TFhKwIAcA6AQyb13/MUkDjTBKQRowZIBpMClAvzAZAEkwBsBAMAyAOTR5CI2YMMZkWQPo0thDEGmHYVSCA5YNTWKnEDzsrddnlyv/7ksTrA5cd+xBP4QmDZ8EhQf0k+BX4vurcrx25MDMjAuEjwI4gRhsdwI5ET1IyCeB1yjk8VfMT1fzBOo//n6njZIt6jiK7u7nLMd5gckxw9dRpkw3F13PvX/88/3f/XM9RTvCVNcxNlM13UltrY3ceZJYlhhVBg6GFBggmixMi55ANM8UD8aND0VGCoeByClThrBkQzgVCMCkAVgPQIVU4cQpjFyAFMHEEs7ZxB2sJFo9pmAqKdiSpjoEBhdRCTlA2Fwl7YmGByC7UZqG3htoAYIzRgCoaE+Gw4vNS5Fj7kWH1JBVbXXUeOI4LJvHkXFk31HMXyJiPpvSJmq+5+6h7eamvRrVa1MiWnbu/v+F//r/+OfqP//+P//1xzJH9O8RujKNV7G/BY26XJOUkdNRViwsKRDElBwI4uNNSHKHwUhrQNEeilQJRQTUxn+2MMZAE9jAfwa0wfkEMBINcCQGgEALpgJQDYdJaa4GHGTzAjKXxYepSYwUY4mPB18h2AwTFScpRyT0kU0rQjrT3yYEQgLG3ciRa4hw/MoYhStjEV3D/+5LE6AMZAgEOL+kHwsLBYkntoHgeRHO0QpF+erN0lnmyC9FhUtpQvvddNVZm6SzW/ds4PM3oSfpZK2QrfaF1PToUm2zV19RT4pWE5o9VK/9Onrjv4pncVXcykxdrtFGKqzuxxxdlnJYeNCk4kk1Z0oGpKMCwqYwe0WKGo6S1EfECCIqRoiuWWOofR+INc+NjSOOVFBpHcCBwzbFLPMiMChzBmwLwiChQ2bOMKzIyI14jFXItuCQIVFwAOIxOwWZHBZ+nwEIGIAJV1Vjjdpx4ex2F0gGFw4gxK1s0edye1aCe1fLjG8/N8T6E1tU9/XMXxu3T6Gtw3ufdUN1YX0ncXLuuPqolzuOuba+e6hrNncdf/8f/z3///G3mvz0W+mt5u2uhlKPk2iaJqzUyk2YxxtMKFxUkrqZsxKCWaGB08YHTiZ1IeTxFhrSeomTQ+GYFt26E23rWzTvD1MLYE4wIAVzA6CLAQH6KgOBvDADw4AJ4wMAsFwCmaS9C5czQNpDIfRT4fldF9BBmvEYPu1ZPeunnQJGZkiR/BSdP9jv6d/Ua//uSxPIDm2X1CA/pZ8LbP6IF/ax4rtWSumIu1St8+11U6s04civHFtgxFSp+1z8zsp9UjSnHHPOQybDyaSSKFd9+KF84uZ1Q5xVh/qYLunXP1Ly/MvL8z1vO+ltLSVV6u/woWhLpZmSi3VgZoMspohjNsiuNeQGCGFr9DRM44MlEag3iFO5NDQCozEQMACQoICIvWoyUeGEZ2O5pcJvwnSXMuatZIIvZSVLYfBbeUqr6Bj5uYLZ9h/KlV9KjPia6tbK0HsKnFu5hfarl7q6yKxOk4WpGoaYLH4s3NHFLEj7D5C0gk9UkGTqy80VUWjY45dOVumJ5pSvx97P5u2Pj2/xP//cX/X7Ym3uunXub2tDL7/m/m222Kbt+p2zwy3R9M7Ou5uGwrWfaxdMQU1FqqgMNkpEJDRRAVEwvkA4MHSA1jBJQcISBvTASQCgwJIBnNsWOYPMWKOPBGMpcdToyKERMRIHLx60F1I0Rnkd1UXznFDoktziM6drQ83wmxvJLIP6WR6NdJNijI9l024ptoP25FyZpTKW5v7Z8v+HbftqTa//7ksTvgxa6BxhvJHXCxkEjSe2sPFeT4q7rv/eYLZsWebL+T1d6tj6LL3rF9a/8P0jQ76smm0zPtW81r+Whn5n57Pp+9Oz8zla9fphnJ35ytbZvXr7jEr7tYqUtUOVDCL+WvnruutlaMsFtFyOIpjtpsuVCYqS2VQE95gwGyREJFi8VyEaFcqCS4RxDNy0Uw34YYhARmHhhyJgBQKUYIcCEmAzgX5gNAB+YGKFbqI4wtu1MGExb0oLqUcEETSITgMoKRwbhuoyCOtnyaLm1DwBArGePaJHcdK1qEZQaKKHmdom5ZaKZzmm2pB/l8Qq89zR37fTnO0aLf2cHZ1Id6jPtR1HEer21cXnVXaU3zHui+J+Lvmf7/i+Zv/5+v+rZxCnz6b56TXz1OPNtxpbl259iemuqkbGk5ossvBJJeanjcxJ5oq+GHUFpNR1mqLCldckD+aFRcOIAACEnbbYTujijekbDiFwkUYpGNDmWpgPs0Ky4LdJ747HKPcHyWj4P1+PnSEr8zvK6vsq5Ux21H9aPf72wrusvuPI94O7tH+l/hgL/+5LE/4OdsgkIL+mHwxlAYcX9rLi9wrO/t2NnyduInP1wv3c+Sk2Otv5/1OXx1sKglpWiQFdJ+//T1amWdnmf16dho3WH9uNcmGXDDRQlMwmIKaMC0CRjA/QHgIAJzAVwNsy7UTLoOSPNPn4Lr4xABHrMDl4qmASEzxmTAiQkEeQ9YBAh/yYN2kz2WFYIgkgC5CB1NOJKPGSSApjILzEGWaIteF0UhLdnwYxF4kNs8t6cXHaQZUX2t8engIUd1cvVzWA4PnmWTv9nXOt2nu9hXkjw2P6malw/gtkk2Ib/Dhh5WNXvtbruLeHFtf1xXEWDCes88SVrpjDZSWJvyu9xaMmptaiYzilvEtHexctkKC1yO2d8rYjbAWIrU2v1u0dXRVeikehlqE8ZVFKoupVIciySeGerKyllHYGNCy8Iw4YB+D3N0hJQIxtJacR4mwLMgC4H7ZFVAAYDNp4k0yHoRbMHBBsjBoAVUwLkGmMCqAKzAMwAwwA8BCEUSRNixDRBkGkA0kRsUGyqRPxMGIiBAElBXgy6MqM6XzBTm4OQ/aeH//uSxOwCDzEZKU7oweRLviAB/jz4JVLgj13CewPotnFhfVhcSeZ8zVZvo+g3D04SPTzX/9v5e/ZsW3sfn9N0pOEdZNfXTy/CO/YJH2KbZMXkJ7lXO47O/Dyl9+f/+7y8+//fv9V99+9y/OHzZzlfqWVWwaWliFdZZnLRLECBRQieR4pJYnuCriQTKSbDUCdB0YIowiFUaNlGgFIcARpD4urfOokGsxoAETGfAGMA0LMoCNFgGDA8AvCOB/hS86wlAyj2mGEiFBRiqKKkoZMlthLxvdt0H2ldxjUQbXUfphdhKpUiCPD3xMHnicXxpx3Er5xSZY28sb1UXCDfpnzqE/EVz1lUp5Y4ZyiR2emy2w85MRSulWTUu5PWYRmmotb6/r+uaV577n/6i5tWaXirjXHWRvVxLQSiRiK8i9kjib1hTjRGHGCnAZcVYfiwhi4sHpg8s048lQAAMDkkcaMSiSQwPRAjOTzKODEWRIUw0MPEAh1aifLC2o+BcVEaAUD+Q1jYPaGlS+kcJ+rl2rmuU4/NgtL9UuLGyWGNsdHnVayqT//7ksTsAxpB9QxP7SfC6j4iCeyg+NFCtwvB/h9QlrwmaJe0+xt1ul2is28tRZNx8XDKMWGhsrWlR7V3MdT6iukmH9/Vzd10+579jYr/57+oh//U7rhzJ0rc5UFBjvs+FWtm7mmQMN0hRgTVMg10w7EHCMH0CBTAIwM4wLcBPMA9ALjA/gBIwA0DsMBFAD1YjwoiHONVYkaQ8IXBEhsDUcwitRqyIwTTRoJYdtTVh023NLlKq61Wy0HCO0TrdgmBAa8Ui2Yv1DwVPYhuI8cQs82LvaX5RyrS21Dsj2H3fxax5Toa0pFS82RpF0dfoanB/Adsv0U0KjEFWaXZaLK1lSjTwlpE/q3GIlEdXC98FYp/MnZ7KbS/WvO9S+Zuz16ZWYP7K8pjfcohze9HtdXnk1aOFufElajJTogK1566lYYKB6Ny6S4VQ6wFpQvEsqJnVoGlo8uCENJdHQuqAVpDF0m+0xaMMLMB6A0DBFwAwgBUA4AfReMBXALQC4KQa1jQFSFaq2oLDhQY4sfGCqH4sUsvu/Dq1Gx2WocbG+TNcJLsL43/+5LE7AITUZcjT2lhY9e+IMX9MToTA16BgJqxGEnjSx9iwkvPxzio2Mhx+JZESZPjmr8dWSYdUS/mT2U1UcUiFJdB0MW1vneuKhBrikSw12u/ob768yv/UR1U+nf/fxffUpxTVNTjbj2iEpNZGTljqJQSOIjuKnHKcYK0eh4waKtQpT2OgTh8PEtwJccSBwAtAZ9YvbGWEhpxhCAKCYEUBuGAlAPBgKQCQYBEAQmAeALAyXB7IICmfZCJrCJKCDYqKTjpgsIUuJoNhROVMn00WeZ37ZXMW/nNz4klgsNUouI46JJO0iD/wqc3MrNSt2nLQe2la16uXOF1iXwyd+6vt+WQTSy4ouurFpNWtnvjV86pzDSqsS7qun/Y5BH8/+bLw+f763/5/69+/v++EJZGk73YS2qq5IOm1Oo0xNmeJzbVYpHNmVqqwilUzWKW80zpWaMqm5yJNJEjAEEW5bAa2ttBpkCDHQj5iJ2ZuxjUSnmYKKhUfKBqeFA8sBM5WR0ZknnxHZgDs0EoRgukSniFjQ0FOR4jcFh3Uh8TeWNrJG1Z//uSxOoDGCX7EE/pB8MrviHJ/ST4AkH3EXTIbRRhvI8W5srk657eoEdD7TuKRHIKuxhR+XmEVSJGwwkgo5FGyxhMqYnU9vmVVxVPFRu99cVd8cyn////H/931z9xzdtLJI2vi+Xv+bn+E6hmmdEoc9TXEwMNQz1CzNUhuMwscI6MD8ARDAtwfEwCICtMBHAUjAlAIoAgcIcAPLCGLQQ6xjRBRBxkjCUTTKTBQsHEgOl3mdhJsmCJAo6pygB1ZKAxEvGYfpmN/3ugGfxatQoyOAmucFgn1l+IbzNVU6oN7wOn3QxlW28nrlEP+chnzyBHNqo8/nfmX8gxqYeh3aN/Ws3oiqxPrb0oy900ruXtLF47y5HNOmfme/bdlofpbZn9mn11zJ/mq0dax22ZZvrsQqkzhPToD6bxLeXQHeREFckMqHwgj28R0Q8DIkqQ7kSxLGk4JfKR1cXoIPFpMuBtAFZD/y5fPO0NEyCgDDBOCTMMYHkoHvJgYDBTBpMJ3AShYcz6ULLRZI8IwfGQ4YSf0kQoEQCAp2wN8zv3xeZl24IZq//7ksTqghTp+RrvbQHDqr4gwf2xOC2fuPwIHxMFH8Th4/hGdzoyE3ztov8z25B0oocswMSihi/Yp7k/6RSNVeV6zdSzPU0/2EnwXii+77ajkVbaxnIbvavIWvrSW/M2rz5u/yzNjf+5X+/b//yEMy3zTlCoQ1rzpHdTVi9xGqokv9ftnWWtQ2p3dckWOknXaPdtzM4o2HlCpoEJ2WIy+P+DFjHmNamTuUoyBGNFFgIBmBExATkQY01ElHcmDPZwytemlDW/JgAcEwjhihLg1xgjgOp5KrcSeZF9SOxuPxtjq6ngc/A8ZcElVJ0D0Km6WSFCcsZcstQsREx4nIWyxmh3cpN0S47YeOkQ1m0baHbu/oeVfCpd8c9T2Ohafnrrj4/4vRpqYau47mUjJG0zdtIxogw6+JhOucoGw4xVMjZmRSU1GQIPMNnA2DCzgI4wM8JKJgYEwEsAGMBBAnzA6EI/QqGGRsgQIk2oyALnRaAMfV7KcAZKMNGZcokuJKnBsrNEtpRNkQEgLfn3WHs1sSBMUcIxWGfjRAMWEpaHRiFGW7z/+5LE6AMY6fEOT2knwpG2I03toDnzGwNrXvQmnLLtQOr6q/7mwf2Idz3Lza1KW7n4ZvExf6NT37burvau3ZX/Weg6ksZPZPw1inrfXdvs2mdn8//rPUtM5M9k1yeol5VNrZsdM5Yw5b4XFnKm2nTt9/o5XGJ+fUMYV6yAyhLaYrwlxQTz0vEQSDfCtCPILlWiQtgBNyIGCjL0ZhVYV6M9BnvKZ7QHECIBCDMiAqEpE2PCFydGwiPaJm6Dit+aLiJZbI+QQzDKmBYXyqCIGJfRkYtlNRbMcz3HH+Zq6pmabJvkuMD0FMmUEWSNSFr6Od1LPQVl47vWRlp5VGzJV9rlTnuOJsRtisHXxN02HHHSnByrfDZZNoba7d/G7/ZP1NfF///7vnq/ia7rm6iVnu9zqfEbzmzeeSh6mo1tw6nWc2vhKY5bKgKvg/AOnjvHJeMgIQExGxMjBEDbMHABowIAEzBlAfMAADsOCopg9Bh0ERpSHL6jepMWIIlBqZymYuz3KSTbuW7jguhCtycPzk45nYQtUmyi3ny1HUB/MenmixzM//uSxPiDHDXxCA/th8LLvKKN/aw5GontIFhaK0WIJ6/anH2Lh9OFw3wi3BuM9GaPKzMrLK87GTKXZFFINQpddKiSK8s271dLJ+mrv1d/1vnP0teXetf+X//ltX82pVC5RvKkn7873a8IMLNpr0xHSyJOapZ0bpOe6m9G5JbGFiVa1KXABLkQMb5cVDHNAyAwMEDVMEEAWzABwVEOAeC3ZgLAAcBYYedc0AuBEWBTueFCJccBAKxIOSyHld+SsWaprJq7MpzNgyj2vkI2+iyTfD1jnTPGfM0H/Q6V3w+d6TuvhmjkG/3K9WENtpLKEhU1zlNT1Ock3GMLvFe4HCHpkjkoTakwuijo0oT3h7KW2aNR8Lo8nvUS2oLw+wn4z35l1jGf////1LdrNu9ll1D+NzYlOVUqneLZ0SSauugxJZYomxE5slbZUtRqnI3RWI5CegAGA0fFyRM3WEHTChQXwwIkCHMCdBHzAMwGcwDMAyMBRADiGyL3U9jGvy+JOyb9TwYqM8Fl46WHhYCeXmxypSuzMugzODsU8VtN5dhoQtYXcP/7ksT0gxlJ8RBPYSmDNT4iDf0k+HdB40F9Kjg9zqgg8idJv3WdDK+VfeLOW9QW/Yr3D5iOz9T+2n8lfX8aU9YWnmNXPJTy6PatBqC7nz+s/uc65+fX++Pzf9z+r+V/my/v19qv2ryGyltzjlzpKaiOS+tI4ks4tNr6KmCRcQs+bZdbEm5meDqh0P4khGQ0UqDYOBgnIZeM3cmWUhb5gwgF0YHkAEmBCAMpggoAqEAGBgGQDSWK5XKLZmOYmLOmJDRsYIDxYWjvwQjCI2Bl/x1bjqye4xFhNPks5sTVsnrEEyQyWRiQRwm8Kg1tAqHQ7EggXSRUCAx/Q87GDieHet59+tXOqZ5mX5RLx0LsnUNMs8pDPtSxaks/Fd2k937tz3/P1ftCtEfM+0usU7XU0zDPiCXZlNLd0o0acLCvQkMEUULQS0cHcBggoRxgpQxh44kws0QUFAfDgeWbAwzZx7CMozEKjB6AW0wc8AOMCeANDBIwEgwDYAbMAxAmABrHmqTAEeFkwV8fIlPNPMUKvpTDzsIST8caarNSZKfjrZ8V0vH/+5LE7wOaIfEMT+knwxe+IcX9IPgx3OkHgxJInCHEgXB20NCamD8QzMSiF7Y7KVqx47hRJ2PG3wv1KOJHFObWlcy4XRHkdRLG2kkdjNIHpeSIT29nI72Od+YmL7X/b5v5+euYrr+//vm95VleDEK4Yoc5yW5UEs0CIJiCiHYUoPIyBikiw4HTqJkQHCBRKeHIuLCIKAK0hzS9qHHIKkYn4I5huBZGA+GMYHIAgKADCoJIyCOCgC15BXRgEC0wwSoa4OF3GyjQ0qTUzbv/RcfiYg/TcoAkPyQw39YflUBfj7ziAPKECk3Ld+wZX0Ol2D7jqZNy/2Ox+Kw3ZavjFZz8QhBSo0cFyWom8YZrVw7gxhG1YvNpK+9tV3/DO334/3/J/398+fP//9/bveb/OM9ee1fMff7k95yYxri6xOjCobk70tDUxZdzLnwbagTJbqzPZwVMrQYc398MggzF4gDCpcoDEAqEiw3TpbsEFge0p1Byw2nxaEraPkoJbw/GD8JxI/FCfx5nA4v0G+NG+difnHzA46BqCDWYNrah8rmxHdlH//uSxOoDGN3xDi/pB9LaPiKJ7BkyiSHHPXVJJrVYxqQY5FYmqHSeyYexKQN0PIteZm1mWm+W7mJ/9KbrJn6/4+JiO0+df24WqvLSR9SZHBF6d5NW82TyA2zLw8ucVpEQm/rhJZicQCaYUyFhGB6BTBghwCoBgN0wQsByMB0AYTBRQAZ8wQBlmTfnxkLrIKBNtOozcMUYmmNEm54JwWOq5RbjoQEHQSLeSTKSQ8nyZ+YpKIL8ih5xX4xS2peYnp7quANwoVRKfLappYLk0UUj1Sz88YixDP9IwI6+3uVMTw9wNVvtBs7rLe1wNW04Yavrckdyy+dse40rZu9MYhPMSfVnKzVO17esULdZvHivd+mIz+mawtV3fV95vqu53tLzWl+Jc+nli63O2tFGNnhrTeo1M5LtZkg/av6mYWmaCr1Lt9IukatISlFcZbkvG+mVSTRyWzcMUXE0s6ONQqNZLkfJvHYgyyOiCUl2zMe6KQxKxCDbR0BJZwDOFVRwLcKDVd9W/SYvPVJnG1xqztjouMePQfClFqsNq5ajxj0V5nBI1//7ksTxgxOlpR5vbQHMLr4gQf09aBX2j03RpFHbkzpd0aKDdFapD0mZHEamK7GtaclCXNoLIqFfId1vIg8kai4VipE969l1A9YWW25Or29LQxHTAA1obhqeDGz4APJiCoEsIQTgwTUBgMJSAKTAcQCIwIQDmMAfAlDAhQAZYhgAwDQb9MCZbpFVoPGTcH1olQwIC5kmYsPnS2BVBWLqXsnKBelKk4RohOPi9rMvmYcbBcqNYU6sYtjgmD67Y5ISaFNBI01xLfTgVU0slIiYQlgxpZUd01GZ1955TgTharrHEPtluqnV1y71ygPEdDF8n/eBOpJTpk+cJl77JMCw8WkwcEj2lJ7cPUzT0cOWy0X7fq/nv5VF+XZ6a0m97vf8x2b6jzJ57MH0XRpTlDSaw2z9DtLGsWvswjohifK8PXR4LY4E3XiUuk9L5aBilXKKEskpFHhGeBcmijGtarcwt4VtMEJBzjBxAX8wGcAhMFgAVzAGwC4wEsAjM1wOwcRCHMD+nLJOOVDl0yZZ/oGKMwgTK+4oerM9lxWaG2LezNmi88L/+5LE44MPDTEkb2ihxBW+IMn9MXhkhBe+B9N6sP4hEaB2EtDIEyGrVXO3ti5MVDKDCjLcsf+0LmG3t1tZM05qY+fPR2fSfCl3zDuDj2a7bhOGfbIj46f7m3tlb+qj+K/uv/ZN9dVULKyy2n1GnGvZn5YrDpXkkx5c0mvT0k80SPnECE0R3pPIiMj0qbGL8lHh2IrHx6WACakQOiIN85ZQojFqBRMS0GAzqfAVgAhULHoXABacayIxQoFQ48kKTyvxAC0TVVDEETQM3ggojZPJJpIrNQH3kYo8+neUKLaVGXKw+arCr3oVlCh2U0Z7MjTVXf52L0tmYQW81F+g2TRJ7TU2XhzDRrWN/araDXygVK9te2Oum8xPf//PH8XPNRf////837Ouu4mIdtb1x868XVXDIma0lZXZT12Nplm7X7HqGz4xKLE0MFMGLjAygf0wXQDMMBOB8zAyAEgwAYAjMAqA0DJ0k44jEhUaEjSgAzU5dpEIrMyocMTbAZkChcbGhmeRnUeY7ilLToEryBGwjjlHB0kOW2QBAkdwIZAFtEGW//uSxOsDGUnxDA/pZ8K2PeLN7ax4FcKjgdfjSRW2pFUS0JyDyc3IxLbJwprXYvScVRUsX9LK7W0tT/YhZ52cTvekpry5is3KR1eXsh3cdWztTuYp/vd993H8a+5eLfd1sbT0Nz7bFRD1DVYmF8I7DE2tSknONjEkKkrOnx4lBYrLYNCtRIBc8Yl5BFI/sVJxKHkPJeP5uZmnZjcppNwPmYXWBxGAzgSpgX4KaYG4AcmAegDRgEIAwZCyctKFQwqxB2kwLiMqrk1IxqGGpo1YEdXvvNKAMKg7tI7zp6UTsJrcrCDFq+PMkeh2kof8R2j9JiWka4NylephuY2X5XBbcNO3vlbV15TP3qNO3zNze3Rt+lS3yxzY6/lz5qYY3+zu7rnrimXxVfFfL4rZ1NffV0xsx71Kh9bpr2OpdZCZe1K5UMrNpPuSyMVn3OJ7V5UgdhzHSSmFawf0x6MyaYHCQCAbrL0JSbeswQY/zChELBIIhgjAEiO0v60ocViJQ/J07XsU1wg2XQdZqvpAML+3cPBY+DIT46e2eCx8HjdMCKikPf/7ksT1g9wV8QoP7WfDMD4hgf0s+CFo8weP44IrNME5mpk4IwLx0zsTR5Q2Ps4IjGxuq6xGebasFx6AA/UBrfwN6MIqe9AbqNR3T/uVJswuALaG6DH8htu4cAYjADEmHPgAZgiAVaYHmAdGA1ACpgGwEkYHCHBpQMHwvIkoCcWJNSHCMygAMbOkLkEBmQ+YIPDydLUDU3lJ4qVK5RwvEoG5gOAsZKPwmU2UNXCOhFvRKFbRK0dd20xypxQ+khGzHbP0hRA6RdkbprVSrrRhanHE9aZiRpdQEefOqMjZZkbLTUapWWRSRFRKxoUxsunJf8Fy88zyViqoEcetpFYobRF6NqsDUO9KvLSszf9RocG28SWlrvcmXHGN215v9a34OKSQYmoUOPVj9Lt812dkf1YID133i/qDlscE/BZZWJkUUuFlHnZZIlya0yoS8MJ2sr5D36wScuUFWFAqAQwKOXIMQoEsjAHAXkwRIE6MAuBkTAkQCwwAgARMA3AgDGQD4HCYSI4IYfOIGdWGSaaVFLiUw9OIUjvXVMoMU/VZm/DBeMb/+5DE5YMPHRMkb2RjxCk+IMn9vPhg5TW/gDI3lCYYN8UlySufKXEJDHkjWdeVf2F9Pvy2Cu00pnv/15fnznu9hV1HZ19rJ1fi/uus2W5Ww3vSy4rbU9Z/+V/f8of+9rc/v562X+1/H5t7Kqj9qOKXWeOzjjtZSpOEzS+zg+cYo5HUlchOB5zUyZkq9H5EJ8PvGC9xEkgEmA+9Zuz5sHzMkMM4gERMIkN8wTQKQMCsIAfwKJP8JWCCh8anGhOvcjoPJTCEIdgsxwIdJIkZrxyU/VZ7RsX61V8l3fWJyF/MnH2DlBGkmiGknifLWmY8q3l7a6fZ9Mqb4pZ1EnUlIxh0+K4a+3fwu0++1Md9YU97GErrwUk+7PncuSnmxCM7r5WQ/yv////737P3uZX////j8le/bqe/0l5xuNdLdpTct+2kTs0neQQ3FasVzFEMVk2GSJ9rtCU5MFSrDTFPRVsdBoDBQgGowAkDvMDvAUTABQCQwF4AXNbRJGYkDQMCQ5gHkTLBZmIcqXstoEE1flCWVJKRNV23ccd6vUdY6mLjdCT/+5LE6YMY+fEOL+knwwS+IgntJPgoOkhhCuR1jwdgRlx+eRDg6bghSLw2HyavOZTRdpHyUzXUfFsvdvzHMuKVvtzX3c6VH7dNxBxG+Y+HRLXVtdFd8brioWVfDeuN/W/ZfzccTP3HDJtSa30fQRZrcObPqK1JEOwSTRU3prSa6ETdFFi1lp4eiWZUbIteUEd5QcMA/DtUKRYAzofbk7B9Lj7GSIGKYvYT5hFB+mI+AsBgXTAvCEMBoBEmEDgcYeDQjSlpCUASjBC7UX3DNhGukDfWm9bnexisxXB8XMXNjdDBE7nhreIVh/h6A5SRga/bOz8pP6kmaO9n80XjTkp9fd3WEuueGshH78+2tBmkug2m04zu25q3O46SrL0TQ6qqaUZbv++shvnHM/nv9erz39/28/851u+cZf52PeSr5L5bMU2sVlp9TqPx63p6NAd7llHNFTbookTyqNeCJyi5RQMMCDhUjD2BCYwAQFPMBUBdjAJAO8wQkAuMACAHzANwEszRQ75Z6iB8UFzYkJO+5E6FDz/wSGNBQ6yfjEGxxb49//uSxOuDGb3tDA/pZ8sevaIJ7KUxDjj5PW1ZaP3AhCdcPwwkgMcLYhGB/EhUH+SlvebxJAnxtHcoT58PpLW8E+aNqbiI0SGR0GY/mK5RbaIui86eiamxr8x26fFPvaP/8d8f+vf8vx7/cvK1PuM9yFLzbQZxBJpMl2WPYeUqKOxSySROME1SfIfqxYhB6FTEsQRUhpkJZWaaYE1mF+ghhgjgOeYFiAomCKgHJgIoAUYDgAzm3mHiIO6SXkRBNi0AZGiTIypFgy+AqVCwUiTzqr2EybFRt/Vde2FWlI75ojFJuwwHj2j4hOZQ6UxcWEj8HRifhcuuhW53mfzxTcYSa+3mX3+B4gnF0s2/tp7LqOYu4LQ28nd+7V7C2nkpq1W3H3t1XhledS359/v/+veSvxqd3f+3iW5L5GElVVGZpTaSYSymkKqyTp22uY1JsjZZQo9i4yXtEhVI1oqoJoRO0UEpOSrilQF/QwJ9PvMG7CeTAEwLQEAJAOAjjxMQhAgPEqh6VkA6IDwADi+0n7GEUYFkpdJZC3sYdoQxAiNwKMJwYP/7ksTnA5fZ8RAv6QfDSz4hhf0k+BHDxMkblC0UqMMVY2VkqEx5p6vHZaVYlS+svHZaa5aUIk6G1o81nWhh6INVPkjFszVrcgP0ZDFc1jU9m2Xf/tsvt6fRuiOfojebmueYzOjulUnK6mHOeWMJq61aeKlAwMNiQJ+jZiQqgw+wEhMEpBWzBBAIcwlEBCMBoAKTApQEU4281StVIwKAPanGkQkYLg7gBZCechB5AQRldTpdZ9SgBHmAMSXjg0VFghBY0JUMkDyAQigyCheBjQa6j9cuj+Fu3L1kCXGbZypuiWVNvNxPrZCxHqylYKxt2gut+0cMUX2j+DFtFyk4ti9mNcpgard39pE1kCJZM3XVgmXt/b5emTBzEzTOmZmd+/z0Gba8Vs+L3X8yszR29Vp2hVu435xdxi7C0wefLUb9fJip5g3RLLrlJke6+yZwlQmJoCdrxDgWnRsToibHqgSpLWjFC94MIAewwJAlTBbCaMIPP2KEAECGRGJDr9OquTBBkLlSJQpb3JIsOm89nYjoOQQQ05UOBXGBO0qhaXHCcq7/+5LE5IMTadEYT+zjy6i+IQX9MPhbLijIlTdWlHEqK1G1SRF46pK6E5joiFxVQxaIPnxyN2MLF2l0eTQ6XQqo9GqFCJI48bKYk/Qsmy7pr/22X/zPtpfc+l2Z0dj0Toa283m595+xs9LHjxzGlCZtwYEQbsUETmI2glhhoQRCYHyCGGDlgJpgMoB0YDgB9GAKgLBgcIBUyEGgQJwBpt8y5xRQDsIGwCQVKs1aIiFkVyLDghRJEmgakpaiheZ6UCBgNqPOTFZHddqs5umQ31x5yWFOvaoGzju60P41vypZclp1RUuyWehLAnd582vqzL+NS79iOPc5Xn7Q4j5np5pEo+GzzlmE2RLunJu/eka3KxQz7s37b06tMm8afNa1zMn8t+2xzso3DHPMbZZVvb2P5zkkNlzETLrfG6yhq8n5tu6fnWysVyeTW6HJPSwFNLgBpWHKAOJiIhQUGiYiEcmDEdjwtGhMAFdDDOVvMwWwL3MB9A5gUB7mARgPxgToA2DSgFuY0x1GRwknlJqCyBAp/wqI92iZkqhrN66cETvvHg/L//uSxOgDE53tHG9o48vcviDB/TF4FQ4EugpFx0ey0YKc5hcglHHtUNe9pWaxWdQlPzVek6jPUuZudp2dqFj8xT84xUOml3RjCcgcwqaeedQ+/qy72//p9f/N2bXsZW1aoeatnR5KRm3lHnGsqqeaY55iHKxyGqRnAApyIHug7qfvIIBkaAkmDIBOYRgOxiegJGBMASKA7pNiQjKRoi1DqwP1D5KAJVjMMCNiM8UlfffTDG7RfsAydi9qPqeVs+hRIncmsckaQjmB5orhRwHSodUaq+xyF4vIP2Q4kjG/ZpNakaru04xgfREzowUYQtstYKETcyw6SNPPGE3Qg6Z2KertFTKZs3kTUF0L5yxJKfXyt1yWz3+/dXUYxW2N/K/93Wbt+Hr7/lp6zmXv1LHwjK3zYk774VZd6ypKywVSgon3lD4nJ59EiTURniYAJSVkxKBaiMNhC/DAtAPMwREB6MmLjuyAwIHMETgCQjAe4qHpERhiBO2ygWLuQ68Zf5DioXx15INeIhuQGqHAQ6ksMfWk7lMFuYZtwZD3WXkS4dDYQf/7ksTkgxPl8RZP5UXDT74iDeylMOpp5tTy5l0cVtiOZVNG9FdCLdHYW4VWyhjmwdN4iyJ1OaqMe5pW4qOpk8yTQNEHwgmpG6ofTeFrdFddc/D91qX1/9/b6mO53MmJh1rx7Lo7x9NZdU6Dsw9zohp3bO5DY+dttWSPus4BBpoKiMazoC0CQx+YWAAtGBMgpRgloACBgGYwE8AuMmQT1w8wMOMAFAiaNPMWvEIyEJRjYcNATyiT6AAAoOp1VsSRiup7PwkzYetLBBzVwGJqrqLy+acHBCh8vKB97xsWPZOi85kMEWLnDXkPzmYWi9TF6H2WyZrz2IaguTKtuaX2nreWV9xZPq757V6Uma7MxTsbUz2TNZnqzPO3+WoYa0vf9rnTvZmfDMx7aem81r0tXvLn64319veanPMPrciXL1651xabJuQk2mb6HhUVVPyCY3ibJ8j0v+5suOCWVC44T24BN2Vo0CeqzOOH1OdnDL3syN6NDDS0QIN0XgcXPcMBCtYMAuMbrEADRTCa6Ugyx1SR5TOD/yRh18LmHslbXYQ/Cxf/+5LE8YMXpfEWb+1jw46+IUX9sPjysPTMy1uIvTo/q6XJknVqKtg/vcm9aXkKS22kj3Erc6z5On+XKvfVrMV6nVvmDGqfNXCv13zE/bK4n/+epu4////452TufN8VMe2G6oC3Tvy19oebV0kni8ghRpIAFRxgy55O/M5nB5zB4gEowEgDCMBoA7CIICBwBYYA0ArAmEeIsXdFZS8CRfQEAMSOGAKRFn4VEDpxpldYV42+qqdxN2s5tTy/O1yOuiuvQ3ZLqc+9O6eSn0h1w/TxbfLSluZeU7FWqEel3Zbhc8x0tMMnx9RMMQa5h6z+3tlVkcdZUObU5PLUP7omzhr+JDrDZfLBcc04Tw7tXanVo5r9t15q8wzs/aHK/a+vWmemZ7Znvvs3mcr1rVma7ubtvmLV25z1lzT6z/i+sGrqxr7UWMsuu2dyjFeX2aVnS+oBf4MmOZwDJbw6QwZIExMEpASTAYgJAwN8AyMAgAFTARwD4HDQ/KlwF1hMhMictwCTMBoUwaMCzEhBEwTNmT45fFJ5T3JlqzU+XVA/7KHXcYTJ//uSxOeDE+GdHG9tYct1PiIN/TD4LO4vpV4o22g/twpuktMdPS2U9Te0mZkWuqSeYmUHBrGJqSmzz3WuqTMNyk5bnIL1sZXOWunFzbrcru1bHczkvsf8XnW3K/tbU4e5R/yv/Pc//rxnsc9M5637fuW/34JeHzfbFKsZGMYoFVm1D6jk67Gt4vchLQAKciBjOaJcZE0DwGCBgP5gPQGkYA+BJGAxgARZMAAJoFtMtNrStxFIag84tgeJCxL5PEEFrnRZtthksg09E1DfaF8nl/YZHWLA86cBubZXcOOzhp33950PhawPHHHQyLocvq5zWwiRbvTVKTR03Qk1QznW9nmnn/5dXW91KKyzLe7mnz9t39U5uZn7/s3x+3+//P///v3/7nZnbt+/fNr025cXTNqqvw5EranoGpRjmOqXvkWJowS3bYjdh6hN+YiUxNQwjCcDjNBvjNRUw8KMkGEB4lLtnIQciEQwyp03G9FAa7AacxCCgzAoKjCjY6Oq0w4CdqHSAdpGO0kpTtPGvmYivYboHoq17NzpdmK5RCrE2yu8sv/7ksTvgxkF7xJP6SfC2z4izfyY+GnInUqKGkAZkx6hkcWQVQpApStGTIhpYR1dq5urUP8ps5LiFKHSZlFOYyoOWeubRqGIV264+nwtdzT29f/PUf1sP37Krhu5yML1bFqm74r566qYUbe97Nrz9Pp6tulaUUgEMsIy9zRAxjUwcgG0MGPBJDAJgiAwUcBDMAUANDAiQFowFQCGMA/AZouDQIMDRT9Bl6iNEEKwVLL1NcA40KRxYHLAaBhgrBbJQMOkQSy9ZQBLk2qy/3akObuvjZqswpmh6hiD3WxjkKDj9MhOez4bSX9MJToyv3IBV+VFXZggfm1FvNIz7rQ2i/Mt2Px4nq419kL5RVru8x5nR+Uh6nrR1ictGz9GoM/7blrfNMezZmb9WdlyOat9s9We19mm6/G099IHK7BWrEET7CTGzvOqdp0E0MyqS3Ds+9s69xiTAtHyU5Lp1BQc4CmqQzQuoCGU1QHvg3AJAjgDFwMSYHkhAZOBkPSMMUDBrUkBArY1ksFW3Bxu22IiBoTYTHkB7CVv4RigDLiKSFcTgwH/+5LE9oMYGfEYb21jg8Y+IQX9MXh1SQ/lyuTUvKS0pJspYo1lzHIypccYoRHHMH7VvW84uOvdbGo85aFZ9WdldT13SqUNMZFepiM7bfdW/rW+z///63SrN77H9nnsZmVTa7zTTnPc1lNc1GYsbQYa3w3GTpDoxgOYSSYRODkCgMAYJGAxDABqYDwBfGoqp1yiBhkQJ4ClzTFKBVKwyKCiY1sdBTCyAKAhEpXhIDTsitMh485fq+1UoARAB3Y6WBxKPDALayEpfDzhqRBXpANAlfonaQNe1yhcwjyyjJdYEErRfBAixz3phuo6qogZtGZm0xy3juty7nOp6yxtvtSfmjPZ0eUjT1nZnevs5K7N/qZ8F8yc/fzNqzO/Mc7Llb1pWna23E7rFKQKuXwQ1cT3Tvsvrm2i36E8jfhjhKyYkMCWtaQjsqOHRlGVnF46lcGRWJaG6hH7agcM2ZF5zQqAZEwlUC0MIEAezAeQUQwFMAdMAnADDAHwDgwDU75sGgg4AHWgCxiRCJGjQGLsGeweiiIwhdSscbE8/G5SFfmMFscW//uSxOODEm3tGk9o48ukPiEB/bD412oHB4PSTyK/ERQQNGxaOzSIQiclyZ3mW9tZqrnOTydbenpStCtvcq4/UX3M29ytr0rnupb/9T3oZ58W2oZMXVRdccc/Ufx9c/z/F9R/NVVz23qa0Z2y+GXwixa2LW9e4ROyofaTTTPui3rygdeapKIEpcrZB0mmRemsTVkMTfiYzCjhJkwNUF4MD1A9zAUQWQwG0A7MAPAEjABAKMGABwoMNBwENCg3C5dbKge/xgQmqFnwCHx0gbSuyaSKfxbnGHx96WOrL7cRiJiyAPtcjKL9M8XrjpHkTB3+XdztO9vR+4K72qdafz0+HK6Q7T6/+tbWwxWbOyeldSx9VL+m2Kk85lOdvlC5QhnryqnT/nV+vlS+/55f1nz1//04zvKWrKj9hUHy8thVuQ1OCU9mhZtVyaLCOoo9KPkdQI5JtoRSiW0oZMvqAgzko35NK9A1TCgAC0wFwDoMCUBNDA7wAAiATTAIgGAQ0DcMiyorcUoM81fwkGhigUWP2tswowQkh4xXU1j6tWK+Yur7Jv/7ksTrg5jB8RAv6WfDKT4iCf2k+MrHE0NdE49lsFZA3Q7Vw7YhtJVqkKO18KmJ+JinrHi+5XLIzJC5WhaGRPHOrRh7FOlY2IMW5z3m3XTbi4ZT3H5hd9VbHb49v8cvip+P//pnFV/NT9eyKmjjXvbEQis6abU1TjE1Tew5tfTivTMJlc49Y6qaFNnR3PKUHmRWakUnpFcQcHsylCRmMpvFGjBygZ0wZUBPMByA7jA7QEwwCoAnMBnAXggYI1gSEDBUIoRDPSSRLxKEwwsHXU/BEuv+UEtpL5sa/vaxL1eWWjsdUDvSUfg+vyoin8VGJtjyuO2iLQjRJHavsiMiTF0Zr2pRV5+GxcHtTdqrJxDYjqfmr1bNeWI8XHz1b+OrprbU2/87uOPtD6iuOue5dUezrl086bFbldkb3219Olz6s65VbeauqDZCJkzowOsuj1WdUPuZbDxskXmkO1Ses1cAa4MirUtDMlgkQwX8CRMC+BDDAPQOIDAZxjQ5lN5i3pVUtaZsTRDXA6JhA8lMALWavowoMVFkQG0yF68rjRpQ8MD/+5LE6YOZYfEOL+lnwxg+IcH9rPg+HADLRIxIXzUxuCWiPnJmXZi8l1miC/MX3Rl2utuPm9UyFtV7qZTZzIyvuTsTLJTe7eubNpanWzXUZHJvRTaZ8quDK2yrPxDOGIus8690VPUb+uJV/+o6nuLni+3P+evun1bpq7Ps7fR9imnsqXHT9nku3ks2cmjX2aHD6iNgIZs65hmf0CK5hNYMwYLEDkmBNgzBgNYCSYByAYGAwALxhomdaEpRjJ2LIo1PQOMCBMQihc460zFwQdK3ZmlFnpYp7txVV3VG3NWf9wYC5ipDEUvgjJDTRgXELRiQ5baBqQDJQi8pg/bF1+TMxuJUnUlnNXWZEqpt/xLN2d+21FMvmnxUxoNdLXqsdMuu5m/rdxzv+v//642fcd7ndyzbb5upuV3MPIo0xT0rNWXRw42y5djppDPElUuRQO2apQXGMF9qvROGpPai8qoAmS2EyauTzR3G3NYZjZywcgDQwFNASKjAgowUGniwJwyHCllRqbWPD1lFhN0J4jyOMgZHzIpkQvD31rK3lUH9TP8m//uSxOeDGA3xEk/pZcMsviHF/az4aXrxXPd0fStAzNdVRA9aSlQfit7mSoWkWdaXHWytLmKsouU6P22knF7q5eoqix8IRrqw7u3NvmGt+pbUtr69lv4u///r////v5/v/r4b/NTX3M1F7rnibtve+l+nXESkaxcsLG5IiBxiDAMKYDcApmCMAwRg4ICgYDEAjiEDlC4CUYHwAWAAARCwDmGAN5gM4B644rIC3zYxFiSEIz4QsORtywUCeArClzuNeVVsEoani31i2x5jeOT9vjJ7jM7rFtPhJnI+kfN07O5Rak3cN2soIoOcofIuyOAduMnHbGk9uSORRxJvmruQ8ZL2a9Giuc2vnZk1q3goxs4p0/5n3KtjcqV1FK8YSjKtyG5PqfPUk7+Z5Z5TubPQ7OF+pWyZoodnas0zUWlSU3BltlYjcAZwkFcEYIFwgpNweJBOOEyzBZDbQtQAC0CBg0HKACLkZMG+UkDAyArAwDYDLMDhAbgBkPqSEAMxUgwIs1AlmrskRsxArF6iYUQCpfAYcKYQoVi+8cJuLsZWLToIOv/7ksToAxRd8RxvbWHDsr4hAfyluKeq5QVXzROOaT1Fyy8tTrfNxdP1LR4WfWvHCl3cfBhBOqV1O3uqatanHlJVta7t0beau1IROI3CyksbPTobvmZju+p+eP38WlHX9/z/XDZiO+56r9tbZrrqO5rrnfUnlXrtVh7k197P37T84AKbjJy+vYHqoB0Y2IDBi9AOGCWGUYO4AIkBMUAhgRGdMeXWChYSTAFDKm7kx4HA2nOCGIBgcs7FnD4S/cjiricbHYZFzYQBJGSJR+LKGqEOhJjGB5MXEtaTWJXEZxJYhYw8JZzBlUfduMcnEI8D5mCOOJkYxsDLEORpggNKDBrIwejBrk2oeCRYPCZtjUvMrdEhx4lVLmtvp6jR5nif4vtvi+Yi/pGWebXeWQmIRnlXl4eh9yXJhw2CJFMwR2YsbZRxsIcfMz9vmzOAhsMwmcJIMC7CCzAxQewwRkBxMBFANDAYgOECkh3pMTEwAgEziotcGRkoTjDC9CEgABALkqAvTJAG2JJuZQ7zTIbBKA0pIB4xwSh+LMbhDIeArMB20D7/+5LE5oMVbe0Yb+ljyxY+Io3tIPjwSciGQptebEW5fndayNlB4g6eR2L08w9Z5ylM9TCOSHspkvm/dl9oPQ2LLuZKl0/7Vp00s+q/5Z85tva/e7bTNsVsh8Ty7mds8cK1t2TEsXanZ2VHqMOQhZUZ8LGFk5IhzFNLIQdjCApU0JjCMaKsHUqgOwQUnkEliDECTSedD0QSxDKTnIM0H0M/MHoAqAYB6GAsAjRgn4AeYAgAHAwCWFKh8GQQBAsgOgGIew4SmVKgssfd3wikFyw8cnlYJWqLF7IHVdmn7fTI1HiwHrAQhkLYDCgJ2SJw+cJgoHlqGlE+ZmQIUF4hYganCBWUMtISvquBOdXfWkD7Vaxm7Mo29mHRfzobEDhW6M6i6rjrnSpgZHzcf/f7R9NcVF1qyNPcOMreOimLl9RlFFQojOPV6YXMKEEWMExtUIguSfL0HohB9CjRYRCBMJziFQAk3GTcg12OS8ggxRgnzCDBLNGRjtRIxAHATGhqGRraK+IhkwcM0lKqBJNxn1DACmTY7C5KQ0CxogKFZ8EOsjlN//uSxPSDm83xCg/tZ8MlviHF/SD466t68ntlneFh64TQX3xWfo9qUnytbdql7d+rS+8zJPwnVvu9kN0M0f3UvWS5fFMQpeLOGFxKdQt7L5575q+XT/9MdXNz8xfz9ujiY2Vzf517ZZO/pmyudly2VnzUS+NCn9adzCEUscCwzDla2AydoWeMCvBwTA+wdowAECYMF5AQCwAYmAvAMpp8555LMwDRIqpwmNQYDj1Ewy1JkYAGWIjJMiWy5RBR+MakTqM9sJTt8j5bj4/DwZnR8IpHcGKYgHChjUx4xF9PH4gra3ppB5ZJgdJlsIUrrLlLtCV9PZplxRedViomdDXpA6mdz0dL3PMdw6rUOpzdtu9rd9Xy5mw6rTa/55jfD3R98/HH1dVaDmxEroKqrta88uaJa0H3EZAvHceKSSUIwaGxkVEhEwepoPebEhhQP5iuSkTQeiSOS8fFAFpDMmQ1c0h4FPMJbApDB6gPEwHsDQMDzAIzAKwBYwAwCGZgBgSqBiABRWmfKEDzg94CIH1a0NliN9SOS9oJU962a6/s2Mvev//7ksTnAxVJ3RhvbWPLaT4hgf0s+PlWHIMsaldDPbgy5CcJq9IOXaIZrhAFjLZ/FF0UofyplfQAkvbv/V8tNPKs3em9GzmyVistqQ2ol+lrPafrEX5mXambXqP7vWzP9fX/fv/n//+5n7R9Zn7b/k5jPm9zrjTsm06j+3kiYUetmxo1KkEEgdY+ya8GMGPyVKMACuDFH2kcxOIObMDrBGDAtwHMwE8CiMDNAKTFjDP0zAKjMHHWBh8aRhlXFRQmOkQJgzRUBBATefFlvGrZUU+2lCsOgZuB9etqGJ/Hegf3rH8rWJXDVK671M9wtXrqRvi87J3Q4oxsk/dOtkv5k7aSy/nE55hl3DnJww8hpVSzGS+OHM6rZccN/5rqJiebr//nr4//fDLrZtqIUPeg9sU65uHS5FjKlC2yjepyw9C80w/LTVRRE1UAWkM0AbpzVEwvkwoYCKMEGAcDAjgJABB15EAcmAtAFpjoIA6kRAZgQYTP41ZtuSDgOHQIbpYLwMsAwoNjRfeTCZ4v2mSWghTv2qqMpFWI9UNb4JInoNDV8N//+5LE6wMYqfEQT+TLwtk+Ion9LLhE90kcQajX1jdtRkfo9bZLHURKuuUTpRy5CR5TK5A5WhdwuY64k+l/US0uX200RTU1iV8us4/Zi8s5XClCnukbSRzM3rfe2fvPo7/3dHNf+d+/78HWpD//P/ecrs0tDdf07enzDNoIe9mjyRj8q2uq/E8uLPPvK0leocmqlt2y8Su8hH7FSuS0ZivABoDHkkTgyhUKQMFiAyzBHwB00QTP7GDEAEx9aCgyBRN2CAkRKByBZKoFPhQGf1wg4XlJQD8cmDFjo9AuUXhuA67ieQl42KvGRUgUXuRypckdUKta8hRcsbWRtNR1W6WdDSxPSjmpJaGpclOZJQ+xjIYqOhjulM5Pev23X//13//rn8xGu3Y5HscajIhhymnkJqWQoYxzlDzDGIFHXGpQ0w4kLYoJOXasxl/BDQOHeMD8IswKgmh0BcwiwBEO4BApSpJgdnKIQEnEBQC/VOmpqbQM+KwzPFvchq5I9x/cIyIuB3s0Ua5g6/jdi3i2c6Z8RQoydje3HoNJtmeIt44Vuz6U//uSxPODHInxDE/th8KRvaLJ/ah55qai6+M6XHRDcj8syeKQD6pK8jZJdSPovycplTh9S6Gikyb9STmMjPrWuCZqDhem3+QI2tMi8/f/hbwqnESWEb1RjJRKMs2FxqLqNk3q2xjWNBxP7Aw1M0hPN9WCizEFwVIwlwJBMD9ADDB6QEUwGsAkMDGAODa6iCkWlMa6G1p2pjNRGUBYcq11LFckaQERBo9LREBiZEKutMYMmnlMFAcVD7jqGHcsSHWZ61ovimQ2yQck7htMco6wlekWnuMsTDFpUaa3Bc5w0MDurxsjf5+YOY/lWEh/Pt1BeQItIu71b6MX8dfpEk24ffs+xiftT9h+JocSt82pTPtE+tZitl/X7r/XX1r53bXcMfVpqZ1BlxeePCgXbqNUOJp5eVwgZpHhri0JStjGiWtTuO1IxrphwwJeKrI7Oqo6gPeHW6Uwp3VSf1dI2NCZIL8AtyaIy+fmzMGIdMIEJYMBqIo59RYJAGFIJuFHR/BUCUATAhfvlAJQCHYCWHKoAzAcJQthjBtjAsCjxMXXA3zsT//7ksT1gxZZnRxvJHXL3T4hBf08+IkyvHiYfIjSJ9sdl0Nxo4SZViT5hrWB09juhMLjsdNRd2ibONkSz2TeqGlOj2ePMlBOHBw48Q1nxx58MnV9V3/c/HXOtDf4//9Ob4uumSF5apv7Po35HveRP5pkyWfsWOhOCAAE1CDKjmgM0o0LhMIeArjBCgIkwHICjGgxseAMQKBXkIB+IADVCMcxommYgXR0GJPjDmE8kyzRgBCeHiFOnq0eIYv3IVGLzPFPqx8jlK9O8JTHbeYKl0WkRgM4UHgWqxxRqo1DoUYa0H2Qvkgm26axxtMRJT5A8/ygRCtrLlY1Wt41Al4fo5aMkQbkpEEhSrJYRyO4YDQTXt5VPW08TQbkJRzytP/7v2r9+Wr5D3tfw+yh/461NfLqe3kMekn8ZbKJ9bsqI5xZVZjAw+UJkJE9swXR9lGWWXXD2tKFzySJugAS5GDeo+8OvsmIxdAxzFfAmNAqT3xwxABMISkEJNjNHEQ2TB4qN1iqAoxjIjHGYhgo6RQAZulJRhgqkOuAoIYYWofYvlxjeRH/+5LE5wMUgZ0cb2kDi4I+Ic39JThSzK6LtBcg2wdML7iswo5q6HK5T60L2q59pVHBaSvXq96lya6rTU+jqnD2xi51F3UrUeiDx3mkHPY2d3MK6+pLJjj/viq09/3//9/Ff1un+v5+G1XT95+D86HUTMvlSrpp+Is1bxTd8tlV4Tu2/Zgw4DGSYMIAQbTBCBkCwKoCCiXiVgHoCC3UYYArWg11Tt7mWS2SLVbu5upTjRfKM57h6hf80Wy2E38vQtZWzGJPBC1myJicFozI0h24mzunRcQTW831DzTuB7nXCG5tJfJqT1FW85M/SsVZwxOoMxbpqTlC2H6n0UbknrozJVoQQGBAYWMaO2BB3QTRCsl58//+FlPz75RpLaGD7d5WzipfYQQNMJiCmopmXHJxNZJMtDkpALcxI8EeMHSCYzBFwb8wXsAnAwHMYHQBbmApgIA0E4JACgF0BRR3tq1BWaECjUtiYUIyByx4XwqA0wCDPgREbiQTXRYROCoRPAoKXsVvsropI/Mpc+kZg+D21m6SqGbl97gH/g3FbrTcEUkw//uSxOsDFm3xFm9tY8KiNGQN5I64pXwTsLUsm5P+isp9q3Hpcg2RNbH72X352Jit3YHtM4aahwqprEs9r8nVCdmp+zN26u3giz6XrPvXiq23bYJdyfmdtaLnmXegtWmN1s9tvdYxnT7V2pF6tm6xbC5HZDVnZiVimUFUktOJxoMj9suKTkIURNH8lrRNPjsnnbBMSFISjo/VilETvxUNzGNEsWpkLQb+YKGCBGAUgDRgLoEeYDyASmAKgDAXAWAaAJmAeAC6qgJUKFTpGkZUPi5AvAi2xaIYHSjsM1jjm6bjNOryG4OZP92RWe6n5i/4RCix8NhNwJho572nR50HSOKY9mujzo8hxTcmx902VpLbPfz6Mg6Rx72Nuj2tJbv7a7W//2fvqRyKqPlejsxpyCZWceqEEWIhDEIyLF2GlYBVMOYYJxwCqgAU5GTFLFiEyrEKtMEOAtDA2gHswC4C7MClAAS6BgCIDaBD51waMYNUjw0mwSEqj5cCB11AigoFgCJXF/x58rjZJU3+1G8WWcunxr20NfBUc/Qry53BX7NFvf/7kMT/g5+J8QYP6YvCn74ihfyVONXnUSP9CuS8PaT+2luuiU9qduxMUM2pJvzZVYVJiBOw3A9JEkZtbkjMZ1ZHJOmz6zMET0ne4sRaS3Ir/t91X/P+s7o7C55WX9/zP83cqGevGP2U4TjuravGELrEv8ek6KVxhabN09ONTi02wpk8tRRuSN4AJUaByEV+Hz2PEY4wUY0ZmYKAgZhYgMAYDkwGATgAGPGMTJCjFEs04mFEg9oYYTdp3RpgVC0Qm3IghzPcO633YrFmx/dC4T41DqsNBjw6URMxQ6nE4l6peDRg/FiT4YcMnHk5aQkU14elCeIWC9RZRqQjCxYiuNEI8gpj0QbNylPMUtktTklD4IQan/LXXCrffyl8WvP8f/zz9Q3887fCv01NTO9xPdEQ0G3+pgzOEOT1guXSYIQ8mBCqACUlhMK+U1DB9wtQwHgDrMASA1jAIgNcwGkAaAAASYByABhbRoU4gMYjWAGUpINb4kGHVHB4rNlOKz+zEHe/kfraapt+u6HhxyOEvJYhVkwOxCsEcSDxJWOGSwnKuf/7ksTzAxmd8RRv6SfC6b4ije0g+DZHyIOJrGZVjTZmzxmwRFBeRtia5g3JpZGCYbOJxjnrR9NC2HLHChIUEE2BOJKpjTxjJGMRoWifqfuOBsplQ1Dtp+f/5596/7vsmN1Wulnqkueev2eaVFziI4a+GgeX0EgK/BlW66saiEE5GEdgFZgwwH2YC+CziwHsHAIZMCYGAPgAgOBbUsTABwFwxBDazfgqMlFRntOsSrI3jOLk0ybMNLhrLHfFimLB4SixZeCef/XyCcv4PNHpNnD01Rdfe4G5AdIZ/YfhcmGmJhLT/ECS9HIIcTixBNuVRHFD8UoeKsGtD6ZyTI6VbISQgR9YZNr3BTl0ZWoDsUSHSi9ss6y32KWyNJ5Dwu8r1DGtzVsYgv98f631frXJTr7LI1jc/Nee5PKbh4SpSp2vcZx9qY5hlNhTdPJmtJjI3orKG2Dx6gAU3GDZh49OegiMxSwpjBfAjMFUIkwGQEzPEOE4KqnAO2QCmpIg76LtJJgwsPLVtEQ69WP1YxQjTAeKDkhibD3kTNOFirUOStlqlZz/+5LE9YMX1eUYb+EHy3++Icn8pXiSG3Ul9N5Y+qNJXyvM+deVbfq6cKHShfVi3JTD8+3ssQUpZSs7MXxV1d1mR5srTEutiyDK5o/qtPzHXzbNse3u5////qv+Jj4ZH//TG1cfVcs+6uO5X2LvmV7bC1ut0vYVPUMBizQzJKxtEwEwHWMIuAIzABgZMwNkBVAoBQYEwBVjgDeYFKAUmAQgAJgEgDuYsGfg00ELCCKkMwHzZ0NhiGU2CMCwVP9iskTnaMljcIA0vIh0vjUUdPtZ8m54XGrNV3WeeCrGEDx1LgfocxeC0FTIhnIydfZSI/3LqTjcIRt1JD4ih3pb7mziXftYv1oL4lOM/s8g1UMK9mo5Gpzye5L9S9+eFVk8y/4tbD7TfUp2bme7vy8YyRIpMSuU1dhHwiYipa046zRmZTB2OEwcTD5KGT6oHipChWIDg1C3TVbSB8aBIfCIdgAClEDguiPPyEHcxsgIDDXCjMFAPUWEqIgLTBHBKDigLxPEYZYWWBJmJDAxOIdK0TCysmGA1uxJ32q47gh6JNth8Av5//uSxOyDFdHxGG9lZYOZPiFB/SV48fNEnmCmNEUOR8jBJWGhomzIP515HEXB4hxAqSPlsdZELjbvsNh3WZFzwu6pkSMkZS3I+ElDoKFTRMeOYP6G2yvVW5wuY0zy0Dv6nn2u+ByNEx//V1xzzHcXMbNDq7ldREy2Ur6lSlEEF5Rd4qpqIhxzKouHDNvoUAAyGSpOxRm/IigYO8DGmDkgohgMQMWYGmAeGASAD5gDADaYCMbM8o6aNIChpuSkHlVIywKHqclDkzcEIW3rqFKdvfkw1jE7pemksb0Mnh05WWkPRB0LHUODAyx/xxm0l223crH6zNtZnK+2Fu9f31yZo306Oo+oW3OO1rHmTbnuqJcek5B7PXWd533ul8rzcNiudv/xbeKU+3V3H/wyIm9tfDdicJ3dVMzL5WOqcqvcudtajyuueRN01D7GGzCp5wnwaDvPFBIKqgEMRNlKjMThMQwN8FhMHsAwjAGgaUwMsAmKgAqYBWBQAmkfwkEKQbnLggdwt0Gjh5QYFPYLBUaZARUy5osGRhqVdRlWaiyULao4vP/7ksTogxeV8RRvaQfDIr3iCf0s+G6GwTsR4HGIriOsVNTMpHY4cZNVOalLUYtO8rmFqwgvrqVtn1IvYeNtSk65cy7czRdeq1au54j1WdOLUebo32Xdy11d1G6K7i/fXPfG/f9e/nmPhssg9O6KRbo0a7lktsGhoSjjnmlrn2w09LnGzyQ9Y2emhSKx/i0UkXMVECZAC9Bw8hIH9UF2Y6ISRgUBlmDOGWYK4BoQBsYFQLZEAWDg6WJHZgBACZ1hGMoCIoWyqcoMPLbNQsUaJlVdRsF7TUYMb/s+SHGS4nxLYSvAnEOYFbE2LYm77xuJ8aPF4kTCA0oRWz1vMYgMK8a8u64wZSiFhFCo/sdpfVUROeXdrj62WeHWePHnrfF/Xr13SRPP/P9cRV31dbw0pO9XdXe1Vyo1RkwclkSYdDRQzgepU2wiFOPOgbVD6gEMkPk5TM+hT0weEFoMBbACDAkQQ0wLUBLMArAJjABQIIxNM8R0vIaN0XBOmOYOSM4iOpZ0qmR5WYpC27oJQsihEGNdUShHU86ZGPJ9YEtGi40NEOD/+5LE7AMZTfEOL+lnwt++IonsITBQhUcmq8DlUjZNUMtue2Llm0+ZdmR5aFlFtbW61s80ht1Rzy6TnW1NfdJ7jO8d2446XrlK7Vzc89tXxJ9edu227ePj22yuYbzul3XF8RMVT447fsWl0zCstQYsuq0hYLSxriImXOK6LYME0C1I6eLzxiisxNUtJ9DsUH04XmQAtwYhEu3mUzhcZgdwFwYIMAgmAbAXJgXoAmCAAYwBABfEHYHTDhxz1HU7gIqglRrFTqYgFJjiqxWfCMt3ndNTeKEZskkrUux4YI+JED9glMDuxo8MQNOEM3HlDpuOioeSLEamHCDMb1n69xSiWTOaVbuKjGrZ9D7HDcqZu0Xo40kfMEMfA4s2feqrSB9pbNNPfwk01S1tx1/Mz88T9/EdcQs+KVDv9zUyyo6XbrRi0lcZ1kmDh6FHFiKgnH1wNgFuQ4cFuj/PE8McwDkxLwXzBaDdMOkAYzQE3tIwBUr4wwZRIFwhjB7wCIcuowAunWSRFwKPirYn7biXkGVGwcgBMXiZ49qkM9NqmiZDszFc//uSxPEDGl3xDi/pZ9L7viKJ/KD4/SpkRX2aKHeYblcnsoYWzBwouLVlVz6hZCqICCFpXPXNzupbMS4kOl6asRRdHtpNrqTte6WZ9Mib2U+YiNtfXz8d/TLl8/P//e2pv+X89cV11c9sXbL0oh7c4+rqmHs+6noKtMdYlygkwrX1kABbl0RmSeuGiyQwchbnXwxiUGcCFFtTDBkvYJM0NkQlAhEXy5MqDi9VR9E8kNDhIGwctQREMTSDwHj8gtNc3INF8aPJ8RUHoHpA7ZqxSTJPo/LNF+DkyaL90vEMSLkXDDX6KUrGiwxJEYbdKjTK5wqLBWMWE1YqXxUClGSijut6tK7/i43tNL41///bvvn3/mufcakDvuZ72quue+dVaZjjlqRRkpY+RMQU1FqqqgACQyj3DqNkgGEjCQQcMwzYEWIQZ8wfkAqMALAKzAvQKoEgUhgM4A4UADhgJgDaBXIy+WyY96NGQ1a08QPhKMNf3sbsTCi/0CLYS5KomMxAWKkAVj/WZwSxzjZJpp+DGp9wNx2D27fBDmsa5wnIx3mLd//7ksTugxel7RRPaWWKnbwjje2gOROoEeKVy1g7MKdJ5/2xHdNLRoVB5uS+OutjmsIeXaL0rhTybbm8z2mh5ES0NFhOuNxBiCNJDUUJV1xTihQUf/xr5Vda6kc7cJ5kex83YoZo04Qp7dJyWKIEq3WKXMzQcjEDCMulLrMFCNY6SikgaGmxQQIlE2yQUnBIwfIFUICgU2iuIjAEAJaHCi9Sf9gv5johqGEwG6YLoGJhigMmAuAQYNwFIhjA7JTBVw0wo6vyFh6nIQriBYMRoIM37jU2N9j0DvDI5pk7R4XhHMGMO5D7F2EHQTiXEg4XqxOJfnrMGG4hYm0OG4zNnqOfrEwy+Irtrice8jyLG00u83LNeowfIuNFsVc9LRrIrlbfhYvrjqe5146+o4//+rrmkiOp/rqLW1Vluthio0FxVtfCVCw5NmVbi8W0uWaIQ5x1AQx4+bDMpiFbTBoQYIwT0BvMCDAFDBSwEkwCUAmDgTMw1ID2B9DC2EgFhGMvUACpPswoWiQqPDQoZGEYTSeTEItWVe0h7oNV0o6x/39MBxL/+5LE/4Me/fEIT+krwts+IontIPg6CsfMEk6JoERxEgqIQfT6Jman6XYs5MqrMUlslUXaTD3LX7ZV1WlTNrqtbX2bNTfato29zW9fru2splKTe2a2MfzccPS/b/XPN3988//H/XVMqGz3d01izZWRp1JwbvfrnULP5Zwk9ymsgkxjqWWWpZItBIHcioPhxOuDFOmWEzWsMPME+AgjAzgDgwEwAeMEzAAwUAKGA4ABSxSgEUbiYBEAYK1FAEnAxhAg4AGxNIsrQcB3oMY8zqij7fMKqTKzIZavYgaas7l9STYQBdhHJVemeZUUS0XojX8d0ju5RW8XKuf1cuUNPlDQMckNtZWXb3ifVaTEvK2ovTJzmd0ytMRA1Qe+TFWx+5xf3TKW32X7d/u78drx2xv97b/j03e2z5uZW3FqV3j+dbajv23vY5iJS9Oro8CRQN4nC0XykBBdAf+TcgZAPjsS4xmAKTAFA5NkHD+QgSKTVSMsFIlAv+ZCCjgWFwKDSoIwWHEUhHRN3QUJbeB72eyI5HHeWkABkPgdgfChucUbJPUN//uSxO6DmUntDi/tZ8MePaJJ/BmxcrabaqxTmNr10pcnFFmDtQM7IihC0awflWzfTg9SJHEOH29tUrcUysk5ZpQd5fNvteJ48zK67tkRso5G+dbUtvLvm4+Lf3LO7r+/5/309vFOls3cNm93XFr1HU3FxK0U/lZapi6iqt67H2aNXSkuOkoAK4MbChkjKExK4wUoFZMIPAjDASAGYwU8BCMAeAMzAGgHwg9mGAkwUDfEdQ9I+Rhhi7zRAI2BCJMHBUXiqDzLAXGq21Ub7YnnQKtU8pA480Rh43g5IJ0S2HLA/hazryXfk/A9LJH0n0qcZ8rfimwyOsTGzQUmnita7NyNebXdNum1FrRQldxOzIZTaxGzAu69TTi156i+U/X+qnVV7tled9WWOzPV/19y6uUvLLu/Xqq8/OoKe4p3i+fWk/BibVXlxTm1KL9QqQnFhcPpVGMJkKoAFJxgxAVcMMsaC2DA8wQcwDQDQMAFAmjAuwBZyzAIAD8dqga23xNiFBQCauwAgymA4FiwgILOKFV9jGDX7DZazgWqyn25QdnCzv/7ksTsAxeB8RZPbWPDRL4iCf0k+B6ziR/m5j3LUjph5LkT5Fd5HEopumiKbMTFvjKcvvdSX2w/0dzpKUIpV5wzRyJnUGmsVo96uKia2zmaD12yhktCcmmPPDvfkbq9yp7mZcKu8yVJ3nz///1f/zPVeP/yW+qzKlu7fjOoRqeNb8Sy4ujOCsHRkog3UqfbSIPACZDI6xH80r4ErMH7AljCAAF8wEMEwAQIWPAHZgKoBkBZYDvqyG+AiMgakC/4gOuWEQnUBpZbgQ0nGRPYyTjR8WtWIDXEyOBalYQg1QijAtAMCUywnkIsMYWYgeINdRJFk3I4QPExF501mw9NmWHJgQS8ndcc29RyOsaNHxxTStokE8MNWBwyzppmoi3HwPluu7Sv+Zvem+/n/afee+qmv/mrV2FJUniBZ4t8aMHOjE29wePYTVcDw8NcWNuKcUUUDR4gh9UyGuRdM4CFKTB2wggwA4FtMB9B8DAWQDkwBsAqMDGADTAB0fW0ozTwQtWHYzNjBipeZkAJJQKUqEGPiNp22OqvsKN207c1H2roeyP/+5LE64MYyekUb+knyxS+Ikn9IPigcwgyFcQ6hHgE9EYUHxUmSN6A+QQVErnTzBco2FrqUOmFZyVs/r7YrMM3/qrqnzoy5dRtnpv1Pj+90qbuef74qOdT628Pmv9mzb1Ece+v+43v7dyzuZ3Q1HPrwgo0856CVmxqyGSgu86scUOrKUx1qY6h3GoJLiORDeXHSS0rMAAW3ETCHEuUxy0JTNydj9wML9QQBlQCM/JUOBFNMeEkEqBaJ1CEAbWAwBl5f1p4wAPB86HMQzMEiBWeBILpMiK17lF5Qy3TzKFnnWm9HanZKm+UjIiyoXpLINTbBzPS6Lx3yXXG65p0quUcxdK1YY6T6iW2qs4jdp5lR1O6bTN1TSq18VP1Mf9X1xF99V//8dfMR89fFbaZFoPhqR18siqPV1U0yN7u6o5LE5fD3X8IRqIHDK8BsU2G0BgMKeA7zADgOwwJgGGMAKAMDALgCcwBcByMAIASAECZF0QcBbDBsDnIyDnq7gzO+g40WUZgnIFgXOVft4XPWvYT/yTmikfnYZnrsIgC1cfnr5Yx//uSxOwDGWHxDg/tZ8LGveMN/aw4ygneRavA8jPE/h1+cce6TmNo+XjTy/tll8nIHzBgqSObXl07Mp/Uc1jSOB1MtBe2mJpfINl4Rgk6KyR7IZu65Lq3fqvfh89+/6v5Hfn3b35n8KlL+5+G1FHH/VW6ncMfGassbUYilop0qsK4HQciiihoufK0UQzEJ4j2L3NwNwgjAWuDGXFggy9sMiMFwAxzAnADQwF4DKMBYALAMAYmAlADpgogPHNlDLiPA1phBiQyjYKBURa9vR5tIm4SdqHyiD29zaLTrbxoehIcMEUMIMC+JsVEniKgWsOpbbaHHCfscdwJzbzlubj37QP5EypjlTdImMZYpjZGwNcvpd+xtlqM2UioWUWYm17tqbammuta/uR/e/9f/9ffxd3VTxPL1z43HTcTFLcvx6sS9DqLQ4eiDYccQqDVgPQqAGpDA94cgx/wRcMBnA0yIImMAZA1DBAgDAEgBY8CbgHYTfmsHPKlRQAlNkwx1RUWqSMxBVQMzAadT2nFL7bGIsur1E3zXRRyWjER5aaI8uRJh//7ksT0AxuB8Q4v6SvS5z2iif0g+SYdLbxc4lyti3vs2XmY5dxDtGhrzaKbR9TU9SfM5AI6jSZhcN7+hxZxHa+oLnFmU2fl4rOLy1SbSm6Vs4t7pLI+6Zv+/7r1l+/W5Lyr+7z745ubfyMJe//ltR1KfnGeGt1+0/rSW9MpysgV5NbeCeCF1xU9r+JpOclAjJLqjNZYGOEAH48cjNDFjKyoa9C8ZiQcOjzH3sAQYi8jXkns3RXNZDtBC5cBdkUcs4U8qfJoJvI8p5fLFl3YwlvYSdEskzsMbtA0TzK6i5yRf3NqFbLIwS9DvPekr3KjFDr9XTW1BTfjuw+eUXEEFGqYXmcjsaSehi3Kaf2Hb8etvz1+xEJnhY573rSevgGHDMIAEN3OWomWcx7s2KC4YgUAAAERpuONpmkcmdIEokFisCOsiTGnFfDmUr1J/jtaR/X+jn39tQT9PjLvgfCvT1nefK7R47dMpbS6TpITm+c301bXU57lsU+SjdarFfH6HnAur2CkNTg6DePmpExb02ulZiNSja8G6LNp+fa2WT8tvd3/+5LE74MZcfEQT+knwoYoo83tpDhVnenzK9yX8tfr/nxF79Iyl7Hbj5FglBiOGYtTFdefswjIfJMDdCtjDAgZkwFkCxMIcAfTANwE4wRkA5ML9hKoAQGY26AUzBY044FSAqJmpgjyGcDQjCzGB6UlQOgEMBsioC0okC1BwGWcMhHFO54gThY8jAckgoUifa4UZmLEMmySPGxxPk35r46dsmuzRVXhTxV+jVGYr4cnl8zN/XU6ZnxV5F9re8CHPiWjjqLqbe/r0z6R40TepHkdhmlzjeb7n19OEPGqXnzWtc/z2p8eFmN62x6/eJK03mPW28Qt5gxI0kV9JqmJ5o2tQs3ky5xWeRXwnKLEYIjs/svb2s6b4L9XvGzSvY0yfirYmuO2shNEJUioN5MQU1FqAauDIfnwU13sObMIUBjjBiwQEwCQFtMEMAKzADgB8wCgBWMGtAikQMNiMxg/Ay1PmBFJKJgQAjAknJ6Ap1bMie5qMN5dkXRjpiEAhxD32e0gX/w/kpwTLA49gueRIagaFOj4cFHLvxeTjpTwkrSd46tj//uSxP+CEbGjOa4kdfPrPiEB/bz4t7xwWeXrlXpdWWHh4QFySie140kcB6t+6CmdyNceys0+mVrMnBWVyXUIzkT33KWcapE69HtDHpROx7f6cz+dLNdhS9scHUvTt3etPVvabz9qfH9Xrx7eegtnWX0VXpjUKxq6/7ozxMthR0QpXupJVF040qWInnJyvIYh8hpDKfjeA2C0JgMJqBCzClQJIwGAHTMBEAADANAAAwIgArMOlgNUISxraEZ+CgiUmGjySpM0O0ZEGjoIYmCxpPl/l321FrysFVr7mpvbjsHAkTBHFtCIZjcsVjke1mBwWWoTUC6EpawtUP5tRllWWSrK75o49W30UZ7i/mvj7mtaYqoe++ve97tjXcQ34n7meo+lJ7n+Z7lm6apu5kbvud30p+qqxvN22oZa80cPJxSjLJ6NymaIOWNDQtROE6Zo4T2k0600Jx8lV6BYO8qNhqoAJyWEyvOpDTfH2OOyTKW4xjBARUvUIayEmJhx4TCgAcBSIIvIOr4SBtIAoDHgZ4JUj9Y90S5FePMKNP8WhqWV6f/7ksT/gx3x8QxP7YfDOD3hwf2s+No3FKW5dS+us/C9GsFsIoHdmxyG9zLQyqi1RLUmeYdaDaMnsYdPLbnw6YizR7Hr5bDnrtrz7JQlOj9POvqYnuY36vFK1FxMf//P//1s6/5ubvh3FW6P5nfW/33dbJ318vjv7Z1CTAAUnEDDU3swzIYPYMDHBGTBzAHowBoF/MCrABBUA/MBBASgaA3BgD6AAQUWjAspGSkFQhkcvOuZIWQBy0kpUVlKcGLmRtnV9iELVN16s4phBHw/74cDGjLyBoPRI2rCQexLU8TWSNJA2WdgaOG5E9C2N3KmoXYPrh3ZZfvSCzk2q54ZVUcd6NjHxblKBkQuRmLFoCW19KPScvTKZllKKc4dSe+9yo79Uu/F8thOqv5f3/P/db7/8NT/yX+5Surx2VZCDur/WPRoTNt3ruupCyhtAkisahBVytUAJORk1oV9j6WAuMVkIow6AZTAfCDMI8AdXwcHAQSiaK6YCpT5RUskSBJwiNzIGLS0oSUTYKCM+7WDm4NKsNBwt2g/yhwmxIOD6ho86hL/+5LE5wMU4fEcb21hw2C+Ig39JThYg0WJzh0DxtUGiB8kDKYKkCfIGLmKZI22xEYPJGydSYvZSjkLHBJYkNNvNGPtfBw1ENsdJ4vW7m+jOdQ5hkVUUkenVzkS0Jby3/xPdNol/8yt6tdXczc2kzDws2TcHpH3EEJ0uJUOmWYejpYwpRUaABKGU6wAJrgAlSYUyD/GCAgj5gQoCAYKaAnmATgORgFADaMgXgkBShwM+BAGEh+C+BqyKRZF+f02gcYKAZTLEEcSIg9pJWgU3rjIO8NA7bReCJpXqR5eNRJxKgjzI0LhwqX/K9djv7Ckufhqk6F+BHlWPl/4tav1T66maY5WCYNbdPsIMRbYadQmkN2OKDGZl6fgsv28cP9ae3Vn2W52Xy07S3/lda/O+Dcy1Pmf36zN+2bflb17Mpbs2tXUzWs2mPLyszqQvL+VNGbeL43rLnTjnEL3DCFDsvXpmscePywcD4oAQKbbiJg3t/mBeGuYAoDAOBbGdCf3aIrkpm9jzZXoU9dgiPvN7Z49A+Uou2sFRWAOE0weuNg8NwwW//uSxO2DF73xFm9pB8OKPiGJ/TEwCJjBmp5w5wosGx4Pjw+QsssZRcOXuvYlmmDRdddD9mCFGBmpxt0GJkD5BSdkXRTT//sMZU47//G1ADVBkZUXKbXWH0mExARpgBoEEYE8D8GCtgDRgFQC+YAKArGCcw8gjgCcOKAlKEqVNwzATHDUWEm4mjBkPFEtCxkBcFCyXoZwSjRRDQE+gkCxRr1cKlQcSBuMQVYI8Fy4c4h6UBLJdfHrKvtULzx3UTniutKUYogQ/KmepXc0bPdYI2xkvLCE96Q8vEqTO8SmlNDWqN6JkjxxNUhLju1IWHEpbpEleTfdq0rGo51ZSjbjFb96ur0Hcjhjq5R7OrtenNzL2q3Od7d6sUusa+qy+dFZK4mJTpmndfTlmbHCM5c1Zl2KF6kBXPkbaEcJNHltkfjRY6jLcJUqABpDLGjFQ3B0JCMLkA/zBVAJowMgHWMCjATjATgBkHAxhgCgGYgmCwAuYCgATBSQUbZcTfxCpL8L6MefEY8OrRtNyCEWaJNCDEueIOw0iPbbjebzCT2YhpsHXP/7ksTjgg5lESjvYGPj4L4hSf2w+G5TUUMcidE8XefB/KeV5xtDqRsrpxgs63JZV0x5dypaIT6fNdXJdDInoloT0iiJIFrPfIJZKCzDUF9U06nTTMsenpR5fxctC3Lf1/6+ape1mP9wzMv1dvhXz78tmk92+w168WrZyJBi0ozlSunXxYtRbl21FNcQaaI0CJoSmC6ipJEHAyuAEm7CZoXzBtikKHdIZkgsY9MGOChZRF0cPiYLU6AwqOCBWAQSkIkqnhQpbIEYewERITIPiEH+AsIYErEkPkwbn4mxuNycnECxTTTGQMxlkQMoupHPUXNKs6iINH9zfc3FxcHWPasdSxXr4qg4cINC0B05DoenFlW2MYbRdfPdRK881EJac3P/9/8811/3NS9O2id9zf/ErPxSy7kW1XCut2ry42RhCqoAQCjjiJg45oGdIMUaM2C1Rg4B1ADJyK8I0AsbeoSRkoZWmOJqsJUYmEIVst5YFFh/Dmh3giqDHL81qWn9QzFekmraQPFWCJwX6WI9LOI+HsNxGOZuZkr81OFsHbKBEH7/+5LE9AMcBfEMT+krwpy8o03toDlJoqaupGi8t1MkVNUTlGIm0r+MYqbzYiCQ6wRxHctyGCOUWWyVNlnZbOof/3PYUnleD0ryO7c2jWvvn9tEp9EkAM5X/vvarmPuheHMWvV0Ny7+szHXkDlmCwMNEBsIDuIgciIQwwBQDTAHAEBoDQ0CGskHABEIBCMEqGgA25oEokgez9LD3s+D+ymhnvfq49v1NkFja6UgWUFVk3HeKoAzYjiQbPGKI3EGlnCWgeNgNZ1kgkg1SfdB4ODgVPK0WnFQo1plQ+HhLEJIBMWPRJINNwnGh1k2oJbJUxoUIVGOTMnqNnkKZpUECCydk+JsQMwsmFuz/l85JS8srEBsRornOiAii0FlC/VSKJv7ZES8uuRq6q8dwyYgpqLVAwz32A9OeYE7QMQFmA1ADpgpYMyYSsAzmAtgIJgnwBcYA2BEBgQGYAMAFmBgADAUgAjAKoyYeSCIbIrkcAwaYCIPHrh9CzbCysJuhgUi+rjAWISQAbrpYOkVo22TbHbqj80qzNkNpp+a2cWL7FmgV0ri//uSxPaCFdlRHu9pIesdviON5I7wOAOzBPg+ZE3mfB3jNo4FO/rnpQDw4AkU8rLhrKQ4cULRIDax5YzAycuRtRXU57YSLkvIWpYu3mo7lTSOWK0397VXudrwgph/W8lkpyxbfGE/JS0qeg8ps0R6iI2yq5ybKIhpCjmQ6hKqiRtFjYLMIzqBAjIxOL0fkgELxpmSFCKCxMoJzZmAGDph67C2Y6cGZmBkgNxgjQCCYBmB5mA5AGYFALjAcABFaREBTDphyCkjhRpOkWi2SiF0B7WBStKha89bzZN5EXM0veAmp5zVBZ+huWfjlcVhJRaEBoyHoNIuIKSKx0bNaOmtWt2F616zseMYYiMJ0IatM6GUxaRm+qLVlJe//a1U/7+91ZKUe/SmpjGK6lGoOYlLsR1I4iPDjihBAQUaqHFRHDqibkERc5QHFQEMP+sbzSQRX8wWAGUMJGAyTAWAhcwJMBtAAFIYBeAriMBfAwJ0YAWASGA2gCoJbEbklKAQiKjybIMkjJk2RE3m8TEEnXugNecyUBIJSMtFYfJlsFS/b/R55//7ksT/g99d8QYv7SvCqL4igfyVOMnRjrf331qwjjx8at4pTJOvz3FdEsBqifkGCXluj525+E1rA+IknmpXfqSfjNbC+HOxKsT899ynuJtlMUnJ11tZHM7l9Wks3mfc9er2Fvl6v5nrw2q7HfBZLqZ378WQQuspc2WjHFlJkqay+ldijspjE1hAqePFRsqPH3AoNmRGeWRFYtjCEQOC4UE1SGltD6fP4WpigBJGA4BeYKQWYKFXMAQAQIDXIZIY+GQoRiYkUPH+Ik6S5WIjYsijRWMkkffG3g61xzajTZK1Lsn0MxbGYlQ1GyC2JihsbGEefLScfU67l60tMlJGNHEulWz5rvPYcOHp1TTLTTykflXOdHKz6MrJtdKLb+76Jvbt9daPztVRLTJinrZ1WYVQw9zppvmrmDhVz0kSDnuQNoxJxoUVBKdmiM9yeI6YxXh/UOvADPhk5sAMEGwM7FRFXMKBaaCi5MOMbTqRfSxbqppVKAB4SEe1B8UGlwnIMcyaWR8+qXZGUPZkg2EVC/OpPue6PvXooaZZailoZ2z2i1P/+5LE84OctfEKL+krwpK9osntHPmDOB1NIh4/C7YqNCDLRlO353Th/EzBAMNKQeHmiphIt+2nsuJYbIEBcsqnRz8S21a9to/8V//7If8/Exy+qtrGNpW3R7ZjnfbW7N9PdW65vmIl9UksGDFxFKSSRmNxlYZoYzBpSqdiSGJIBqoUDB1AQOFo0CLtIiQsAaML0qQQLe2kKAGOqMIaEJ9rmsCBCJQmlHCzqDC0nRwH5S/D9Cj0jWQZF6ErbpDHAeJYsKqRTIzZIlDNJOoqvXYv9h14iys2kw0RMvwL+Kzaqw+YrfOF9qUTUxDqigNvKPH9n6rOe6C7NDGzFVXxcvyK39S0G29n3ZWaxjedsz3NTndWZyWM7Y/vZujzVnoz3l7iRShM72yzJ7uq26KrezvYQVUJy7bMxB7vjUYFeOX9PesEfwxIYgDiVQUKlZRLQWKlQW2sQRJRdttGa60dcMlAuxwv4gVIiGjx+UeoCHHqpC/T5Cjqeag7BhvKmG0rdck2Qq6ecUJXWR6/Mcrd7hkmi69kUrsfq5L8pdcl/Udm6otm//uSxPSCFnHhGm9tYcsUM6Pd7bA9rFaXj1Lyzlkqph13cz5TXjutlv8l6a/b/3vg1HT+vLC5n7txaoziFdKqEMiiJTwPd7b5t5iDmy3g7x6lw4DjOo2847wQKOMQRCfzBKgN4wRUNCMGgARDARwHAwXQAbMAiADDBCABUwGeMVOyTBMXCRhGMQFws3iS+BRw10JArCEKqHQSDRwFJgOWDxE/5QIpSBgqSAJQJwak1oikgcpGT7O0fg0I6lHgZiCXAtLWRdSthH3hza9QTblSsFQJKduULYlcJWyWzZs+1rM1VAvO8vqTSRbP7yw3KGjpVmh4NsSrUunDG9a2zw4b1CposZXtbhSSaV9Sd9CY1za6usm9O5ot4UeNM6fu7t99Ye6crw4Nt71XGsR7N8C9Ik0f0xH7+XTKwyv9sDU9b3O+GGZLtiHRTqYduorBCTl0SwvClQ5gZFuCo0QZMMy4Z2saS0f9GpC0eSyCogAU3GDM7gTOUoRkfiztAEzNWCPEwMgBQqOEgkQl9hYnJAVC9jSZ6+Va33KwElA7oeNxPnGi4v/7kMT+gxWpUR5vaYHMZz4ghf29MMWJ7F06p9Pt/PJbTktqff7p/2/W3ncl6bp1X3/K3K8KZW24Sj/W4+9xinSjHPGXrx/fGPYpn7jve3/Pfsci4mYMLly9Adqv/6/3OtwMbUdCIfCEGBGuCQoKCUx93OfNDIGvzBvwdgw0YD9MDNArzB8gHUwEsDMMCJAMxUEsGABUwBsAJGgVJFkrwy4pXgQETWx1uHRhFHFm7VCYuoonkrItwqhW1fYoNpkItQCp5jEim3Osvm9EJbE974W2yYZNXjj3ZDMTlWyh+mQBPdTPkKWzZpF6DArg6kcxbEhH4nfBME782gmHaKYIoEaeLsarPbMMTOZzXapZ616TnzHD20gmH57KVnqN/scu71ZhzJ7pyfb+s67P7lVtaQ5h/A02udWU9ll7UfLnTtIP6MwTOmiRSRcciPTpW2dl0fmGD/TLjkPXiawvHd9crASuJKoAq8MML7U1kR2TSrY55DC86ZwJiMMEn8RnhEVjIWJDQ4GEQEo+RARABPMi66juqFIjIVWkOBFPlYyFh7MjDv/7ksThAxIJIRxvbSHDy74hAf0xeG1LUu11F0qk8p66n/9K8LqUm5OtdTibuKmoXSplub8cfcU+vni+vnmuFL6ilVPAQofCZQkqNYNjho1v+32Jxxo+ulKkvEx06ASoCREqQYF2gM4ZOs42nFphephcQRkYB2BVmBZBTJgcoCCYA4AchwRUYBKAZGBcgBQxDkgsVZhKQdPTDwARrgcKCIjCGwAHgkbJKoXEIE0CRlAK11VyHdEoZBFPSRT0NQK8c8wqkbBC2N2KgzHtSQxkOSnSi8phcQsgQInkisvukN4efbRvVY+HZi6xcRl91JLMze1U3wXaqltA9BZNaG+O5dDpBMHJZrE52ffrzB6HTJgda+dp8zuVtasNetDLVspXq23Nu1e/twwwNWrt20l1rvHj6Vq69szQjh48pEjSKicoheLZs4+iV3MwqSlwqOlzC0SSYILR0aH7KFhcE4hkErpKAwxhwq8NL9BmjBngGgwS0AGMCAA1wMDxGYpgNkAb5tQQUZgqIFUQssJSasAXAExRpI00KqBxFO4tG3slbmL4izH/+5LE5YMSBQMaT21hw+W+IQH9sTixyCGMTAjD2dMdc6RDMknUDMgbMTMezsmZW2ajhYw0LRtW0L7V1K/qMwttx1ftqHXTqQ4t3FM7+1bfuqIlt7Lrn3P3/U8//8R8zf8/NxX/EzPX/u4rq4Y/pjDtSw/NNbxvdHy2U/tRGzutT+4qnHUrNXSw5agBPQYloxCGYchlRgjgD2YMiAvGA4AIxgeoBUYAwA4mADgAgwBIlkAQ2N8Ak0m5ISyZAQokwMoJuEhighhea27MFuYzKcU7hastegk0y4lcC8MDwkUSHClkicOboeOsbQ3GK+JEDGonEaiB4p2ObG0+ISCFtF8NCi7jiQngXgWQRWPU83SUIgyhLcoOtZfbrSiJMgVse/dfXV95Ex3VxX18/xpel//9UtSnFcKR1X+hNPFQPSpq2HJi5VuQSD1iyoeQovYpBg8BDBTI7IxewRaMARBSzB3QKYwC4F+MCdAUDBJM0oKMQgSK8Lwi2COsKGpIGjRyMGKl7PhZVC5WjSrPbZS970sdYHAqbYSAYDpQNIYLiGuTDwqc//uSxOcDFr3xEi/pZcMYveJJ/KEwPx4RHDuYgXCJZAHiVq7Mws7pHTdhRZrqSfpOm7bZm9I6vUvtu3P7LhqtL2tEbv12TqHz2vJ/hsS6unw1566mP+/ZNxPVt/67Zxx+s3uo274iLbJ6KljG0nCh4/ZpZrU2cOyck+T1jY2RRLDV5OcjZudK1IHeYGDSQdPjsYoYxE9cSNIICkjBWQTEwPcBiMBTBbDAhgCowAEBVMB+AADGLjmARwUJnTAMxZmMBSJijCUF2xCz0GGUS1UaNQyjmWgrJtqdtSTuvbkEaOolw9URC0W0RFiK4QrHujCiLxd1dnmldGluo21aWipdxvztm0s3t4jjZJ6DuoxnfW79j17e9l088+W05kdw59LZ2+Lqb6bPNxXM988f/UdP6+7+ZejW521kNm0rllMzRzVj6ZQvT7hhebG60Ko0yTB0GqUUTig0XOrqF1UBDGZwkQ1moBrMHRA5wwAIMChAsCsEaMAhAFwgE4LFASA5CQD0iYIRDx0QApEYChcyZ8CY4BAwk0qjCmtSao5i0J6MsfVvnf/7ksTvg5nl8Q4v7WXDID4iBf0s+IDonpxAHgep4iAMkXHBJAdDgggXNEDih0iWhFx1i+JcRes/bHby2LYibzE/XPUjkH6wO0Sb+Ydbk+R273MQv16Q7KtdR/8c/fzzz/9esQmtf9vdbFvElu47oc0iFj1o9DxVjlRnKMg2pFi5eDBUkPQ6E0CKYNEY897EKBDAKkuiMmGJE3iBEzCVAXMEgA81rs7AFAETYQqeIjaLxQUKpCMNjVoVueT08EtpBJZ+C/AlEsEBwnS+ZyvHL98D5/PxPl8/v9Yzr5zmcE4fEnrZ9tHVwkyWj58/dJvRNxzpX89a8fHDm4j1DITL/U5ExbOgpu2mDCU+pCx4uqxVaasoXQEKIsdrCY68NkkJLCURJLWEaQ+AHJiCmoqqqqoACkMStnizJ8hO0wQUAMMGaAozAUQeEwGgBjMAJAXjAwgAs18UBxiR8UtTMihqwIzI1FALVFkVGjUkwq9JmZUZahCknJtF24WAkwKgLEtk790PkQ71NVYeYYRkyqBGHmkDTraTS5/p5qWimTuBrXZRfb7/+5LE6gMYafEQL+0Hwl6kI83tGHg+vO2N2lfO9Wfp1VD3tm2n63kNmquCOKlublDhWnpTixesxDpDmPQy/WP01V316+ZN9t1pY2m9P9ach2erlabPV6Dfmfn5md1r8+/3pv1iRWaihS3TX5DWr0M4rR1W2flU6uuyjy5YeHhgctjwfMjW3dBAAScQMFqZaTKFQvEwI4AmMESASzAPgPswJ8ArAgCMYDEADkESBAAsDg0whVDQ1HREaCQIEqjGRkWATAANb7oN8vrjcoPYBk7T5LL+DNSbjfHJAtATwIsR8VQI9I+Z76jbHj0VE8xihyBtR1ujcGpUqlQ+mb7MWqvXLJJ7A+meYQMvOVHzdc/JWBlpsnOadmxsM1cbdeo2CGEZVX/1P551/vqE7jn/+///1l/+8/z/fTMo5Db3bvLbpt+znC8gnkvM5fzFbk5q0RGYxtyloEEEpyWIyOH7zlVC3DBQA4N0wOABCgN8AWF2mK42hD4mqFBqvLAZAOCpiwOyVCVgKsD6Fx4XwHmgIbUcxkiPh3IeWIKlWTJWkH3U3A+B//uSxP+DHInxDE/ph8M6vWJN/aT59myJ2NGiZ4IuLWppGkTUJ4spLtDIoZA2iGccMjt4odQxaOQaogMIOXpnxDlc2eMDklqqO7/rjrHsOipuEi6//4r5/67jlW+rmptuaPLx36fancQ2bTNNz7hu6DJFi7I4PMH0MKwAOTBagHgwN4H+MEnAVDARAHoBAgBgJAFoYCsACgEAkDAMwyHQWVFSK5xmQgsYEDMiRmfKkwURgGoJ0P+VQMYQ1toYt+XLssb22un2weTB7Kzp5vBp1feq40HCLrk025ymKExNx8vLRcbjAyo1b14Uwpqg6UJobN1bd1k8Lxli9lvJ6fnmxylcja/rqTr3ueG7cJfWbvtTh8vw2px2trLyqr/P1P41K5YzkZ3OMmV1812oUCWPgrdMJwKkIgECNdGXI/Jwo0gEqI+TkJZglEIaMDQEYqKOBfGWz4lVATktiMhKZw2yxJjhgM0QcMCejBAgLBAYQDpchfLiYQC4ExxRNtyoA1ZCuNL2fLuJsxwqoHJBjw19p+fl5YXo3ytN5CzHz5TK9XR2C//7ksTsgxThpRxvYQVLlT4hQf0leMi+1qUrkn4RS6TjlVqd+d5WJyV527endQSkrCPatq0Vy+6zf9synGEaiw5JxsXRSTSTIocz+tZhJ1tw5pkUDBpNmFsIiFAhDC3kwgFxIBBiYWZsZBCMYAIIwMF6AxDAYwHQwYYBYFQIwwLoAeMBhAGwECRCAAvAwGyY3Eg4pLUkzMZMPCwuBEgMGhlWkhAHxsKANoqAkvLm7SbbMCgf2vVGSYOhXgLFlvFONuhNw9m16nY9XjKQi47iJojlOJkiFN1DUEFyBWUvhvutRR8hIo3f9yc9z0OUklReXtSXa9fR3LPPtxOIonaoFIsf56cpTa0fgn651ZreZmf+nzHk0evP7OZOTDauw2689a7vbDFWrDcb8V/dz2W7KnTlWiQEpZjWIJw+SvKR02UF6CfPuvH9FNDFFGnHa9ioUSAUhCLISjyqAQwetu0MzYDFjAqQI4wNIAmMBTBRxoF9MADAUCYDZMAHArVUBjUW9NSMibCyAksYLT2DMiTBjuva/D5rKsO/LmBZqU21ANvrXjf/+5LE7IMTNSEeb20hw9I+IQX9sXikfBnAaSL0ViOYHDpNz5RnyrF2k8gZL+2U3VtZfh6in9cV/8vXv3t9qEe3B3r7V3/Kso2o5S5Le57jr9NqOp8s+//378vXl68P//8v19yvv//rw/i/+KW1+RX4Rm/acpm3aNt6cdpNdxNRMXW3V2F4oFci7UFicoYWcYquliGvUA5xgz4KUYG8APmAXg65gAYBGYAWAwBAIqaquB0ojrlAQCYEiiRg/4qzojAgygYAmjnIEKif8rXjIVAaBDpcVT08ViGmjYkP7A5YSeIJAaVB3kCcUSMJl0NTgx1DpjcmSB1S1al8U+EHmMFUt2721uq87n6Od8ze/YyIl55Q4eX37YuIf298Kabph3f87e9u/v7nrvn+nw2dttbV0rfP1TjdBtSxVjkWQfUJ2go1RRjCdBMJq8olL1zxY1AwOG5uarHIod5KSXoABgMWrHLzWXgSswaUGSMCMASwQBPmBdgDJgBIBwPAfhh0kYMFiFDL1iR8TDANEhIMMKCGXFUtbqBi55WJwco5UWxXV1dU//uSxOuD2HXxEC/lKZMzviHB/Sz4rmVjZwDp8oDssImAmJRagQEiuFhDDRQmEDniho4mxlIPG0IVjM24tcbvmWN2m+t+UHQPdUVR+Pmpj7oqC1KNQeIF8xEUmRjmvIT5uf4767/v///6jmY72SV7QalM/NON6ntRrypwuzWqZY+xOUJDDSFEM4c54ugsITj7MBoIAkKFbE5i5rN6aisGamDKhDxgHwDeCAWYFAu5gCIAkVgTRmsILSYMJwhnAjCsODQ8eGTGQRiokIDQUYwLyNG2Rqp113zCZtRIjRMA4wFNyvBo6OJnBsIFEIw2dYLjszwey/PC7LD0nFrLxRy+LbLUvVw7VovO8893ZeM4W7Xptb79ZeRyWL9PK3fO/9uez++MJ//f/8+/7jVZX95//7q8/yXrd9/+dMWpkGK8kpxg5DHGuvOUCVOWvzCWBMkkZPrES4qIFZlGVS5HFUy0gMsxRwBbgwllaxMWgCpTAiwXIwC0BDMAjBUiYBEMAFAAwMBamZtgosCAgtCMgcSyGDb7ggq7ZKYmACMqL462Tr28Zv/7ksTpg5kd8RBP7QfDLD4hwf2k+P7L7jX+xnkisPaCqBWg0wjjB8hoSjhpowdPONxlSOLUkeOobRMvzzzm4ibdTz6KtG46R6uo5/4fp0Ls1ipEG+0hOrpkxmLYzR/+9NntqiLbiL/v249uePSqS/W/6eJf7tZ1dV995hqicclQgsrpV0mMIHCknirSGBrOQ5lFIZSYC4DkGBbgJ5gMYHIAga0wAsBFMBcADzQexLQKVAgsZtIhYgqRCgsohoxIVEkAHaVdc6vG8066zjadEGq6zgagsUFxIaJA/GAiNCwkEYYGgPHCWnHT1iDYvQh4i4cSI0GK1pnQZLOGxISlRMVNIOEuMHFjhrijF0i7RlYrQyw+y7OWPQ5rU4YyGjTOlSO6lnmarTfruk+4tvea76r1r9npL/hxkc2i0pnTjUoeJkK0alG7MKiOrOIAfGB9MDipFDyCFQArQw0RHDNDHByTBAgUgwOcApMAfA6zAjgBUhAYw4BJNJuCEoBlFBEdi0owgh4w5WKAQqp8GlM2m22JW2u1Gc4LvqrMswJchBJQkPz/+5LE5gOWnfEUT+kHwym+Ign9IPgZKDQ2BJYkEUJTxo4S82M0s3qzs+h13ju+uelFBCEdh7XCjYhZoihBcmyqWxic1Y9WLEfNoxjKMo+B0Ots4zGmP1PPzc88bQv89/3r/f/8p93PxOyXDxCd1JRF087mpR9D7izbJxGxXLPEokOPFXF3JQPlCGNKCpJuqIAgYP8C2EQauYD0EUmA7gE5gDQGK1owC0CsDAIoyoIJAGudCwIw4giEGmDOmYB0+ZileCCakQtsJjUxQCp09GwJ01H3m3lzfKSQqPxqSPkJQoBlBgNDguJRMaP7LoMYdYTYi2HrhfHZ+QnTQOQPYDed3FzYyqyqMbkXVLG6XUzVQIrHw8xH1zj0pJixKhszVf9pxb7y3K+v9c7vfrDRo68ZNFS0FMx3UtY9RrxFnh+W5jliE9DS6DkPiSyhOHJA0G5hAPCYRATfFWICZQWrkx+GnDhBDGOENDcwgzI1HqYAFJEJg0lZ0OiK4S4z2ofzqrsFryBL7xDxPyVNBQpLA3ppO6jT02Kcm5JhJxz/FvXzz8ev//uSxOyDl+ntEk/pB8tJPiGF/SE4z/RWprflDPsnfFrSP+aX+5tQS69IoKdi9ta5yu3/Gm7Pq6dRQ2MPqj4Qq0Gs2dtD+BT3yWU1L73ZN6d/LGa/OONg+FhmXKr/6BNfLvPKuW6xOmAwxeSbgNRFElDBngMAwb8DCMDQBujBIQFwwEwCjDAVswGoCbDAK0wyNMhBzFH9MMOMR4bM0D3uMgJVnmXD8UHQKPpUTaF0QIgGqPCThkQVE20fGD6CB5JCo62aJwcD4cEZ5sOC7AOWI+136S2JrClmMHYDtwXym5Pt0IjDxh6s69eGL98SHCHo+3JDTMnqxVPSfbSqU8KyT1NpKBZ6/3FordTzr7cFYV3eMI1nj/9j5wqWb8TnC/CGreUKyLkTm028kaUksiRFV6QrsSJaJkAiDjhdMkOTXOCsaQtM9M0OgMhDpZGBZuxdI8oAK4MF4ZyDAJgtowDwByMC3AaDABQTIwEIA0FgA0wFcAEMAOAhEtwMYLbGZwu4dggA0RoqIXJQEZUancwwXjQI8/9CwRsMPYQmZo5i5w+mHP/7ksTqAxMxIx5PbSHrp74hRf2lOA/g3E7Y2yM3J6Dp/Oi7uvUaNpX3Xn37bvg00NfvTuWT7MmNLTakpcsfDarPTP0u9WRVx1ifpOobqd5E65CnP1t5vf2YRrIbV/N3+vH/1m/+//cfDPKrqvkty/OEqSrM+r5Sc2CZm/GNo2kLFz+RlOU07KGzT1ZYqAAk4wYK+oQGU/BDRgPIEsYCeAYGAugBJgUwAMIwEowCEACPMgJGEH0NG6OxUAis1MYeNCFWUjVllo2TF7Tv5seoGmvS8lS3dk40eJLkKhLYT4o4g2DliXPqO8mXyoEeSihHi5NLaHlC6DGL0MunnqRmL4lQTOWg6DM65sy3RxKOQTiDULENIu6qKSeQY4bmmXqeFoczQOhoSp/m6r/+fj+f/qombZFe+ZSVvr4ZNYm0kosdfclsqClmjRSXGzG40sgAKkMO5RFjUbAY4wTME2njAXQYswHYARMALAohoAEEIFeHABhkiE1J1JrPMotb5qoQ6ZTDPjZJiyqsleiSvE9Mqjyo4NUYuQfQyc6fA5gbPEDyF5H/+5LE7oMY9fEST+UpgwW+Io38oPhgg0V9ByTzuHNc/z3P2egfp88vpeLowROJe139jG6VuUSaozPyM4xbWvyJzUuVs53dpKU45BPenOEHTlUc/j8vwxL3le9/r7/37O8rx9f/72rz1sM8J/I1Dc+JKVrDDcLUVslhGK85SKbGmoMwFDZVIuyKCZxFTNlgkMVRAOTZzgIMwaEHKMBiALzADgV0wJMAjMAfAhA4C4OZCNMVMHfQhNDKXQKsn8NATlxmyKiY4YjqY2CUMsTNfFUD1qSupsXXzgujEVc2IwvWFKg+HiBycsOiy+CXqQdyxCIeqvBkoZwurz3TKjIubbdnO7d1Kyly6FrWjjlt09xxcrTKKO01h588plzasvV1N1VNzO6HQtvp0xzxU7rvrvr74ji3nd7WzbNr0z9nEnqolZQfSJL0U+jjypxYbnzUg4SPP00FpKDQkKFpKGg+YGRwkQBqgzdc9T/CF7MP0V4wagGzAaCkEg8zATALKwRjQ4h5WEER4mMNYLAouHQMi2CjDcAEVljJY5Dc069RqMEvxUaj//uSxPCDmZHxEE/lKYNNviHJ/Sz4Nz0l6JbENQyeHdCFQgYZw/zZKue4mB1icbZFED4Hk3VzxbwDRg9ordEmlHajFIHyOcc6w0cYvSy1pE53F3LPUeOserU3/13OXV9cpPffevxxzXzc+0cVS23rH1CO1RaTKQMyNXSRz0HCtPbbu8CcQXHuMkcIwEnGDCw048ytwIjMC/BbjAjgB0wCcFSKADQwAsBjMAaABzP6S+wggK3GGVQ8TEH6DlOwUfkY0zk6/77Hqd1oAgWyuGo1ahvyW8SPEEeg8TMIai+IGHGPgTbbY/HSPGjxiCShjEWM45gzEeQ3rQ/rWJiRJYgMJSSzSpPV+9GOUVFB1MXBhhBhdXUKflRQfRe3+0xpNdo9XNq3wv9RM8//XK6zry0M9attVTvM+kqS5s3pQ4WJKQqTyXQ1HFcWQcyRAGpDCKYJ0w5YNzMCFCGDBDAFEwKkDQMD0AExGBGmAYgBJgMAAiYBkAAi8YZyeu7FTVUewffgo4ilFTEOfVTBor7QavRRq60RVulaXxo6tFhPQBk+Gn28cv/7ksTnA5bt7RRPaQfK+b2ijf0g+UKOF6IeSJL7BPptayd2z4ePPw5j73G/C16Bg6SYb3sPS1LqRKcthd6GZbsVXh2u6zVD9szyGMwnBepRK8gSLeeS/llZ41Hu763ar14df1U/H//x3/14X9r1eXfvx1Wbc+dSucekrs0aFHrUWYLQij2LGGx9lC3GaaNs5IgAKuDAzl40ydsJfMBMBVjAzAEUwD0ElMBoAIzACgA4eAggLGCQeKJ7KzKhB3wQLx8DGElMRB2QAYthhnMpYpKG1bFC2iS2A2oyW/ELwkYWoRxwS4fQHeHDhaC7E8VNDagcNsg6zQLoXkVyelPe0F0CqtA6x7QR2YVIvMQVl4/0ezKV0oLYilmISXc422gUPuRBSMdzNRcKndTcN8f3r/X6+/88+lcb1UvfONU8uKKdnSRyObSuQLVm2fZSDnVJeJMoQJPZTAIMM6XITVPwjEwRAEgMEKANzAfAYMwK8AXMAiAugcAnmhxZgYoZUaDQkBotrBYKmRGLi7kGGDCcwGV4si3ASrXwd9oyn1ZI2qm5sfn/+5LE8oMaifEOT+UpwxM+Ikn9oPgUFTw9HRa0UbFTxtyrIFEdjy5UuiVaVWMFlVyqSDYSLbpSpzslZ5codpkV3ExquN4OaVNhmaf8Ne9apPRSvM9/EzL+tfqZ/i7+Oft0/P/d/z1drU+enzHcry98WyNh91TDHtNk7pFA2Ny6ET1HkjI+bmh8km68m5oYlxam2pRXXaVEICKQxHIp7NlXAozBXAAowPoAQMC+AzjA8QBIUAhggBIPQtDKJp2wkMBYmVgFSvkkPLvHDY4BMaEdNpDVJTNKFtEaum096LtexJ4DyHtYEhwoWItDusaWiCgOInDG4tXMaMLQXK9ayfSWW7e4p1KsMOaU4t/cso7n7Rk9Ew2P45i6ZbpY+bdsnal3vnu2ur+O+Orjb/8/1sZfz3UOfbb5pjWxfFVETFp2dWPtaYNyf7WwUsJTDUg2micF5JVaXjuMiUw4vZqOggzqiJmqAavDLQZQPv8L4wygkTB+AkMAoQQqgLAEDcIA0MDgEgY6vqgp9YBAiCDDAX4MGAesaOSBqMchc250GSdslHAM//uSxOyDmgXxDi/tZ8MkPiHF/Sz4HzF+U3gi4fUB4DQ6gvBBhYYNo42Nu4yOcJQSHYbeyC6MoYEBysMcZU63iUczqHFdHZ8zqUaOEEGuLFIjScVso9WuplVJOVjRFz1diLoVP3V/va2U1t2sro1HurNMIHZDyKo8SYwfHnOKx6GlRRxUaoALoYekn0GldhERghwMCYE0AZGAtgEhgVQAADAKsAgA5gG4EOFQAg6Jh44/j5OZKr9jazbB5oiEAyrdHDjy42xvcwiRKyS5kDzPhhAHhJAUwoMALQWLD4YSIAXGGiGvc2NYS06i2JcR9nia6liKcRRCHPL23GQ1ao8DqHLoz68NyTQhmiiGqVnHHDWUTsglsaaOYakz9y1pFfP3FRp1kcRzGnx3Petv3ygyGWIWliXuKGOw4ZUlIbcj2NYUImzzRUopD1CchizHHOPqAATjYMJ+WvDKlQkgwKAGfMAsADjAAQWsHAKoCAVQwB+J0gOQmlFJAmzFWTDDHhMkAYSAk6hwYviyr7bH3xwYxko1LFZrF+il/W+L8fsJ0SWY4v/7ksTmAxXl6RZPaKfLKL4iCfyhMPIXS5f1KtUegxXoaKaU1nDNMwcnRzDolIzKfTyKq9o4I8FQrBqoh6Fs6apvKUgWKKLIFtx9XsKqcNf0CbzvUlV/bxWBnry3IYzXy4bWTcv68v/7//29hk/mZtwgvLxydbsmGfeW61sgmts2yG1/iNf0f97R5d0ZT7cGgEMGqfyjBRQxwwEoI/MBdAJDAngVEwMcAAMgrDDxI0OSKDYxZjd80oT4YiOp+BQVQEA0SC4GEKzI2vPWrU1WTKJQIspqwGxiFbQ8tNcaKEio7CskoCBKyGsclGUrs1MlUZ2YPJ0KsLfUpDipp0ldEmmcRHGzcxk7LU50Lien03P0/WnnVm1urenspm+r56777/p8z/HxWzrqZ4rmaczrrXhe0XIWw9EPcuqxx1jd8xLUy83LUmqRdG6o7Kk+w0PwOw+44IEzOj2SiuoJu7fMwJ4BjNkCwMDxAUoxkQHMkVk2BU/EBEGpkLs2AV1fTyrXhhiqYTenknTZD+w2XW7fR0Z5tLE5UfSyD6y+v8tPu5qm7Pr/+5LE74MZifESb+knwyg+IcX9rLhXD/L1OLLQx1+rS+O7N1ZhXTjcnXu5c5yhcoIO+kKrpX6vpyLYxJFFfHXs93//ftX8jX3P/DtlUo9hBqx68LCRg0RWpoZetLSIszcee8DDEa5/o4lwOYMFfB+zBvQHAwM8LIMD6AQjAWQVEwDoACOw0DDC83djDhEHnrEAaiigCakOEgyZmNiIDGsxvSYhQ6oxEoC5qN6ZoyItqCABvlVtLZ6HMISFMVF4PxOHYakENUAUDITFAWWXyokmSRtOml9R80ZJn0koXr60st8TMJfRaq3KS1LLulkxePKFeXG1us7Z5VZShHq3Vjz57vX6rLHq8VUWuuVexF+W+GYJ/2pZnK7aZ+Z2lI+a+bt9XspVr2JpejHLmZcQ/hgQ0UHn/PoSg1u8sKxMRIiM+Yq1o4JRIJITtiSdLHcHkzRG7AMTcSiEIxYBsrQC/TEIz/Q3BwEwME/AcgwIbMDbA/TA/AA8wCABXCAF8wI8ASMAdABBIClQvA79r5h0RYBGQKoqGxBDoYOurQVCxlj6f94s//uSxOqDEqlTIm9pIcPtviDF/bD4AZtLV80vpM3fj1fDVZ3cG99q81OSSjguiejLOcp6Wz8R5ETEXDYwKjQ2MsQqapsZsoT4ztU0gfA+ZQdsyKxVN3PLRUON0xrxp89VaSPzM7qI7m4obS6c9f/U1d7TC7XPSIqIjc8LI29r1d2IOsu2EwgiAUS4mlRhGKESLlOLMwHDzghvCpBgECjBwrJ4IUk0JisiHnIgAua26AZDGZFHscMHzMEI1+gIChIYGXkwcisBgJPhnkdkkiURwziCPDgTgXpY3JxGz5bHRc0MqanjXqy8fpB405qGGpSP0XApiWElbrOm5rUZcoUiwvdT1V540gQhcVKhEcY3OROIuFwg1Q8fAC1D+GBH27HRcYHkrVLz2l3UfHLCt7jgKBBSACdDFPVSs3ywI5MGjCpjALgB8wJgAcMEBAAzAXQG4wFwAAAAHwYAeAKma5yI8LVr5uxg6HMkiFQZpCpIOB3NOZINfatSBcLZAxYlDTCdDzO1YbpXdq64lWAplmkytaGYnkQvEQg6sevzVD6UlzzECv/7ksTogxoV8QwP6QvCQCLjze2gOJshrGIoEU9BLNXGic4DjCfEdH4aVxlS0iKTiWb858FJpbH5ty45UFxouozreUXdQmVsKSqtDH49ukJc50d/Zlqc6vw/05k5Obl5ve7W5M0nr9u2Z/M7eZYeuuOUa/mm2moaIRcssTOY4T3bydojz3y+6raT4fQrnW0jqAeJ3Vh+Ux/bgwq9LVM72BzTA2QYYIBVTAAwXIHAAxgCYD6YAoAAnHpg0EDIj/GoNTA8xYAZICyEafpjjzqFqcvG8zZZOxis+zyLBTkF7ieAcwHbBCQKkhdw2NEzCYkeJIneScblwe5mIlVCdRrlUIMiG8aaaSmOoRRlDR5LjJGxV+imUagrB5dwzq+W0MexFiKTY8r11meMbxCc1VT/ffc/9d8wqcdVuqJfcXz28tLFMMR5IgaKOq2TFTFqps0MphUfZgNMUiQAqW2kw/brzTgEHNLkAF4mbrw9GgwJGgsDGqOJgYXDpgoHtC+mHgd6lOmMvVQiYbNB9404RmRGzDWOl1u3T6at/PW637n3Ol0up6r/+5LE/oOeSfEKT+mJwv89okn9IPlWmbZWh4VGGp8geKNX6+XU/imWYUMIWo6kxm5CcrlOC+7tJ9J6sVdnTcc7eNblZVZV+8rVbp1fNlv99hzv9D23sTKxNYplckss8ckaCoMBIEwUPgDfBg08YKYL4GXmBIgZxgzgDyYE+DImBkAGIgA1AcAPGa5BMhg6MS7M6RJSZUHI6mFDT5gpxLihzopS5Cdr3KOwqAlOCwBzKMr3tysQfkJ8iToUIZcgFhdcQiLpE5UX4oPg5fx3yfFvD95bbVtbiL+ajQ4xU4WuW2WRsaq9HRe2ZlxxOfOHzKIuQXU3MzSrGIS8tXNLsQLYXn0cEY96kdOaudaBmLnd2K/QY3+O72fuVmk3nbd1fnJr1qzWKlpZvanVrZhptmtrw1971mWhsZVm3sD3fWstaBSYoWyvoTky+jMbI8Et27q6ABclZMCL0U1wxSwYcm/FZi2CZqFmElw0QmGpa+DCRBxDCxO4WbgwtC8IYDr6EgG8FhFsirpjgWkcMDMraSaQzbTy2W5kpOZdq/zSNoaGeyxU//uQxOwDE71XHG9tIcOjviGJ/bD42z0GaTZqLlzzIRZSz8VSyqFHmmZVL11D07jj27nPVWVojUeztwnSq+kjvWgvUlCEomv5Wip+ZnqpY191Ed8/3/9cVVc1zXM9RFsi3RW5Kfhz/dMU5XuLOshr9j2w+7mVAB7gwbxk/NI5CHzAnAU8wGAA9MCaAqjA6QAEEgS5gBQAOe5EZ4SIL8PmudVzIGJ8m3L4MKKHQgGbsyUixl7Gq2mNtRlrHkdpBANp8OmfE3ROwP9GbRqhG8BQ1Gljnq+ks/K/lMmclCijUGC94oPSIw1dEhG3KjmuP4ErsTWWjhliPbL4q9OQ+1dNpXZjgfy+msL+UZjKbB1EX/lqGWszH5qy4tmeZvksZPVl+rPztpntzrbvW/Zt9Mg3ZzL09z3/ve9ViBeqls8XJG2l0HQvPMu7c8WwvYkrSKXkVHqGJzUBDClErE1uUFxMD6BlTAiwAUwCYHcMAjAGDOn8oczP5IBIRiCg0IzE1qGEj7PTIg6ChplWBDlpnTJ3xXAxuWKzyFhDVwFwiLLBLgfV//uSxO6DFinvGG9tYcN8viHJ/TD4x1QCTJBQSEC945UHDTNEzfSm6jVpyF5KGG72zHe1TUylcq6u+ZZu2wcpd7ItW1f/i9iL2IrQTtfqW3Sp9V3Ro5V6j/+u+eupnr/+eO9vvllM+pVm6iJbucebZ11JqUtdnUSlyjio8iaqoHmvk0zdhilC2aUSCcwlpEMdPOKDQdBhjhN2bK+BFmCTAro0EjmApgbxgYwAkYBIBDBwDMYAaBcgQACPF9C09rp4APLwIG1gzdHEYpkBTKMUpUIaO5is9lKSFIEbrxWJbZEUARsFqAnAzY8XUOHkz8T88SgXictF2eXtbGuejL5Daq36xXT+ZtR8pzuHZtrcv/Z+HjcKX8vkY5t+tT25Xim/5835PwqXz7fr1l/+vue9r+c/sqqNeF76VXiqxmMRzEzRDk/dpMCuO4oqjYfsbNMxbnNQqSipxU0ThFCgVTiDpVUAqS6IxQh+DpLA0NuOyuHAMCLLoNKlQGKASPoCAYPBQfZS3m0NpQrdGCIFlKJQWTFg/MDuQn18S6fW6vfp+2OeS//7ksTsg5l98Q4v7WXTLb4hwfylMG9779dXZyT8uUolxirt0vT0q58vi2QyvmLW6BTDMJzfsV7q41tnJotYgzbevyCJXHxvXp4skpNVbUHEGQeIBAUFoZJM07Dn1GHnDtYmveket41CAgweYi5kxLRXaOOzCGjB1gHowj8AsMCwCozAxwC8wCcCnCALQwGsDkMBDABDAEwKJMg9xxmxgIDsBqWIHQEkBAzJWlJiifjLY6UBUO7nkoRiiCBVy2adrdM/Gbcc2ZdZpUDxgPS4YpA3IcsEZu7fHCMq8ePFWpX8tPt3VWdyPXoJiQSDs8mvfYMZm+rcVyjbcmKHf3btztktV3WlZXcoxHs65X7zndm1m2U/WJe2kxdSfzpma5NOtLGTafvkz2MwXplHKtflNVxchv5EV7GdV6dp9CfhkqlovDoPbBTXFt9enSEjnCoFROXoB0kOj6AvA6PrCgAC3EDHm5qPgkTwwpgojDBAqMGoAUWFWMBoG0IAnMDtUoMKzeUij0QqPmghO6YQjccWVQ06sGQPcai+Mnep7FOtco5TeDr/+5LE5wMTOSEcb20hw7a+IQH9MXCgxhLg3xDYR2C7iMNMxPNzjMZtQzFLEXGZnfb3DyDIlHjeThskyRRmHUkSKWJtZq57nJ6E4ZoJXPUmGGRKYqTUiIQIgoNZOL55qbnnvjn+oVOf+v6iOI4jxlXPGttUa8dwjY9BpD2VCN2rKULoTI4iIg4mqVIkOAAG3GDFW84OXMT42K0NDODKOA0UWAR4TJQYsCQiUEiowUayMUCI6AAB9BAALRCACkBtIJkQaRDMyIMBSIQwcUNK6N8oyRpSpKirNaV551KUt++i6h+1YVmJZJxi6pcYrzowzZb2Xo0jv16Xpbn1XqsYez53pkMjT14PnC1JZBqi8VF/E/DGXDmRtuK+Nn//H/9zNfxun53bHW7lsW/vm7tNlumYnmLSRtu+0rSh9FijkQAZgwfB/wMsTCmjAZAVIwIACAMBLBgjAtgEwCgXQAALDMbomWzI1gOADQTRoABLYKEZKy8xQZSeMiB4ZT6eNUTRqVRN7oKTYkStDdpx9qNTGaXEORz8ScLNBjENkjqGjh+/2RXj//uSxOmDF6HxFG9pB8LEPiLN7aw4S+t9L57LUtTXK5X3kN4po2+hoxzVGdqsLj51yRlr6Zk5PocofJJgmBqDf6/sTM0yNqNr59rG7W2CYLN8319b1/aZ87r2d1NrPfm7e//9pyz+d24tyKJdK3IdYOTyqWO5wxKw7j1lwqsKlVqUyGM9NoSyX16aA+adqtQzOhgZzk8YEGEfAUCiMEEAPjAbwJ0BA8gCAfhoCYM/lRIOGVt8THkF1wAQSswcadkHKTMgcpv2mY2GHICb9R2XRxRhn7HK0mgO+D1BbBJoCRFXE6wbWKrGyqUat/PHdUeUo5Rak+ru+ezuk2DrV/sblwrpde0+r2fHyhnq7vErSd2Jw+w2fv3W01TVS+fz8v6vx33n/n//v3Nz5///L5PNxuSkKvbpfp/l5QVptFOtWInp+aE0iKqiZKcGTkJMHiA3aMxKtqbONOoABgC6p8Y24DCGAhgGIGB2DAEwU8wDAATAIDyYAAACnhmLamsoiMIdqwBRlBnDtgDMFZRkLTTaVjnGzthsUDHVO5DN0UdvDxwP4f/7ksT5A5wR8QxP7YfDHD4hxf2k+PUCvD3FJKkNuco6am5HDaGW2dRem3XF/UDhtT9fNt/VjKSLdtP6apxlqt0NtFZV+Rl0pspxNR/H1XHHff/9VM/z//Vd1TR8+OTWPq7GooynSIvl7kapKqzidilQkawkFAuYpLB6olLDoP6GKeHweFHkEhQNgENyMmEL3McVQfhgihNkQohgNBcgYMcwDgLRIDIQAwMTM9BXoNjsggKnCEn/AQcQFmaRockgWhi0EwigbM2Xk3jhZEuZYg2KYfYh4eyKZmbVT9TQyho4J8UHn0K58rmWowbIax2ao4bFoNcMUXIlxMxtTQ3UZVMwvYiCqLbUtarjYH05grmNPU6NdQ+sJPdT9aH/3z1199PH3U1LxP1b0szTlQ0zKd526sxcJfI3V9M0qXGqQCBVAKkshMNnL47IAxDBPDjJg2DSSAf+MQ6DDxnw40aGGdcxRSLFk7g0VhwgBSoIHy+GpqB6EsVGBEDgUnyK8gNtlVFFl8EnKoI7ibB1RV1TyZNLHLGJuWrh+OGtEFR157PZnjn/+5LE64MXxgkST+UHwto9Is3soTFIfYWas9j11jqJueWJJPOIuOLrHkIuzY9mahfljaaT3npOprP0Os4dPVeehnEHpZn4Y3p9Ovmluuuu/6v+L6mbZNsfbGS5iJ1zIru+XN6OMZ6m7SinO6dUutkFSkHWvOvMLHY+jgCAXYwQkKRMBWAAiqE5GAygJhgFYHAHAQpgDwIOCgGQ6FQWTHXLp4GwIO8Pi0+zNLVZQCkiJMUgkeHZlATAoCp2JYkgFobdXzbtIxojBeIXKRFuE2inQYWDOwzgGdrs0w0lAuilGQPL/FyU8x87VyYmVmH669ZtFeNuZ9PdCsm5u9au77/Uzaa9m87S+d+3j2jVrTHVycynZas/NJvPN9k9Mz2/P0tm376TO2tStmlDdOu7VqYnZ/FqU6+NSbMnp76tefQ3LVz9FeIH0HG2niuuagStUJBbEIfyuw6PQeCXUS0wlUzcNqoAjjAxQasIBAzAawYIwNoAQMBJAOwUBaG48GeFmzjExA2x9b41Hh0IqOaacdSGuAtYXO9LWHgaa+DFVZG9UTan//uSxPeDGEnxFm9pY8OaPiEB/TEwMvf2TkFQ8nwpxSxbj1jrkdjSiUteVlC3WVMlDxhRTd0zO27P8wayXWvL2cvmo1XpMmmanf2+ltuWVbK3dV8fPO2D0/zx/331VfH7udveznrjj623apxxvdtYjvPMp+hcpnpYei1S5IshJp5GTREveNrz6TYPWO4dRSVD4TSkejrClpDB2Q9w1SQADMCLAtTAuwA8wGEA3MDcAAzACwI9KE0uwMliOfFTGuoECEMWBzONBj14gh3F17aVbJG/fCqp1Xaq+fJPJb7jgkHg0HhOoSWIODSBBgPcROIoZUjnHDLYcMsbtQznTaQtiJLdx9zRSKPdBBYfT42y6RB8nwsD4mTqNfJu8mOhjjXqIT7/uf8d8R1/xf3PH8dqo7eLlnjS75kl7hHINcs2i6dzVQYUo8WlxI0iKcceYMEgzJaBo40QRgwAWkMHTEzzU9gGswIUAqMDZAGTALwUUwG4AdMAMAGzALwAUzvcwYQ0AwaFjMPExoacAyyPjztjIAFSlSEchu2xaDG/bE57G3u1J//7ksTpg5jx8QwP6WfDBj4iCf0g+IL4GVCYwJkEQeH6hjDuQbWJ4L6jGDxo6RwxRo4MVViHusc84iIXQ5K79RwzQTlwllukp1fVQMgePMg91pX1ufNIkYiRff1zenVP13Pz9cd/8r/z/PH1dHRcV1WRVnSxpoiFEYyR47yDz7GEOKFmOYHY0mA/OGFWOF6FEoBUk0JhvqSnTYCeZi2AKrCkuBk8KGhMDmEDZQKAkKaYBAaToCb5fuohRHEebghuCRYzBkoEwyPg8bQ23otCqNy8jFdM7nH48auYMHCUwoTCSSbly5qCsP8OofFVvN6irPG2MclhiMsJ3aSgaPJ4D8TSsHluNhDBJRYiB0KDde7/ee4+cfx1xV6f//////P38XbdR+O24pvtU/5lCqeR8DUiI02SZQ0WABSkZMFpMDzQVAMUwF8EmCAK8wCgAvFgV8wAEBgAwBYYbcIAZgWqsIs6W4KlLAOORsxIOJg5NL2TSt3LLVoNi02x5qutSOhoovD9jMxuI1BB0dE3Xwx9uk5Jt0YORLw08liklPDVpr4SWS3/+5LE64MYpe0QT+kHyps9o03toDnUZ3Cup5H7E4fegjBEk3a7SaeoaUebwikSrI2G1Wn6ylR5SJ3JsTaSuoZsvsmMycosQzfsZT+T2v7+Vu1cvlyhV3m7DM1jo/9nFuvOrn9UleTpC5STjaTjTF261oyadFReK2gE1Bg+Ks6assCymBOg9AGAaDAIAVwwM0AEMApAQSICwOTSGywZYHkZoJKV4JUykDT3EMcakwtchKUEYVhdBwWwskU7ZsrK8lyF1YOUFxCbFBsMnwvE/gYsGeWWFew7osRPpOW4fwPi0jAiYWUWwriXJ6E3jVecnyfJtVsq9aSz0eoXwnUYJJwQRHKerK4YpGMXKmFmF7XgpTUYbO727b1q3VHY1OvVTh9rP/X95VWslClXTrdh19RyY6OoEmGeYN13its7IuUHGyA28/T9VkJBQexdJSTCoRZNJhUDDBmWFM0oAFvMCXBuAMDgGAOg6RgDAAMDQLcCABZgDIFqIQA4E4C8gItK3GSJNOFpDrmHQ2jQi3+VvlSk5crXOKEs9aY3VVntnzg6Yo6k//uSxPwDGbXxEm/pJ8NtviGJ/ST4ifDJ6L5C2IdE2BrCtlPdTpClJKaTabkz3drr+5Dz7MkPl45L+1sgrBPKtTY+tz15wdJ+NTjOCv3NQx93mr3ONT+f/1vzNj9+/+p7/Xv+cP8jcN7EfLxjGosMVG0CTUE6ZXi40nJps/UkFGkTExksj6S7B6JU6TDht0xVYNHRVkickAGuDC799OOoNUwRwqhYWkwLwsBYQgCAQiQIZsTi4pkvoUmeWs0eLhI8lAggIxBAVV2qGApuaklDi1DjVsZP9EMsSMUYIQ4JIEDFbDnKxv/j8dj8fI6R011ON2sbAhIISTtMdIZ1JkjoHtb3G3ELZCk2NoeMK26x5RynQPlHqr6nrido265j/Tjvr/+oSL7+/44urnirbHJCzVcnDE5gnO+RlCJcXQ9HvgVse6K46LYyx0qSLDYAJJxAwKlJjMecA+TARQDIwOQANMA/AMRIF1EACgJAGxgAwDUXNM3y9ZyapMDJecHVgcQvyIV6X7YZrYc201OSN7BDUbsn+TJUc67JdzTnwOct0+RZnf/7ksTuAxoZ8Qwv6SnC1ECiieyg+Mmkmym1Zqz1nk2U8t8ZzlCxuJedTTrfP3V0zRnTfbX6VbW1/sBp4g2Nh9WdYqxqDNvZHk1Kfnv5fy6X9+vX/+77+/P6n/8l6z7fhf9+8ra9eGVOcKhcb6N6dZiMpW3XqdImFcUhFLttWzJFKSq8U5GkZYwMtu7McEBgTAUQKkwTQBBMA/BdzAsgBkwBcCuMAmAADc6A0sYDEW6C9hYAApGuGVLM0CiSdAJzqcdMn3Bj7vW7zRnHU6jMlk+4OIA4RDIXtFq4htHmR3tD/JEyTrwfy2TNU4qyDKTJVZP7i0eM5ZIid3Wzc5fPw/Pa79TuH1HPdSxSGTL65+K6hr6i5ZffO2puonn//4p3w+2sl76l90gu6ol2cg0/OS8/J9YtLFrMieoYHiooPuJRk2EhvNDxoblRnmrCSw4Sy2yYobk+DQ4icNzg8NgEOgCE5GDAp5pMMoK8wAwlzBaAZIAyTAVAHBwoaemFgobCQZNgwY9koyHjoWCz4yF6WpxdyrJNwNZez2ziECZcOJhlQOH/+5LE8YMZCgESb+Epg11AYYH9LPgtqPJHilirCll2V1xn8a4mIVBNI4b9pcmvQYykhie5fMzGEBxZTLvOS7Y9YGn25pdaiG5q1xDS45bOhR4yku+Jia27lomI//v//+/mvT5+J++71WL+4+1uVm4ghx0cxCeuOezFtLJhS7svKHiYBDAB2z0xPMFdMACBcTABAEEwD4DtMD5AIx0CTMAUAFTJocaiSBhXOZIPkQeYgKMSKpZCQQRSExcQqLLqK5lLJIKay9bXqdLKSyCbkw05IdVFwcNjDxpAD1CpyCxmp9PoOzJuoybSjbk4fa9Yns4l3SjDx9Sfu2zjHY7t3v8P4Z7V/bvxz2lc9u4U+Gxa/r/auP8PtevX33/WV9nO/u772WZWtPzL10bgsWdck05Rnja6yqNdEuePIoGk5IGUC6h5YRa9CiSiRKE9soEgUXc0K1jkSc1YnkI5oxDVAACUIMAL6c1LwqTFME1UHMgQBs7MKRQwvMQOBYhAAAhcWCiODwFDoXC7YXCbQKCeAhYXUJNhMxBgik6SMrSnmTDMozCn//uSxOgDFfn7Fm9pBcNpwWGF/aT40faYyu5DrjR17dr26F4ptdxxU2Uyi9Wr4+WyzXqaXY13v974OxaJscLmqJH3vRzlus7tpNYsWn//qeOOPZ/F//z/P///UR3s5dDLuXW22tmNx6HPbHTD5+WynEsheqb04uNzr0221BNzTTXPqFJVwwFJYvMpRA5zAOgMkBA6ZgEwJ4YFCAEGAPACwCAigSBJEwCGYAKAiIEjz0WKALwMbFWzJSZOpsFNaq6LLQpS+kcabEVmUkhjtst8HTh8adp4PzGdQHyuI477xbsczalsW1X7vssr2860o/yTyNZ5RT7FJeHNd2QuX8Pje7CeypeeT27TuH3K8////fz3e1/6jW/f/V/c+bl/zmn99V5eNJLQgkxqsJKtt6+NpsNHb+lEc4JvnZxJlESmVK7mNjoWUJHLM4WRzWmqQD4eOHSSyFUEuXWkwEnXzRNA1CCJSeJNiXhAeZ0j+TAkEbql9YPVQ61fiw+C6fNUXsxzND9Gau9re5Lacnl7mpevHc2uz5032aZixT6z79qvNM+NdP/7ksTpA5Z+BRRvbWHDQcFhxfwlaL/b2rumNJ4K4qmgibgy+e3JHrSr69f7ewnGfl+n07CLkLtBscDwWMKWVb0fS1i1gKBRQPdClT5wDWk7RpAy948HjYNhM2AM6GBXM2JpI4HCYDcBsAIK6MAlBXDA9gBgwCMCEHgJUEgZpfw0FMWVGKvI1GPKtBModfszgyBzOkvSwqrBTTRZpPuA1LnSWvHnn0+aY3gKBAN/Ign3SPCZh3EjeL2NTDJ1LFTiTfyPYs3egXwx29C7X2DYhKEnQUgyFxCmPD32sMtvLU3tBTdVTY7jxWWH4VThnakykcXspLITaDKuf2drrU9sWvS9Pb9smdvmbO5aaT1aWh2+/F0vu0bW2Ufl+YsoSp0UNWYFis5aPTJa/yGtjWPHq11AEJcfXOFp9EfkJCOVTYek0/OxeoJHvEom1E8NlQEMCQSazPbwIkwDwEWAwMMYBKAOFYHoYAyAVgoB9Ms/IwBhnwcGBSYrCGGAtSFUVwSTwkxQ22s/jEeNOmXqmVQTKoqeFTVqAuJBFDBxYaEo8MYhGBL/+5LE7QMSTRseb2khw8fA4Un9MTC4goIdLpZOW5cmZGJ9JO6763geUO6b0nuZpsbK6a6RfVxpPnxY2+2pL6a2rpXiF/vrrnr9/qOv9Li/9lmJaZmKsd0tlrLQTBBBUsSKjBpeMogzExsElqJxaiA9EwwpBoOKcHBkCONEMgRFBsLCGHIqOEooJQAW3GDBauJOx0DswFg3hYGYwCQhQMIKIwUVemAgCRUwpxEkqJ6EZGUQXEzgsFiwNBYOJ7rbfLTq0ERmX4q4XJyVlKAluGdZWH5mxht5/zuY5XC6N5BpdDFF1Q0tPBwErqrLfbLiOL5Dnae3p2pm6PdQ0unT+9vrHcoo1OgM4p2eM1/1vDJNmx9yPvi+3/b/P///3//xvW3mt/sb+37RrHzLE7hK8zLP2UDsUUo/CgIo0KTMo5mKKOUeiPoEYFLVMCoR/zTqQGEwC4GCJgHgCgvJgNgAyYAUAziwDsCZwFK5h6WLBpiggPDYFG3JBxAzcxEMayBB+2rvq3bjL7So7aWUwnzYfLr2qnio+RCHRGhhDqGQh4hHjBxA//uSxPEDGSIDDi/pB8L5QWKN7Rj4W6Vcrg31YNM9o2Z52H9PqXWZoLVUNmYj46t1J9PmY7mGX8TRx998On6jqerU+GVU1tuerv+v4/uN1uni4mV++6qolrDU8lPLGKuSQg0RSUaluOEKeQOsLTRFF7To9oUgkbDaaGxKD8qO4miIoAkk0bSx5McHshh1EcApyWAwPHiTlDATBAPxQEgIAnQgDMEGKTJNj6gY9TkZk/C1YsgmjBfWsSg+HOQvcxuMXYxAE2WZmoHwPx0D8cNHiFV2VU8adYyhDxFzpSD++pmTCRHGGrWOnjIvsZQl4s7GS+PiZRkkTjxWSBgoyUXTvCCg14Pk1eNo5GLS+tpEw/NP1H//8/HP//3a/Ecruw64y6rnluI4XTp/2Wb0qz6e8oqBs1cSUxc2NQAk3GDAYi7s0AUALBgD4RAwBgCgGSGApYE3EQoE8QKAMIqGgRgzJQEEJaTEpuIlQpPCEnizvjeZOzceG44pUA0heYvzFi/F5CyR+z0W1nL8bdlygTdFy9oOf47qs0HhWxfrjsDl0egza//7ksTzgxpqAQwP7WfCqkFjDewguKmLUr33ci0SvbgpmZsXbaphQnkrhDiTJ/JLslsV2KR2KdXtIV9zr6hyW3KHye3Ve/8/+X9917lv93KH251ak++ScPV0pNNmGLSg1GqthE/N7aSwoik0fIXMIEH7a8BIVLeCcUb0wo4wJI39NUlAIwAAOjQRSYBMAZkwRUFwHYeAWDFfQ0IYd8TFABDL1gUy3phhyojBn35MQUkSmnr/4wb11WlC8lCaWNVJcoOnTSYdSDiwvZ5Q+uLFXHdS6fO870Em+exqparUf6l7mY5una69ryh+v6qOVsZyzfXlKoTvIbc/mS+VkNva91kft/fdXVVfr3W///+VZkJTus93LEszHTl5/Y/ItXPdth6dwJsQGkU4qkjDTKOaNJuKzzKYlLLCkNgouIjrlxOw4geuKw0bJ4iseYQlVQKbgwTIpQHm+FgiRoTEwCgdBIUYEgAlYFBjGBqoBZQJARJFouy2xbJzAcJLg4eicfjye8u29qu5ccfsg1JmTdAtZWMH6illq+SupzTNM6Uo8dxrken/+5LE+wMaAgsQb+klw0FBYYH9JPh9fPH1kXS+Nl9szLkujpezOznt/vtnmPboVF7aGFUulyptfIbN//jcv/N3M/+62t/9///zJzv88/ax95nu597v18ip9xZCmTJ2nBy59JvhoK9wbixQ9ZMIwGhIlInkzPzoWALSGA9F5Zqv4AuAAT0SBRTABgTwDAqQhAixoA9CksDAMKIJQFgVADAQZJJKSE8dAQ9CTDgFz1LPX/WavWYvWZDXZlhK85vR7hEqYOE9i8BwsfKnknJPjlSOYlE7pzCGRFJFaGnXPtwhI2qY7++PrfHUK7RxhNqTEMY32nJLVIF8YerO7YauSacvJlC29hn/fDfVTlONV79Q/zPtXX/+f/f/Wwnq95q85K6xHH88cYqEYtyyexp7DUC+NNKw1GvSK0TBBJYLDRAQtkBJAQzCzLR0SHpAeB7OKAMMBEJrQiW6MAKBOwgAlIATowA0AEAADqLAF5gAYDQRAN5i4UWMOxqpjCxQBAWcDM04FpFGb8czbaZsk2vbJevIVuFJqJL2HKF1TVHjjzrjmHNv//uSxPEDFtYLEk9kx8NhQSGJ/aT41k8nilL9bFcj1vO89e7lTP37/9rxyeyhb+xeVteMp/cQSnlUlD7f3/wr5GV/PO/nr/36//l/fr3/GW/y/nW+/D4nlVPLqpRrEtbgzat3exWOpQLkuLpxLnTZA5NQ4TxXMuGxtlJkpI8TzgRhKMk3NoAdMkRYBr0MB5wcF53GAUG+HA/iENQDBIGAAAGTArAocNaGZmzCCda4WFfMQjOYKHVh0+q9uTzYP37v+1bjU85zCc6uHKGljjdKwxZ6inAu9tgG4H6xHRfEOdBbxV5O1oyA/x4bGtrt+spCEj1XseX/A9+xcpu76xZeRGw5Hehm3//n7a3fW7f//7vzt3yv+z7/G79LbdmnzYnvmZuFrK8UzFm7uyVt4ao5yRVgZUGKSPBn9pJyFdZklVnBANAwMbUBJyVgwEF6QPJsYAwSYsG+CQfggOgLAYCwEwjBFL1F/0YUAhEIREi4qedLxzhdyRP18O9hzN/NP3m7mru6rO7FJloAahVlBwMMBWBf7fzcWLcC1HU6PsCZdtpLUf/7ksTwAxj6CQ4v4SmC7sFiSeyY+NC0whkDpbbaErHG6VBVsp6OKuYeZVQO4MTRYQHhmkLvCKS0WvSCN+Z16jWq+3/+Pref6//7t//9/+/739N3OnbyX3Jel/Z3o5ibIsmuY2iaiUo+9eidG6pn9EB+MDUr6pMUYBkZhm2sgExgEQFmPBWRgDYDgYK8AAAEC6QGAC7GoAUc6461KqAIWSAMIBSgDMSDV7mKgC3Eqb6VVRY/qB0qclZNP3W95pI2C24RYG2lCAj2I0JQQvKVctDyFGk9LHZxNKH1Nb6L79X7ckxD+PH5f7ptNt6dtbXf3OnNYtWD6vyxO5XJ2uT/u785Wv91u7Z21/v2Xz9+vzt+ntrS+XyZy2W6v4/Xscaeq8tPIJVmJzAiXtxr7MHyQx5fXKLz+btGbBTXPNwma59O+2gHZbN1BLRNQHxiZmhwpENcFZMcRiEiABYDAAh3s0AEASMAMAHiYGKAICOUAwhj4E7JgJj+Ja0oTLZEyJCrwqLYiqUtESMvZ9tquLkbcjTYbFJo+QTGnIN1UobBlJnmeZL/+5LE9IMXvgcUb2DJi4TBYQH9sPiWpUaupqamrvpDdVX/S9N0dKY42b9ntO992tL3M55vi0JRanEwlHLY6ijttav/f/P/X/P/z//31fH7a3bGW2puHq9w11zLfSWcfdRLOPMziB9BWzZU2uGoG29I4u0+a2cOPLjhSalipMHeqTCgxTNCD4ICck1IEAsMAKAyggHKMADA4QMDamAHgFI0BIgCkHdRSUiUF3qEIkATzFgaZgFKu4DDEDLL0vDJl+md7Wl7AdRPc3RLYmsIUE0opyOmkjxzpdLb1Z1YWxPTupan0vH1TNy5FpWlZM7cquMcqP22oYvPHZHdW2oJXHp9WdxyvubHZZL3Ww///z+r//+/K/+X/45d7coyzP8k3/cKnc1ZNokcqXq0ZAZZK7eRLkNt2y1akxV6RqpLMISyhIKQPJwXR8REpPSjQITJB/g4kApQsgDagAvXn8KBMMaQK2gvugLRC6qPDJAyMxApMUBAWHygDIRKcIBeJoGtnSCbMBBYI7QTLBw4CGQIsqglZnkZiqqUGclitKPUpS454qFn//uSxOuDl1oLEE/lZcM7wWGF/ST4Uamay5uXNu9Q8Y7Ifq5Vx8X1vt9XByFodNNtTjq4iLlffK7riuP3J72qR7qvndLuI/quZ7iZ//4qtt8U3q7jTjiKPpfsuHbzRqqpojSOpMqnZNDpakuxdQrJx10IOs4Rz5cVGjy1O2CBJB06H0pyWAhgDJTKad2AhCEFAAwBcSgoJgEwAOIAHMrAGQTwDt5iTpEtAhAoVFw1WlrEmxCackQHYfb7ja0bz1m/2u7awuEVyh3oJE+h3hFc0khsckLpMU+rT9Md15TRzU6S6f33s/WlOn78a/3Yf+rj8+/KbnXxTd6zvv3zlK+xS9zy9h55Df7yvD58++/8/u//v+7sfer/PC82ENtVhWS0FYB/Y2tm1FiVM0sbVJYrEZCPTbFECHUxabw8MOIWXEMJnA8JADIVBAhA2VMFEzhkUHHVAb9DAPhfPssDQwCQ4AEEAMB0g4FcCAIkwLYJEJ9yDeNliyVCiMLIVIACpMHBYZ7ms5OluE+8vXJ9rXyLs9SGa1oII7Ypuj1mtdZ+Wzzs9//7ksTtAxeWCxBPbWHDN0Fhhf0k+CcTmnIFXVCOp5LI+UUekGpWl3913JPTLJpJuaBS/tZKUpy9Q5qn0jWnNik8f8pVJWN38ln3//Pmeq2v8u///v9wzPfvY5f+beQtdrU7f6hCOp3VwZYmoZOMKLU0/W216cojlFGpDpnIEhfnyVkyZISIL2QXAk1gBDAKS3M0qUBaMAnA6DAtgAAKAh4YCXmACAHxEA9AEBHDAIY0TI5A2w2AGAVEXzJgA4q9gCRZi2tsLsON1h2C7url3IMJNye1FdRXGNQHqixTjRSRxI/t6zcwaoy2HSOnGX/xE5sNE091t3bY+x33NH6pNRczcQqdJelzBpfM6L98ev9fSR/1/P/3FRHUt0kXGgwfI6laHQkiUHEx39EMbMCcOxVRcOxQOnCyh0OD9Q9D5zzThGJDgFpZASoIIlUGVDwQsBosCBQNGE4DDAdqXP8kEwwJQaA4ZQRBZkQsYiBkGgChUGcHAFAQCgeAOCoC5WAYIwFIOJAGYJKgDGx0BeHWV4u5bcHFnu2U9ZlyL/P/RfPdk/b/+5LE7gMYugsQT2UnwyzBIYX8IThD2f+c+T6kO+qNexBKDA2R4yDLBSXaywTg1Izb6usjncqvI1KZYQw6kcW4pu+zukrHf96U9UYn6Z0rzKzNRzFU6lzsHO6B0czAQoV7RKTmQ2JLSwxU0Z1EeJERXdcgJkC5NMHBtxRUiNEqrREGEcU8rGSVQAvoMDOzs/EQaDArAVGhpAoDeVhkiEFgSAsIAZwwCwVA0TgKgGbooS1mqWotlm2SpmrfeWedK82S+3DBlXs93LMJBhPRkkIC3OazWKJ2tlPbY2HYXghI8NAwuwJA5n008C0HkIXR9KPgzDqMYfxnXollJmZjVvQe02x3LyNfHzPCaUvpURlvv2Hxpfx723+a2Y9R/zx++ve3VeeS6+UvJ/iqjhH+o1UWFGFGlUyhSb4MKoSO4xlOa6pA2NFORRePiNDJdDNJCTkcxMJbC74A2SVgwBW/zhvAuMTLJ5owBKcyE4oUChcrMM2RhGAKcZABoyQBFkGaMqgLgHUE+D+DegG4GZ+fkZ+uMzdsTSI2wwatDBcSDhCGiCOG//uQxOwDF9ILDi8JO4M1QWHJ4yb4HFjhgmx5Q7qZ7iRBxJzc5UC9F01Jj1HQ0xzfJMNdFiiDz0YTY81aRaq6WzyieeImdeePmuuKmPn/6n//tJ7535/vW6Irh7i2yNb50ZKTRVJGj6hIcgb0WKM2cU0CPLPQ2KsswCFTzNaXAwjAQQYMSCDQsArEwXuYAGAvhwGqTAAgOBFTB3RoyYI4TYhIQJFgagKCJhEyNQsLKCKE+yzSLssjKws8h5tHuw7m4T5d0SPEbR5kn4ULHfDpAaeWqu2el+VcKLzZlFiBL2OY5t9+nS+hIulm023p/fmrffWGrNc2s3tvtZ3T1f2Zpbofv8f339fte85+d/X7J2mfluraa+/KeZq3lIZvZ23S/eHMZukq68vtdl7F82Vx1IEJ1+jp2F9sgmzRNjP2Hiinkej5eDEsEh0dDgrHYaiOHZAVGckM5JIjlpOQ0hXPoTAf7VPgMKAwFRLxIJkKA8EQ5w6DeGAMgwD4MB9FAMSYAsYA0QqJAGLghADShBoBinioA7H4OnmFWHetMawZHxvL//uSxOwDFdoLFm9pAcOhQSDB/TEw8X3Fvrcl/yH41u58v3Pau540Qnlj0VBlPGo1OdLNDpAjo0+Z+xQqkMTn5g4Weepc9+QvzpqVPKG6ScPvefdJ/+Xrw6cZZS4bF1BQuXYCFhg4FLQQYFp9dfLNZVISx6yp9dV1hR5soeq0lQ1Ttj+5dfMRHiPNLLB6aoWrDkOVjMbAD7qeR4VgBEzKwFwsFQNDRAwGsWArFAZhYC1OgmAuHQLBYAhB5IEsAN3wuAq2qoU2WNWHDnWe4uHeZxaZ1YlnZT8p5KOxfcZ+l7U3IOz2NGgnOlTVEE1INSxUKpnPIEQMm2OyF8RNkhO4OpDQ82hFGS416bsRJTtXP+WTb/Lsk//L2vHK86/+Xv9/yco26XgruUhx28wjhO23oXmm3CI/asl4kuiqY2+BRdJBE+LEhMMRNuQGw4bJiz2ZuYPk5LUQJG5mMoHEOAnYcCTAgDoCAaYwAYA9IgJYqAQSTYx8PBBUApBELK1RAGRDggtQoYgfpkd5kM+yCq5NG0Kyo7uT4x5hVZPx0QO7IaDGCf/7ksTnA5geCwwPDZuC/kFhheGnaHRGhCzN/dycYtB/OqHWrttLey7+aMKTZwh8Vzctc9WbbLWMZU31tp9xUzv7umLTy+Gu31Nvf3bJ6p3E03p9uqWfdzTpuNzYlnLVrmGHWPae0mGjlzz6PFBtD0SkeRrJLnHmJLG0Eg2KTloEgpc4tIRJjA+jcSqJhWWbDEKFDxBECOgEYPBoN7DAO5hN9ELQwAArwcKEFAvgcH0AACg4G4dBOIgQxGBETAACEA0eAdGAB1PigAieYoAY8yGStEA0boT0npmye1m04F+W9m/meWNU/JbRGGoFQMxOmWZLHg8549mdK88mKk58n0nBnVc1qE9vbmrkZQNxU/XtmfM7/lkfwucLLfP/PNf9Yza5o8hu0JmzDgupEGo0UnzctaUDCdJqLxQUW1Ndy5YWY07Ith5AiaIEgWGFzuL0WdEYo+RKCAwExLvMejBBDAEAHkwPkAGBAIUYEKAAAwBgAwCsIYg+nTOInoq5SBEAJC4sIo4DQyhIXJp4qOZNynGYzsPyBR7B1qKGuRihrk2EHFX/+5LE7QOahgsKD+VpguFBYcXhpzgifkPM4Qdvncvug3bVy0/h9Ja619Ova/ynW69l68YVcajOtrZLxrZ78h8r1k/O2vu/Mu9j8vLluTza9VdX9ra319/yrzw2qhV/J/anC6/WksmmiaY1Szz2DiFqUZFoTJUSRVkRJJMnyQHbSRoCCTzArAydFSI6pY0AQxwYJRULCVhMlOEhOiQBVYDA6zRMwsKwFAIGE+AEIArgcDcVARF4IIiIG8dAZQhKgDbFyqAVKEtlIDIAbqkAA7rxqdgO9AG3p27dlsOdDu19f6v0+5mAQ0eHkhr3U0axSKaMzSI1qIUIyjXRbWROYxkmdnSlX3qcqEY6ozMwLYgtA7t///Zf9f/s7GIZylNASqciBGJCgTtsyHiagJcimxDt0ylfkyYKS0Ql6WU6ZBZpoSFSwgEhMSaPAdUwJJWNMAsBUjALgKYwPsAiAgJwYCOADBUBkBQDwDSY/fCktCsQISKGW6KwwXCkxwGEUs1IFBNN26vmXv1LmsSdtaNckihjUE6cWE6TDCFJnJd0sSVLw1Wz//uSxO0DmrILCi/pJ8KuwWIJ4Rs4Saci9fmy7yjYc6Yp/On82DrKd/Mxycyu/NoHrVrb5zr0v9enGPg/LZlMycytdpuU6Cenp+fn82e2vzMzNu7p7fpnzPTn9BXk9Ms1XKUuq2PvOYEI7W2eccs/NGkjxePyqdG77NJNiEu5cF5dXHBOD+BccEwaEFcSAbnCcaCAFFCE9o5jgdnhqBCTkraBgIIumIgBgFnhKIkqdaGksFtpsvq2e81eC51sdmAJ56LRo8UHjcZRSA8YfRHeXR+XkYyBfL2g7nnemx9nsS50Hw+9so9nEguMV2Y+EHqMSXs9h8DrOGcLFTK3yMgqi8rat7qrTbnJZRSKOQw+0RHk/6Y9qkpAZMkwejvqukgsBlpRaoBstJii0xBTUVVVVQEMEUXOzKkgZAwFoFSMBlAOAICxAEAAAICORAYIN7h7YwiYOxBRIVsRRSleKJy9YqmTUEaJCBO6gTaoHclrlwKnPLUy5a/t2NRKbFmxEuWKmclfjDiR5zx7NNgvBRnVlVko8Rba+bM/Dl6WRtR5HWaY9f/7ksTyghv2CwgP6YfCMqRkKeygPC07OrqP/0x2/sta92NSXfg5jqNWlhPaG0072a3vvfM3ne6e2azvZTp2+c7NPya/at6fWrcp34XuxxiCV66bsddCOpse0P8jWFiEsnbzB+P5HdEhMmLSQzVFxSlEk2EsSFp4VGFysKmANDUOKoiDmH7QBDskQHYCytEYHohpmV9AlRgJQH4YAkAQAgEGU0Ic4lBGcodKET4vUKKiI0mKTC0QSsSj+TBWbFA17oQ7TyN2l7Rc3JIcDpDCI4iwQUEFk5g7nExxx4783o2zbbyw10mJ6ec06O53qaur3ntz4r7ZLIazXh0druazt7quXc8sYtbW9f26bnU2d8XXPUTxV1MR3Xz7rrbdt3Hqf3PUnjyikNcxJhs1JFJI2Qh5WvFE1UpNFyQekwH9U6TzIkl6RNWfKw80YqCAH8hzQ0MA0NieTRvLCBG0gihQdRKVBGpDDIvROlgM4wOAnDBQAOCwYCNAiBTa+VAS0aiGJAwqQO0OCLOaQRBDqLujoaoW71YDnYbv0UWaJWbpflfLyy//+5LE/4OdZgsGL+mHw0vBYUH9LLifInQPB+EsCOGojze3b159crm8z377+8d7kY6BiGw2nN72LWnUZSzJfJj1jszxLmRiH3na9Zj4eyq3t87Z27e/+2/+m3tv/+ZddqftbP3+OR+cp36rpJAfJafJGFljLsuyNMGL0EOWWydli5DCQRRESaQUOBgMOTAPTFpF8LAagYMPa8M9pg0DBGB4MJIA4GBuBwBAIBPHgRxwFthhc4iAwHQJEzCUBB3CAAZOIRADpnkgCMThmRtFtvDONgyi8gblOSn5JlY7Kc452kxpfmeUfyrCtAXe42GMTg8fB1lQmsc34Jj/JTJCkdTqBHlBKwE6mc37kSdImLM8pPD/8f8+///+V+3Zv0zT+7u5bWC8r6v7e8ubDWmPodqR4222erU8UFUJbMD90NWkpzLS9YW9QfLhmpRF+pOowjGyt+inTNhE+bBjqtUCDEMmpPxQLIwVgFDCsAEBAbQ8AQAD5R7FLI8QEJMmWjJoiMJVEQAqjosX0RiGAqUbcKOAZPDE68UmYy4CYVCS7HC0CAwu//uSxOcDGAoLDk9kyYMcQSGF4bNoghDxCgixXDOTZe2jtrtxm4zXnr9IrH20stzUV1XFUZF45Trupieu+tIqOPvm++rmptf//3iONeLfv/5ZbviVqP6MaBxii6o4002rURZpjLY841jtR5YgjzT5U0qwNFxI5AuEwivIqNEceBsBkSm4gC4oHxYOgJCGAuEYig6AqwGCKDhpoDQD8YDAAgg4FYAgGwlwWQIgH4UpkywdYoQjowrLII0YSUg2YkKRqHSgU2KxKIU2K3TyaMSNjOdrCPqIcFUK2IdiHRVCFpjHNte82yINsvHsNzoI7m+9szNpLHJ509+bB93b2w1CJ6k94cdGy5kddPUs7D6Ke/+vr5/bn/+IuaTn+6i0RYqp2JakhUiiyEaGHiOKsw6Rw0TGixiBCZiKLkCMIxgNxgeh4D5uYkg4x7nB6WHgKghMEguF7KCoSFB4EqoAqQMOY08+lgKjBWB9Jg/AoFxEAZYPnDH5NoOUr3VSJqSUuHSURPBBpbidiWVeTPhap6N67zYkDkNhmSbNsQ6EmTQ7G0IeVf/7ksTpgxhmCwwvaQXDIEFhif0g+BeVxr3vspECbEBxyH6XMtQ6Cce5qD9tKtm7prqimMhbukuL4HbWO17dW42ZXn77/r/qtI474/+P465uo8vim5kc4iUMH2zkTJk2KeckqWdUEmSKM6nkDaQmwoHwpLigqAgnQFkiwwPRZngWtgcJFrDwA6gMEKBijQogBMwGoDFDANEwAADWKwAMLAKA0AREEcooCAyRK7RM5IBav0/iIYpWliVBS3mq8btebLpstufkLwSK9apDhAxK4+hAoQtbMsQ1HZdPxk62TQnND6BeRGYOLlyKVehaw9pkXHEuem1Q0sKubmwVcOfcNs8sSYSUffClNOfBzm/Mc/PNxXxfx/zHO1VXvpdqO1Mgpx9KnbjUeDVlyc5jWIMlxQODlBUeYNcNqDdQqoUD4c8oKhYF4kB0FI5TQVkgi4wkt2LDgQxOdQCrQwOoWENAAAbTAagN8FAIIEA1B4A7HAFZoBBBJrDNCh2xsrONZKAVMTFCUfCSqMrPDI4Kk0RkMzC2N8apckn0H3INh+Rxsv1OWxX/+5LE6gMW+gsOT2UFwz/BYYn9IPjVrV3PeJat0sO9Dqs2YbVOXnK7krJFKDEpbpTpxvq4/D8TSTVUwdnVymTW/C66OaCLkUnEF3O87x2oXn3fnyWfxnu5c93L8fv/37lqfZsZ2JJZs8VXnKKNHEsinrDUJTTskac0cKkpyblVZMEK5Gj0Ska2wI/FjdaRLLTyCpt4Pg8QkBKSKACkBhTO2HnUFKalemIgIUtBZbJTorFCwZkyQMCRMNJTlBQm4nE0coCCADU+WARvCA2wMA4IogAyCkNgcFBYwYOEtCRkHuPJsZQh0RZaDLjnfnfIsYoyGdbviV0grGy3ulz9beqV113f1Nwo8cxcU42r/6Y2ruO/+P6n/r/77rrivS++9njm6u1qritkPW0gSY22HVJNC9O5git2NxIcUJTROWLB2wZGB+HBIjAtGDmDwQaQQYEEPGKHGhYCYxUFDCOrIPL4QEwUAuzBhAREAZQOCrGZCmQqek7BBYl0WBybAqGOslOUGwkoCKoSWDRLVDCBcfFRDCgQ1hwrpMypcqYVURcotWm2//uSxOyDGj4LDE/pJ8L1wWHJ7aA4VVVpVPVt0dm6lbe1XjqvZXovQdMqOe2vZ9Q5nN6vVVd3TLYf6d7FGbWOlu2+l6v+q/ri+/v//217GV2+0nwcnczuvpzF1ntSWTY0dKUFpsPJNdWisdUYeOrEEdNiaWPJJ9YeLNDhSiSky0lE40WJxIXHabj+O0ezhAB9cVmqJDBA4+O2oWcwSAnzCnAbGA3AEIeoEPBGkoJJQDQOgdJ8EoB5MCAQgIM0KoApMAaMAEIlIECYAxo0geuDolJ2wWlOrEFvbJezd6g7lev3pLemr03yY129QNRrzBZGG3yYHUrExP0rgqZQ/9ibkleFrU6Sz6EXDPTbzEke1zNlhfP7/HmfP5T9Kfh5ev/sYzWnG82XpBJJdh6cGl4pzkRmIEctTU1xKwiXQIV0DbKP6fbkeJSdUGi2GUGD4sSCQaTICQuyqEhMRigiRBYAZQMB3Yo2XhYzGDU6kXIa4Bj4hFRppJT8oRRUgHhwlCygwSWSgKoCiySCEaY0UBBsHBWZFZcKjg9DgKyFo8RaSpU6Vv/7ksTrA5juCwwvZWWDKsFhReGnaNaWlbVXpUV06lf47tTfRjCVMuKmX3MtfG95jzM22FWTEPmaevw66q5u+pNo4mW9179Ga6pzr7f8f/97ev//j/44h/b4bL3T3B50azT9KPPvu3OaSjdOzzDY3NkSQaJuLVpecWRMzw8vP208w3LC44P6JCJkENRkW5jk0bRvKVDyphK/pGKENaIQKjDLAdCoWBhhgChUD8OBZJQTyIEUQgDFAIhKAaVgQRcrAELAApQAKSgIKgbsVgGPG+TZbLY8myUUBwlTu9JOyW/nem70zfmKKh79+h5Jc7pBTkMgeCK3O4TpLlgq0bUyb+Ee76kknXN/CXJpGuaNt5Wlz40NZL8/8rlnXNYvM51/v+b4Z6ir1ZPtaCahTC0eXCzKNA0xJxCedIzOlSEeErgjI0qyhFEEjKCbUDZNA02hmAw2LoQGHhKC4MGwiSjAPioVAIRMKgAANl3+2rMA5Q0mFVgk42FItvXZFZk8jKkZVZVZRbWV1eeKnMdSpO4PQwRY8MGdOnj/cipBDBYV2JfMMX7/+5LE6IMYjgsMT21hwztBYUHhp2heEIFJ5lO9zfdEIGbIySG+5C8wahWUk1r4IPDS4bc1zPVbGfVZfays05i///2r+kODCc2rA1GMMLMDlBujBQwD8xywD7IfMCr8t2VFuBhKASWJJ0qBsrMBYGo8DSoGyImLDkxZZkUGgqgN+0p5Sdo2iBDNBwlODtNteQDafaJnO2MZ0Y2Jj02vNOk3BTcB/CaW3ctl67fMuJlxqSPKqF1dsvmbM7bbL5mWF5wvSWI+paj/L522x06/n26aWPsakj6adyRJJWGj3EktvS0GsCHO2b1iu5XdX2/uJ4sse98bzGrqnpfOdy6ltXdfWB7Xt1LAo/hz0eObX29Pu1wrmu7i/iuLchL5W1UiGKA49oePg3lSX86kCny3tqaUJcTTN5DyHPxPkkjeloJfycqhJDgT70ujgXURwQhPPV4oDPPE/GwAQKlu0Bg/pHGsSDmYFIKwcBWg8NBPkIBqzywAfD5KAC0GOoEmM5wa1B63tuKeoaOhx1euXtrA9fHX9fSsK5WFaVvTK5i312OTL/UK//uSxOUCDYkTLU4sZ+RHQWAF/jx4wRJ6qcpy3ln19FqxCcnHjMRwkYhqCZFzE5mdacPo2M1lphca0JOQMW8gaJRAyVboimotNU100//S9Ppnc7NVlc1aupanWQ7MupR0TMVTmIjB0+KO7kRTDxNWKQewaAIQGD2lRBqd4JiYHCC3AIAnMArAMwgJrBoCWJAQZJtCJ47JXbISbqOF0W0XSZoSmU4VHChhVau1Wy2CTPU2aONXYzC4JotoNEZTexEXvQkSaxe6A3aiTRzff27MwxMKIHIXL8hOQ+zkEz7Owu71Zpn9nfRqlI8u1OffPd/oVtqMMMSzDRYwntKdmJpSw71+3tnJ2fn6zM/vz2Ts8xMz0+1WetM074cu1WOsNnXKVgaXoaeFasdjZMZbTxJl01TgQDwtE+huVi6XI4YCUTiqtKZcOiYoOiwxcYXM0Atr0ZYLhLEorsKFQ+0AWQMT8vw/BwNzCVDkHgVDARBXGhZhGAaTAvkoHIsCmWAJVJs8JgOUnUW26lAChYAJoVOiYAmYfOCZyCMYMkz0SJ8aOS8xv//7ksTsghU2CRjvGLXDoEFgyf0w+HPu9zvUHiQTAig7kC50wbA8GRjGNSD2JmD5qdHBkIwpn7MrTUQOjhlhGLqaB8WruEBF2qe1/3D+dOlec/zk/y+X/ysU4ZRc0qCpSXo+KFgIodZiAsRJUs5EweqEx6PiqcUafOJYYKMLmEGlaCqtiAC0BbDbyNkMwYHVSZo+mYjZoZ9jgrHI4QOzDD4EJInuJmYkKxZ3Kg2PC5AAExi3EoB6UrDCoCsXT8KAEgByQJCCpcQjIVLitcxtUzMNWzFZTVWUuFoM5qLj7TieV4WVpOlZzsW+4bNoHm07mN0zFxMopPUpzXbXSsi5KOp+H0dbxx26K3zUd//P1XLo+e/99/M39M6ey27uWSfczVdDFGmUmBkbvPvlqyj7VWPG73ybFhSaWNT5gkiAo2Nx3E6UisQ2CDPAnDyakk5BxghnbHWUMUUODDfchPWcNw3+OOOBjCaE1kAHQoeYiAVHpMgDSIrJAoiHZYUBbwFAqgWlGi4q0WEcxHAhGYqWB6BWcVXVPGFGNGNFFK1C+tmatKL/+5LE6gPYlg0MTw05ww/BYYHtrDj/OrTeT0LK0qxW4qOfZ2pb1obNuhvD3Mmot3VPqT9qd2+6m98X1LfZMdsmo4v5/3z9dTzx9f83/EzNTbc5TJci2LVo+txSbGwco8TzeEDdY1MlGkk+1I4bEk8O4mHTdQPzis1x8cmscNiyTh8gNcoIcd7FD5kO4iGaYIUaiBgrvGnC2HYcFgfgIFf4BAFUgPMmklGtZJMbJAyoXoUKaIlC1VQtWSWgc+xY4fDzYHYHzCb15JdVx2CTk87+6b7Y5+rvU8i6z6zl3Kjqa9aput1D2s3hir6mpZUJVBOGSh4emb8L8sWWZNy/lOsU7nuMPnbNbKVJV/H/55T8s2Hvay8nv/8r//r+dXkpRzPtVlXsa9IY4lr3uVUghkUTXhslYdrYHeqjXIE7meTaX2iM9JJCmUnHRKyJ22mFAG4ArcGbf4xRloCdQLEtaZ0FDhcLGw4BEUdISg3KglDafiBNDoqFsJQFoEGbi62BwwI5BDWLjIpDiK5jSlSsY8GStWelZW5qV/6V9aV4crUGTbi0//uSxOwDGI4LDC9tYcL8wWIN7SQ4HS5/VJLoFqVSc2w1AuUNE2zB5qS6TX6Kq79y71W1aV83o7IqnXMVfT4//n/maf9sn/ieLv3Mlz5exZn8uo+awX09NfQROVm8Ui4mqUZvt7Zz+OqDjWKUeLSPSYeEh1JFhOhyJOL1nHyITUgWgER5uYW325jKkVGAEEGYawEwEDFMKwBYLAoBwFwiAwDglkQCgFcqANDQD5VAGKACiwANE4NKAI0Xh4Bdo3I8+UkfOmau2KE1GrbntyC5hhIY/+chu8r2sZ27Y2M7QqQUoNR3FAxot8eHG11x5eITWFDI6NRp08YZahQsp9ThnaWgmIYpnY8t699fP/rlp8+ZmYMyk7aC9LMRUbt9po91Wb7C3kvNFW7bzLyZS+cPvKUZi+nXkwpHHnTrI9rJoSSsPS8poJ0YikNiauFq0GxMOTcrigjlJwDtcjUAKJsgwrI2zSEEyNVxO8IAEUD+BEmZMQHBYUm4Vi1ZiYun81JjS38UYqxWBA6hJIwTlgyGBMJBFkfjhlIo2p5qax2Ok3HRSf/7ksTwgxh2CwxPbWHDV8HhAeGzaATKPIsWeNExQjjbmDrmqWEsfJ0N3u9jKuNIRDy8yYNltV2khbE1GwPWC5iXUdDXpV8X81//fe9f3//t/1fFfOVnS+lxdyhOnYx0WhhrFmwsLZI14yZmQ5FEUixHH4wO0FIDoYLQRNDyQgLGiOLCcaDhitWPnbAMgYQwbJg2AKGA0A6BhuAACIwQk+CBBRAiyjRXKSiLibkUN3islhZEk2K9HovQQfJZc+A6ByNM+kylaTabCZu2Oeo9Ue7s562975wyGOuXh3fflXU053CW0+5dnwiz5/cqCe+dfY+nWzC9lsZ5KePuPzP71edevebO/v26r+py/qP+ffkpQ9V9+5so+G29t0iYtqzBDPUiFEaQSNKRozFA0ZTGjQ9YjRB5GIwOgQoWAypk20IZEgqRNh48GgwB5+AaAs0IxUyqCwxgnxT5YESOo7wMyGOGRXmABAFgwkMgxsGBgeJkO40dFUEb5mZMNUhMHFUBXsKTUguRByRSEB5YwC5WuofirM1TKC55bDVFoXhZS+/15iT/+5LE6gMWzg0Qb2kBwzNBYUXspPDtNYs9bOMe3nl08ra3zxXtm4l/Dat/L1rmG1yyz1MZDnp9+1kQ2nS7nv+fvZTPv5/d/zsZzUdNqmtqeLm1jyZRES+0pZKW6zzpMS40HYxcfycnbkCOQ5eRyNCxPJZuWkIdHaaglEANgYjwPZDkwlE4ECykgkzUgDI2MXYs8/lgTjC4DpY8YDQPgKEpBAHBEBoQgJCwUAwA4PALEoB4kAMVQBm+Q7jQAUoKADkpVIPR9DCpJCsWzPRuhc6bv9o7l/drc5Uw1Rct3N/PXFxW1mPkQ0eOaxdvLznjGPll0u3TCay5MkOaLva6RWN87XY8iOlz+PfbP+TPPn69bfszm/sef1qfS/Xn/+lj+rNYVi0+cugffvocLnmjsyUpExwrLqZYsxCUqjtbSEfC86fHZ6uUDAgMkcZDc5F5VM2kMxEoGhTjihUMRA+49NAjzCWCvAwKZgFBGGBMAKKASFYDzKygIkkAYIgAioAWrAWAAG+RdcigKwA4iTAGQB2S1JJPUEVgyfktJd+7lq1ux872//uSxO6DGSILCi9tYcMnQeFB4bNoi1e/Ktf3YyfBL6xI7U2xWLz0yt75maMQ+XzTKW+28OfCKpTgOlqfJx2itmfptSn+XX7zLn/0/IrlXIkmCnYRh7RaGGqgCkGDKuQnkCNm0ZuyVgkmTkpYVHiEpqIJkVtiIQioEXGwtArKSJECSK0zpWLCBgHSrTzDUiqPLAVswiAnzBfAZBgVBghgIlQCIoBgIXxOkqxEQQ4CPaEgjU1USJC2THsIHjXgo6r2Ry1JIvHoXdahVosTGN0yk6aa22xz/M9/dfqfh5d9s3lwz1f33/62SydN7nzZ/+qauO54bUvVS1Ko/N6+zvLlqX2pbXvw+Znn//8///yvfz59zfefI+8YnKObPYoPPHQ3ZxV1l6pkhaIFjaJcV40iWPksigpElJRsJjYKFHmg8A4KD4uqGlll2URtJEOMOFA0fehUBAUVAu9DAMeMNbIS01D0448ZoHlAioQmclUy0khHNXhgmOqoPfKEWZtLNjUNhMI5AVEhmG2BMoVkdFTcHw+Px8LLUfNwfa8S8Dsqj2E1lv/7ksTrg1gaDwwvDTuDJsGhQeyk+LUDByRVXzjtrR40artpsdIyppGNGRdKLzcDJJzRzRCkJEDhUZBKDDE4jmp/+WqZX35+6+eP4vuKlonvuWird1oewg6JSITWKQIw1BY6RhiqVmjaFDCSlYVLEKSDbQQho00OVHhCQwjiggBYJoxxhX7qGQMSSCQKzCXAzMA0EYw8QCQCAUNBGkAGoOBvEYFyeZIAYHASkgBCo0OiVqyygBduQ8A++z3ySVwZIJLNTbUppodqiyn6/42tSetLMbXaO7OfU2IWd/HMXRiAEPDZ5d/G0g7B+v53dqzGQfY7dLP4DILwM1jWRsLl1jZFPl6c+kZ9e/wz/n/mtdtTpn9h6lmHrLF/pIIqQsQUjqf8YNRaTmEipeoPWU1nzsx4smK1glXI5TRicsxMVjcLUYosRBHdHBaR0bg8GAM1Y7qXzEsMKgGQAw86BDXvGjME0AIwbwHTANAPGhU0ch4GUcADHggxkBpoZKAInWk8xdjSZ6iaLTPx4AK0+eT51pBt7JLIrsPVubtbsboruXipSMT/+5LE7IMXNg8QT2kBw0pBoQHhs2hBWKyw7ePQlJ0G3Qp3QSu+8RUQKMMRCGp0uzIRWSci6XLq9bGVibSuYzWncje7U/bbVdtl1eZTuhCKQ4szRx4qVhp3CynwWJ6oQ2vMjEJZzj6ZxGbQprEyVzErCxUcDEoLtERgiQONHhWIaiKRShAw1FgGDFtkKO18Yc5k6N9FTF2kHfSB408jAILRQ6QLfWCHjtJZRGLkwkSAKolZVNDEJFZOeNJQO0ikxEGEC/LKWhWTjTOC2Gwfszg/uuutsy12pt4627H22uNWHxPf8VWjdwo2FLpnTX/X3Ve+tV17o5bfGxnTafH9ztr76mP6uu7v7j2xE7KlRLlOLlsqo2gVDtakxeTpJcqO/PLSkY0qesd5LaOpAfzJdhJDAkrkGHkQiUqdGkdcAmE0lEMTHFA9h/YamI71V30xs1qD/HDbPPZgGFmL0YgCAKDjUaVDAFExVJksklxJGUOKwNJ9XRACxadKCEkjJkICma4GacNkhJk2Y3PujxAospfnoY/UbaYpyfvH7Xxc3f6Q9fMz//uSxOyDF8IPDE8VOcMWweFF7aw467+78sf09vTP5k5v1xus5Vz8zp/Z7rVpXur2785n5OV2PeyGez/38n5zuyZnJ20z1r17X5pabU5m3QrvteV3MM/kMUbb30O4XnobojtOYEpthvsL5ULZqbGZbfbVFdDVK0ZdHkuOE9GhNM3BidSZCWJAnFcrFY7A4PrKYPDFLIjPhMFY69iEsoAvJwQQKiJM4DJMDkAcGkmiQHZE2IoCmMjwQgRcxjC7SBPGBNIrysdyAWgLpnsuzOSyHvNZM7OUWUnrZ/vjZq5+WaDzDZq1/3TaV0nJ8T8vaemUkat76fMrVfLGRyenh0Vbkbp7I+55vjr6+Pmn3/fN072X3HExHEunbv2sUWQeam6Cz4a1U0k4brFyBo81eTR3Eg6UEkEk/UkIoiiSSySgjMTKCGKj5QXJDtA6YgnIDaPhADciZmrw/npXAWUDDJYnOqMRwwdQUjBNAIHQKwcKwSAIkQKiE4mB4GAEkCahosBBSFYAL6DwBKj6hEeIgB4nOVoHuyPsHRy7VjG5z7G+/X+e0P/7ksTxAxoSCwgPbYHLIkHhRe2sOKojF9wmPiIWdB4LCG++5PC3zNyhhOjhZqaNJD6lk8wRw4rsC4IyQJGyO5Qi5ppS/Of5fuf/0vyOLlfrivalXyqi1CnbhE2hCRNqOuQvKmMueYJCEtY9YphhQoViAwZ+3ZDLqQz5DowfOF07qIzahlPq0aSwwjCTllYMBdp81URMDRtDUiBEEK/AwLGliDYk5JAihboERGlURapAcEqsg1gyY4mi59JdYfolp3X7porQYZxnEHNc7aWPqe50Vo+vrPQTcuxpbwgrMkqot2FTKUSFhvZNJLxXTVUaNuuEZ7m9pQpPxWck4U/rfoVkZIhblM2ur6+/1kM9/IXUIZVb73///zyr//v/77lH/VpfMyqirLFI4rkXr9uDlGYOWl5RThj5IacrRKYogZ2TkasEDCqj2EadAyowtMPTC5JSMBoHIwRQLDAEBwMHoAELAUiwMg6BiWAASEBoiAjJQClFVtlYAsPEwEb+FYBTcRoBCcc2y5kcprr9StvutTrZ7DyFQFGArBrg6CcMUISx3Nb/+5DE6wMX0g8MTw2Zwv7BIg3tJDlmpRROJXn5Hd8audKMaZLSOJGGI1mtUg8yOwnEynI7pVd5XZDur0opOdXs+SlDN/dPWmZzbP7Z16N2sE2Z+KfVsUauphfRp7wqGrQt3RP8llBRiWPw+RE40WPLnniYajwWj0luBmQDDS2XUxVF5KhOy+OhyLakAkHkQF3oYf0Rps0DNHeqGZLGAuAJ+IjJM4GCIdfGQxETZEPJ1lsWbusZjCcLwJ0jCFI6WHLBgqgsKYap1P75P7Hrqdfr9rourafl0urheCkTrmOrvlVK+00pqfJyqkpf+byJVSC8u1+iqqTaUTZUXhNfXMq32JIGoqrtXBb5DZQ8cv/y9T+Qn/Cty8vM93/V//t4zFeHZVhGL19neQymYU3qJ7mkClJQxAu3he5yk8YMyAkdkkKIEbTY6AjJ9UFnEZEED/IJE4Mlpw0MZ5988+BejDGCIBIDhgAAnBAwZABSUAqJ0BwUQyAMVgNozhgFw6AC7zYRoBAlAAdl2hoBN2ovfea28tyV6c2o+uNTtHnc3ObubPj/+5LE8YMaDg8IDxWXwxpB4YntJDg3LkqRTHZN2rZvOR1Z2TaREjN0Sn2HEcGp2Pj3fSBgyanqo1is17bEWafrH0mjjCNWrXf+l/6rv5+fv45TZ06lYXRxiroJkR5RXFRHDR1CEcKDI8ZFBCmIiIprNsvYQvQhBHAmF2lGxp4rKJni4lJQuVA9gmhM6sBhIcIQWQEoByeQ8GJgOKdqwHBhPA3GAYAEX9EhViQBsoAxGAFAMAM1QmAiSdQ0TtgR6FLV9Kjeth2cH5xShq7i1a78DfRdRBsXBMEGK0xJDwXgteq2huwLUkO4Ymhw6dfg8GQqZKhLsn5PlUyQ2eQ4WULZrxdj7Pcu3+b5/3+8L//PPPvqGVOUftMZCoWhyKrSFznpo8WZTfQpXYVTZ6AUoVD9pITk6QlWHifpoDcpAMQgsWFiPplmBHMN2uWZJA2RwTFiYuP4oUUw0gxCYMACA7mF6AoQAYlANBVAoMEQACBCgFKBCYFVGUmAEeoWAfiRWAjZKAIIZea5DNK2frmex/2rVJf4P09CGHsPdBk8HajiHPVW//uSxOyDGbYPCC8hOcLgweGF4ab4/luUyPrgTFbO0q/PfN5dENdvTl96w+9zd2GevSbobM6tjH+Kt4bs21GNuv6173zrfO33G7Zu//JpWuzWb/HC1tvl2WXGWqrE92ymjRoziBlhdsFXVbxEOIzs4XHTKCYurkyYxKpAEs6PGFqaInEkDS0KVpqbkkczAmmhIJKA0tPjk4MFwFR24dDBogkOHIa8wVAkjBuAFEAM4MAMHAGygEh8xoIV4SgC9AgqrKSgARsqOTR0WniWnXnOvdWl2ofm6D4H3TeEMFi8Axt9cTAWLcKdkwkyBWo5soQ3WS9ybHY6Mm96TVNJBflCB+dKuVNqf4rc7CnCsn84nM/L/Mp/pfe5n9bvq5zqOa6mc7XbSVbVWT9ppQVTuRAsVVeGSdA4liaFC0hU2bIw1NGKzyhQDxRJQSAgfTEqdh8EwZB2BAQgLEhYAgauAwWXRjGkF/ANw8w0kRh9AcEky0hElxV9lAp9iIvElCZSiQ0eglaZ2hyJIkYic4c4ot3T8e730XU63fq/dSW1lZvn54ntw//7ksTwAxtSDwYPGZfC9kFhReGm+btj8rY3l71pVNjfPdvqKIYYrNhWePndZWXDLqqq8nDq7/W7sk/T9//+1/8u////efL/zx9bfhsNvbzP/HLlHIy34x8cqSRtrEqZShM2VtVLC8VEhGeROadcg3C4pLnQyAjc7IBSgER6iEu2iJzRteIgC1EiDEPi6Nk0dU3FaOmIQuMHcAZAFiyaOBoYxiMDIgZRcMAmNLNbomK0VJiUoGCglSD8zNBVQV0A9L6lLfLrcr15HezUYn/LtxuKdXuSts5abrjNXY9tpEq0QPGKTOsrL7u3OqWbrNm2iTtf+0cYOxdS5tMQa20NYnlyjCdr+Vxl9hSW5Uq2s+RyG5O8v7uZ5zW2W+FzqW5kFH1BunsJOxEpKTba+LzKl1qYXQmZVDBQeUmdkKzI40FyYu3AkFRaMFgsDg8cUKJQJyq5dvUxiW0jvbFpMMcBQwygIzANB0MIQCMZAJDgaUbAcEMMgHqxLZDgLE3I3LiYBd/CYA14FUZp5/fqvI836rvN19O02q/2PpfpfmO3PvfTfMf/+5LE6oIW/g8OT2khwzvB4V3tpDjcH98F5zQ2alnVMit5ZII5x3XM9kdmPyhx78qVNqVjrIms4++18zzt/z3bpkZmZH0/O5WGe+Z5bn1acu0xz96qYaWetcrtoRbsxyGjLkCxo/gVpY0hfRlcruMGqSFcVEb5yV43y8I6M5bHBVEXx4Ip+eDUu8drGJPX2AgKSRxAwnQahLB86JENIgVMAg6t5MRSkaQtmWQQtWDHvm4MgyK5s2FwikKwdm4iZfWRE5Wdh/RdC2Ky5wzlojvkY1qMu4Gpj5WllordOx01cdVXvW9kxQ14rvi4gc6WMRKeEf2uaV5i64n+efr/5mv5+f//v//+L1qV0nkmeGxlqms1MNcCpdlKee7oVEjqPMmFFi1IpxRUxBHvJp9KHNt7MGFIiTRUQfo4a/wzyGNSUAwmYREo8wAKEB5wBYPlAdQ5AontaKBXBAsMR0ADQPgkMEBuoRgvbcYlSnXR+1KDbPtX5fZX7LOHHwNw+3dc+Hps+d+8Hybl8Dy6h6gQpa78usesKBjNvCp62rLnPzeeBm9///uSxO2CGPoPCA8Nm0KFQSKp7SA57z6rfW5o+d7+oF/fO/FxPPJWF4GfrPtAx6+Dned/dL6t6T0xbOo9IVM31B3PFs1R3r9zkgXmZq53VwqxsTFJMtTqW9zd7ZBV6egqlPUcSCn6pEyrEISEF8bx/FEyqU9GdZT5wJ1qZ3AsDeq2EzDKQhlIOiSVUQo/E6bCEIlyECdshgCr4mlWKsYFISZgXAAAkB0BBrCEA0eAoL7hwFqHVWlu48AVK1OXwf+PKMwQy3GTXabOi3Sak9yW/f3U3Y/LvfFRSTE8w1HVMVAIxaTaIi7pSmRgZAJsQdnRF0Iy/fzfNPvHDRDxqrmLclKnC6JNboiXn8+/LnmcLrT8/14ZQij12CkrtQrWAgQmqQQ2oRVVxiOIpaSFDx0oiRaLtSSnSjRSYdtJM0QExltQjQliyaq8CjJxEKUGVgMNCXEyhCKjA8EHMAUBoRfzvlh1uNKB1OqqSlVulUOzqUpZSorDugi0p0k2uEEw4VHYBxQOpBNNrmaZximkmEpqMlMUZszcLyVpOyHZxinSanflmf/7ksT/gx4eDQIP8eHK3sFhyeGnOU17uCrN1LdrJdaEtjGt2KbKtwhHMrp5Z1KbJHeSkoor50xJPaYx0PP+/Pz/l/ny9/8f/73M+efmtsMpd7s69tQUTXtUq2jkiNkTOOaKnyNMWnATPiTMw1wi02BAaJgsbPHhICYVUOBgwFCocPuAzINgMGcBcM8QnxWjnBLjTAMN5R82BBIDaI00UEMCVRgAFCXhAHjweVQmRp+rcbg50fVqXxA1xRku7nsckeKP49HadPKcpssShXSxLr1N2SZtT25M9TMsXaZTR9pqUIZVq0nkJbKXzczzvc+vrazc2Nr2SY2t5SXldpRlHtvjL5bH+e9//v//57/93//99btf1X9ZctucZvzMgxDIOjJmErerWJm2pvTOzMJxix2wg0jlVkChMygFbQ6japq0xOgFSSNRYGyBYwUKtYoBYQMTwwM6VAljuk84sAMYYwNEGAE48NiIRJkJBCjGVAEmACoAUzZVEUnpyYUKEVeyMQFGBkQVIEMhqNV+naDX1FP1OtWqiX3CsN30dlC/bbfvtsr/+5LE8YMaGg0IT2kjivbB4c3tpDhdOqof1vqojut7bvuq+bcx9UqfiFYuX+6GSpHT7m4/6rnr7/uOvufUbsmt/O6WuZ1ubSiNPYuw/KhibTR/SJiZ2Swjm6I7CU5FxMthYeHSO5d5SeQXgGjEfj4fTKXHiwSCBTG5gfB2CIVFQ2AfH84YoiER5sCInxQw2fGQLIuQGKABMjiIVEmoLCSZxVDyYNX82aASICLdvajoq4QPL6It4fqRr4LLL8X1g1Dq7z13Pb1iYevVRP5250FPzII//HJeya83SD6rLK/VsxZejNb/SutxTny6zXuzvmsT30zK8rte1mvx69OvbbbP5WZ2bTbet8zl7bM1+v0vNrZd7mmeYu64fvNccRexGcOPLl5DsdfCpX7g6iayXH0kbLBPH8fWyCFCETlZTXPooCCYKh8P1JdHEsuC5IjTA2oLQXLaxSNDy49Px+PFjNUCRAMFZzw3hByTBaDmAQG4EAZHhIREB8yYqAJjQIwNAKYoOgIr1IAA81gFxI+zxUAEuRfUd3IdwbuOfD+OGd6CcIw8//uSxPCD2GYPCk9tYcNoQeDB7bA4E4mpjO2yA4iGDLGThAjc/x/10hhfP3WK8sXbpGiqlYWCKEZS+f1EJuQtOvEWMxP+n9yj5lbkZd+aTPXmldpFRjK2xyFL7vUfrfFzC6UrNbJZeJyeuoVD+h4dkw6Iw0uPGS5ceIHngItxkNGtPi2vP6HVV0rwPHC6KLQnMT46dqAkAGES6MYMI55gbhQGCMAiq4HCCgIA4iAJHQGysA8VAPipUALe9IymLAAFRIrbfvlFPiHYvyOYRXCEas/fy7+93/vzi5UY2g7K0vkymR75cikhmXjoLMWHUGM+CaZ8mVNx2jMcBJ+jGZ0szq/OllSlz1PK8k6v5eRFDtJ515/ynhhwBeCIKtUcQQHCFE9WG5OrMWJCxqMuurSYh1OmoSo0o+jad5MTC4YYvvZs9Ds5OEhVqQzBOeuux1IAhQMSluY3iRszCrABMGwCMwEQAjCUADC4F6PIyBimsBgCGzrFQJpD7aG9iEPEJt+V/F7tbUTj1vUD3P1oEcFEdFTBEDIGVIFLscKouQUjExTFvf/7ksToAxhODwhPDZfC6UFhSeGzOQwGf5Ep25K7EW8kZf3aTWIS+1EE1dn7uYmajRd+n/mT8PKep2/v8n/n87mLfuvXfr8Z03BVY90v9SaQufGYUcQF58YGXwn5gYl41Tr0N1JDETiEfMnY8jJcohL58kLCwcFpeMVpqJTpSqW7EMkQnCBBQAZAMRksI5JwkzCTBvMBgA0WAWDg7TAAAIc8qAUpAEQB04MAFOsoJtGWJpB2k7rcK7FLtFummJ6vPVv1eqf9+g/+gyMk1p5/lS+EY7pK38/dlUVjMQkHme1BV0S6Gq2cdIeQKVj+ox5enWUp7/l8Ir59yv5f5zM7uRHeRJEiqwebO4U3FAIMKHECMuR8oTLXFB0dUheUr15dHUyuV4qKDF4sHziBw4FUquHIhRUSGJ4vJ4SrjE0bEkSx/Tv/MUdEc86RNh4ToFARGAiA+TCwGBOBEkyFAGR4EEMAxigCACT4RnmBwAZnig2AwADANq5N0MmuvY2Cmeu9bwqXq+qmU39BwUywSQEZGh8wZJvSMrbTjczJ2OhENnaR3SD/+5LE8AMYkg8ITw2XwvHCIUnhsziQoVGYICxAYiKvmWIeaqymY0lTCLXVFnJZ2ZkzfVyOZZ1Xzi33XMOmryxN31SPbEd7DgwZPCZ7K6dIKB2pldZcrmzKxKx5BgRFOg3ryt6slE6h0SKo3SWVB7Md0PRhppzEdVpYrFzAXRXNYmwoXpfCXqGcVxDkJYougWQAwL1vzV1GGMEMFIwBAFASBuPBeCICeAAoAshSLANRsqAFwan1mpW2Rbk2nVE7G5FN8wk1NZkvLP3OJtW3kxwRUgflcstnLFQeAOcJoaObraCTN6hmWRe/bsWexH/diVmLO1DbKS59mX5l9bLy/zLIod+bzsz9P6es9T5zs68EzBDW0D/7HVqyRyVNrw3OyU1HAWECNQshiPj0nLzz34+FR7AfHxifJXzd6o+nSZOiWHCU+Xmh07gw5JiTKwKWMAkKcwJgJBUJcHByAgDRbQVBEFgEwgDyBDAAAQaWgZKRAABEigAl+R4AxuvYNnpTf1CXR+AZ+e3b0tAQZHASg8ycoYfczTRYSFB0O7cIyoPxf7nu//uSxPYDGwoRBA8N+YLiweFJ4bL4+3mS+whIKGCQiStDoMf+q2YRh22juJoxKkJbyKVzLnTkUk3Q0PaL4v6edtXq35Ohlf3YasQ9pxHGVlJJXOYVqnRbICItHsSZ16i8riS6QxDJaUuOGyEhxkgqVWMiKNB4GRKQh5HZaF6VYE5sbFYnLD4BBqJQqNXQCRAxKFlzfgF+MKgMswOwBDAECNKAOQKBLFjAFALBQAwVABiwYAW7CJMQWBpFCWjMFpZ+S6jnZuljWoA7Y+9//fm9bs1juuHvCaZEdHmmlCMbgzhEulc3rhzPNxsrcsp2WPEK9NnPEHAgocDUmdYWu5JDBW3v2Hn//fyPL60y8zf/v/7aV3Xv2O3n3vT3idc1DfedaKB6mmSgcJmNfuZHzjURSMVxmmKxZbOE6ZdaLCy6dwP+WS2TUqEOR7YrBIenJsVV2wJRAxMhPToGBMMN4FgDBPGAkEuLANmAoA4y8wAAK0uQwBbIeAQYw0GVjwATRGaqNN/BnY/flfx34O5D+FnVvDBmphyXIx8JnXyxUzFqQpBNF//7ksT0AxpSDwQPDZfDEcHhCeGzMKZPO8lMhMR6ehoS6frmW3w4vDrrGHViQW4YwEhboYohvYUR6HkX/1b9yzbLOZnP3rfvRWt3U+02tH9o85D/1659cpQviODo9MCw4pgQ0x0RmXkZ4OCJOqSsQHKgsxWQzBT4eHS0zsHSxoOisIJ00Vy9ARXCOhgMABhfJAHEoKCYIAMhecwDAaw4IsQgMxYwCgKEMQ4AyqNANp+SBsK7EOldbDHof5ZtzXYhQWdyjK9nfyIGYpwuPinPUptUkqAqPVRXfJCKpQ2/Iflyoj69zzuxXFErm2SEpmpsSU9c6ufbTBnwrlOn5Z3nfp+feZvnxZ3Um7cFZ92k9lIqOQtl+XCbH60pNoRdfgTVkyfL9D33i/RuGI5Hp5CMkMxUHpjGQFx20NQgqg5En2nx2pQliEgiq4ijwaPKMC97w0ACQTAwBTBIFJMA4YNYAoqBU6YYBsXmFgKXlAwCiHR7LBQASzZ1kPGhQJUgjUJ+JwRfuPbdx3fpcQYjBU8ZTBDt023I/c5LAfDv5KtMHXOWGd3/+5LE7wMY1g0ITw2XwwNB4QnhsvhOZLjsrllobkYimh2bbszzD0hEmT6Narib06k+GW1Ui4+ffa3p22o9/QdW9LOvHa2h0+zAes1WsKqPtqlJi2uI7HMJyQSSmbtIQ/aypM0ZOhIQpQHUfa0lBURSyQkgnGwiHRMMief2CMQhyVFERwhNkrXwKgBh3s1GpaOqYE4XRgAAHiIHIaBqMBoANwTAGAhEAADXXiQ/W01ZjCzUZaRF6pF9xuYs4SqDOSSzIcrt+/gUKCacIE4KFlz4cO0EZUQxQUhzS1jJKi/FZ8mcEU7Y0380H9i88ZjhjClLh5oXAR7G+RFoRF5bH9L0h/nPpn/0i7rSJ76iavu2pHVp8YnniQJZo7Yy5amCFlqTMGr6C6Ym9KtsGO5JvK4+oMZss/gGix0Z7tSoKEt5pL+LIxPPEcrnr6ErX2oYDFnP0OmESMxGwHjBSADMBkLYSAUIgh4wCQNhUAZFt0w4CJL9oKUj2IdLLbNrD3IEjmsoTT2YI5Pdua9BIQoOE4SkPDo9zIC0HH3ihLyO6kT0wmSz//uSxPGDGQ4RBg8Nl8MVweEJ4b74MiN5TsZcg7qM6FMzSKZIDMgZDrDTrSoC4pkaOrKtNTnLMn607zfN5nZ+1vzK9K2W5vWNu+My9l7QnVGD9hMvZeSOsECy3T2OJaWlZ6bFsyXQDQWUQ+1hdaCEhpRSEo8EiJUEkJoHI6rCaGBUJhPgIJaDMvi0GVAw0yRzgdCgMEsE8aAsMCEDYSCBEAATqgkCNFxKJupfhMm2olFFs10/aGc+XzWOdFGflU7Y7XuYsO5IbwOY+k788iOx2pAu7OYnKnBUMioOGTHkiyW5ncznrdXthCp2oZJ2qCiIPmr2fnc8j5T///h977OdO9NcvVy+V3rxe3nuQ3YZj1Drjv1Vv/RYbICjDpptabqEOtF9lKw4TQLfEc5THw86iHJgnPp3S4cktM6nMlBJFSFD6lUwQXrTc7JeMKUEwwGAGDAtCbAwUhgZADqwAADIhAOHgBl8DQFpaiFJPKwl0pQFgAp97bsqlfI/LX668eFn6Sp+797cxnf9EYEJHIHXIoIeIdqZs0LY6adIyWVpTmbgrf/7ksTxAxkyDQYvDZfK4sGhSeGy+fcOKjNRqIdQ27BgbCqKup4P2SlWvUOpoSxAeRJKXlqc1mpp09bOEmL+Wmt6zWal9SPavG3fnbJFbFVjiyMsBaiPnra0KqZRRGQtx+NK2oLLiePCjH2n04hb1OOzokSKriPilPyCNE0kcXg3Y5vsK5eNMp+IbrEbRhtOomb0SEYKwdpgKgKGAwFqYD4AhgHgDsOMAECsgAWgYlACbCq+da+v0iAA6ivQybGTRntmig7F/K17Kdy7zs/9Pd/agiBENQnbX3zNDLKH8Y/zXkb9NDtIzpOQz/A0ambvcMoIIX76WaO4fLVXuZFTK2tvxcpwyZi/nnTNrNZZuZ7ocSrU12lbaPDpc2xCtXt3JUMLEavnGTKOp9/l905ROuJxi4yXgKGIjojJafj+wB8DxPuB4/MSu2KTkEyiWiITbj/GvZj9AVkDEmQ1OCIUg7ZEM1EgVAD0kVj7HyEeJRBWlN4mA1Q1SwAugpHamEF2YDoq0DlCWhXJ0uz0rauF7dX51lXOr2Fxvfc4d2edbGs94pL/+5LE9gPazhEEDw35gyHB4MHhszDc37/useO7joNSinaJF4eMVo/GdMoWZ+X2GLMbajdTh5/PdX/8v9O9+X78N///z/xtbX+pbnnCE6S7M/CLbrXidjcSNGN+ypGWWEQVkexvXgMyQrPJzbYwTE4fAodEglIz4OoEh8SAoTpBkHRsCQsRjUQObYEiMdE69AgYgwuByUA3mEIDiCgUjAICSLLtKYEYCgCal6cKjxQAellfXQntXgxcsVv6kEh3J4MvV5dQ8ucv+LBmgwQ1cfGyz/Qja5mvSbKH59yIveGZ5FmZ0/OGZvqxE/G4zyMwVo23+pGbJQZFKR6TeU/1zP4fxvqblPvtedpbcbmvP2Y6x1HkZwjxQoO72jdWuWbM3FpawfoD9Wd3TD+rOrlImGANicUySoL5qJZLRnwhn5+UTsrMAVXKi0QURohwjiapnjwMFBUI2HBrTCGCkMAMA0IBSMCoBUHASNzAwLQ4AfdYQUADpqXkxk7JPaRjgr6ekl+Ehj16hvXPz53aJINSRzlCohlnEXM1QtG8quTRrEzm55D6//uSxO0DGN4PCE9tIcMAweEF4bL4pkoJqhEWS9u+ZX8qCQLLGh1eyPOT+5Uy+lnkT/Nz7o3aG9/pmXrWjH26Bv63Wt3gjss/sez2bQGj0pXGKm8BfaUo37GRPJEC5QsLa9WvuTXCAnNjFYwYoC2EmpWUpFA+XGBAHstD8YmS2wEmGK38ZMZJZg5gFmAYBiFwmRAAuDgVEJpgWADBgADHhgAAWAGZDpCaSAARRo6kn3+C85F2Rw3eg2is/jvPxIqOQ+LRoZ7XMw4wMhOIDLCfUiSEu45CjOtfIJoGjEqkRwicj/IEcM+A8oXwABSrfq5QuGEtzlIky/6R+TnSKUtab/sEHM/MDcrspDC6vly1GGEhT8vMukCrSE0uo5daacnucldGZA1MSYeG6y4zeXGR8cnK1SyU10ILnWAiOBDGo9H8jCWqiKp+5IoZDFHTGOK8YswnQuDAuATMCYEAmAqJgTBAAAYAQCIBAGlQ4Acs4oADtoTmBMcUT1HMpZXo7tNFffHXe2qm7gwjUzrCqCpQv1a4e+JJ9wZ/fzph+nETQu5KSf/7ksTwA1emDwgvDZfDJUEgyeGy+RO54fNsgRzKZqZBRyDPE4xux1oLBI0Qu8vSnvCpEXsU+dN7ILUzmbPVq3e8U2WQRLU3PRs2ZsvhWNLIjFQbohGZOz3fJqEdKVZotqtewQRmei9PSp6HIjiCHy47Eg4OkpsJZXPR6TkZkSwrC9YigEigYkosJ0Gg6GFuD6CgdDA/COMB4AwaA1lBQEGMALyQhAOXav6gQAoc4Sk/SQnGRWJ6rJoV8stUf2L/+MWBAsHiQb1U/IPwgrIo6ICwvaUszq/oiiKyqF9M3VPWa7kimh3BwlufWg2yEQMsmpeMchUm+zv88mJyI/mZ3c75lul/b+jq1rVjmXe1KviT5BiHV5cORjZNUxPzJOpPwlXjtElHB9In5eiFcZKEkSlVg3OyqHJ+fHQ4NHAjEsnDmCpLMWyIfjqbMtUBoAMFta82lR7jCvAQAwCBgahJgICAmA5JACRGAIIgEHtVjLwyzpWAGxW+VQAZPT6hMc1dikU+HqmWrN7l25/JzPXPp0njeGJqMfA120kw2+qupLmirVb/+5LE8wMZFg0GLw2XyxhB4MXhsvjaThEFElDmbnMUbC1CcUnX8Tc0kj+S772jL3GLVW9xI6CqpbuZbrS/mapdKr3ju8u0jMECriXFRuWMOFjg3JYgoC4VEDjMdpr7utVhR07CPlliPX9EIXUCdeZmZkUKIUw7zIL8hKnWVTDfRXa4a024F8NFJqkw2M4GBc8DCqW/MogfwwqgfzAHAaMFABsHAfBwIMlKwKhGAK/pVALTbex8WUKXcd11p/sXl+NDVk2EJrfrDL6mW9cy3rnOUV/HP9a3FNzM1r5xrHdqYklz3uxLPMzIimh1fuglCHKTpV4Z0lpqcO+eeZ/1zKFYfPt5/8z+azOTS3Xhn5jghZb29nrQM1zuevU8rMInrnDD0y5kwPLGbp6dE1QfYVyUX2XkbxUMjgkHBCuVio+hkV0yJrPEkSzYdgKPh0WR4O33FQSAAxGDlzecE2MBwEUwMwGgSDYoGEAWkIBAYCCIQBJegERvkNhGFJGqkpLpPXppz47H53KL3fr879lScSkIFhwGJmQJSYiOmeUkyPuos+OI//uSxPIDGioNBk8h+csIQeEF4bNo/z6/7QvLQzI03vkZQyqFotimXlSieRT+R4voEz1zM8y/6f9szr/0/3TXtgpRyleict66jNqqlp04vfxW/GhpT5CcbeS6VB+iXtkRYV054ylNGD8ZhJ7KEqHkpoTRXF6AvYcPWyWXTq5UDpCiU8cxBiMjlsDXMQAFwwJwAzADCRFQNSIAUZAYSLBQDs8BQAEZYHWwyUrABnlL3Yl12cl/wxVkNeFWvpcO7zFauSGuAh+F+5Rx4iMG/T9HNLwSj+VI6iNmWGJNSvufBR5WPA75kAmc/Q4pVTlkdoyDkUckLK9q/9JDp+fvGvrU2LQo14EOFmBC2xOEXUkNyjzvYqsd0q4wILkwPH8NlYnJZjvT7VsGMhTLBOdQsFEkp0m5o860C5MsNySDSaCfXjGg5bx4l5U64U6jfrjO5ltmAwBEaDPqGJKwVAaACYIAGAJAbXGQgACwE4sAe94oAHIXvU6gN2PX7Qcuztr5fEMaG/YvWsvr/e5ax+5ruM9hy5hlrmzCOLlFmCIe8OI+7S76pf/7ksTug1euEQhPDZfDLsHgxeG++KhkZkLFSiaOuWYo6Gygz13ZhKjGLsOrensGkhpUmlz75kRZ/PP/OEe725vfOd2ZWsrYrTl70rdh9x1N7KKUN5u9MLLikqHaitFD6U4PylQ4pq4w6i4smJfocPW9WB3HTszYXpx0WFEwOwgH4jJSQwGHWvIaS5FJh3g4GAgA6YOIHAsCAHATNIBwLSm0WKgBRVAA0lJLiYAGyk0/+5uM2NyyT9sz1jl7f3cRsYVsENRJ7ypTNkNHhuIy1LMlcnJWf92+Hpx9UT+HUtsr6/qCckUSlOKCJi2X49t3IiPt+HDyyIFp2yyxeauXt8VvmYM6HrOQMPMOO2W0Xuni8zWLiCvbLC7OHY4kuoTPoSQtCW0+yZ0fTRF08uXScNQbNhAclhKpRi4iEBMDIGdR0E8eR2jEAwU4DE5KwOP8QEwaQZDA6AXMCgF0UAmUCcEIBeGgJahAASseQovLYX7MI0QJnBszRVJbB2oIt3tby+xNliRtZhyaCFsjGMeEfdrIjZom8NRVhGtuvHVjpmkONof/+5LE8IMYTg0KTw2bSxDBoMXhsviIvc0Nuey1m/PZDpkQgrX6cKPcm+P8N/Q8jhTJ+9N6nbSiyzMDfZn8wyxrcxH6RzikySERetEPiHGpW3OGy4SiKEktnaEdwEc6MNLR75dMzsdC4H5mDgHxEEp0pgTDkvj+lH0C6UwEIC4SExXwzDpP7OWMaAwWQcTA2AQMDcJZHNK1xQcDeCgIYyBQBk1bSSxeR8nTZ69+VFDc7QSKL7d+h+Y7e+jvZa5ezv7+bx/DHmvy9CEYsjDbYnrPEsBA1cp5HupSW3IiwrP2oOcJhLjE7rNyHVVYsxqQKITtIWNN38mQ1RXinDX5aDbeK/VseO9xSWSRja4blRjloxsdcNV5mt/I8ZLqRoUbitLKnSamVjXOr4KnkU0JuTyrMgvLxQIBojM7lDcJFU8Q431DdSk7HWPguw4GEshJ0mWafPyIbypQMFRdUyMSRDCVBxAoCwjCZBADq02QGBOAOnLEAwBFOquw9Khs0RRjknIlM9uReFZRTD7m+bwt0PUsHwiGC8kLt6bG9U4Z1COptTfK//uSxPODWNYRBi8Nl8NVQaCF4b9olzGMd48M8sz2DiWKExyuIJqEWp7cj6sTQipojTFm9884dnCu8qzTa+9/eK6pryvKQtUp/5XKPI5MT6HGfNzyBF01VlV8SNDTMLUGCyuGliKnrIXpFrlXKg7VAqKtTki0qkpU9BUsVVnKwK4ySQp5WQyQG89TBzz5j6CZADDuQnNcgXIwVADTAlAQMC4F4hAohksADGAmAK+9oaAPWbZTJhTmwQs6TcoZjKgjdHqrb3nd/djuELB1jE+72CA+hHabtbpCmcCE+ZQ3OtULggWJrqcZDsRDMwVOO7j8KIhHP69kvMjuUPzY+fCbpFE555Ncnfyn/2Wt8za1epMFHnn4UnPOr8WZdCfVVSnCur9Tz1qJ0lumJKqSko4B2rhWHYkHzpZIpfLw94YnSiyY/Esmury+BcXUKy5W2pVcDEOAcOOwCsHEuEwJxgPg5gYENGAqgSGAKAPPKLoZI1ypKhBudVkadZzl0r+PUtHbhdr7PN16mwijsEQUD2dPwUmLwyHcyitAh/Yxrkj02Yx1D//7ksTsAxiSEQYPDffC/8GhCeGy+cHYsEiNOmlYzBy/tcJmObHcj6rbErW6LD6XOqbf//byO3quMWvSD70vfEO98+O47gtd2p4ww2RqkbtRW69X64gRDpcoC6jtbGolzRXwVWzLhGO47Gyxy7nQibHw2nYVzm3IYbskdffQztokl25JZXp8/2+PH2YLyqxtbEAmGMA8YA4BpgqBBGA0AWp0MgbBYA1iEfGgKWkU6Z6oIsm0tbHGE0GcbfS1TyPmM9b/G5+Ffn3+/Q1fU9NCfFXSvOlz9DmuYVLqI39abW+qqpvdaNIXfYYIawkUkqcQ11JtJKwgwtYvqOL6do0eOyaZ/9Jj+IPpGh5bRqINHpyHIqOPD+BEEWSYIp3D4DwFRFh+rn60p2GWNAZ40VfdLKSOpVofOyrDEq0wdjEZRxlmcqdjEFMg8zrmVkMvZcFEc7McS4eN5jIRGqRVCAwwVXDNDIHMK0D4wBgFzBHBVAQDS+gaAAYCAAqBiUwsAKVgAYqIJ1UkPMGvTFmTfOyP6kX5jzDereggciIRpGYn9M0KI5n/+5DE8AMZDhEGLw33wz/BoIHkPzmWUwxuz62Yf+ZnnCGymRyp15wL2DkOMi8yGMGEE9OWjiyW8pvRVGWpkZvZTXSH5HMiJ83Z3tgamOmUf6lqZSFClmjqf1jw5Ll10P9WRnRWsfvIbpjf3qmPUBuXrxls3E9AHYqnJLOwbiMjTlrx3ENaRiA2vD5YWCYpE4JR1KykaNKIGHuSUbj4c5h+gVGBEASYBALxgPAItsIwHSsAJQlDs7zy+oWpbiofGr01TXtT8g3HN93e5r8PYK6jDbrDReEZFTBZDgrDL3lc2LU2OFTVczCvFhHui0jzJiJijm190MM4htkgPWQmR92CwvONMuTOr/zsRJn7/bHNpve1Gebbyi9tYvcftHeZs9GipCh4mPXkZqyUjGy0/rL17Lg8UOiShsqycmDFOIQgNunC0nCSwfm+kcSqk1SVbD2GKw9aYTwMLcxU3fRFAUK2YDwABgMg2mAiAcnWAAHwSAUyNP4MACg+ZToSyo2CuzjQRL7sxL8o3U7dx521j0LHB0nHFEMfHI0Y0uCpKeXYGGf/+5LE6YMY1g0GLw2XywDBoQnhsvmsjjnRxxPo3DlYiMvYpwMqsrBwcVTOmqaQhJOZg20Ldl4mxEQzzhJkRNPyz889QIG8WhwvaBq8lMZi6xekWzy7U/jwNYc7tcV5BeUc2d5EeJVkZ4iN1BeNxzJlcNcKC/gNrKn1g/XOEzFuevYDEUCpanhiPD0TDgvn4lS8ODylAUggYJiRJiLjgGCoB2MgCGAaCIVgMQ6BAGhYApj7IAgAKFwQraxD1gpR2YlXPlsn+KZ/Vu/nlrYpdF96l668BGiGEDtY21IyzlhdhpTJ2X/a/+bIZTtPB0yNahDyihRQc+i1UjeJEvv0y4an0jmfl5+Un0nvye5u2KlOW/FuJX6N3w/ef2GL3cVUKa4xXn77+VOuxGeks+MFxtA4gnBQJCg4MmnHymbtjiO5kTycYHRggnwv9oezUWg0HY5XCkYRAw4jVzXKFYMOADcwGQFjBWBHJgQ3JMAkAoEAEv4koXGytJxKhwWzL9TWfKkZtV5X3Oph3dNvNDo7YS1HPQ6YPdDllc2f4h5T3pG4Uyiw//uSxOyDGW4NBi8N98r2waEJ4bL55TwzOiflcjM+tM1qN0LwiCZMDNDpuMVpYGuWfTv94xz/ufPLf9np3KfWzuahZz957YaVrK9o+gZ06YjctE84b604eH65jlJkPw9KEb1y4SSYpH8/JYkLCeSQpOCWOqFqCfoiLZkqA4sPyOjeJrVKBhyCwG/cDeRD8iwK5g0gFDoBimohAtAAA3CqAMgKkDP0TodqpzQxjE6X7kZn+Qu9927lUlfK4E5eKk+oqNLIFl0kgQN4F9NOl9xbryymBcdAuMVMVjp9Cyj2iFNGbKTzOkoy9vpOwpsQ5yeE4J8ve0RWLRLcre260a3zP4///8bPfzuXt8y1m3Y6La+zCXX/mT1de9qxsso1bx7I+FA0ghVQOwlc+WlX1jLxuWRwhBuXiUmWQLSKlbN7NqxEDwTjxYKAVJY5LBe4cE4c2bPqIAQqeGiMQeYNQJwyBCYSQGxgTALqoGAcAsDgH5ISAFVnNVnR0kcoQhiuMsjWpW7F+pF72d+1+djsyZAw5UcjEsWK+vM9z6uTnMVEKnw3Uv/7ksTugxeeCwhPDZfLQkHgyeMy+OE6aKp4UQjxZoq9PIS+RhfEa6GVjkKYIJZMhR+cI1SBx9S0Invcq/eeeqfe6bh1deW0mXkWLAfV29hw2jwJ4DlCV6yn4LNhXN8WitcsJ54hNm1dNyh0X2BRyaGZm6tPZQPV01spOJTcnORMnWhkZDGclZODINpWJI8lyYxNUVB2AyAGHCh8afoy5hBggAYDEwTwLwMB2sYiAnDAGKVUxcG2o2jZhBS76e/Pzu4jJ8LkX3vmuXMfuKQUHg3KH8LVWgY5IrD9qgGOoxPnS3fhmMKED4LNhY78prtFJCcoo/H0eExIUNJx3pZFejGf5+Vl9ev/+v2yX9n77i6nMnzfRZePurSjpytv/RUgVJEEx09c5VRIeuLzLnTpm684ZRvODHoYW1pDQ2DkUCOKmQKHqwfCAJ5YOReSx4LosBgpaYoMDEZBoOM8GQFD3GBkAuYKoIReJWowJACQMBPHRGAehpIkC1DHsl6Lc/fiFHqSQnkB63N1f5Yv9sj8Y1p5+CpmdYXAX/P8FXDPtQ8dSNr/+5LE7gMZ3hEELw33wvrB4MnhsvinETlNgoEFL45l15M3gZAwPdERq5Dlo7FZiCZjsdBeh5ue7HHl6ecFUk+MW1vHvnObSTYhavH2+a4UF/fUjxx3F8XTfVyjRVfpDLtkKKt9aT5yIUd9U6nWxGqguRbSHnE1Hwrz3QhGtVNHG1Fzdk/aVPOzOTFFPhCVQTdF0BkADA5PrNOEfgwkwPzAMAUMHoB0DAsOGYCYBhdyfRpRiokC1M4S2Nb8/UpZ7tWX6lufbuvuVN7vnkJjHgArXwdtJmuQ1Z7MMdG9U8IYLiafCmUk1dVeIdUlREKZ9SFqNVNzh/Ncg9Y/nPOln9837twyS79fG+pY+JbXy1MFr11ChXcLbgrL6Sypu8iuN+2Mzm4sr1qW0ahEBZViHM7YpEo5MLC6Ri8i1Iq8wVA6VTEdSaJlMu3718gmpl2X1qiQkIVS/PVapAMiNLOumYAgbmBoOGF4OiwAMRBwIpC1kdmg7gFsd9sbr41K9/dHIu0179d/u+by7zvOWcNiyVAvZHLdm32VDutqHqpWzirMyJAy//uSxO2DGVoPBC8N98MRQeDJ4b74xdpeZrZYpvMrlVt2ybn9mRfven5ppmZ5zOf3lc/5DPKIdNKeLBOUhBw6gQ7OMAI7kOV2SM3UcXGNWz7alUkkzBFVCObM7Y1Oq3kzSbykfpdXMCcdIphcMs8dcPW9PIkqJ4ivfgyABigDfnLcH8YSwCZgigImBmDAEALqtMDkAgeAygUKgGpZ0woAAIwAs26sfmbk9RzMZntPbZ3bvcu85N1r0nhj/ku9W/2jYPE6lrS5uciuI2bo9NGmy85XTV+VUUkhrIe7/XjzzG53cZBBz0phfSVE4VFaf69aZEN3qtKq9aeu373ur2231CpTUWsfVJXrlCf3o5Z09li4erm+WnCueSqBhck6zKpjePdqJ61vXqHKvZiqxDFlDjjOEapfDoUIri7Zk8XMuG0gcZuHcXQkMRCS+oQfLKf64wVZNFUzslAfhINVBYADBaNSNVYVswKgNDABAPMIQBwIATbgYEQAKyIgXwYJeXUsD1kDTs7kSyuxW/cocM+XvrW9Y0pAlwS6TUjJTjFhChvTU//7ksTsgxX+DQpOjfnDikHgSeM++EKsvXegjapGSarKxkbOeTk1FJ69Z12j7pn9zeVeHTa3iUyhktS973zzYi8p1mctMv7m9WP7raUpNWnfUKqsP2hLiGsW4VVC/4ENtUZ93VjsgrGaKjZX5RNzReDIwNOKhk0TCcJK0qjoRisPR3AOgtIoFEzyB1AIGFyl0ZfI85g2gtBAEBgDgJhwGaQxgQgGjwCmY0AWznEYABUy0mVGcIIn7Nd3L9BP85ex3eo/t26Z4NtrljQjlLEZrdjuZ7FIbnOK5YQQDMO6JHJpQj+hAJGCU6UeFe4nRQFxtDY2tp1AmIIsoYT8/Su33B/uavWntSkGN+9g3vLrx86daZsPnCBRZj+CoJ7sKhY13ZPq17Fj4j5fIWo1a3Fgfx2SdUMx5KlmPtsUCmLcjVLDfJ5HMCjoc7iSQ32N6iiJQ89Uofh0KyIqCkADDpGgNsED0wlwHjAeAHMIsAYaAvYeCAEhoAm2CgAFv2k7FCbKe9BhTSHcfnvjlb8sf1zLe8qY+hRc0zc3CKt3RQzgm6ZKUmr/+5LE6YMXfgsGTw2XyzFB4IXhvvhNa2ZTuC34RIOofz3hksMgrzJf6Z14yK8XQcWXWkdTX7Szh7U//uRb9ntmeptMvza5uWo+c2WXDKzKelDqJ50jzEr1YhHS2Ailg9Wkmi91uzzJXjXD+XwlIxhep8dnqCcAh4+L0eE4rPBupLhUMRaeA6FaHGv98DB3NXNhUewwSQJzASAdEQExQBU3YeBMRJeIGgCqu69bt3E6JNuAZflLZ3ke/VyzqpUyu1f1Odylt7O0t3GK+p9qZPMLzAw55gYPT5hmsPo0hY1hTWbG3zKwiMTD7SmlrWo0pimViiLbj5gcOVJrKirhpe6i+ut553n5tqN6gUWqKECHphcglxw8gKCVSwnYRQCBYJRrBkRGBslUDIm8J1uORCWxsOpGPjQVTfddF/ZVlNoYTIqToQSxqKyl5VERhQtGmGXBnKkuRHKtWOZfnzDGUgAgsABkZ75xA+xjsI4FBIWQEIBqgBQbPLE08nmmVKla+r33qay1Epf8Tou1/z1v7vOB22K08gUmskZyliofjaOq3yMG//uSxOuDF/oRBk8Nl8NMQaCF5D855D25qh5o7w0pg/r+6m5rC59bOMvMmxBmxvczheU/jZX+59/I7/i/vinnvujzd6ZhwNRaxGqk8mobg4QNP9dlc1y4u3BGK10/WWLD/Cusy3ohtcLiJBfK6kMuu2LByqhUp1vL+yRFlEQHyfqqTTcIdSHY02hKYfw6ZuaBLGHQBOYF4IxgbABgYC4RADmAqA4t2kCAGeVEaVXTatknyiMh3HZP7+c7Y59Da3SZ/9XVP+qnwRpBg+Ret4aW3iboSV06xEDIiOeoSKiZs1ajNsZZ291xA19Uqh3KtG6wQ1Y3c6GlaSx9XVa088yr/Nvzwla/E977XQ1irGMOIc8TCQJyDTYEo0WEpwfiKCYQAEJYKtSvXDI5HE1q9Kqox0NUJzyIYpaSt5yPXbqaynOtD1C5vYVR1w1vRqpdDE9tVF/eRkYqRznnagWAAwXitDT0GrMHQBowFQAjBXASRaS9MBIABEhbCHt+PMvYtHGa2vk9j5ffwt6+/jvvOX+7Y8YYj3M6vEaAjZ4RXhZyDPcUiv/7ksToglb2DwbOjffDQ8HgieQ/OD6gOW0kzYkMuHJVx3nGavpSot2KESk+qyWMeDyrUzwstq///10ZyQkOnQd2z0z07XZrst6oVkGyOEtNLqJqtHtuU2PTpbCZ86ZnpWOTc4dNFqGXVE3LbgTiWfGCYtBxBGSV6UcB4jZLLBHI9Vo05xORGrWBGEyH5A43fsxZDwwADMxpDAvigQAwWpwNkGgHb+bSKbPBTQu16vLstt9i37t81Z3v89iOByxF93DIOFmu73b8lV6+3c5yFKZK/vaXUtRFyaGyh7SiCocIgcNpCoXpQ38mTjH6EXES99TyP1jZaxbe4X1B3ieWJNLbcLwtZ8loMkHLEwRpX7JhVXamdWKZXKVczuJ/Ll+rmOrkiWRuUinZEaoT2eWZVEjNGTKnDuVjahsJuWjmXCHq9WoYnSmZXtitACVSoGGaKEa/IN5hcgKGBICGYAoAAQA6IQCiABWlbuXahTZUyuV1Jc3Gc/imU3l9el/Czn9J+gVYO6jJqODuAIOymZNVYUDBGjqzsLyBOYjsQ3otLw3YMUb/+5LE6oJXbg8GTw2XwwFBoNnRvvkMHa1GIK1MixwbCxZmNRLjUaCgYNQRYoxiBhgtIkYy/8FnnIedLmu7T9na87X+6dgrBRowhYrKFHhIdxyBaplc1ArK9To+dudFKg8nJ+sHYehKL68QIjQfCclI4niUOmOkJQThqWBWEZ+gFk5Mw4erCiOD5njBhN/NaMjowfQLzAcAVMHIClWkLgEBAD6kyEAVFakT/bnFWxqTq6hz/ubj9X6/9yrdod9vrgg1B/m9Llds4uRljs9yuceTV2KrdCYGkDGTw0d0pgxCUAHIkVxJUymgMMOYclahWFKwNzhjwzIWPUQMalSnPIge5Ed6PdZzLLqP4VIO/EkXFY9rXb7sDhI3Lbndxm2fLY3s26rMRlL2tngpqLLObiEPD3ZlwZEE35ieEvnWCHIlgIOlydKk3I5fUWfRcHpBFUe5JlkEkwmkzrzocjgMpunPDoAMeBHMCwsMiABLfRQwlBDhYAFN3NR9LnsEtO+vV+nivas93Hfe2fs2v2OY6wrSDBxSkorQkPlOEzt4s7LwiM2v//uSxPMCGboPBs8Nl8NDwaBB4b75mYJNytWRdkEmPcyeobkiJT1BWM5nabBtS0QzPDRW82z7ORKRdsPN3tNr3XzBNdxcxrPQIooCR+z8CG835mVT8ung9QQjQsTEtssJhHW1HaIgCsVLqD4ZkotC4sjuVB8RjyIwNzcUxXSEIKUM1MtQjgOwbl4yAkrWIUXRMYWwVZrVAVmEsAWYDYHhgcAAMOVVBwJb5JTssyVlZd2GGh8m8LszI8pjnbne1MuX8fyNU59U1GNpA8dT3tZtATkLYylQzIW/BVzLM5nxJZqW6Rbcr/TOGOIsca1HKEpBZecpOSUzP/9TztXsTLab22vvXp7VKvOwrHsOfbXO06Gl1p0kLi98qEhCJMCksOLR+Mi5BcwOFFXiO0HBmelxuG50SWhqjJQiho4PgjD6Vz6E7NRwOUoDTcyK40GkdRSAAwIDijSCIfMCQDoCgeGAeA+0lO0mAXlBYAHLx3lFV60iUket2JzCpPbl97u8sq28aXWqTO5Z/lrmWFyrzc9j9j+dmaGU6jo6ZAyBVgpSHkrh4f/7ksTqA1guDwQujZfC+EHgyeGy+BHauOQszikh/PIGwMKbGbVwYpgi/EFTBR7yBYmgJEMMtWEeTmZ37Js5gRvDxum7PtX09dPZGPfTbqVgiw4kpxtSrXlHOyI5ZQpdKiGpIDMgl0QY1DJil9hKFlNEsD5AOKwxt1Moa+UBFHDKXpRHIZAaZQpFHpwlxbVsx10XqY91tZAoAZY5Mfnq6Y3iEYIA4GDUzFeZEJVIkq7VlpCQfuu+Xw13sB/jKLP59+1/0X4/yapN6/uKSf9OIqXXZrx5XI72dJEfUEwBWGaAMGFBmebnDOUDN0dLXFcoF1rY0hkDQjmbGexvrN/h6/ycjWc+91mpBtq7+SFGvZzmwr49JZXBTzvGtrZYcSquQ28za9bNKZdqGKo4razJVTPGNRkBZzsqlkku0S5IBTyq1ItZcEJU5PVW1FUgmTBhrSORpe0Qoh0oUyQAZQAgsgBhLgnmqiCkVgwmAgAsYMoATUYfZPXdhY9hpTvba7e1Y7u7bwpcOVt7x3rv4ctUmQ8aMLoY1+RdQ9pZ4SmVTaLsgo7/+5LE8IMapg0CTw37QxXBoInRvzEhz1Oi8VWOTvhTNwpE5R/csy0JkBwIfaEj7UrmcpWe577H+REV2VXx7Qbf6re94csDcJ3ik0KWEzx4rqA3Z13JiasK949mivkwrm58+OjUZfTrcyz8/1Wp3BJuMeY0zegHGqi8Klyb1APpGK4yoMhIzeZD+LcpnUxxqcZQAMBMdOVV8MGRBKgOGJ4OtKT0JhGhsqgEq62jO1DimXPjW9QjtBV1c3+N/6f99xBhOpXh1KFfIVG4hO1maPmybP7FtYeZ3SjKSAyKU1BMDxJuE3uFNXTIgyNxgaAEUQlsOJZw2Nay1E5/zpwm1aub7k3iaFbOrxIuK5rS06xq86ovLVkjOlej+xuDZBXCfV8OGcr9gUcsFxVasN8uCgPsqDOZz3Va7QJVqtQLBql/ej5XStHztDHSYL0xuLkrx6WZDDXV7+XSAAAJmQAMJYhs0AhQDBQAfBQEwCCKUGEABSb1lv2oZOa5uDNb2qnLlzVBa1c7rXcMf3exwtxgrVM2YyPMLWpMoMmaaZayl3MiL3TZ//uSxOmCGAoNBs8N98MdwiCJ0b74Spk9DGxi0c6N+JzuoI60NGItm6TlFRH1TfIo1kKzS3eQ7P2v90+dZk3nMfcamr4bdQYTjCvGeS71uK6f1jM9HystI21V7tlftrErYKp0tngqnrO6Xfq6OIvBvqQ4l2iWB7BQxyYzNSxe1LidWJkvLaWNGFomAPRhNDCGuUHKYSwBhgPgFmCCAap8cAoDABYcGAB2O6TXY7knnhqHeRyM6mrGe/5N/qhq6ubmsM8cf5n1fa+pZ1UFZekh7bObBAZMzEbh8kGqL6QH0hAIG54wZiVn0HIGGIJRJ4XcXXBhl1oSm5XM7hLmg1sTHtbBkahaZt7wM3xBu1TxGB63vMvqQ3by8BVVmeNbU4MOWNeVnZVfR9OklysSPlNZPQjJSayjzraTjL86R56l0Qi6lS7jFOFCoTYX0XVTOC6Z1OYC7MI4oiTKAfKFOG4AAwEAMR7qMEHjMCw0CgQmMYIMhQWfe+gIbTBYsJg2mvwbSZ3J7tPRaw/e9ctd1jtgHIowLSZtSPprSnZCLSX6jfZ/Vf/7ksTsAlgqDQcvDffLSkIgReG/MCnKlVha8ikxH2Avji9DdBAUjItCKwhXFYofToI0/0I0t5E3vHM2K4zvGq3pHxGiV95pcRbahWjPmrscKHdTu1Knnsr6ViaFXOwIayQ1EXh0unOGmU+mY+K3PYu6eZCocUMTi7NGV2ynIPSc7cyqw6yEP0QXRjMs82lpeEQ4MMUbo1gQfzCRAeMCQBEeCKQGgkCeNQpJNT1xBuTylSHK87jN67JucHchBQXsbjZrxq5k2artTm1N1LZaX0XeaoheXDVijNupRHN3M1kFxILIGgYZ9rDk8iQL7jatJWW1vCrq2N6+KV/ngZ9s3//+d58taXx48H73h7Rxw/zDf7UtZru2WlH0zmwnK4HkwKVOIdZRK07JUKU6kZELN8vBzN8RCEQr2Q40xAYUoZiVcUyg2CGb5CjvLcyHW/WE4/UKwrdlBHLU4i7shKUCfSXa5AArSABhq2Z7mdhhyC5gEAAQUcQCgCyTa3HloWfT1x1dY9yjuPz+H28NWfwtdw7seZu5VWMbBFIQ65aOhQo59Kf/+5LE6IJX+gsFDo33y0VB4FXhvngyWk5lV19OWqbp8CQkDGG1h6EaKrZOZmZm4MhyLtJypsb052ZTNZlufOy+s4tjXre+PeBDtBvmrx3ExR9lwfx6scszfeWEmNslFW3J7EJdtERiVTJVKRlYqzkPx3dHqlRLt84Hg+aGOOsIp8eCjO2KSe76x4PlKdUROMkgJaMcJ7OZF4MLgtAoQCQtLSFAOS4ul04RSv5RR5vNyS/nT7x1u7c1nnf7azv97EEw9SYqzQziTZdMlyNX5bj1eVCd3VL9JWusJowY6DdTMPVoVhpm5NBqwpts4FJirF1DW8I5ICyxRHey+Wlt61i0l8z1rBg+SF6SP7RIDE4KaBHaIMVGTJKI0x1YoVEoZG2G2vUidCYUMKGxHW+VaiqhbA0NzaeiXL0toQj1Qrm1WKo7TlLg9L6fpckYu0MY1SOc7DiYXU8wvAQwFeSLCWmAyCYgPe4DABkQDsMEQAN96A4AXC+uHKmv4Q7luKax/Kxa+kyv9/mvn79tdsa9fNx/aTY15rM0PXjUq++ntmjYuIKm//uSxOaCV3YNBs6N98sVQiCh0b74pbUI2M25NrDdLHa6UGsWguYTPSs/HMkb/eNhrpFncl0KPjy62xbINL+9nci603TOH7f471rcdsTyr3KyoVw7dtS4USzFZlItLbOuX7msRHGbJPoiGbW1KSdU4XLEeJXsbkaEEMqhNcOBCVecw+S/SE6UJEF5O49EAYbGeZKjyFdN00I54GmPKTTbsQFJRogACt0OuPMABAlDw8Eomia6t2lnpJFs4Lf2pO91Td3O/hvOtvVnv3+67ocKNQ9zZ42Rw4FqRxTPKZ5yOXmhU4eR1YSDGRfPvJfyOQ/JU17m6z7n1SpMee5H51Py///n6hmyn/K1PeNzymoRzI4m+aHxUUMHNerJEMPYUKxQKo0U9ITYmSIXWGDIowy8rBE0IBAJmwojBg2ThRk0GQ0hWLhcKvtrVSAMLEkA0mxHzB1AuMBIEYwGwCF2hUBgiABqBAB1AvBfmLkwvKT5ble5u9jfvflq1r93+cUnROXhk0olnjN8D2A6VKO+f4m2qbDqyxA2gJkI3EGNEh2SDmAkbP/7ksTsghrSEQAPGffCn0IhdcGm+IDDqyIQyVyHFS1GBkOwOgIIFIUiQwQgYuTTLcRWW7o9zfMRggPr0fRY8CA2XZ8aZWaI5q2RdIW7hOU3TKicjildXMhlYDZOWRct2SVIUhLaikgxnUTsXFnNxTjfWE0Zp8kDUI6FUL0cEQnRIS3CwCyuC5SQhBMyRsw/RODUfIZQxPQ8+PKwxLAMEA8JBRDoNBlqMBKRsKPRnTGKbkV3dl26tr+c1Y7u997WebhDBRXLCmaG7ZGbvlDZ9D9KZobEqt1uNOxkypwiJrhWb4TH3bOh2KHJhAS1HY3hHtW474lN9UP4+px38pr/VLfGMY1JrL2Gw0pd8rYkC8W/iwYCTnsqV6LJCmVKLdLhVF0iMjTMn5F5XqyExtZYGRpJaMCMhhimdIiS6JyquP4my7L8pGiMvuy+kyUrmTogJ1q9a0oAAAUASAYlSeZyMAYLBaPAsEEaw4mAh5pKyTFjUH33Lhl+IhnQ5bjm/xxqc+rh3XL3WftNjpOhubTJ0kIgdQ1HPh69pEHuUPkB5sFDiQD/+5LE84Ja/g8ALw330wJCIJnRvvhQjEAsLBRqFLHJRjBkjjtM1BhxDDGB7PUhYMhhLjolZf/0PgwxMp0871x8fEG7JmDeSI1NkG7LGYZIzuIq2BKYfsKRc1hzVKLTl12pTGStW5gXZ/QjgfwU+v3QLSfyhSkYuBrI6K+T6ndo9AJJGGGcqEqtRkuJmSokfP04FKN1OohwjbETSDCACxNEAB4wZgATAXAzBwMq1i/7NmwuDjF5F12JbAFjdm98N1K1rPCp+fOWPx79i2+t9/b59mWlt/3/rd8y8f7H7vmfltXaqjFHYZS7pdO0fJy1wfoHgjI1T4ufesxtL3vbmV+/y0GaVShVYze+83mxO6xrb3Otyvq1tuNHrqWAyXibo1Ldn7I4tVEPjvlY4uM7ZBsei5aWl6dh4ljjsJ3qx4l2BUnLDL4ToIQhBfFyXVXTMBjK9gYEqsKFPHEkCoUR/DjhI9WsxwqatQQChScZCAEEsOtMswIBiAP5zIWAW46uLrwyfUl1ckfz9jO/n/9qYd7hvDlzn/nn3DLkHv96kJZBO0kH//uSxO2CWjIRA26N98M3weBt4z74oqLVTaXtj64F/42vtZva2mCuIqO5TTuadRiQWNEaHJOLeWRL3RGl2m9ZeLqvrnvjmf40iFvXHz3ZJTsXKvIkQ0cqiw1ID0VGFmoUCtpjHC6jfcV9GfJ9ouI6IcB8P4lakxXlrVx67UUxlYsQCC4PLqSSqhHBLLQM15OXv1AVoBjOyR1aapiGCg8GAkGzJTAMC4F6v7rkPddZNnUntx3t25rL+V+/hlrDVn3OI62nz60O6ltAQgE8LmHYyc6yycLLN6lempELFEONW19lJR9MDVV6qByIkKU4CR0FutQSWWblEl/SLVklWnp7m88vpTT+PSD3JTvpISoVrI1qCErWpyiTQVM+VuHiTZY7e1KKhyrJqqtpOFTvmpyQKyzQzIOpQF0TKncDnHOkkCXUyy8CLHoWN/FKkoFcW5QLBfHc6PNJUJVuEAAABAWLIAGF5EnPIxBwtmAAZJnQ6oZ9+fwblWoZB2pf+t27Y5v/13eP57y/zJjjG57TI9YCZ5BexmbTZYmSm41q5TOsf7Isjf/7ksTkABbyDwlOIZnDIcGgVdG++U7cU4VJTxg9FrLb9+KJNiXQt80qI5bZMxtJFlLI2sZHv3mm9T6W68F7QLor9Lb1bTh/jKrUyk5ObI1BKUIRYhPz7yg4HBULTxIMIUodpRLXGjcLY7Es3PSSPaS4ejQNZqiJ7pPCQfyu2KCkSjNig4gIGOPObIqRhAQmDyMLClgSDsoeN770lsZvljX/tXChvVMO4cw5/3MuYZNmPv2F7jM3257V/0PpvQ3Li9R1u1b0Kqd/+Y1anu4aQ2cAtqRLlFv1EPURNKtPdak9KFZu5J79I+aOmtaWzv6hoZpO8xZ9fIuKYtTbyvc4CmjwH0WkqZopJ1KqqNKvUqfXUrYrmhtcV5UlvQbKfk51tR/lGeL1C1Wq1ccBeJScqo8S7O1hXHshhzIeXEl5juzmZAhYmyMJuEaMaK2KNCBPSjM4vAVsfKuxAAICwDEYXylUQ4dTA8BxoHWnLro2ixa7L96kOU5vmt48y/K/hv8t8v54eXkViUyPVnikbz5NBfe/ZCP8t4tQjmPHHjODqmq7vSH/+5LE6oJW6g0Hjo2Xy07CICHDPvguFy4F1m0cEHx6ho0EmIfKRQVWG1v58u2U7mSF/eMYrTG66pqVzzLZWtvxK2sNGV+5NL9c2VjOpWF7DZXTChrGsODMr3NjYWuPDbI8NwS1EJT5fUMPhkVK8cavKVgIwxIZDVCcYjvXKqhIo8zfLkieglyk+ipZjskNMABAKC2SNVTSm026nGmczhP029WL9at+Xe4bywu//dZzWeMa/jv/Pm3W7W8ZtNkttNTPsZNJbdlbc7h+tHt1qazjlRMHYjh+Bve6L2amcWiX6RSLuvVmlSlUyHzYKKfTd3KXENHxnY+YpF+HU9deua6iR3ckFljVmjXVTE0O0ych3Xc6FE7dp9JOKHIxsQmdDCTElJl29LMrCPJxfIeoChFjSK6ICqnFeZDIIENUT1SEZQkp188TJDnL4TtGHK/ELEOIWXJxhPbqAAACMXfAAYpVx4MkgYbA4AL2gVNideGTXH/+bouzvKnPxxw/lTmOHLvc+X9T0iG5mgOEJlg+qm4ny4ZaMGyNUUWUXSMontkySFo8//uSxOuCV5oNBQ6N98M6wiAVwz74Ui6c6c14uR9NK6Rjco9z1QrzY4jU045c8y4xl9M995ymTPLMfWROQ3teBtuE4ZcvtDd/vMn4nE8SAvVKiSpIEDKxUgpjomH5EYTcW0hbQiMNYfGw/G68nKxzMkFSpH0wCwvj+WT0Dbtl4EyMJS3OUysMJQBEIFNqo4hLmHAgWba9bbrvdH/3s7+7PKm61Lzer+POX3jvvya+PO7+95+2Zuzu/xry9q/MZmiW8LXfFQvk8bIK4rlvRPZssfJZSPhNC6Ts0l2InnGdM8hMKmE+uHo0nbWbWFOn2Z32WWjWUmrJf2h6xv0u8UDzocn4kV1BZG1xRJ+sp/qeEyHMuZXxynezN8hPi/Ibkpg1K6dpY64KRPgI+V5bClRo/jsUpP0LOo33pOiFErhmifghRIkPBSlUQhXC1pESA41QQQ2hTCsk1QAIEVkADD0DNuJwwYCQqEV2xYmBUudK1HWrVIcnsbW7uO+53dZ3+71+7F7v30IGxAZlDD0j5lXQzSofyRHPM0xnYQddEOHsoNQTRP/7kMTsAlaODweODZfDYUIf4dM++MEoz6oBiQvQOPimJDBMgUOwOnHcDCYRBxcIqHhgsET5T8KldpaEDkgZKfzxJfveJfCjb8SLETKt8RvVzXES8R5uNZ7lVN6k0tbObSNQbAqidrKjYLIF48IIShDiWHid5ytepBFU6b51neK89Rh8sJYgPxM3aeQkZp7aQ9ZNNUDdJ+j2ZTagYaCIHhBCDhIKAHoWslEyPUYDtUQZR1FE0nWLr0rG0yvRWhZaNO+NfvSyvPxvXt2ppfOU98u5+X2hvsvCp6E7ifxyvj6/xmA8dk2NuZ/dFsBT1PTdol9tb7hcHuUqmfYs2IW+RTdsvKN132on1mHC1iDR5Dhr6uZoMdsWmSDI/YHsBdLVI7G8elsnXbb1vRyK9acF2rD8Yl5THETJnQxtVLgXOON1IL5fjWa4aEngdqYck+iS6mrIQUXpLCao4npwI8n6juoAABpRSQAAr0NZVWUhOjj0t5uxyax3DP483byr95nq9j+G7f4fXy22jVmI03Mi7jCg8bYlgs508jvrSdDjGy+/2P/7ksTrglnSDwEuDffDG8HgYVM/MGjAgcGZ8oxkTjua6CzYMaUObE5VCl1gJ9aSlGQ7csvKo06TpLbGfWWfHvqferxbwYc8d5iaM3xnqpbXN+3Mj9dsrxW7WFArG67MrjrL0oTnvMW1nXFHOasdvTxnq12dJ6ulAfh4UVK22KEtpfawkyfiPa3hWQVUk3OoAjQQMLWBviJg4YA71lzeWs6DLOXdp/3j9Llruuaz3n3WeV7terTmeV83O9RmNGOhlftl22PbD/nKNqoO4FiC3na1kESZHH25LhRG8dJyGuK0QId1cyEj9fCE0RmC9+wc5taqOx713xvrP8pu377Mld7mgx97iPYuGyWK4ajwF68Nm8rgrnxwvDpViHw1DIf6IWUwkUinVVs7IxGT4TiTeH8yrKsN4mQmj8gkcbxxG8hCKO1sX3jWhS7cTtFfeNSsaEMJgkCiTyqRJDT2jQDsAFtwNugHWRBygTqaaaalnkDyE0U83Tdd1mV3W6zQDCEOgQLj8ClGUS3S4RMTGWK6Xaqwr3t+2/JZkrrw3hmp89IHd47/+5LE5wBXVg8FjQ33wzVB4CGzPvinwAfdNgwTIkqNPtMvR4Ima8Pys7sXvvOKQ72te+MamjRoU7lPCYp2tlhuTxuxKz2XK/dwZZY79SK9bVydUsZZhJ5CWovSnUyvaViAcCFRmddKlFHAilssbWeykRCuVq5rhcIUaC6ShTKpRMJMEGBmaQAKLOS1WONvspvSrC1u5aq6zlNNlWyprW7OFymu41bOsu1gZMqqQYBE+xsx4UBUgxlxhTMFGMKfscMBQm2OrKawyDAVgkgqqsahjjMKCiQEUWAkfRNjlVlXCo0AnLpBmDCm4uucON2GuoY8xbQaSzPs2fT1tvL3VdPnz6dW6P1pcTmXbQzMKtQ2NZhdJ6PS6tfR4qeXZcWVeJcdyjMnKtJEax02GEJkzoauCdMxzNMNSDiHaGCyn6TkybXGCPEKoG8giUkJQ5yVSgAAmIJUMzxXFHWuX75m27m5/WrBl6flGnFlxubNOzbn/2Tirjc1E40sxNWzTs15/lGnFFxebJxpZl5qJI0oo+NVUnFvG/NIgwkDEE0FokgUUBE0//uSxOmAFloNBKoN98suQd+lgb74FzXyqeLUkRBhLa2P4k8V9BkkvNPFfQYUstN51GVqeRKRUivcHcV9BhSR5o1bQZIefSO6VRbR9EBKknhpoxNqlXQZMbgwHNUmkT0ojYL+hCbQlPLlsb22B52VDi+l2KEoS+I9lgI4ekR4NkTkYBOy8IJCUOUq81JiCmopmXHJwXGSqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqkxBTUUzLjk4LjKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqv/7ksTwg9lV+rZGGfXAAAA0gAAABKqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqo"},{ name : "R_sfx_pick_wav", data : "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"},{ name : "R_sfx_select_wav", data : ""},{ name : "R_fonts_alterebro_fnt", data : "QkZOVAABFABBbHRlcmVicm8gUGl4ZWwgRm9udAwADQBhbHRlcmVicm8ucG5nDQALAD8AAADvAAAAVAAuAAMABwD//wQAAwAAAAAAMgAAAEkAAgAEAAcAAAAEAAUAAAAAAFAAAABPAAsABAAHAAAABAAFAAAAAABsAAAATwAUAAEABwAAAAQAAgAAAAAAaAAAAEEAFAAEAAcAAAAEAAUAAAAAADEAAABGAAIAAgAHAAAABAADAAAAAAA0AAAAUwACAAQABwAAAAQABQAAAAAAyAAAAEUAHgAEAAoAAAABAAUAAAAAANsAAAALACsABAAKAAAAAQAFAAAAAAD6AAAAdgAtAAQACAAAAAMABQAAAAAAPgAAAHsABAADAAUAAAAGAAQAAAAAAGcAAAA8ABYABAAHAAAABgAFAAAAAABmAAAAOAAUAAMABwAAAAQABAAAAAAAagAAAEgAFAACAAkAAAAEAAMAAAAAAM4AAABcAB4AAwAKAP//AQACAAAAAABvAAAAXAAWAAQABQAAAAYABQAAAAAAUgAAAFkACwAEAAcAAAAEAAUAAAAAAFkAAAABABQABQAHAAAABAAGAAAAAAA4AAAAZwACAAQABwAAAAQABQAAAAAATwAAAEoACwAEAAcAAAAEAAUAAAAAANkAAAABACsABAAKAAAAAQAFAAAAAAB5AAAAEQAjAAQABwAAAAYABQAAAAAAZQAAADMAFgAEAAUAAAAGAAUAAAAAANEAAABkAB8ABAAJAAAAAgAFAAAAAABFAAAAGwALAAQABwAAAAQABQAAAAAAzQAAAFkAHgACAAoAAAABAAIAAAAAAMkAAABKAB4ABAAKAAAAAQAFAAAAAADrAAAASAAwAAQABQAAAAYABQAAAAAA9gAAAGwAMAAEAAUAAAAGAAUAAAAAAMsAAABUAB8ABAAJAAAAAgAFAAAAAADDAAAANgAfAAQACQAAAAIABQAAAAAALQAAADYABQADAAEAAAAHAAQAAAAAADYAAABdAAIABAAHAAAABAAFAAAAAABOAAAARQALAAQABwAAAAQABQAAAAAAdgAAAAEAIwAEAAUAAAAGAAUAAAAAAFEAAABUAAsABAAHAAAABAAFAAAAAABNAAAAPwALAAUABwAAAAQABgAAAAAARgAAACAACwAEAAcAAAAEAAUAAAAAAF4AAAAXABQAAwACAAAABAAEAAAAAABtAAAAUQAWAAUABQAAAAYABgAAAAAAJAAAAA4AAQAFAAkAAAADAAYAAAAAAEwAAAA7AAsAAwAHAAAABAAEAAAAAADnAAAANAAwAAQABwAAAAYABQAAAAAA9QAAAGcALgAEAAcAAAAEAAUAAAAAADkAAABsAAIABAAHAAAABAAFAAAAAABEAAAAFgALAAQABwAAAAQABQAAAAAA1QAAAHMAHwAEAAkAAAACAAUAAAAAAHoAAAAWACMABAAFAAAABgAFAAAAAADtAAAATQAtAAIACAAAAAMAAgAAAAAAVQAAAGkACwAEAAcAAAAEAAUAAAAAAGQAAAAuABQABAAHAAAABAAFAAAAAABiAAAAJAAUAAQABwAAAAQABQAAAAAAaQAAAEYAFAABAAcAAAAEAAIAAAAAANYAAAB4AB8ABAAJAAAAAgAFAAAAAACsIAAACwA5AAUABwAAAAQABgAAAAAAygAAAE8AHgAEAAoAAAABAAUAAAAAAOEAAAAgAC0ABAAIAAAAAwAFAAAAAAA/AAAAAQALAAUABwAAAAQABgAAAAAA3AAAABAALAAEAAkAAAACAAUAAAAAALAAAAAdACEAAwADAAEABAAFAAAAAAAzAAAATgACAAQABwAAAAQABQAAAAAAawAAAEsAFAADAAcAAAAEAAQAAAAAAMAAAAAnAB4ABAAKAAAAAQAFAAAAAADTAAAAaQAeAAQACgAAAAEABQAAAAAA+QAAAHEALQAEAAgAAAADAAUAAAAAACAAAAABAAkAAAAAAAAACwADAAAAAADjAAAAKgAuAAQABwAAAAQABQAAAAAAWgAAAAcAFAAEAAcAAAAEAAUAAAAAAOQAAAAvAC4ABAAHAAAABAAFAAAAAADiAAAAJQAtAAQACAAAAAMABQAAAAAAKAAAACQAAQACAAkAAAADAAMAAAAAAMcAAABAACEABAAJAAAABAAFAAAAAABDAAAAEQALAAQABwAAAAQABQAAAAAANwAAAGIAAgAEAAcAAAAEAAUAAAAAAHUAAAB4ABYABAAFAAAABgAFAAAAAABuAAAAVwAWAAQABQAAAAYABQAAAAAAwQAAACwAHgAEAAoAAAABAAUAAAAAADwAAABzAAQAAwAFAAAABgAEAAAAAAD0AAAAYgAtAAQACAAAAAMABQAAAAAAoQAAABsAIQABAAgAAAAEAAIAAAAAAMQAAAA7AB8ABAAJAAAAAgAFAAAAAADfAAAAFQAuAAUABwAAAAQABgAAAAAAdAAAAHQAFAADAAcAAAAEAAQAAAAAAPMAAABdAC0ABAAIAAAAAwAFAAAAAADCAAAAMQAeAAQACgAAAAEABQAAAAAAJgAAABwAAgAFAAcAAAAEAAYAAAAAAD0AAAB3AAQAAwADAAAABgAEAAAAAADUAAAAbgAeAAQACgAAAAEABQAAAAAAVwAAAHMACwAFAAcAAAAEAAYAAAAAAHEAAABmABYABAAHAAAABgAFAAAAAAA6AAAAcQAGAAEAAwAAAAgAAgAAAAAAVAAAAGMACwAFAAcAAAAEAAYAAAAAACIAAAAEAAIAAwACAAAABAAEAAAAAABKAAAAMQALAAQABwAAAAQABQAAAAAAcAAAAGEAFgAEAAcAAAAGAAUAAAAAAEsAAAA2AAsABAAHAAAABAAFAAAAAAAwAAAAQQACAAQABwAAAAQABQAAAAAA8QAAAFgALgAEAAcAAAAEAAUAAAAAAPsAAAABADgABAAIAAAAAwAFAAAAAABHAAAAJQALAAQABwAAAAQABQAAAAAA6gAAAEMALQAEAAgAAAADAAUAAAAAADUAAABYAAIABAAHAAAABAAFAAAAAABBAAAABwALAAQABwAAAAQABQAAAAAAvwAAACEAIgAFAAcAAAAFAAYAAAAAANoAAAAGACsABAAKAAAAAQAFAAAAAAAvAAAAPAACAAQABwAAAAQABQAAAAAASQAAAC8ACwABAAcAAAAEAAIAAAAAACwAAAA0AAgAAQACAAAACgACAAAAAABbAAAADAATAAIACQAAAAMAAwAAAAAAeAAAAAwAIwAEAAUAAAAGAAUAAAAAAGEAAAAfABYABAAFAAAABgAFAAAAAABIAAAAKgALAAQABwAAAAQABQAAAAAAYwAAACkAFgAEAAUAAAAGAAUAAAAAAHIAAABrABYAAwAFAAAABgAEAAAAAAAhAAAAAgACAAEABwAAAAQAAgAAAAAAJQAAABQAAgAHAAcAAAAEAAgAAAAAAF0AAAAUABMAAgAJAAAAAwADAAAAAAB3AAAABgAjAAUABQAAAAYABgAAAAAA/AAAAAYAOwAEAAUAAAAGAAUAAAAAACkAAAAnAAEAAgAJAAAAAwADAAAAAADpAAAAPgAtAAQACAAAAAMABQAAAAAAXwAAABsAGgADAAEAAAAKAAQAAAAAAOgAAAA5AC0ABAAIAAAAAwAFAAAAAABcAAAADwAUAAQABwAAAAQABQAAAAAAcwAAAG8AFgAEAAUAAAAGAAUAAAAAACoAAAAqAAIAAwADAAAABAAEAAAAAADgAAAAGwAtAAQACAAAAAMABQAAAAAALgAAADoACAABAAEAAAAKAAIAAAAAACcAAAAiAAIAAQACAAAABAACAAAAAABCAAAADAALAAQABwAAAAQABQAAAAAAUwAAAF4ACwAEAAcAAAAEAAUAAAAAAM8AAABgAB8AAwAJAP//AgACAAAAAABYAAAAeQALAAQABwAAAAQABQAAAAAAIwAAAAgAAwAFAAUAAAAFAAYAAAAAAO4AAABQAC0AAwAIAP//AwACAAAAAAArAAAALgADAAUABQAAAAUABgAAAAAAVgAAAG4ACwAEAAcAAAAEAAUAAAAAAAAAAAA"},{ name : "R_tiles_png", data : ""},{ name : "R_sfx_success_wav", data : ""}];
haxe_ds_ObjectMap.count = 0;
haxe_MainLoop.add(hxd_System.updateCursor,-1);
var hx__registerFont;
hx__registerFont = function(name,data) {
	var s = window.document.createElement("style");
	s.type = "text/css";
	s.innerHTML = "@font-face{ font-family: " + name + "; src: url('data:font/ttf;base64," + data + "') format('truetype'); }";
	window.document.getElementsByTagName("head")[0].appendChild(s);
	var div = window.document.createElement("div");
	div.style.fontFamily = name;
	div.style.opacity = 0;
	div.style.width = "1px";
	div.style.height = "1px";
	div.style.position = "fixed";
	div.style.bottom = "0px";
	div.style.right = "0px";
	div.innerHTML = ".";
	div.className = "hx__loadFont";
	window.document.body.appendChild(div);
};
hx__registerFont("R_fonts_04B_03_TTF","");
js_Boot.__toStr = ({ }).toString;
dn_heaps_Sfx.GLOBAL_GROUPS = new haxe_ds_IntMap();
dn_heaps_Sfx.DEFAULT_GROUP_ID = 0;
Assets.SOUNDS = (function($this) {
	var $r;
	var ambiant = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/ambiant.mp3").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/ambiant.mp3").toSound());
		}
	};
	var close = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/close.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/close.wav").toSound());
		}
	};
	var door = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/door.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/door.wav").toSound());
		}
	};
	var footstep1 = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/footstep1.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/footstep1.wav").toSound());
		}
	};
	var footstep2 = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/footstep2.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/footstep2.wav").toSound());
		}
	};
	var help = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/help.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/help.wav").toSound());
		}
	};
	var hit = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/hit.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/hit.wav").toSound());
		}
	};
	var pick = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/pick.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/pick.wav").toSound());
		}
	};
	var robinet = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/robinet.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/robinet.wav").toSound());
		}
	};
	var select = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/select.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/select.wav").toSound());
		}
	};
	var smallHit = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/smallHit.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/smallHit.wav").toSound());
		}
	};
	var success = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/success.wav").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/success.wav").toSound());
		}
	};
	var teleport = function(quickPlayVolume) {
		if(quickPlayVolume != null) {
			var s = new dn_heaps_Sfx(hxd_Res.load("sfx/teleport.mp3").toSound());
			return s.play(null,quickPlayVolume);
		} else {
			return new dn_heaps_Sfx(hxd_Res.load("sfx/teleport.mp3").toSound());
		}
	};
	$r = { ambiant : ambiant, close : close, door : door, footstep1 : footstep1, footstep2 : footstep2, help : help, hit : hit, pick : pick, robinet : robinet, select : select, smallHit : smallHit, success : success, teleport : teleport};
	return $r;
}(this));
Const.GRID = 8;
Const.GAMEZONE_WID = 118;
Const.WID = 140;
Const.HEI = 180;
Const.SCALE = 1;
h3d_shader_ScreenShader.SRC = "HXSLF2gzZC5zaGFkZXIuU2NyZWVuU2hhZGVyBwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACghfX2luaXRfXw4GAAALBnZlcnRleA4GAAACAgoAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAALAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAA";
_$DistortFilter_InternalShader.SRC = "HXSLHV9EaXN0b3J0RmlsdGVyLkludGVybmFsU2hhZGVyEgEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgN0ZXgKAgAACwhub2lzZVRleAoCAAAMBHRpbWUDAgAADQlpbnRlbnNpdHkDAgAADgZzcGVlZFgDAgAADwh3YXZlTGVuWAMCAAAQB29mZnNldFgDAgAAEQZzcGVlZFkDAgAAEgh3YXZlTGVuWQMCAAATB29mZnNldFkDAgAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAAWCGZyYWdtZW50DgYAAAMCFAAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAABUAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAARYAAAUFCBcCdXYFCgQAAAIJBQoACBgFbm9pc2UFDAQAAAkDIQ4CAgsKAhcFCgUMAAaACgIXBQoAAAMGAQYBCQMDDgEGAAYABgIGAQEDH4XrUbgeGUADCgIXBQoEAAMDAg8DAwYBAgwDAg4DAwMGAQoCGAUMAAADAQMAAAAAAAAAQAMDAwMCEAMDAg0DAwMGgAoCFwUKBAADBgEGAQkDAw4BBgAGAAYAAQMAAAAAAADwPwMGAgYBAQMfhetRuB4ZQAMKAhcFCgAAAwMCEgMDAwYBAgwDAhEDAwMGAQoCGAUMBAADAQMAAAAAAAAAQAMDAwMCEwMDAg0DAwMGBAIIBQwJAyEOAgIKCgIXBQoFDAUMAA";
dn_Process.CUSTOM_STAGE_WIDTH = -1;
dn_Process.CUSTOM_STAGE_HEIGHT = -1;
dn_Process.UNIQ_ID = 0;
dn_Process.ROOTS = [];
Game.INAMES = new haxe_ds_StringMap();
Game.EXTENDED = true;
Game.LOOK = "Look";
Game.PICK = "Take";
Game.USE = "Use";
Game.OPEN = "Open";
Game.CLOSE = "Close";
Game.REMEMBER = "Remember";
Game.HELP = "I'm stuck!";
Game.ABOUT = "About";
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
dn_Cooldown.__meta__ = { obj : { indexes : ["test","check"]}};
dn_Tweenie.DEFAULT_DURATION = 1000.0;
dn_heaps_Controller.UNIQ_ID = 0;
dn_heaps_Controller.LONG_PRESS = 0.35;
dn_heaps_Controller.SHORT_PRESS = 0.17;
dn_heaps_Controller.ALL = [];
hxd_Pad.CONFIG_JS_STD = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 17, analogY : 18, ranalogX : 19, ranalogY : 20, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4 = { A : 0, B : 1, X : 2, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 12, dpadDown : 13, dpadLeft : 14, dpadRight : 15, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 21, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.CONFIG_JS_DS4_FF = { A : 1, B : 2, X : 0, Y : 3, LB : 4, RB : 5, LT : 6, RT : 7, back : 8, start : 9, analogClick : 10, ranalogClick : 11, dpadUp : 9000, dpadDown : 9000, dpadLeft : 9000, dpadRight : 9000, analogX : 18, analogY : 19, ranalogX : 20, ranalogY : 23, names : ["A","B","X","Y","LB","RB","LT","RT","Select","Start","LCLK","RCLK","DUp","DDown","DLeft","DRight","LX","LY","RX","RY"]};
hxd_Pad.DEFAULT_CONFIG = hxd_Pad.CONFIG_JS_STD;
hxd_Pad.initDone = false;
hxd_Pad.pads = new haxe_ds_IntMap();
dn_heaps_GamePad.ALL = [];
dn_heaps_GamePad.MAPPING = [hxd_Pad.DEFAULT_CONFIG.A,hxd_Pad.DEFAULT_CONFIG.B,hxd_Pad.DEFAULT_CONFIG.X,hxd_Pad.DEFAULT_CONFIG.Y,hxd_Pad.DEFAULT_CONFIG.back,hxd_Pad.DEFAULT_CONFIG.start,hxd_Pad.DEFAULT_CONFIG.LT,hxd_Pad.DEFAULT_CONFIG.RT,hxd_Pad.DEFAULT_CONFIG.LB,hxd_Pad.DEFAULT_CONFIG.RB,hxd_Pad.DEFAULT_CONFIG.analogClick,hxd_Pad.DEFAULT_CONFIG.ranalogClick,hxd_Pad.DEFAULT_CONFIG.dpadUp,hxd_Pad.DEFAULT_CONFIG.dpadDown,hxd_Pad.DEFAULT_CONFIG.dpadLeft,hxd_Pad.DEFAULT_CONFIG.dpadRight,hxd_Pad.DEFAULT_CONFIG.analogX,hxd_Pad.DEFAULT_CONFIG.analogX,hxd_Pad.DEFAULT_CONFIG.analogX,hxd_Pad.DEFAULT_CONFIG.analogY,hxd_Pad.DEFAULT_CONFIG.analogY,hxd_Pad.DEFAULT_CONFIG.analogY,hxd_Pad.DEFAULT_CONFIG.ranalogX,hxd_Pad.DEFAULT_CONFIG.ranalogX,hxd_Pad.DEFAULT_CONFIG.ranalogX,hxd_Pad.DEFAULT_CONFIG.ranalogY,hxd_Pad.DEFAULT_CONFIG.ranalogY,hxd_Pad.DEFAULT_CONFIG.ranalogY];
dn_heaps_filter__$OverlayTexture_OverlayBlendShader.SRC = "HXSLMmRuLmhlYXBzLmZpbHRlci5fT3ZlcmxheVRleHR1cmUuT3ZlcmxheUJsZW5kU2hhZGVyDQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgIAAAsHb3ZlcmxheQoCAAAMBWFscGhhAwIAAA0HdXZTY2FsZQUKAgAADghfX2luaXRfXw4GAAAPBnZlcnRleA4GAAAQDGJsZW5kT3ZlcmxheQ4GAAARCGZyYWdtZW50DgYAAAQCDgAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA8AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAxACEgRiYXNlBQsEAAATBWJsZW5kBQsEAAAFCwUBDQkDGA4DBgMBAwAAAAAAAPA/AwYBBgEBAwAAAAAAAABAAwQGAwEDAAAAAAAA8D8DAhIFCwULBQsFCwQGAwEDAAAAAAAA8D8DAhMFCwULBQsFCwULBgEGAQEDAAAAAAAAAEADAhIFCwULAhMFCwULCQMZDgICEgULCQMpDgEBAwAAAAAAAOA/AwULBQsFCwAAAREAAAUDCBQLc291cmNlQ29sb3IFDAQAAAkDIQ4CAgoKAgMFCgUMAAgVDG92ZXJsYXlDb2xvcgUMBAAACQMYDgMJAyoOAQEDAAAAAAAA4D8DBQwJAyEOAgILCgYBAgMFCgINBQoFCgUMAgwDBQwABgQKAggFDJMDBQwJAyoOAgkCEA4CCgIUBQySAAULCgIVBQySAAULBQsKAhQFDAwAAwUMBQwA";
dn_heaps_filter__$PixelOutline_InternalShader.SRC = "HXSLLGRuLmhlYXBzLmZpbHRlci5fUGl4ZWxPdXRsaW5lLkludGVybmFsU2hhZGVyDAEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgIAAAsJdGV4ZWxTaXplBQoCAAAMDG91dGxpbmVDb2xvcgUMAgAADQtrbm9ja091dE11bAECAAEAAAAAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBAgRCGN1ckNvbG9yBQwEAAAJAyEOAgIKCgIDBQoFDAAIEgZvbkVkZ2UDBAAABAYBBAYDAQMAAAAAAADwPwMKAhEFDAwAAwMDCQMWDgIKCQMhDgICCgoJAygOAgYACgIDBQoAAAMKAgsFCgAAAwMKAgMFCgQAAwUKBQwMAAMJAxYOAgoJAyEOAgIKCgkDKA4CBgMKAgMFCgAAAwoCCwUKAAADAwoCAwUKBAADBQoFDAwAAwkDFg4CCgkDIQ4CAgoKCQMoDgIKAgMFCgAAAwYACgIDBQoEAAMKAgsFCgQAAwMFCgUMDAADCgkDIQ4CAgoKCQMoDgIKAgMFCgAAAwYDCgIDBQoEAAMKAgsFCgQAAwMFCgUMDAADAwMDAwMACBMBYQMEAAAJAxYOAgYBAhIDCgIMBQwMAAMDCgIRBQwMAAMDAAYEAgcFDAkDKg4CBgEJAxgOAwoCEQUMkgAFCwoCDAUMkgAFCwISAwULAhMDBQsCEwMFDAUMAA";
dn_heaps_slib_SpriteLib.DISABLE_ANIM_UPDATES = false;
format_mp3_MPEG.Reserved = 1;
format_mp3_MPEG.V1_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_288,format_mp3_Bitrate.BR_320,format_mp3_Bitrate.BR_352,format_mp3_Bitrate.BR_384,format_mp3_Bitrate.BR_416,format_mp3_Bitrate.BR_448,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.V2_Bitrates = [[format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_8,format_mp3_Bitrate.BR_16,format_mp3_Bitrate.BR_24,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_40,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_Bad],[format_mp3_Bitrate.BR_Free,format_mp3_Bitrate.BR_32,format_mp3_Bitrate.BR_48,format_mp3_Bitrate.BR_56,format_mp3_Bitrate.BR_64,format_mp3_Bitrate.BR_80,format_mp3_Bitrate.BR_96,format_mp3_Bitrate.BR_112,format_mp3_Bitrate.BR_128,format_mp3_Bitrate.BR_144,format_mp3_Bitrate.BR_160,format_mp3_Bitrate.BR_176,format_mp3_Bitrate.BR_192,format_mp3_Bitrate.BR_224,format_mp3_Bitrate.BR_256,format_mp3_Bitrate.BR_Bad]];
format_mp3_MPEG.SamplingRates = [[format_mp3_SamplingRate.SR_11025,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_8000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_22050,format_mp3_SamplingRate.SR_24000,format_mp3_SamplingRate.SR_12000,format_mp3_SamplingRate.SR_Bad],[format_mp3_SamplingRate.SR_44100,format_mp3_SamplingRate.SR_48000,format_mp3_SamplingRate.SR_32000,format_mp3_SamplingRate.SR_Bad]];
format_mp3_CLayer.LReserved = 0;
h3d_Buffer.GUID = 0;
h3d_Engine.SOFTWARE_DRIVER = false;
h3d_Engine.ANTIALIASING = 0;
h3d_impl_InputNames.UID = 0;
h3d_impl_InputNames.CACHE = new haxe_ds_StringMap();
h3d_impl_GlDriver.ALLOW_WEBGL2 = true;
h3d_impl_GlDriver.BLACK = new h3d_Vector(0,0,0,0);
h3d_impl_GlDriver.outOfMemoryCheck = false;
h3d_impl_GlDriver.TFILTERS = [[[9728,9728],[9729,9729]],[[9728,9984],[9729,9985]],[[9728,9986],[9729,9987]]];
h3d_impl_GlDriver.TWRAP = [33071,10497];
h3d_impl_GlDriver.FACES = [0,1028,1029,1032];
h3d_impl_GlDriver.BLEND = [1,0,770,768,772,774,771,769,773,775,32769,32771,32770,32772,776];
h3d_impl_GlDriver.COMPARE = [519,512,514,517,516,518,513,515];
h3d_impl_GlDriver.STENCIL_OP = [7680,0,7681,7682,34055,7683,34056,5386];
h3d_impl_GlDriver.OP = [32774,32778,32779,32775,32776];
h3d_impl_GlDriver.CUBE_FACES = [34069,34070,34071,34072,34073,34074];
h3d_impl_GlDriver.CBUFFERS = (function($this) {
	var $r;
	var _g = [];
	{
		var _g1 = 0;
		while(_g1 < 32) {
			var i = _g1++;
			var _g2 = [];
			var _g3 = 0;
			var _g4 = i;
			while(_g3 < _g4) {
				var k = _g3++;
				_g2.push(36064 + k);
			}
			_g.push(_g2);
		}
	}
	$r = _g;
	return $r;
}(this));
h3d_impl_MemoryManager.ALL_FLAGS = h3d_BufferFlag.__empty_constructs__.slice();
h3d_mat_Defaults.defaultKillAlphaThreshold = 0.5;
h3d_mat_Defaults.loadingTextureColor = -65281;
h3d_mat_MaterialSetup.current = new h3d_mat_MaterialSetup("Default");
h3d_mat_Texture.UID = 0;
h3d_mat_Texture.PREVENT_AUTO_DISPOSE = 2147483647;
h3d_mat_Texture.nativeFormat = hxd_PixelFormat.RGBA;
h3d_pass_Blur.__meta__ = { obj : { ignore : ["shader"]}};
h3d_pass__$Border_BorderShader.SRC = "HXSLHWgzZC5wYXNzLl9Cb3JkZXIuQm9yZGVyU2hhZGVyCQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgVjb2xvcgUMAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMAgoFDAUMAA";
h3d_pass_ColorMatrixShader.SRC = "HXSLGmgzZC5wYXNzLkNvbG9yTWF0cml4U2hhZGVyFQEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgd0ZXh0dXJlCgIAAAsGbWF0cml4BwIAAAwIdXNlQWxwaGECAgABAAAAAAANB3VzZU1hc2sCAgABAAAAAAAOCm1hc2tJbnZlcnQCAgABAAAAAAAPD2hhc1NlY29uZE1hdHJpeAICAAEAAAAAABAHbWF0cml4MgcCAAARBG1hc2sKAgAAEghtYXNrTWF0QQULAgAAEwhtYXNrTWF0QgULAgAAFAltYXNrUG93ZXIDAgAAFQttYXNrQ2hhbm5lbAUMAgAAFghfX2luaXRfXw4GAAAXBnZlcnRleA4GAAAYBWFwcGx5DgYAABkIZnJhZ21lbnQOBgAABAIWAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAAFwAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAADGAIaBWNvbG9yBQwEAAAbA21hdAcEAAAFDAUBDQsCDAIGAQIaBQwCGwcFDAYBCQMqDgIKAhoFDJIABQsBAwAAAAAAAPA/AwUMAhsHBQwFDAAAARkAAAUBCwINAgUFCBwFY29sb3IFDAQAAAkDIQ4CAgoKAgMFCgUMAAgdAnV2BQsEAAAJAykOAgIDBQoBAwAAAAAAAPA/AwULAAgeAWsDBAAACQMIDgIJAx0OAgkDIQ4CAhEKCQMoDgIJAx0OAgIdBQsCEgULAwkDHQ4CAh0FCwITBQsDBQoFDAIVBQwDAhQDAwAIHwZjb2xvcjIFDAQAAAsCDwIJAhgOAgIcBQwCEAcFDAIcBQwFDAAGBAIHBQwLAg4CCQMYDgMCHwUMCQIYDgICHAUMAgsHBQwCHgMFDAkDGA4DCQIYDgICHAUMAgsHBQwCHwUMAh4DBQwFDAUMAAYEAgcFDAkCGA4CCQMhDgICCgoCAwUKBQwCCwcFDAUMAAA";
h3d_pass__$Copy_ArrayCopyShader.SRC = "HXSLHmgzZC5wYXNzLl9Db3B5LkFycmF5Q29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQsCAAALBWxheWVyAQIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFAQYEAggFDAkDIQ4CAgoLCQMpDgICCQUKCQMmDgECCwEDBQsFDAUMAA";
h3d_pass__$Copy_CopyShader.SRC = "HXSLGWgzZC5wYXNzLl9Db3B5LkNvcHlTaGFkZXIJAQVpbnB1dA0BAgIIcG9zaXRpb24FCgEBAAMCdXYFCgEBAAEAAAQFZmxpcFkDAgAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAICnBpeGVsQ29sb3IFDAQAAAkMY2FsY3VsYXRlZFVWBQoEAAAKB3RleHR1cmUKAgAACwhfX2luaXRfXw4GAAAMBnZlcnRleA4GAAANCGZyYWdtZW50DgYAAAMCCwAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAAwAAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ0AAAUBBgQCCAUMCQMhDgICCgoCCQUKBQwFDAA";
h3d_pass__$CubeCopy_CubeCopyShader.SRC = "HXSLIWgzZC5wYXNzLl9DdWJlQ29weS5DdWJlQ29weVNoYWRlcgoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoHdGV4dHVyZQwCAAALA21hdAYCAAAMCF9faW5pdF9fDgYAAA0GdmVydGV4DgYAAA4IZnJhZ21lbnQOBgAAAwIMAAAFAgYEAgcFDAIIBQwFDAYEAgkFCgIDBQoFCgAADQAABQEGBAIGBQwJAyoOBAoCAgUKAAADBgEKAgIFCgQAAwIEAwMBAwAAAAAAAAAAAwEDAAAAAAAA8D8DBQwFDAABDgAABQIIDwJ1dgUKBAAABgMGAQIJBQoBAwAAAAAAAABAAwUKAQMAAAAAAADwPwMFCgAGBAIIBQwJAyEOAgIKDAkDHw4BBgEJAykOAgIPBQoBAwAAAAAAAPA/AwULAgsGBQsFCwUMBQwA";
h3d_pass__$HardwarePick_FixedColor.SRC = "HXSLIWgzZC5wYXNzLl9IYXJkd2FyZVBpY2suRml4ZWRDb2xvcgUBB2NvbG9ySUQFDAIAAAIIdmlld3BvcnQFDAIAAAMGb3V0cHV0DQECBAhwb3NpdGlvbgUMBAMABQdjb2xvcklEBQwEAwAEAAAGBnZlcnRleA4GAAAHCGZyYWdtZW50DgYAAAIABgAABQEGBAIEBQwGAQQGAAIEBQwGAQkDKg4DCgICBQwRAAUKAQMAAAAAAAAAAAMBAwAAAAAAAAAAAwUMCgIEBQwMAAMFDAUMBQwJAyoOAwoCAgUMOQAFCgEDAAAAAAAA8D8DAQMAAAAAAADwPwMFDAUMBQwAAQcAAAUBBgQCBQUMAgEFDAUMAA";
h3d_pass_ShaderManager.STRICT = true;
h3d_shader_AmbientLight.SRC = "HXSLF2gzZC5zaGFkZXIuQW1iaWVudExpZ2h0CgEGZ2xvYmFsDQECAgxhbWJpZW50TGlnaHQFCwABAAMQcGVyUGl4ZWxMaWdodGluZwIAAQEAAAAAAAAAAAQKcGl4ZWxDb2xvcgUMBAAABQ9saWdodFBpeGVsQ29sb3IFCwQAAAYKbGlnaHRDb2xvcgULBAAABwhhZGRpdGl2ZQICAAEAAAAAAAgIX19pbml0X18OBgAACRBfX2luaXRfX2ZyYWdtZW50DgYAAAoJY2FsY0xpZ2h0DgYAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAABQIIAAAFAQYEAgYFCwsCBwICAgULCQMpDgEBAwAAAAAAAAAAAwULBQsFCwACCQAABQEGBAIFBQsLAgcCAgIFCwkDKQ4BAQMAAAAAAAAAAAMFCwULBQsAAwoBDQpsaWdodENvbG9yBQsEAAAFCwUBDQsCBwICDQULBAYAAgIFCwYBCQMWDgIEBgMBAwAAAAAAAPA/AwICBQsFCwULAQMAAAAAAAAAAAMFCwINBQsFCwULBQsFCwAAAAsAAAUBCwcCAgMCAgaBCgIEBQySAAULCQIKDgECBgULBQsFCwAAAAEMAAAFAQsCAwIGgQoCBAUMkgAFCwkCCg4BAgUFCwULBQsAAAA";
h3d_shader_Base2d.SRC = "HXSLEWgzZC5zaGFkZXIuQmFzZTJkGwEFaW5wdXQNAQMCCHBvc2l0aW9uBQoBAQADAnV2BQoBAQAEBWNvbG9yBQwBAQABAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgEdGltZQMAAAAJBnpWYWx1ZQMCAAAKB3RleHR1cmUKAgAACw5zcHJpdGVQb3NpdGlvbgUMBAAADBBhYnNvbHV0ZVBvc2l0aW9uBQwEAAANCnBpeGVsQ29sb3IFDAQAAA4MdGV4dHVyZUNvbG9yBQwEAAAPDGNhbGN1bGF0ZWRVVgUKAwAAEAppc1JlbGF0aXZlAgIAAQAAAAAAEQVjb2xvcgUMAgAAEg9hYnNvbHV0ZU1hdHJpeEEFCwIAABMPYWJzb2x1dGVNYXRyaXhCBQsCAAAUDWZpbHRlck1hdHJpeEEFCwIAABUNZmlsdGVyTWF0cml4QgULAgAAFghoYXNVVlBvcwICAAEAAAAAABcFdXZQb3MFDAIAABgJa2lsbEFscGhhAgIAAQAAAAAAGQpwaXhlbEFsaWduAgIAAQAAAAAAGhBoYWxmUGl4ZWxJbnZlcnNlBQoCAAAbCXZpZXdwb3J0QQULAgAAHAl2aWV3cG9ydEIFCwIAAB0Ob3V0cHV0UG9zaXRpb24FDAQAAB4IX19pbml0X18OBgAAHwZ2ZXJ0ZXgOBgAAIAhmcmFnbWVudA4GAAADAh4AAAUGBgQCCwUMCQMqDgMCAgUKAgkDAQMAAAAAAADwPwMFDAUMCwIQAgUDBgQKAgwFDAAAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhIFCwMDBgQKAgwFDAQAAwkDHQ4CCQMpDgIKAgsFDBEABQoBAwAAAAAAAPA/AwULAhMFCwMDBgQKAgwFDDkABQoKAgsFDDkABQoFCgAGBAIMBQwCCwUMBQwABgQCDwUKCwIWAgYABgECAwUKCgIXBQw5AAUKBQoKAhcFDBEABQoFCgIDBQoFCgUKBgQCDQUMCwIQAgYBAhEFDAIEBQwFDAIEBQwFDAUMBgQCDgUMCQMhDgICCgoCDwUKBQwFDAaBAg0FDAIOBQwFDAAAHwAABQUIIQN0bXAFCwQAAAkDKQ4CCgIMBQwRAAUKAQMAAAAAAADwPwMFCwAGBAIhBQsJAykOAwkDHQ4CAiEFCwIUBQsDCQMdDgICIQULAhUFCwMBAwAAAAAAAPA/AwULBQsGBAIdBQwJAyoOAwkDHQ4CAiEFCwIbBQsDCQMdDgICIQULAhwFCwMKAgwFDDkABQoFDAUMCwIZAgaDCgIdBQwRAAUKAhoFCgUKAAAGBAIGBQwCHQUMBQwAASAAAAUCCwYOAhgCBgkKAg0FDAwAAwED/Knx0k1iUD8DAgIMAAAABgQCBwUMAg0FDAUMAA";
h3d_shader_BaseMesh.SRC = "HXSLE2gzZC5zaGFkZXIuQmFzZU1lc2gXAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQVjb2xvcgUMAgAAJg1zcGVjdWxhclBvd2VyAwIAAQcAAAAAAAAAAAAAAAAAAFlAJw5zcGVjdWxhckFtb3VudAMCAAEHAAAAAAAAAAAAAAAAAAAkQCgNc3BlY3VsYXJDb2xvcgULAgAAKQhfX2luaXRfXw4GAAAqEF9faW5pdF9fZnJhZ21lbnQOBgAAKwZ2ZXJ0ZXgOBgAALAhmcmFnbWVudA4GAAAEAikAAAULBgQCGgULAhIFCwULBgQCGwULBgECGgULCQM0DgECDwcIBQsFCwYEAh4FDAYBCQMqDgICGwULAQMAAAAAAADwPwMFDAIHBwUMBQwGBAIdBQsJAx8OAQQGAQITBQsJAzIOAQIPBwYFCwULBQsFCwYEAgsFCwkDHw4BBAYDAgQFCwIbBQsFCwULBQsFCwYEAh8FDAIlBQwFDAYEAiIDAiYDAwYEAiMFCwYBAigFCwInAwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCJAMGAgkDGw4BBgMCGwULAgQFCwULAwIKAwMDAAIqAAAFBQYEAh0FCwkDHw4BAh0FCwULBQsGBAIhBQoJAzoOAQYCCgIeBQwRAAUKCgIeBQwMAAMFCgUKBQoGBAIgAwYCCgIeBQwIAAMKAh4FDAwAAwMDBgQCIgMCJgMDBgQCIwULBgECKAULAicDBQsFCwAAKwAABQIGBAIVBQwGAQIeBQwJAyoOBAEDAAAAAAAA8D8DAgUDAQMAAAAAAADwPwMBAwAAAAAAAPA/AwUMBQwFDAYEAhwFCwIbBQsFCwABLAAABQQGBAIWBQwCHwUMBQwGBAIXAwIgAwMGBAIYBQsCHQULBQsGBAIZAwIkAwMA";
h3d_shader_Blur.SRC = "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";
h3d_shader_ColorAdd.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JBZGQDAQpwaXhlbENvbG9yBQwEAAACBWNvbG9yBQsCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGgAoCAQUMkgAFCwICBQsFCwA";
h3d_shader_ColorKey.SRC = "HXSLE2gzZC5zaGFkZXIuQ29sb3JLZXkDAQhjb2xvcktleQUMAgAAAgx0ZXh0dXJlQ29sb3IFDAQAAAMIZnJhZ21lbnQOBgAAAQEDAAAFAggEBWNkaWZmBQwEAAAGAwICBQwCAQUMBQwACwYJCQMdDgICBAUMAgQFDAMBA/Fo44i1+OQ+AwIMAAAAAA";
h3d_shader_ColorMatrix.SRC = "HXSLFmgzZC5zaGFkZXIuQ29sb3JNYXRyaXgDAQpwaXhlbENvbG9yBQwEAAACBm1hdHJpeAcCAAADCGZyYWdtZW50DgYAAAEBAwAABQEGBAIBBQwJAyoOAgoEBgEJAyoOAgoCAQUMkgAFCwEDAAAAAAAA8D8DBQwCAgcFDAUMkgAFCwoEBgECAQUMAgIHBQwFDAwAAwUMBQwA";
h3d_shader_DirShadow.SRC = "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";
h3d_shader_GenTexture.SRC = "HXSLFWgzZC5zaGFkZXIuR2VuVGV4dHVyZQoBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEbW9kZQECAAEAAAAAAAsFY29sb3IFDAIAAAwIX19pbml0X18OBgAADQZ2ZXJ0ZXgOBgAADghmcmFnbWVudA4GAAADAgwAAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAANAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEOAAAFARMEAgoBAQEBAQIAAAAAAQUBBgQCCAUMCwYHCQMbDgEKAgYFDBEABQoDAQMAAAAAAADwPwMCCQMqDgEBAwAAAAAAAAAAAwUMAgsFDAUMBQwAAAAA";
h3d_shader_LineShader.SRC = "HXSLFWgzZC5zaGFkZXIuTGluZVNoYWRlcgwBBmNhbWVyYQ0BAwIEdmlldwcAAQADBHByb2oHAAEABAh2aWV3UHJvagcAAQAAAAAFBmdsb2JhbA0CAgYJcGl4ZWxTaXplBQoABQAHCW1vZGVsVmlldwcABQEDAAAACAVpbnB1dA0DAwkIcG9zaXRpb24FCwEIAAoGbm9ybWFsBQsBCAALAnV2BQoBCAABAAAMBm91dHB1dA0EAQ0IcG9zaXRpb24FDAQMAAQAAA4RdHJhbnNmb3JtZWROb3JtYWwFCwQAAA8TdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAEBFwcm9qZWN0ZWRQb3NpdGlvbgUMBAAAEQtsZW5ndGhTY2FsZQMCAAASBXdpZHRoAwIAABMEcGRpcgUMBAAAFAhfX2luaXRfXw4GAAAVBnZlcnRleA4GAAACAhQAAAUBBQUIFgNkaXIFCwQAAAYBAgoFCwkDMg4BAgcHBgULAAYEAhMFDAYBCQMqDgIGAQIWBQsJAzIOAQICBwYFCwEDAAAAAAAA8D8DBQwCAwcFDAUMBoEKAhMFDBEABQoGAgEDAAAAAAAA8D8DCQMNDgEGAAYBCgITBQwAAAMKAhMFDAAAAwMGAQoCEwUMBAADCgITBQwEAAMDAwMDBQoGgAIPBQsGAQYBAhYFCwoCCwUKAAADBQsCEQMFCwULBgQCDgULCQMfDgECFgULBQsFCwAAABUAAAUBBoAKAhAFDBEABQoGAQYBBgEGAQQGAQoCEwUMBQAFCgkDKA4CAQMAAAAAAADwPwMBAwAAAAAAAPC/AwUKBQoFCgQGAwoCCwUKBAADAQMAAAAAAADgPwMDAwUKCgIQBQwIAAMFCgIGBQoFCgISAwUKBQoA";
h3d_shader_MinMaxShader.SRC = "HXSLF2gzZC5zaGFkZXIuTWluTWF4U2hhZGVyCwEFaW5wdXQNAQICCHBvc2l0aW9uBQoBAQADAnV2BQoBAQABAAAEBWZsaXBZAwIAAAUGb3V0cHV0DQICBghwb3NpdGlvbgUMBAUABwVjb2xvcgUMBAUABAAACApwaXhlbENvbG9yBQwEAAAJDGNhbGN1bGF0ZWRVVgUKBAAACgR0ZXhBCgIAAAsEdGV4QgoCAAAMBWlzTWF4AgIAAQAAAAAADQhfX2luaXRfXw4GAAAOBnZlcnRleA4GAAAPCGZyYWdtZW50DgYAAAMCDQAABQIGBAIHBQwCCAUMBQwGBAIJBQoCAwUKBQoAAA4AAAUBBgQCBgUMCQMqDgQKAgIFCgAAAwYBCgICBQoEAAMCBAMDAQMAAAAAAAAAAAMBAwAAAAAAAPA/AwUMBQwAAQ8AAAUDCBABYQUMBAAACQMhDgICCgoCCQUKBQwACBEBYgUMBAAACQMhDgICCwoCCQUKBQwABgQCCAUMCwIMAgkDFg4CAhAFDAIRBQwFDAkDFQ4CAhAFDAIRBQwFDAUMBQwA";
h3d_shader_CubeMinMaxShader.SRC = "HXSLG2gzZC5zaGFkZXIuQ3ViZU1pbk1heFNoYWRlcgwBBWlucHV0DQECAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEAAQAABAVmbGlwWQMCAAAFBm91dHB1dA0CAgYIcG9zaXRpb24FDAQFAAcFY29sb3IFDAQFAAQAAAgKcGl4ZWxDb2xvcgUMBAAACQxjYWxjdWxhdGVkVVYFCgQAAAoEdGV4QQwCAAALBHRleEIMAgAADAVpc01heAICAAEAAAAAAA0DbWF0BgIAAA4IX19pbml0X18OBgAADwZ2ZXJ0ZXgOBgAAEAhmcmFnbWVudA4GAAADAg4AAAUCBgQCBwUMAggFDAUMBgQCCQUKAgMFCgUKAAAPAAAFAQYEAgYFDAkDKg4ECgICBQoAAAMGAQoCAgUKBAADAgQDAwEDAAAAAAAAAAADAQMAAAAAAADwPwMFDAUMAAEQAAAFBQgRAnV2BQoEAAAGAwYBAgkFCgEDAAAAAAAAAEADBQoBAwAAAAAAAPA/AwUKAAgSA2RpcgULBAAABgEJAykOAgIRBQoBAwAAAAAAAPA/AwULAg0GBQsACBMBYQUMBAAACQMhDgICCgwCEgULBQwACBQBYgUMBAAACQMhDgICCwwCEgULBQwABgQCCAUMCwIMAgkDFg4CAhMFDAIUBQwFDAkDFQ4CAhMFDAIUBQwFDAUMBQwA";
h3d_shader_NormalMap.SRC = "HXSLFGgzZC5zaGFkZXIuTm9ybWFsTWFwCgEGY2FtZXJhDQECAghwb3NpdGlvbgULAAEAAwNkaXIFCwMBAAAAAAQGZ2xvYmFsDQIBBQltb2RlbFZpZXcHAAQBAwAAAAYFaW5wdXQNAwIHBm5vcm1hbAULAQYACAd0YW5nZW50BQsBBgABAAAJB3RleHR1cmUKAgAACgxjYWxjdWxhdGVkVVYFCgQAAAsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAADBF0cmFuc2Zvcm1lZE5vcm1hbAULBAAADRJ0cmFuc2Zvcm1lZFRhbmdlbnQFDAMAAA4OX19pbml0X192ZXJ0ZXgOBgAADwhmcmFnbWVudA4GAAACAg4AAAUBBgQCDQUMCQMqDgIGAQIIBQsJAzIOAQIFBwYFCwsGBwkDHQ4CAggFCwIIBQsDAQMAAAAAAADgPwMCAQMAAAAAAADwPwMBAwAAAAAAAPC/AwMFDAUMAAEPAAAFBQgQAW4FCwQAAAIMBQsACBECbmYFCwQAAAkDOQ4BCQMhDgICCQoCCgUKBQwFCwAIEgR0YW5YBQsEAAAJAx8OAQoCDQUMkgAFCwULAAgTBHRhblkFCwQAAAYBCQMeDgICEAULAhIFCwULBwMKAg0FDAwAAwMFCwAGBAIMBQsJAx8OAQQGAAYABgEKAhEFCwAAAwISBQsFCwYBCgIRBQsEAAMCEwULBQsFCwYBCgIRBQsIAAMCEAULBQsFCwULBQsFCwA";
h3d_shader_Shadow.SRC = "HXSLEWgzZC5zaGFkZXIuU2hhZG93BgEGc2hhZG93DQEFAgNtYXARAQABAAMEcHJvaggAAQAEBWNvbG9yBQsAAQAFBXBvd2VyAwABAAYEYmlhcwMAAQAAAAAHCnBpeGVsQ29sb3IFDAQAAAgTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAACRhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAoJc2hhZG93UG9zBQsDAAEBCwhmcmFnbWVudA4GAAABAQsAAAUGCAwJc2hhZG93UG9zBQsEAAAGAQIJBQsCAwgFCwAIDQVkZXB0aAMEAAAJAz8OAgICEQEJAzoOAQoCDAULEQAFCgUKAwAIDgR6TWF4AwQAAAkDNQ4BCgIMBQsIAAMDAAgPBWRlbHRhAwQAAAYDCQMVDgIEBgACDQMCBgMDAwIOAwMCDgMDAAgQBXNoYWRlAwQAAAkDNQ4BCQMJDgEGAQIFAwIPAwMDAwAGgQoCBwUMkgAFCwYABgEEBgMBAwAAAAAAAPA/AwIQAwMDCgIEBQuSAAULBQsCEAMFCwULAA";
h3d_shader_SignedDistanceField.SRC = "HXSLHmgzZC5zaGFkZXIuU2lnbmVkRGlzdGFuY2VGaWVsZA4BBWlucHV0DQEDAghwb3NpdGlvbgUKAQEAAwJ1dgUKAQEABAVjb2xvcgUMAQEAAQAABQZvdXRwdXQNAgIGCHBvc2l0aW9uBQwEBQAHBWNvbG9yBQwEBQAEAAAIBHRpbWUDAAAACQ5zcHJpdGVQb3NpdGlvbgUMBAAAChBhYnNvbHV0ZVBvc2l0aW9uBQwEAAALCnBpeGVsQ29sb3IFDAQAAAwMdGV4dHVyZUNvbG9yBQwEAAANDGNhbGN1bGF0ZWRVVgUKAwAADg5vdXRwdXRQb3NpdGlvbgUMBAAADwdjaGFubmVsAQIAAQAAAAAAEAthbHBoYUN1dG9mZgMCAAARCXNtb290aGluZwMCAAASBm1lZGlhbg4GAAATCGZyYWdtZW50DgYAAAIDEgMUAXIDBAAAFQFnAwQAABYBYgMEAAADBQENCQMWDgIJAxUOAgIUAwIVAwMJAxUOAgkDFg4CAhQDAhUDAwIWAwMDAAABEwAABQQIFw10ZXh0dXJlU2FtcGxlBQwEAAACDAUMAAgYCGRpc3RhbmNlAwQAAAAABgQCGAMLBgUCDwEBAgAAAAABAgoCFwUMAAADCwYFAg8BAQIBAAAAAQIKAhcFDAQAAwsGBQIPAQECAgAAAAECCgIXBQwIAAMLBgUCDwEBAgMAAAABAgoCFwUMDAADCQISDgMKAhcFDAAAAwoCFwUMBAADCgIXBQwIAAMDAwMDAwMGBAIMBQwJAyoOBAEDAAAAAAAA8D8DAQMAAAAAAADwPwMBAwAAAAAAAPA/AwkDGg4DBgMCEAMCEQMDBgACEAMCEQMDAhgDAwUMBQwA";
h3d_shader_SkinBase.SRC = "HXSLE2gzZC5zaGFkZXIuU2tpbkJhc2UFARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIAA";
h3d_shader_Skin.SRC = "HXSLD2gzZC5zaGFkZXIuU2tpbggBEHJlbGF0aXZlUG9zaXRpb24FCwQAAAITdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAAxF0cmFuc2Zvcm1lZE5vcm1hbAULBAAABAhNYXhCb25lcwECAAEAAAAAAAUNYm9uZXNNYXRyaXhlcw8IBAIAAQgGBWlucHV0DQEEBwhwb3NpdGlvbgULAQYACAZub3JtYWwFCwEGAAkHd2VpZ2h0cwULAQYACgdpbmRleGVzCQQAAAABBgABAAALEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADAZ2ZXJ0ZXgOBgAAAQAMAAAFAgYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAAAAQgFCwULCgIJBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCgkEAAAABAABCAULBQsKAgkFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgoJBAAAAAgAAQgFCwULCgIJBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAAAAABCAYFCwULCgIJBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgIKCQQAAAAEAAEIBgULBQsKAgkFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCgkEAAAACAABCAYFCwULCgIJBQsIAAMFCwULBQsFCwA";
h3d_shader_SkinTangent.SRC = "HXSLFmgzZC5zaGFkZXIuU2tpblRhbmdlbnQIARByZWxhdGl2ZVBvc2l0aW9uBQsEAAACE3RyYW5zZm9ybWVkUG9zaXRpb24FCwQAAAMRdHJhbnNmb3JtZWROb3JtYWwFCwQAAAQITWF4Qm9uZXMBAgABAAAAAAAFDWJvbmVzTWF0cml4ZXMPCAQCAAEIBgVpbnB1dA0BBQcIcG9zaXRpb24FCwEGAAgGbm9ybWFsBQsBBgAJB3RhbmdlbnQFCwEGAAoHd2VpZ2h0cwULAQYACwdpbmRleGVzCQQAAAABBgABAAAMEnRyYW5zZm9ybWVkVGFuZ2VudAUMBAAADQZ2ZXJ0ZXgOBgAAAQANAAAFAwYEAgIFCwYABgAGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAAAAQgFCwULCgIKBQsAAAMFCwYBBAYBAgEFCxECBQ8IBAoCCwkEAAAABAABCAULBQsKAgoFCwQAAwULBQsGAQQGAQIBBQsRAgUPCAQKAgsJBAAAAAgAAQgFCwULCgIKBQsIAAMFCwULBQsGBAIDBQsJAx8OAQYABgAGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBAggFCwkDMg4BEQIFDwgECgILCQQAAAAEAAEIBgULBQsKAgoFCwQAAwULBQsGAQQGAQIIBQsJAzIOARECBQ8IBAoCCwkEAAAACAABCAYFCwULCgIKBQsIAAMFCwULBQsFCwYEAgwFDAkDKg4CCQMfDgEGAAYABgEEBgEKAgkFC5IABQsJAzIOARECBQ8IBAoCCwkEAAAAAAABCAYFCwULCgIKBQsAAAMFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAQAAQgGBQsFCwoCCgULBAADBQsFCwYBBAYBCgIJBQuSAAULCQMyDgERAgUPCAQKAgsJBAAAAAgAAQgGBQsFCwoCCgULCAADBQsFCwULCgIMBQwMAAMFDAUMAA";
h3d_shader_SpecularTexture.SRC = "HXSLGmgzZC5zaGFkZXIuU3BlY3VsYXJUZXh0dXJlBAEHdGV4dHVyZQoCAAACDGNhbGN1bGF0ZWRVVgUKBAAAAwlzcGVjQ29sb3IFCwQAAAQIZnJhZ21lbnQOBgAAAQEEAAAFAQaBAgMFCwoJAyEOAgIBCgICBQoFDJIABQsFCwA";
h3d_shader_Texture.SRC = "HXSLEmgzZC5zaGFkZXIuVGV4dHVyZQsBBWlucHV0DQEBAgJ1dgUKAQEAAQAAAwhhZGRpdGl2ZQICAAEAAAAAAAQJa2lsbEFscGhhAgIAAQAAAAAABQ1zcGVjdWxhckFscGhhAgIAAQAAAAAABhJraWxsQWxwaGFUaHJlc2hvbGQDAgABBwAAAAAAAAAAAAAAAAAA8D8HB3RleHR1cmUKAgAACAxjYWxjdWxhdGVkVVYFCgQAAAkKcGl4ZWxDb2xvcgUMBAAACglzcGVjQ29sb3IFCwQAAAsGdmVydGV4DgYAAAwIZnJhZ21lbnQOBgAAAgALAAAFAQYEAggFCgICBQoFCgABDAAABQQIDQFjBQwEAAAJAyEOAgIHCgIIBQoFDAALBg4CBAIGCQYDCgINBQwMAAMCBgMDAQMAAAAAAAAAAAMCAgwAAAALAgMCBoACCQUMAg0FDAUMBoECCQUMAg0FDAUMAAsCBQIGgQIKBQsKAg0FDP4ABQsFCwAAAA";
h3d_shader_UVDelta.SRC = "HXSLEmgzZC5zaGFkZXIuVVZEZWx0YQQBB3V2RGVsdGEFCgIAAAIHdXZTY2FsZQUKAgAAAwxjYWxjdWxhdGVkVVYFCgQAAAQGdmVydGV4DgYAAAEABAAABQEGBAIDBQoGAAYBAgMFCgICBQoFCgIBBQoFCgUKAA";
h3d_shader_VertexColorAlpha.SRC = "HXSLG2gzZC5zaGFkZXIuVmVydGV4Q29sb3JBbHBoYQQBBWlucHV0DQEBAgVjb2xvcgUMAQEAAQAAAwpwaXhlbENvbG9yBQwEAAAECGFkZGl0aXZlAgIAAQAAAAAABQhmcmFnbWVudA4GAAABAQUAAAUBCwIEAgaAAgMFDAICBQwFDAaBAgMFDAICBQwFDAAA";
h3d_shader_VolumeDecal.SRC = "HXSLFmgzZC5zaGFkZXIuVm9sdW1lRGVjYWwYAQZjYW1lcmENAQoCBHZpZXcHAAEAAwRwcm9qBwABAAQIcG9zaXRpb24FCwABAAUIcHJvakZsaXADAAEABghwcm9qRGlhZwULAAEABwh2aWV3UHJvagcAAQAID2ludmVyc2VWaWV3UHJvagcAAQAJBXpOZWFyAwABAAoEekZhcgMAAQALA2RpcgULAwEAAAAADAZnbG9iYWwNAgQNBHRpbWUDAAwADglwaXhlbFNpemUFCgAMAA8JbW9kZWxWaWV3BwAMAQMQEG1vZGVsVmlld0ludmVyc2UHAAwBAwAAABEFaW5wdXQNAwISCHBvc2l0aW9uBQsBEQATBm5vcm1hbAULAREAAQAAFAZvdXRwdXQNBAUVCHBvc2l0aW9uBQwEFAAWBWNvbG9yBQwEFAAXBWRlcHRoAwQUABgGbm9ybWFsBQsEFAAZCXdvcmxkRGlzdAMEFAAEAAAaEHJlbGF0aXZlUG9zaXRpb24FCwQAABsTdHJhbnNmb3JtZWRQb3NpdGlvbgULBAAAHBhwaXhlbFRyYW5zZm9ybWVkUG9zaXRpb24FCwQAAB0RdHJhbnNmb3JtZWROb3JtYWwFCwQAAB4RcHJvamVjdGVkUG9zaXRpb24FDAQAAB8KcGl4ZWxDb2xvcgUMBAAAIAVkZXB0aAMEAAAhCHNjcmVlblVWBQoEAAAiCXNwZWNQb3dlcgMEAAAjCXNwZWNDb2xvcgULBAAAJAl3b3JsZERpc3QDBAAAJQhkZXB0aE1hcBEBAAAAJgVzY2FsZQUKAgAAJwZub3JtYWwFCwIAACgHdGFuZ2VudAULAgAAKQppc0NlbnRlcmVkAgIAAQAAAAAAKgxjYWxjdWxhdGVkVVYFCgQAACsSdHJhbnNmb3JtZWRUYW5nZW50BQwEAAAsDl9faW5pdF9fdmVydGV4DgYAAC0IZnJhZ21lbnQOBgAAAgIsAAAFAgYEAh0FCwkDHw4BBAYBAicFCwkDMg4BAg8HBgULBQsFCwULBgQCKwUMCQMqDgIJAx8OAQQGAQIoBQsJAzIOAQIPBwYFCwULBQsBAwAAAAAAAPA/AwUMBQwAAS0AAAUJCC4GbWF0cml4BwQAAAYBAggHAhAHBwAILwlzY3JlZW5Qb3MFCgQAAAYCCgIeBQwRAAUKCgIeBQwMAAMFCgAIMANydXYFDAQAAAkDKg4DAi8FCgkDPw4CAiURAQkDOg4BAi8FCgUKAwEDAAAAAAAA8D8DBQwACDEEd3BvcwUMBAAABgECMAUMAi4HBQwACDIEcHBvcwUMBAAABgECMAUMAggHBQwABgQCHAULBgIKAjIFDJIABQsKAjIFDAwAAwULBQsGBAIqBQoGAQImBQoEBgIKAjEFDBEABQoKAjEFDAwAAwUKBQoFCgUKCwIpAgaAAioFCgEDAAAAAAAA4D8DBQoAAAsGCQkDFQ4CCQMVDgIKAioFCgAAAwoCKgUKBAADAwkDFQ4CBgMBAwAAAAAAAPA/AwoCKgUKAAADAwYDAQMAAAAAAADwPwMKAioFCgQAAwMDAwEDAAAAAAAAAAADAgwAAAAA";
haxe_EntryPoint.pending = [];
haxe_EntryPoint.threadCount = 0;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_io_FPHelper.helper = new DataView(new ArrayBuffer(8));
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
haxe_zip_InflateImpl.LEN_EXTRA_BITS_TBL = [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,-1,-1];
haxe_zip_InflateImpl.LEN_BASE_VAL_TBL = [3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258];
haxe_zip_InflateImpl.DIST_EXTRA_BITS_TBL = [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,-1,-1];
haxe_zip_InflateImpl.DIST_BASE_VAL_TBL = [1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577];
haxe_zip_InflateImpl.CODE_LENGTHS_POS = [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];
hxd_Charset.complementChars = (function($this) {
	var $r;
	var str = "ヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻";
	var _g = new haxe_ds_IntMap();
	{
		var _g1 = 0;
		var _g2 = str.length;
		while(_g1 < _g2) {
			var i = _g1++;
			_g.h[HxOverrides.cca(str,i)] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxd_Key.initDone = false;
hxd_Key.keyPressed = [];
hxd_Key.ALLOW_KEY_REPEAT = false;
hxd_Timer.wantedFPS = 60.;
hxd_Timer.maxDeltaTime = 0.5;
hxd_Timer.smoothFactor = 0.95;
hxd_Timer.lastTimeStamp = HxOverrides.now() / 1000;
hxd_Timer.elapsedTime = 0.;
hxd_Timer.frameCount = 0;
hxd_Timer.dt = 1 / hxd_Timer.wantedFPS;
hxd_Timer.currentDT = 1 / hxd_Timer.wantedFPS;
hxd_System.setCursor = hxd_System.setNativeCursor;
hxd_System.loopInit = false;
hxd_fs_EmbedFileSystem.invalidChars = new EReg("[^A-Za-z0-9_]","g");
hxd_res_Resource.LIVE_UPDATE = false;
hxd_res_Image.DEFAULT_FILTER = h3d_mat_Filter.Linear;
hxd_res_Image.DEFAULT_ASYNC = false;
hxd_res_Image.ENABLE_AUTO_WATCH = true;
hxd_res_Sound.ENABLE_AUTO_WATCH = true;
hxd_snd_Channel.ID = 0;
hxd_snd_Source.ID = 0;
hxd_snd_Manager.STREAM_DURATION = 5.;
hxd_snd_Manager.STREAM_BUFFER_SAMPLE_COUNT = 44100;
hxd_snd_Manager.BUFFER_QUEUE_LENGTH = 2;
hxd_snd_Manager.MAX_SOURCES = 16;
hxd_snd_Manager.SOUND_BUFFER_CACHE_SIZE = 256;
hxd_snd_Manager.VIRTUAL_VOLUME_THRESHOLD = 1e-5;
hxd_snd_Manager.BUFFER_STREAM_SPLIT = 16;
hxsl_Tools.UID = 0;
hxsl_Tools.SWIZ = hxsl_Component.__empty_constructs__.slice();
hxsl_Tools.MAX_CHANNELS_BITS = 3;
hxsl_BatchShader.SRC = "HXSLEGh4c2wuQmF0Y2hTaGFkZXICAQtCYXRjaF9Db3VudAECAAEAAAABAAIMQmF0Y2hfQnVmZmVyEAUMAQIAAAA";
hxsl_GlslOut.KWD_LIST = ["input","output","discard","dvec2","dvec3","dvec4","hvec2","hvec3","hvec4","fvec2","fvec3","fvec4","int","float","bool","long","short","double","half","fixed","unsigned","superp","lowp","mediump","highp","precision","invariant","discard","struct","asm","union","template","this","packed","goto","sizeof","namespace","noline","volatile","external","flat","input","output","out","attribute","const","uniform","varying","inout","void"];
hxsl_GlslOut.KWDS = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g1 = 0;
		var _g2 = hxsl_GlslOut.KWD_LIST;
		while(_g1 < _g2.length) {
			var k = _g2[_g1];
			++_g1;
			_g.h[k] = true;
		}
	}
	$r = _g;
	return $r;
}(this));
hxsl_GlslOut.GLOBALS = (function($this) {
	var $r;
	var m = new haxe_ds_EnumValueMap();
	{
		var _g = 0;
		var _g1 = hxsl_TGlobal.__empty_constructs__.slice();
		while(_g < _g1.length) {
			var g = _g1[_g];
			++_g;
			var n = "" + Std.string(g);
			n = n.charAt(0).toLowerCase() + HxOverrides.substr(n,1,null);
			m.set(g,n);
		}
	}
	m.set(hxsl_TGlobal.ToInt,"int");
	m.set(hxsl_TGlobal.ToFloat,"float");
	m.set(hxsl_TGlobal.ToBool,"bool");
	m.set(hxsl_TGlobal.LReflect,"reflect");
	m.set(hxsl_TGlobal.Mat3x4,"_mat3x4");
	m.set(hxsl_TGlobal.VertexID,"gl_VertexID");
	m.set(hxsl_TGlobal.InstanceID,"gl_InstanceID");
	m.set(hxsl_TGlobal.IVec2,"ivec2");
	m.set(hxsl_TGlobal.IVec3,"ivec3");
	m.set(hxsl_TGlobal.IVec4,"ivec4");
	m.set(hxsl_TGlobal.BVec2,"bvec2");
	m.set(hxsl_TGlobal.BVec3,"bvec3");
	m.set(hxsl_TGlobal.BVec4,"bvec4");
	m.set(hxsl_TGlobal.FragCoord,"gl_FragCoord");
	m.set(hxsl_TGlobal.FrontFacing,"gl_FrontFacing");
	{
		var g = m.iterator();
		while(g.hasNext()) {
			var g1 = g.next();
			hxsl_GlslOut.KWDS.h[g1] = true;
		}
	}
	$r = m;
	return $r;
}(this));
hxsl_GlslOut.MAT34 = "struct _mat3x4 { vec4 a; vec4 b; vec4 c; };";
hxsl__$Linker_ShaderInfos.UID = 0;
hxsl_Printer.SWIZ = ["x","y","z","w"];
hxsl_RuntimeShader.UID = 0;
hxsl_Serializer.TVECS = new haxe_ds_IntMap();
hxsl_Serializer.BOPS = (function($this) {
	var $r;
	var ops = haxe_macro_Binop.__empty_constructs__.slice();
	ops.splice(haxe_macro_Binop.OpAssignOp(null)._hx_index,0,null);
	$r = ops;
	return $r;
}(this));
hxsl_Serializer.UNOPS = haxe_macro_Unop.__empty_constructs__.slice();
hxsl_Serializer.TGLOBALS = hxsl_TGlobal.__empty_constructs__.slice();
hxsl_Serializer.TSWIZ = new haxe_ds_IntMap();
hxsl_Serializer.REGS = [hxsl_Component.X,hxsl_Component.Y,hxsl_Component.Z,hxsl_Component.W];
hxsl_Serializer.VKINDS = hxsl_VarKind.__empty_constructs__.slice();
hxsl_Serializer.PRECS = hxsl_Prec.__empty_constructs__.slice();
hxsl_Serializer.FKIND = hxsl_FunctionKind.__empty_constructs__.slice();
hxsl_Serializer.SIGN = 9139229;
hxsl_SharedShader.UNROLL_LOOPS = false;
{
	Boot.main();
	haxe_EntryPoint.run();
}
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
